{"ast":null,"code":"// Use cases encapsulate all application business logic\n// They are independent of the UI and infrastructure\n\nexport class ProjectUseCases {\n  constructor(projectRepository) {\n    this.projectRepository = void 0;\n    this.projectRepository = projectRepository;\n  }\n  async getAllProjects() {\n    return this.projectRepository.getAll();\n  }\n  async getProjectById(id) {\n    return this.projectRepository.getById(id);\n  }\n  async createProject(project) {\n    // Here we could add validation, business rules, etc.\n    return this.projectRepository.create(project);\n  }\n  async updateProject(id, project) {\n    return this.projectRepository.update(id, project);\n  }\n  async deleteProject(id) {\n    return this.projectRepository.delete(id);\n  }\n  async searchProjects(query) {\n    const projects = await this.projectRepository.getAll();\n    return projects.filter(project => project.title.toLowerCase().includes(query.toLowerCase()) || project.description.toLowerCase().includes(query.toLowerCase()) || project.technologies.some(tech => tech.toLowerCase().includes(query.toLowerCase())));\n  }\n  async getProjectsByTechnology(technology) {\n    const projects = await this.projectRepository.getAll();\n    return projects.filter(project => project.technologies.some(tech => tech.toLowerCase() === technology.toLowerCase()));\n  }\n}","map":{"version":3,"names":["ProjectUseCases","constructor","projectRepository","getAllProjects","getAll","getProjectById","id","getById","createProject","project","create","updateProject","update","deleteProject","delete","searchProjects","query","projects","filter","title","toLowerCase","includes","description","technologies","some","tech","getProjectsByTechnology","technology"],"sources":["C:/MyPortfolioWeb/portfolio/src/application/useCases/projectUseCases.ts"],"sourcesContent":["import { Project } from '../../core/entities';\r\nimport { ProjectRepository } from '../../core/repositories';\r\n\r\n// Use cases encapsulate all application business logic\r\n// They are independent of the UI and infrastructure\r\n\r\nexport class ProjectUseCases {\r\n  private projectRepository: ProjectRepository;\r\n\r\n  constructor(projectRepository: ProjectRepository) {\r\n    this.projectRepository = projectRepository;\r\n  }\r\n\r\n  async getAllProjects(): Promise<Project[]> {\r\n    return this.projectRepository.getAll();\r\n  }\r\n\r\n  async getProjectById(id: string): Promise<Project | null> {\r\n    return this.projectRepository.getById(id);\r\n  }\r\n\r\n  async createProject(project: Omit<Project, 'id'>): Promise<Project> {\r\n    // Here we could add validation, business rules, etc.\r\n    return this.projectRepository.create(project);\r\n  }\r\n\r\n  async updateProject(id: string, project: Partial<Project>): Promise<Project | null> {\r\n    return this.projectRepository.update(id, project);\r\n  }\r\n\r\n  async deleteProject(id: string): Promise<boolean> {\r\n    return this.projectRepository.delete(id);\r\n  }\r\n\r\n  async searchProjects(query: string): Promise<Project[]> {\r\n    const projects = await this.projectRepository.getAll();\r\n    \r\n    return projects.filter(project => \r\n      project.title.toLowerCase().includes(query.toLowerCase()) ||\r\n      project.description.toLowerCase().includes(query.toLowerCase()) ||\r\n      project.technologies.some(tech => \r\n        tech.toLowerCase().includes(query.toLowerCase())\r\n      )\r\n    );\r\n  }\r\n\r\n  async getProjectsByTechnology(technology: string): Promise<Project[]> {\r\n    const projects = await this.projectRepository.getAll();\r\n    \r\n    return projects.filter(project =>\r\n      project.technologies.some(tech => \r\n        tech.toLowerCase() === technology.toLowerCase()\r\n      )\r\n    );\r\n  }\r\n}"],"mappings":"AAGA;AACA;;AAEA,OAAO,MAAMA,eAAe,CAAC;EAG3BC,WAAWA,CAACC,iBAAoC,EAAE;IAAA,KAF1CA,iBAAiB;IAGvB,IAAI,CAACA,iBAAiB,GAAGA,iBAAiB;EAC5C;EAEA,MAAMC,cAAcA,CAAA,EAAuB;IACzC,OAAO,IAAI,CAACD,iBAAiB,CAACE,MAAM,CAAC,CAAC;EACxC;EAEA,MAAMC,cAAcA,CAACC,EAAU,EAA2B;IACxD,OAAO,IAAI,CAACJ,iBAAiB,CAACK,OAAO,CAACD,EAAE,CAAC;EAC3C;EAEA,MAAME,aAAaA,CAACC,OAA4B,EAAoB;IAClE;IACA,OAAO,IAAI,CAACP,iBAAiB,CAACQ,MAAM,CAACD,OAAO,CAAC;EAC/C;EAEA,MAAME,aAAaA,CAACL,EAAU,EAAEG,OAAyB,EAA2B;IAClF,OAAO,IAAI,CAACP,iBAAiB,CAACU,MAAM,CAACN,EAAE,EAAEG,OAAO,CAAC;EACnD;EAEA,MAAMI,aAAaA,CAACP,EAAU,EAAoB;IAChD,OAAO,IAAI,CAACJ,iBAAiB,CAACY,MAAM,CAACR,EAAE,CAAC;EAC1C;EAEA,MAAMS,cAAcA,CAACC,KAAa,EAAsB;IACtD,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACf,iBAAiB,CAACE,MAAM,CAAC,CAAC;IAEtD,OAAOa,QAAQ,CAACC,MAAM,CAACT,OAAO,IAC5BA,OAAO,CAACU,KAAK,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACL,KAAK,CAACI,WAAW,CAAC,CAAC,CAAC,IACzDX,OAAO,CAACa,WAAW,CAACF,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACL,KAAK,CAACI,WAAW,CAAC,CAAC,CAAC,IAC/DX,OAAO,CAACc,YAAY,CAACC,IAAI,CAACC,IAAI,IAC5BA,IAAI,CAACL,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACL,KAAK,CAACI,WAAW,CAAC,CAAC,CACjD,CACF,CAAC;EACH;EAEA,MAAMM,uBAAuBA,CAACC,UAAkB,EAAsB;IACpE,MAAMV,QAAQ,GAAG,MAAM,IAAI,CAACf,iBAAiB,CAACE,MAAM,CAAC,CAAC;IAEtD,OAAOa,QAAQ,CAACC,MAAM,CAACT,OAAO,IAC5BA,OAAO,CAACc,YAAY,CAACC,IAAI,CAACC,IAAI,IAC5BA,IAAI,CAACL,WAAW,CAAC,CAAC,KAAKO,UAAU,CAACP,WAAW,CAAC,CAChD,CACF,CAAC;EACH;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}