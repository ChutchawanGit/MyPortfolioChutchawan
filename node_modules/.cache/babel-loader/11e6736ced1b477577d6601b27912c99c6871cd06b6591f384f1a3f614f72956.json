{"ast":null,"code":"export class ContactUseCases{constructor(contactRepository){this.contactRepository=void 0;this.contactRepository=contactRepository;}async sendMessage(name,email,message){// Validate inputs\nif(!name.trim()){throw new Error('Name is required');}if(!email.trim()){throw new Error('Email is required');}if(!this.isValidEmail(email)){throw new Error('Invalid email format');}if(!message.trim()){throw new Error('Message is required');}// Send message\nreturn this.contactRepository.send({name,email,message});}async getAllMessages(){return this.contactRepository.getAll();}async markMessageAsRead(id){return this.contactRepository.markAsRead(id);}async deleteMessage(id){return this.contactRepository.delete(id);}// Helper methods\nisValidEmail(email){const emailRegex=/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;return emailRegex.test(email);}}","map":{"version":3,"names":["ContactUseCases","constructor","contactRepository","sendMessage","name","email","message","trim","Error","isValidEmail","send","getAllMessages","getAll","markMessageAsRead","id","markAsRead","deleteMessage","delete","emailRegex","test"],"sources":["C:/MyPortfolioWeb/portfolio/src/application/useCases/contactUseCases.ts"],"sourcesContent":["import { ContactMessage } from '../../core/entities';\r\nimport { ContactRepository } from '../../core/repositories';\r\n\r\nexport class ContactUseCases {\r\n  private contactRepository: ContactRepository;\r\n\r\n  constructor(contactRepository: ContactRepository) {\r\n    this.contactRepository = contactRepository;\r\n  }\r\n\r\n  async sendMessage(name: string, email: string, message: string): Promise<ContactMessage> {\r\n    // Validate inputs\r\n    if (!name.trim()) {\r\n      throw new Error('Name is required');\r\n    }\r\n    \r\n    if (!email.trim()) {\r\n      throw new Error('Email is required');\r\n    }\r\n    \r\n    if (!this.isValidEmail(email)) {\r\n      throw new Error('Invalid email format');\r\n    }\r\n    \r\n    if (!message.trim()) {\r\n      throw new Error('Message is required');\r\n    }\r\n\r\n    // Send message\r\n    return this.contactRepository.send({ name, email, message });\r\n  }\r\n\r\n  async getAllMessages(): Promise<ContactMessage[]> {\r\n    return this.contactRepository.getAll();\r\n  }\r\n\r\n  async markMessageAsRead(id: string): Promise<boolean> {\r\n    return this.contactRepository.markAsRead(id);\r\n  }\r\n\r\n  async deleteMessage(id: string): Promise<boolean> {\r\n    return this.contactRepository.delete(id);\r\n  }\r\n\r\n  // Helper methods\r\n  private isValidEmail(email: string): boolean {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n  }\r\n}"],"mappings":"AAGA,MAAO,MAAM,CAAAA,eAAgB,CAG3BC,WAAWA,CAACC,iBAAoC,CAAE,MAF1CA,iBAAiB,QAGvB,IAAI,CAACA,iBAAiB,CAAGA,iBAAiB,CAC5C,CAEA,KAAM,CAAAC,WAAWA,CAACC,IAAY,CAAEC,KAAa,CAAEC,OAAe,CAA2B,CACvF;AACA,GAAI,CAACF,IAAI,CAACG,IAAI,CAAC,CAAC,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,kBAAkB,CAAC,CACrC,CAEA,GAAI,CAACH,KAAK,CAACE,IAAI,CAAC,CAAC,CAAE,CACjB,KAAM,IAAI,CAAAC,KAAK,CAAC,mBAAmB,CAAC,CACtC,CAEA,GAAI,CAAC,IAAI,CAACC,YAAY,CAACJ,KAAK,CAAC,CAAE,CAC7B,KAAM,IAAI,CAAAG,KAAK,CAAC,sBAAsB,CAAC,CACzC,CAEA,GAAI,CAACF,OAAO,CAACC,IAAI,CAAC,CAAC,CAAE,CACnB,KAAM,IAAI,CAAAC,KAAK,CAAC,qBAAqB,CAAC,CACxC,CAEA;AACA,MAAO,KAAI,CAACN,iBAAiB,CAACQ,IAAI,CAAC,CAAEN,IAAI,CAAEC,KAAK,CAAEC,OAAQ,CAAC,CAAC,CAC9D,CAEA,KAAM,CAAAK,cAAcA,CAAA,CAA8B,CAChD,MAAO,KAAI,CAACT,iBAAiB,CAACU,MAAM,CAAC,CAAC,CACxC,CAEA,KAAM,CAAAC,iBAAiBA,CAACC,EAAU,CAAoB,CACpD,MAAO,KAAI,CAACZ,iBAAiB,CAACa,UAAU,CAACD,EAAE,CAAC,CAC9C,CAEA,KAAM,CAAAE,aAAaA,CAACF,EAAU,CAAoB,CAChD,MAAO,KAAI,CAACZ,iBAAiB,CAACe,MAAM,CAACH,EAAE,CAAC,CAC1C,CAEA;AACQL,YAAYA,CAACJ,KAAa,CAAW,CAC3C,KAAM,CAAAa,UAAU,CAAG,4BAA4B,CAC/C,MAAO,CAAAA,UAAU,CAACC,IAAI,CAACd,KAAK,CAAC,CAC/B,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}