{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{ProjectUseCases}from'../../application/useCases/projectUseCases';import{projectRepository}from'../../infrastructure/supabase/repositories/projectRepository';// Create use cases with the repository implementation\nimport{jsx as _jsx}from\"react/jsx-runtime\";const projectUseCases=new ProjectUseCases(projectRepository);const ProjectContext=/*#__PURE__*/createContext(undefined);export const useProjects=()=>{const context=useContext(ProjectContext);if(!context){throw new Error('useProjects must be used within a ProjectProvider');}return context;};export const ProjectProvider=_ref=>{let{children}=_ref;const[projects,setProjects]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const fetchProjects=async()=>{setLoading(true);try{const projectsData=await projectUseCases.getAllProjects();setProjects(projectsData);setError(null);}catch(err){setError('Failed to fetch projects');console.error(err);}finally{setLoading(false);}};const getProjectById=async id=>{try{return await projectUseCases.getProjectById(id);}catch(err){setError('Failed to fetch project');console.error(err);return null;}};const searchProjects=async query=>{setLoading(true);try{const filteredProjects=await projectUseCases.searchProjects(query);setProjects(filteredProjects);setError(null);}catch(err){setError('Failed to search projects');console.error(err);}finally{setLoading(false);}};const filterByTechnology=async technology=>{setLoading(true);try{const filteredProjects=await projectUseCases.getProjectsByTechnology(technology);setProjects(filteredProjects);setError(null);}catch(err){setError('Failed to filter projects');console.error(err);}finally{setLoading(false);}};useEffect(()=>{fetchProjects();},[]);const value={projects,loading,error,fetchProjects,getProjectById,searchProjects,filterByTechnology};return/*#__PURE__*/_jsx(ProjectContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","ProjectUseCases","projectRepository","jsx","_jsx","projectUseCases","ProjectContext","undefined","useProjects","context","Error","ProjectProvider","_ref","children","projects","setProjects","loading","setLoading","error","setError","fetchProjects","projectsData","getAllProjects","err","console","getProjectById","id","searchProjects","query","filteredProjects","filterByTechnology","technology","getProjectsByTechnology","value","Provider"],"sources":["C:/MyPortfolioWeb/portfolio/src/interface/context/ProjectContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { Project } from '../../core/entities';\r\nimport { ProjectUseCases } from '../../application/useCases/projectUseCases';\r\nimport { projectRepository } from '../../infrastructure/supabase/repositories/projectRepository';\r\n\r\n// Create use cases with the repository implementation\r\nconst projectUseCases = new ProjectUseCases(projectRepository);\r\n\r\ninterface ProjectContextType {\r\n  projects: Project[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  fetchProjects: () => Promise<void>;\r\n  getProjectById: (id: string) => Promise<Project | null>;\r\n  searchProjects: (query: string) => Promise<void>;\r\n  filterByTechnology: (technology: string) => Promise<void>;\r\n}\r\n\r\nconst ProjectContext = createContext<ProjectContextType | undefined>(undefined);\r\n\r\nexport const useProjects = () => {\r\n  const context = useContext(ProjectContext);\r\n  if (!context) {\r\n    throw new Error('useProjects must be used within a ProjectProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface ProjectProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const ProjectProvider: React.FC<ProjectProviderProps> = ({ children }) => {\r\n  const [projects, setProjects] = useState<Project[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchProjects = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const projectsData = await projectUseCases.getAllProjects();\r\n      setProjects(projectsData);\r\n      setError(null);\r\n    } catch (err) {\r\n      setError('Failed to fetch projects');\r\n      console.error(err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getProjectById = async (id: string): Promise<Project | null> => {\r\n    try {\r\n      return await projectUseCases.getProjectById(id);\r\n    } catch (err) {\r\n      setError('Failed to fetch project');\r\n      console.error(err);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const searchProjects = async (query: string) => {\r\n    setLoading(true);\r\n    try {\r\n      const filteredProjects = await projectUseCases.searchProjects(query);\r\n      setProjects(filteredProjects);\r\n      setError(null);\r\n    } catch (err) {\r\n      setError('Failed to search projects');\r\n      console.error(err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const filterByTechnology = async (technology: string) => {\r\n    setLoading(true);\r\n    try {\r\n      const filteredProjects = await projectUseCases.getProjectsByTechnology(technology);\r\n      setProjects(filteredProjects);\r\n      setError(null);\r\n    } catch (err) {\r\n      setError('Failed to filter projects');\r\n      console.error(err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchProjects();\r\n  }, []);\r\n\r\n  const value = {\r\n    projects,\r\n    loading,\r\n    error,\r\n    fetchProjects,\r\n    getProjectById,\r\n    searchProjects,\r\n    filterByTechnology\r\n  };\r\n\r\n  return <ProjectContext.Provider value={value}>{children}</ProjectContext.Provider>;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}