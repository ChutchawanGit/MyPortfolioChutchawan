{"ast":null,"code":"import supabaseClient from '../client';\nexport class SupabaseProjectRepository {\n  async getAll() {\n    const {\n      data,\n      error\n    } = await supabaseClient.from('projects').select('*').order('created_at', {\n      ascending: false\n    });\n    if (error) {\n      console.error('Error fetching projects:', error);\n      throw new Error('Failed to fetch projects');\n    }\n    return data.map(item => ({\n      id: item.id,\n      title: item.title,\n      description: item.description,\n      technologies: item.technologies,\n      imageUrl: item.image_url,\n      githubUrl: item.github_url || undefined,\n      liveUrl: item.live_url || undefined\n    }));\n  }\n  async getById(id) {\n    const {\n      data,\n      error\n    } = await supabaseClient.from('projects').select('*').eq('id', id).single();\n    if (error) {\n      console.error(`Error fetching project with id ${id}:`, error);\n      return null;\n    }\n    return {\n      id: data.id,\n      title: data.title,\n      description: data.description,\n      technologies: data.technologies,\n      imageUrl: data.image_url,\n      githubUrl: data.github_url || undefined,\n      liveUrl: data.live_url || undefined\n    };\n  }\n  async create(project) {\n    const {\n      data,\n      error\n    } = await supabaseClient.from('projects').insert({\n      title: project.title,\n      description: project.description,\n      technologies: project.technologies,\n      image_url: project.imageUrl,\n      github_url: project.githubUrl,\n      live_url: project.liveUrl\n    }).select().single();\n    if (error) {\n      console.error('Error creating project:', error);\n      throw new Error('Failed to create project');\n    }\n    return {\n      id: data.id,\n      title: data.title,\n      description: data.description,\n      technologies: data.technologies,\n      imageUrl: data.image_url,\n      githubUrl: data.github_url || undefined,\n      liveUrl: data.live_url || undefined\n    };\n  }\n  async update(id, project) {\n    const updateData = {};\n    if (project.title !== undefined) updateData.title = project.title;\n    if (project.description !== undefined) updateData.description = project.description;\n    if (project.technologies !== undefined) updateData.technologies = project.technologies;\n    if (project.imageUrl !== undefined) updateData.image_url = project.imageUrl;\n    if (project.githubUrl !== undefined) updateData.github_url = project.githubUrl;\n    if (project.liveUrl !== undefined) updateData.live_url = project.liveUrl;\n    const {\n      data,\n      error\n    } = await supabaseClient.from('projects').update(updateData).eq('id', id).select().single();\n    if (error) {\n      console.error(`Error updating project with id ${id}:`, error);\n      return null;\n    }\n    return {\n      id: data.id,\n      title: data.title,\n      description: data.description,\n      technologies: data.technologies,\n      imageUrl: data.image_url,\n      githubUrl: data.github_url || undefined,\n      liveUrl: data.live_url || undefined\n    };\n  }\n  async delete(id) {\n    const {\n      error\n    } = await supabaseClient.from('projects').delete().eq('id', id);\n    if (error) {\n      console.error(`Error deleting project with id ${id}:`, error);\n      return false;\n    }\n    return true;\n  }\n}\n\n// Export a singleton instance\nexport const projectRepository = new SupabaseProjectRepository();","map":{"version":3,"names":["supabaseClient","SupabaseProjectRepository","getAll","data","error","from","select","order","ascending","console","Error","map","item","id","title","description","technologies","imageUrl","image_url","githubUrl","github_url","undefined","liveUrl","live_url","getById","eq","single","create","project","insert","update","updateData","delete","projectRepository"],"sources":["C:/MyPortfolioWeb/portfolio/src/infrastructure/supabase/repositories/projectRepository.ts"],"sourcesContent":["import { Project } from '../../../core/entities';\r\nimport { ProjectRepository } from '../../../core/repositories';\r\nimport supabaseClient from '../client';\r\n\r\nexport class SupabaseProjectRepository implements ProjectRepository {\r\n  async getAll(): Promise<Project[]> {\r\n    const { data, error } = await supabaseClient\r\n      .from('projects')\r\n      .select('*')\r\n      .order('created_at', { ascending: false });\r\n\r\n    if (error) {\r\n      console.error('Error fetching projects:', error);\r\n      throw new Error('Failed to fetch projects');\r\n    }\r\n\r\n    return data.map(item => ({\r\n      id: item.id,\r\n      title: item.title,\r\n      description: item.description,\r\n      technologies: item.technologies,\r\n      imageUrl: item.image_url,\r\n      githubUrl: item.github_url || undefined,\r\n      liveUrl: item.live_url || undefined\r\n    }));\r\n  }\r\n\r\n  async getById(id: string): Promise<Project | null> {\r\n    const { data, error } = await supabaseClient\r\n      .from('projects')\r\n      .select('*')\r\n      .eq('id', id)\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error(`Error fetching project with id ${id}:`, error);\r\n      return null;\r\n    }\r\n\r\n    return {\r\n      id: data.id,\r\n      title: data.title,\r\n      description: data.description,\r\n      technologies: data.technologies,\r\n      imageUrl: data.image_url,\r\n      githubUrl: data.github_url || undefined,\r\n      liveUrl: data.live_url || undefined\r\n    };\r\n  }\r\n\r\n  async create(project: Omit<Project, 'id'>): Promise<Project> {\r\n    const { data, error } = await supabaseClient\r\n      .from('projects')\r\n      .insert({\r\n        title: project.title,\r\n        description: project.description,\r\n        technologies: project.technologies,\r\n        image_url: project.imageUrl,\r\n        github_url: project.githubUrl,\r\n        live_url: project.liveUrl\r\n      })\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Error creating project:', error);\r\n      throw new Error('Failed to create project');\r\n    }\r\n\r\n    return {\r\n      id: data.id,\r\n      title: data.title,\r\n      description: data.description,\r\n      technologies: data.technologies,\r\n      imageUrl: data.image_url,\r\n      githubUrl: data.github_url || undefined,\r\n      liveUrl: data.live_url || undefined\r\n    };\r\n  }\r\n\r\n  async update(id: string, project: Partial<Project>): Promise<Project | null> {\r\n    const updateData: any = {};\r\n    \r\n    if (project.title !== undefined) updateData.title = project.title;\r\n    if (project.description !== undefined) updateData.description = project.description;\r\n    if (project.technologies !== undefined) updateData.technologies = project.technologies;\r\n    if (project.imageUrl !== undefined) updateData.image_url = project.imageUrl;\r\n    if (project.githubUrl !== undefined) updateData.github_url = project.githubUrl;\r\n    if (project.liveUrl !== undefined) updateData.live_url = project.liveUrl;\r\n\r\n    const { data, error } = await supabaseClient\r\n      .from('projects')\r\n      .update(updateData)\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error(`Error updating project with id ${id}:`, error);\r\n      return null;\r\n    }\r\n\r\n    return {\r\n      id: data.id,\r\n      title: data.title,\r\n      description: data.description,\r\n      technologies: data.technologies,\r\n      imageUrl: data.image_url,\r\n      githubUrl: data.github_url || undefined,\r\n      liveUrl: data.live_url || undefined\r\n    };\r\n  }\r\n\r\n  async delete(id: string): Promise<boolean> {\r\n    const { error } = await supabaseClient\r\n      .from('projects')\r\n      .delete()\r\n      .eq('id', id);\r\n\r\n    if (error) {\r\n      console.error(`Error deleting project with id ${id}:`, error);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\n// Export a singleton instance\r\nexport const projectRepository = new SupabaseProjectRepository();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}