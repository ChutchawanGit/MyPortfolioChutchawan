{"ast":null,"code":"export class ContactUseCases {\n  constructor(contactRepository) {\n    this.contactRepository = void 0;\n    this.contactRepository = contactRepository;\n  }\n  async sendMessage(name, email, message) {\n    // Validate inputs\n    if (!name.trim()) {\n      throw new Error('Name is required');\n    }\n    if (!email.trim()) {\n      throw new Error('Email is required');\n    }\n    if (!this.isValidEmail(email)) {\n      throw new Error('Invalid email format');\n    }\n    if (!message.trim()) {\n      throw new Error('Message is required');\n    }\n\n    // Send message\n    return this.contactRepository.send({\n      name,\n      email,\n      message\n    });\n  }\n  async getAllMessages() {\n    return this.contactRepository.getAll();\n  }\n  async markMessageAsRead(id) {\n    return this.contactRepository.markAsRead(id);\n  }\n  async deleteMessage(id) {\n    return this.contactRepository.delete(id);\n  }\n\n  // Helper methods\n  isValidEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n}","map":{"version":3,"names":["ContactUseCases","constructor","contactRepository","sendMessage","name","email","message","trim","Error","isValidEmail","send","getAllMessages","getAll","markMessageAsRead","id","markAsRead","deleteMessage","delete","emailRegex","test"],"sources":["C:/MyPortfolioWeb/portfolio/src/application/useCases/contactUseCases.ts"],"sourcesContent":["import { ContactMessage } from '../../core/entities';\r\nimport { ContactRepository } from '../../core/repositories';\r\n\r\nexport class ContactUseCases {\r\n  private contactRepository: ContactRepository;\r\n\r\n  constructor(contactRepository: ContactRepository) {\r\n    this.contactRepository = contactRepository;\r\n  }\r\n\r\n  async sendMessage(name: string, email: string, message: string): Promise<ContactMessage> {\r\n    // Validate inputs\r\n    if (!name.trim()) {\r\n      throw new Error('Name is required');\r\n    }\r\n    \r\n    if (!email.trim()) {\r\n      throw new Error('Email is required');\r\n    }\r\n    \r\n    if (!this.isValidEmail(email)) {\r\n      throw new Error('Invalid email format');\r\n    }\r\n    \r\n    if (!message.trim()) {\r\n      throw new Error('Message is required');\r\n    }\r\n\r\n    // Send message\r\n    return this.contactRepository.send({ name, email, message });\r\n  }\r\n\r\n  async getAllMessages(): Promise<ContactMessage[]> {\r\n    return this.contactRepository.getAll();\r\n  }\r\n\r\n  async markMessageAsRead(id: string): Promise<boolean> {\r\n    return this.contactRepository.markAsRead(id);\r\n  }\r\n\r\n  async deleteMessage(id: string): Promise<boolean> {\r\n    return this.contactRepository.delete(id);\r\n  }\r\n\r\n  // Helper methods\r\n  private isValidEmail(email: string): boolean {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n  }\r\n}"],"mappings":"AAGA,OAAO,MAAMA,eAAe,CAAC;EAG3BC,WAAWA,CAACC,iBAAoC,EAAE;IAAA,KAF1CA,iBAAiB;IAGvB,IAAI,CAACA,iBAAiB,GAAGA,iBAAiB;EAC5C;EAEA,MAAMC,WAAWA,CAACC,IAAY,EAAEC,KAAa,EAAEC,OAAe,EAA2B;IACvF;IACA,IAAI,CAACF,IAAI,CAACG,IAAI,CAAC,CAAC,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,kBAAkB,CAAC;IACrC;IAEA,IAAI,CAACH,KAAK,CAACE,IAAI,CAAC,CAAC,EAAE;MACjB,MAAM,IAAIC,KAAK,CAAC,mBAAmB,CAAC;IACtC;IAEA,IAAI,CAAC,IAAI,CAACC,YAAY,CAACJ,KAAK,CAAC,EAAE;MAC7B,MAAM,IAAIG,KAAK,CAAC,sBAAsB,CAAC;IACzC;IAEA,IAAI,CAACF,OAAO,CAACC,IAAI,CAAC,CAAC,EAAE;MACnB,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;IACxC;;IAEA;IACA,OAAO,IAAI,CAACN,iBAAiB,CAACQ,IAAI,CAAC;MAAEN,IAAI;MAAEC,KAAK;MAAEC;IAAQ,CAAC,CAAC;EAC9D;EAEA,MAAMK,cAAcA,CAAA,EAA8B;IAChD,OAAO,IAAI,CAACT,iBAAiB,CAACU,MAAM,CAAC,CAAC;EACxC;EAEA,MAAMC,iBAAiBA,CAACC,EAAU,EAAoB;IACpD,OAAO,IAAI,CAACZ,iBAAiB,CAACa,UAAU,CAACD,EAAE,CAAC;EAC9C;EAEA,MAAME,aAAaA,CAACF,EAAU,EAAoB;IAChD,OAAO,IAAI,CAACZ,iBAAiB,CAACe,MAAM,CAACH,EAAE,CAAC;EAC1C;;EAEA;EACQL,YAAYA,CAACJ,KAAa,EAAW;IAC3C,MAAMa,UAAU,GAAG,4BAA4B;IAC/C,OAAOA,UAAU,CAACC,IAAI,CAACd,KAAK,CAAC;EAC/B;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}