{"ast":null,"code":"/**\n * @license\n * Copyright 2010-2025 Three.js Authors\n * SPDX-License-Identifier: MIT\n */\nconst REVISION = '176';\n\n/**\n * Represents mouse buttons and interaction types in context of controls.\n *\n * @type {ConstantsMouse}\n * @constant\n */\nconst MOUSE = {\n  LEFT: 0,\n  MIDDLE: 1,\n  RIGHT: 2,\n  ROTATE: 0,\n  DOLLY: 1,\n  PAN: 2\n};\n\n/**\n * Represents touch interaction types in context of controls.\n *\n * @type {ConstantsTouch}\n * @constant\n */\nconst TOUCH = {\n  ROTATE: 0,\n  PAN: 1,\n  DOLLY_PAN: 2,\n  DOLLY_ROTATE: 3\n};\n\n/**\n * Disables face culling.\n *\n * @type {number}\n * @constant\n */\nconst CullFaceNone = 0;\n\n/**\n * Culls back faces.\n *\n * @type {number}\n * @constant\n */\nconst CullFaceBack = 1;\n\n/**\n * Culls front faces.\n *\n * @type {number}\n * @constant\n */\nconst CullFaceFront = 2;\n\n/**\n * Culls both front and back faces.\n *\n * @type {number}\n * @constant\n */\nconst CullFaceFrontBack = 3;\n\n/**\n * Gives unfiltered shadow maps - fastest, but lowest quality.\n *\n * @type {number}\n * @constant\n */\nconst BasicShadowMap = 0;\n\n/**\n * Filters shadow maps using the Percentage-Closer Filtering (PCF) algorithm.\n *\n * @type {number}\n * @constant\n */\nconst PCFShadowMap = 1;\n\n/**\n * Filters shadow maps using the Percentage-Closer Filtering (PCF) algorithm with\n * better soft shadows especially when using low-resolution shadow maps.\n *\n * @type {number}\n * @constant\n */\nconst PCFSoftShadowMap = 2;\n\n/**\n * Filters shadow maps using the Variance Shadow Map (VSM) algorithm.\n * When using VSMShadowMap all shadow receivers will also cast shadows.\n *\n * @type {number}\n * @constant\n */\nconst VSMShadowMap = 3;\n\n/**\n * Only front faces are rendered.\n *\n * @type {number}\n * @constant\n */\nconst FrontSide = 0;\n\n/**\n * Only back faces are rendered.\n *\n * @type {number}\n * @constant\n */\nconst BackSide = 1;\n\n/**\n * Both front and back faces are rendered.\n *\n * @type {number}\n * @constant\n */\nconst DoubleSide = 2;\n\n/**\n * No blending is performed which effectively disables\n * alpha transparency.\n *\n * @type {number}\n * @constant\n */\nconst NoBlending = 0;\n\n/**\n * The default blending.\n *\n * @type {number}\n * @constant\n */\nconst NormalBlending = 1;\n\n/**\n * Represents additive blending.\n *\n * @type {number}\n * @constant\n */\nconst AdditiveBlending = 2;\n\n/**\n * Represents subtractive blending.\n *\n * @type {number}\n * @constant\n */\nconst SubtractiveBlending = 3;\n\n/**\n * Represents multiply blending.\n *\n * @type {number}\n * @constant\n */\nconst MultiplyBlending = 4;\n\n/**\n * Represents custom blending.\n *\n * @type {number}\n * @constant\n */\nconst CustomBlending = 5;\n\n/**\n * A `source + destination` blending equation.\n *\n * @type {number}\n * @constant\n */\nconst AddEquation = 100;\n\n/**\n * A `source - destination` blending equation.\n *\n * @type {number}\n * @constant\n */\nconst SubtractEquation = 101;\n\n/**\n * A `destination - source` blending equation.\n *\n * @type {number}\n * @constant\n */\nconst ReverseSubtractEquation = 102;\n\n/**\n * A blend equation that uses the minimum of source and destination.\n *\n * @type {number}\n * @constant\n */\nconst MinEquation = 103;\n\n/**\n * A blend equation that uses the maximum of source and destination.\n *\n * @type {number}\n * @constant\n */\nconst MaxEquation = 104;\n\n/**\n * Multiplies all colors by `0`.\n *\n * @type {number}\n * @constant\n */\nconst ZeroFactor = 200;\n\n/**\n * Multiplies all colors by `1`.\n *\n * @type {number}\n * @constant\n */\nconst OneFactor = 201;\n\n/**\n * Multiplies all colors by the source colors.\n *\n * @type {number}\n * @constant\n */\nconst SrcColorFactor = 202;\n\n/**\n * Multiplies all colors by `1` minus each source color.\n *\n * @type {number}\n * @constant\n */\nconst OneMinusSrcColorFactor = 203;\n\n/**\n * Multiplies all colors by the source alpha value.\n *\n * @type {number}\n * @constant\n */\nconst SrcAlphaFactor = 204;\n\n/**\n * Multiplies all colors by 1 minus the source alpha value.\n *\n * @type {number}\n * @constant\n */\nconst OneMinusSrcAlphaFactor = 205;\n\n/**\n * Multiplies all colors by the destination alpha value.\n *\n * @type {number}\n * @constant\n */\nconst DstAlphaFactor = 206;\n\n/**\n * Multiplies all colors by `1` minus the destination alpha value.\n *\n * @type {number}\n * @constant\n */\nconst OneMinusDstAlphaFactor = 207;\n\n/**\n * Multiplies all colors by the destination color.\n *\n * @type {number}\n * @constant\n */\nconst DstColorFactor = 208;\n\n/**\n * Multiplies all colors by `1` minus each destination color.\n *\n * @type {number}\n * @constant\n */\nconst OneMinusDstColorFactor = 209;\n\n/**\n * Multiplies the RGB colors by the smaller of either the source alpha\n * value or the value of `1` minus the destination alpha value. The alpha\n * value is multiplied by `1`.\n *\n * @type {number}\n * @constant\n */\nconst SrcAlphaSaturateFactor = 210;\n\n/**\n * Multiplies all colors by a constant color.\n *\n * @type {number}\n * @constant\n */\nconst ConstantColorFactor = 211;\n\n/**\n * Multiplies all colors by `1` minus a constant color.\n *\n * @type {number}\n * @constant\n */\nconst OneMinusConstantColorFactor = 212;\n\n/**\n * Multiplies all colors by a constant alpha value.\n *\n * @type {number}\n * @constant\n */\nconst ConstantAlphaFactor = 213;\n\n/**\n * Multiplies all colors by 1 minus a constant alpha value.\n *\n * @type {number}\n * @constant\n */\nconst OneMinusConstantAlphaFactor = 214;\n\n/**\n * Never pass.\n *\n * @type {number}\n * @constant\n */\nconst NeverDepth = 0;\n\n/**\n * Always pass.\n *\n * @type {number}\n * @constant\n */\nconst AlwaysDepth = 1;\n\n/**\n * Pass if the incoming value is less than the depth buffer value.\n *\n * @type {number}\n * @constant\n */\nconst LessDepth = 2;\n\n/**\n * Pass if the incoming value is less than or equal to the depth buffer value.\n *\n * @type {number}\n * @constant\n */\nconst LessEqualDepth = 3;\n\n/**\n * Pass if the incoming value equals the depth buffer value.\n *\n * @type {number}\n * @constant\n */\nconst EqualDepth = 4;\n\n/**\n * Pass if the incoming value is greater than or equal to the depth buffer value.\n *\n * @type {number}\n * @constant\n */\nconst GreaterEqualDepth = 5;\n\n/**\n * Pass if the incoming value is greater than the depth buffer value.\n *\n * @type {number}\n * @constant\n */\nconst GreaterDepth = 6;\n\n/**\n * Pass if the incoming value is not equal to the depth buffer value.\n *\n * @type {number}\n * @constant\n */\nconst NotEqualDepth = 7;\n\n/**\n * Multiplies the environment map color with the surface color.\n *\n * @type {number}\n * @constant\n */\nconst MultiplyOperation = 0;\n\n/**\n * Uses reflectivity to blend between the two colors.\n *\n * @type {number}\n * @constant\n */\nconst MixOperation = 1;\n\n/**\n * Adds the two colors.\n *\n * @type {number}\n * @constant\n */\nconst AddOperation = 2;\n\n/**\n * No tone mapping is applied.\n *\n * @type {number}\n * @constant\n */\nconst NoToneMapping = 0;\n\n/**\n * Linear tone mapping.\n *\n * @type {number}\n * @constant\n */\nconst LinearToneMapping = 1;\n\n/**\n * Reinhard tone mapping.\n *\n * @type {number}\n * @constant\n */\nconst ReinhardToneMapping = 2;\n\n/**\n * Cineon tone mapping.\n *\n * @type {number}\n * @constant\n */\nconst CineonToneMapping = 3;\n\n/**\n * ACES Filmic tone mapping.\n *\n * @type {number}\n * @constant\n */\nconst ACESFilmicToneMapping = 4;\n\n/**\n * Custom tone mapping.\n *\n * Expects a custom implementation by modifying shader code of the material's fragment shader.\n *\n * @type {number}\n * @constant\n */\nconst CustomToneMapping = 5;\n\n/**\n * AgX tone mapping.\n *\n * @type {number}\n * @constant\n */\nconst AgXToneMapping = 6;\n\n/**\n * Neutral tone mapping.\n *\n * Implementation based on the Khronos 3D Commerce Group standard tone mapping.\n *\n * @type {number}\n * @constant\n */\nconst NeutralToneMapping = 7;\n\n/**\n * The skinned mesh shares the same world space as the skeleton.\n *\n * @type {string}\n * @constant\n */\nconst AttachedBindMode = 'attached';\n\n/**\n * The skinned mesh does not share the same world space as the skeleton.\n * This is useful when a skeleton is shared across multiple skinned meshes.\n *\n * @type {string}\n * @constant\n */\nconst DetachedBindMode = 'detached';\n\n/**\n * Maps textures using the geometry's UV coordinates.\n *\n * @type {number}\n * @constant\n */\nconst UVMapping = 300;\n\n/**\n * Reflection mapping for cube textures.\n *\n * @type {number}\n * @constant\n */\nconst CubeReflectionMapping = 301;\n\n/**\n * Refraction mapping for cube textures.\n *\n * @type {number}\n * @constant\n */\nconst CubeRefractionMapping = 302;\n\n/**\n * Reflection mapping for equirectangular textures.\n *\n * @type {number}\n * @constant\n */\nconst EquirectangularReflectionMapping = 303;\n\n/**\n * Refraction mapping for equirectangular textures.\n *\n * @type {number}\n * @constant\n */\nconst EquirectangularRefractionMapping = 304;\n\n/**\n * Reflection mapping for PMREM textures.\n *\n * @type {number}\n * @constant\n */\nconst CubeUVReflectionMapping = 306;\n\n/**\n * The texture will simply repeat to infinity.\n *\n * @type {number}\n * @constant\n */\nconst RepeatWrapping = 1000;\n\n/**\n * The last pixel of the texture stretches to the edge of the mesh.\n *\n * @type {number}\n * @constant\n */\nconst ClampToEdgeWrapping = 1001;\n\n/**\n * The texture will repeats to infinity, mirroring on each repeat.\n *\n * @type {number}\n * @constant\n */\nconst MirroredRepeatWrapping = 1002;\n\n/**\n * Returns the value of the texture element that is nearest (in Manhattan distance)\n * to the specified texture coordinates.\n *\n * @type {number}\n * @constant\n */\nconst NearestFilter = 1003;\n\n/**\n * Chooses the mipmap that most closely matches the size of the pixel being textured\n * and uses the `NearestFilter` criterion (the texel nearest to the center of the pixel)\n * to produce a texture value.\n *\n * @type {number}\n * @constant\n */\nconst NearestMipmapNearestFilter = 1004;\nconst NearestMipMapNearestFilter = 1004; // legacy\n\n/**\n * Chooses the two mipmaps that most closely match the size of the pixel being textured and\n * uses the `NearestFilter` criterion to produce a texture value from each mipmap.\n * The final texture value is a weighted average of those two values.\n *\n * @type {number}\n * @constant\n */\nconst NearestMipmapLinearFilter = 1005;\nconst NearestMipMapLinearFilter = 1005; // legacy\n\n/**\n * Returns the weighted average of the four texture elements that are closest to the specified\n * texture coordinates, and can include items wrapped or repeated from other parts of a texture,\n * depending on the values of `wrapS` and `wrapT`, and on the exact mapping.\n *\n * @type {number}\n * @constant\n */\nconst LinearFilter = 1006;\n\n/**\n * Chooses the mipmap that most closely matches the size of the pixel being textured and uses\n * the `LinearFilter` criterion (a weighted average of the four texels that are closest to the\n * center of the pixel) to produce a texture value.\n *\n * @type {number}\n * @constant\n */\nconst LinearMipmapNearestFilter = 1007;\nconst LinearMipMapNearestFilter = 1007; // legacy\n\n/**\n * Chooses the two mipmaps that most closely match the size of the pixel being textured and uses\n * the `LinearFilter` criterion to produce a texture value from each mipmap. The final texture value\n * is a weighted average of those two values.\n *\n * @type {number}\n * @constant\n */\nconst LinearMipmapLinearFilter = 1008;\nconst LinearMipMapLinearFilter = 1008; // legacy\n\n/**\n * An unsigned byte data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst UnsignedByteType = 1009;\n\n/**\n * A byte data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst ByteType = 1010;\n\n/**\n * A short data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst ShortType = 1011;\n\n/**\n * An unsigned short data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst UnsignedShortType = 1012;\n\n/**\n * An int data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst IntType = 1013;\n\n/**\n * An unsigned int data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst UnsignedIntType = 1014;\n\n/**\n * A float data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst FloatType = 1015;\n\n/**\n * A half float data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst HalfFloatType = 1016;\n\n/**\n * An unsigned short 4_4_4_4 (packed) data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst UnsignedShort4444Type = 1017;\n\n/**\n * An unsigned short 5_5_5_1 (packed) data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst UnsignedShort5551Type = 1018;\n\n/**\n * An unsigned int 24_8 data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst UnsignedInt248Type = 1020;\n\n/**\n * An unsigned int 5_9_9_9 (packed) data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst UnsignedInt5999Type = 35902;\n\n/**\n * Discards the red, green and blue components and reads just the alpha component.\n *\n * @type {number}\n * @constant\n */\nconst AlphaFormat = 1021;\n\n/**\n * Discards the alpha component and reads the red, green and blue component.\n *\n * @type {number}\n * @constant\n */\nconst RGBFormat = 1022;\n\n/**\n * Reads the red, green, blue and alpha components.\n *\n * @type {number}\n * @constant\n */\nconst RGBAFormat = 1023;\n\n/**\n * Reads each element as a single depth value, converts it to floating point, and clamps to the range `[0,1]`.\n *\n * @type {number}\n * @constant\n */\nconst DepthFormat = 1026;\n\n/**\n * Reads each element is a pair of depth and stencil values. The depth component of the pair is interpreted as\n * in `DepthFormat`. The stencil component is interpreted based on the depth + stencil internal format.\n *\n * @type {number}\n * @constant\n */\nconst DepthStencilFormat = 1027;\n\n/**\n * Discards the green, blue and alpha components and reads just the red component.\n *\n * @type {number}\n * @constant\n */\nconst RedFormat = 1028;\n\n/**\n * Discards the green, blue and alpha components and reads just the red component. The texels are read as integers instead of floating point.\n *\n * @type {number}\n * @constant\n */\nconst RedIntegerFormat = 1029;\n\n/**\n * Discards the alpha, and blue components and reads the red, and green components.\n *\n * @type {number}\n * @constant\n */\nconst RGFormat = 1030;\n\n/**\n * Discards the alpha, and blue components and reads the red, and green components. The texels are read as integers instead of floating point.\n *\n * @type {number}\n * @constant\n */\nconst RGIntegerFormat = 1031;\n\n/**\n * Discards the alpha component and reads the red, green and blue component. The texels are read as integers instead of floating point.\n *\n * @type {number}\n * @constant\n */\nconst RGBIntegerFormat = 1032;\n\n/**\n * Reads the red, green, blue and alpha components. The texels are read as integers instead of floating point.\n *\n * @type {number}\n * @constant\n */\nconst RGBAIntegerFormat = 1033;\n\n/**\n * A DXT1-compressed image in an RGB image format.\n *\n * @type {number}\n * @constant\n */\nconst RGB_S3TC_DXT1_Format = 33776;\n\n/**\n * A DXT1-compressed image in an RGB image format with a simple on/off alpha value.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_S3TC_DXT1_Format = 33777;\n\n/**\n * A DXT3-compressed image in an RGBA image format. Compared to a 32-bit RGBA texture, it offers 4:1 compression.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_S3TC_DXT3_Format = 33778;\n\n/**\n * A DXT5-compressed image in an RGBA image format. It also provides a 4:1 compression, but differs to the DXT3\n * compression in how the alpha compression is done.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_S3TC_DXT5_Format = 33779;\n\n/**\n * PVRTC RGB compression in 4-bit mode. One block for each 4×4 pixels.\n *\n * @type {number}\n * @constant\n */\nconst RGB_PVRTC_4BPPV1_Format = 35840;\n\n/**\n * PVRTC RGB compression in 2-bit mode. One block for each 8×4 pixels.\n *\n * @type {number}\n * @constant\n */\nconst RGB_PVRTC_2BPPV1_Format = 35841;\n\n/**\n * PVRTC RGBA compression in 4-bit mode. One block for each 4×4 pixels.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_PVRTC_4BPPV1_Format = 35842;\n\n/**\n * PVRTC RGBA compression in 2-bit mode. One block for each 8×4 pixels.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_PVRTC_2BPPV1_Format = 35843;\n\n/**\n * ETC1 RGB format.\n *\n * @type {number}\n * @constant\n */\nconst RGB_ETC1_Format = 36196;\n\n/**\n * ETC2 RGB format.\n *\n * @type {number}\n * @constant\n */\nconst RGB_ETC2_Format = 37492;\n\n/**\n * ETC2 RGBA format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ETC2_EAC_Format = 37496;\n\n/**\n * ASTC RGBA 4x4 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_4x4_Format = 37808;\n\n/**\n * ASTC RGBA 5x4 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_5x4_Format = 37809;\n\n/**\n * ASTC RGBA 5x5 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_5x5_Format = 37810;\n\n/**\n * ASTC RGBA 6x5 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_6x5_Format = 37811;\n\n/**\n * ASTC RGBA 6x6 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_6x6_Format = 37812;\n\n/**\n * ASTC RGBA 8x5 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_8x5_Format = 37813;\n\n/**\n * ASTC RGBA 8x6 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_8x6_Format = 37814;\n\n/**\n * ASTC RGBA 8x8 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_8x8_Format = 37815;\n\n/**\n * ASTC RGBA 10x5 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_10x5_Format = 37816;\n\n/**\n * ASTC RGBA 10x6 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_10x6_Format = 37817;\n\n/**\n * ASTC RGBA 10x8 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_10x8_Format = 37818;\n\n/**\n * ASTC RGBA 10x10 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_10x10_Format = 37819;\n\n/**\n * ASTC RGBA 12x10 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_12x10_Format = 37820;\n\n/**\n * ASTC RGBA 12x12 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_12x12_Format = 37821;\n\n/**\n * BPTC RGBA format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_BPTC_Format = 36492;\n\n/**\n * BPTC Signed RGB format.\n *\n * @type {number}\n * @constant\n */\nconst RGB_BPTC_SIGNED_Format = 36494;\n\n/**\n * BPTC Unsigned RGB format.\n *\n * @type {number}\n * @constant\n */\nconst RGB_BPTC_UNSIGNED_Format = 36495;\n\n/**\n * RGTC1 Red format.\n *\n * @type {number}\n * @constant\n */\nconst RED_RGTC1_Format = 36283;\n\n/**\n * RGTC1 Signed Red format.\n *\n * @type {number}\n * @constant\n */\nconst SIGNED_RED_RGTC1_Format = 36284;\n\n/**\n * RGTC2 Red Green format.\n *\n * @type {number}\n * @constant\n */\nconst RED_GREEN_RGTC2_Format = 36285;\n\n/**\n * RGTC2 Signed Red Green format.\n *\n * @type {number}\n * @constant\n */\nconst SIGNED_RED_GREEN_RGTC2_Format = 36286;\n\n/**\n * Animations are played once.\n *\n * @type {number}\n * @constant\n */\nconst LoopOnce = 2200;\n\n/**\n * Animations are played with a chosen number of repetitions, each time jumping from\n * the end of the clip directly to its beginning.\n *\n * @type {number}\n * @constant\n */\nconst LoopRepeat = 2201;\n\n/**\n * Animations are played with a chosen number of repetitions, alternately playing forward\n * and backward.\n *\n * @type {number}\n * @constant\n */\nconst LoopPingPong = 2202;\n\n/**\n * Discrete interpolation mode for keyframe tracks.\n *\n * @type {number}\n * @constant\n */\nconst InterpolateDiscrete = 2300;\n\n/**\n * Linear interpolation mode for keyframe tracks.\n *\n * @type {number}\n * @constant\n */\nconst InterpolateLinear = 2301;\n\n/**\n * Smooth interpolation mode for keyframe tracks.\n *\n * @type {number}\n * @constant\n */\nconst InterpolateSmooth = 2302;\n\n/**\n * Zero curvature ending for animations.\n *\n * @type {number}\n * @constant\n */\nconst ZeroCurvatureEnding = 2400;\n\n/**\n * Zero slope ending for animations.\n *\n * @type {number}\n * @constant\n */\nconst ZeroSlopeEnding = 2401;\n\n/**\n * Wrap around ending for animations.\n *\n * @type {number}\n * @constant\n */\nconst WrapAroundEnding = 2402;\n\n/**\n * Default animation blend mode.\n *\n * @type {number}\n * @constant\n */\nconst NormalAnimationBlendMode = 2500;\n\n/**\n * Additive animation blend mode. Can be used to layer motions on top of\n * each other to build complex performances from smaller re-usable assets.\n *\n * @type {number}\n * @constant\n */\nconst AdditiveAnimationBlendMode = 2501;\n\n/**\n * For every three vertices draw a single triangle.\n *\n * @type {number}\n * @constant\n */\nconst TrianglesDrawMode = 0;\n\n/**\n * For each vertex draw a triangle from the last three vertices.\n *\n * @type {number}\n * @constant\n */\nconst TriangleStripDrawMode = 1;\n\n/**\n * For each vertex draw a triangle from the first vertex and the last two vertices.\n *\n * @type {number}\n * @constant\n */\nconst TriangleFanDrawMode = 2;\n\n/**\n * Basic depth packing.\n *\n * @type {number}\n * @constant\n */\nconst BasicDepthPacking = 3200;\n\n/**\n * A depth value is packed into 32 bit RGBA.\n *\n * @type {number}\n * @constant\n */\nconst RGBADepthPacking = 3201;\n\n/**\n * A depth value is packed into 24 bit RGB.\n *\n * @type {number}\n * @constant\n */\nconst RGBDepthPacking = 3202;\n\n/**\n * A depth value is packed into 16 bit RG.\n *\n * @type {number}\n * @constant\n */\nconst RGDepthPacking = 3203;\n\n/**\n * Normal information is relative to the underlying surface.\n *\n * @type {number}\n * @constant\n */\nconst TangentSpaceNormalMap = 0;\n\n/**\n * Normal information is relative to the object orientation.\n *\n * @type {number}\n * @constant\n */\nconst ObjectSpaceNormalMap = 1;\n\n// Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.\n\n/**\n * No color space.\n *\n * @type {string}\n * @constant\n */\nconst NoColorSpace = '';\n\n/**\n * sRGB color space.\n *\n * @type {string}\n * @constant\n */\nconst SRGBColorSpace = 'srgb';\n\n/**\n * sRGB-linear color space.\n *\n * @type {string}\n * @constant\n */\nconst LinearSRGBColorSpace = 'srgb-linear';\n\n/**\n * Linear transfer function.\n *\n * @type {string}\n * @constant\n */\nconst LinearTransfer = 'linear';\n\n/**\n * sRGB transfer function.\n *\n * @type {string}\n * @constant\n */\nconst SRGBTransfer = 'srgb';\n\n/**\n * Sets the stencil buffer value to `0`.\n *\n * @type {number}\n * @constant\n */\nconst ZeroStencilOp = 0;\n\n/**\n * Keeps the current value.\n *\n * @type {number}\n * @constant\n */\nconst KeepStencilOp = 7680;\n\n/**\n * Sets the stencil buffer value to the specified reference value.\n *\n * @type {number}\n * @constant\n */\nconst ReplaceStencilOp = 7681;\n\n/**\n * Increments the current stencil buffer value. Clamps to the maximum representable unsigned value.\n *\n * @type {number}\n * @constant\n */\nconst IncrementStencilOp = 7682;\n\n/**\n * Decrements the current stencil buffer value. Clamps to `0`.\n *\n * @type {number}\n * @constant\n */\nconst DecrementStencilOp = 7683;\n\n/**\n * Increments the current stencil buffer value. Wraps stencil buffer value to zero when incrementing\n * the maximum representable unsigned value.\n *\n * @type {number}\n * @constant\n */\nconst IncrementWrapStencilOp = 34055;\n\n/**\n * Decrements the current stencil buffer value. Wraps stencil buffer value to the maximum representable\n * unsigned value when decrementing a stencil buffer value of `0`.\n *\n * @type {number}\n * @constant\n */\nconst DecrementWrapStencilOp = 34056;\n\n/**\n * Inverts the current stencil buffer value bitwise.\n *\n * @type {number}\n * @constant\n */\nconst InvertStencilOp = 5386;\n\n/**\n * Will never return true.\n *\n * @type {number}\n * @constant\n */\nconst NeverStencilFunc = 512;\n\n/**\n * Will return true if the stencil reference value is less than the current stencil value.\n *\n * @type {number}\n * @constant\n */\nconst LessStencilFunc = 513;\n\n/**\n * Will return true if the stencil reference value is equal to the current stencil value.\n *\n * @type {number}\n * @constant\n */\nconst EqualStencilFunc = 514;\n\n/**\n * Will return true if the stencil reference value is less than or equal to the current stencil value.\n *\n * @type {number}\n * @constant\n */\nconst LessEqualStencilFunc = 515;\n\n/**\n * Will return true if the stencil reference value is greater than the current stencil value.\n *\n * @type {number}\n * @constant\n */\nconst GreaterStencilFunc = 516;\n\n/**\n * Will return true if the stencil reference value is not equal to the current stencil value.\n *\n * @type {number}\n * @constant\n */\nconst NotEqualStencilFunc = 517;\n\n/**\n * Will return true if the stencil reference value is greater than or equal to the current stencil value.\n *\n * @type {number}\n * @constant\n */\nconst GreaterEqualStencilFunc = 518;\n\n/**\n * Will always return true.\n *\n * @type {number}\n * @constant\n */\nconst AlwaysStencilFunc = 519;\n\n/**\n * Never pass.\n *\n * @type {number}\n * @constant\n */\nconst NeverCompare = 512;\n\n/**\n * Pass if the incoming value is less than the texture value.\n *\n * @type {number}\n * @constant\n */\nconst LessCompare = 513;\n\n/**\n * Pass if the incoming value equals the texture value.\n *\n * @type {number}\n * @constant\n */\nconst EqualCompare = 514;\n\n/**\n * Pass if the incoming value is less than or equal to the texture value.\n *\n * @type {number}\n * @constant\n */\nconst LessEqualCompare = 515;\n\n/**\n * Pass if the incoming value is greater than the texture value.\n *\n * @type {number}\n * @constant\n */\nconst GreaterCompare = 516;\n\n/**\n * Pass if the incoming value is not equal to the texture value.\n *\n * @type {number}\n * @constant\n */\nconst NotEqualCompare = 517;\n\n/**\n * Pass if the incoming value is greater than or equal to the texture value.\n *\n * @type {number}\n * @constant\n */\nconst GreaterEqualCompare = 518;\n\n/**\n * Always pass.\n *\n * @type {number}\n * @constant\n */\nconst AlwaysCompare = 519;\n\n/**\n * The contents are intended to be specified once by the application, and used many\n * times as the source for drawing and image specification commands.\n *\n * @type {number}\n * @constant\n */\nconst StaticDrawUsage = 35044;\n\n/**\n * The contents are intended to be respecified repeatedly by the application, and\n * used many times as the source for drawing and image specification commands.\n *\n * @type {number}\n * @constant\n */\nconst DynamicDrawUsage = 35048;\n\n/**\n * The contents are intended to be specified once by the application, and used at most\n * a few times as the source for drawing and image specification commands.\n *\n * @type {number}\n * @constant\n */\nconst StreamDrawUsage = 35040;\n\n/**\n * The contents are intended to be specified once by reading data from the 3D API, and queried\n * many times by the application.\n *\n * @type {number}\n * @constant\n */\nconst StaticReadUsage = 35045;\n\n/**\n * The contents are intended to be respecified repeatedly by reading data from the 3D API, and queried\n * many times by the application.\n *\n * @type {number}\n * @constant\n */\nconst DynamicReadUsage = 35049;\n\n/**\n * The contents are intended to be specified once by reading data from the 3D API, and queried at most\n * a few times by the application\n *\n * @type {number}\n * @constant\n */\nconst StreamReadUsage = 35041;\n\n/**\n * The contents are intended to be specified once by reading data from the 3D API, and used many times as\n * the source for WebGL drawing and image specification commands.\n *\n * @type {number}\n * @constant\n */\nconst StaticCopyUsage = 35046;\n\n/**\n * The contents are intended to be respecified repeatedly by reading data from the 3D API, and used many times\n * as the source for WebGL drawing and image specification commands.\n *\n * @type {number}\n * @constant\n */\nconst DynamicCopyUsage = 35050;\n\n/**\n * The contents are intended to be specified once by reading data from the 3D API, and used at most a few times\n * as the source for WebGL drawing and image specification commands.\n *\n * @type {number}\n * @constant\n */\nconst StreamCopyUsage = 35042;\n\n/**\n * GLSL 1 shader code.\n *\n * @type {string}\n * @constant\n */\nconst GLSL1 = '100';\n\n/**\n * GLSL 3 shader code.\n *\n * @type {string}\n * @constant\n */\nconst GLSL3 = '300 es';\n\n/**\n * WebGL coordinate system.\n *\n * @type {number}\n * @constant\n */\nconst WebGLCoordinateSystem = 2000;\n\n/**\n * WebGPU coordinate system.\n *\n * @type {number}\n * @constant\n */\nconst WebGPUCoordinateSystem = 2001;\n\n/**\n * Represents the different timestamp query types.\n *\n * @type {ConstantsTimestampQuery}\n * @constant\n */\nconst TimestampQuery = {\n  COMPUTE: 'compute',\n  RENDER: 'render'\n};\n\n/**\n * Represents mouse buttons and interaction types in context of controls.\n *\n * @type {ConstantsInterpolationSamplingType}\n * @constant\n */\nconst InterpolationSamplingType = {\n  PERSPECTIVE: 'perspective',\n  LINEAR: 'linear',\n  FLAT: 'flat'\n};\n\n/**\n * Represents the different interpolation sampling modes.\n *\n * @type {ConstantsInterpolationSamplingMode}\n * @constant\n */\nconst InterpolationSamplingMode = {\n  NORMAL: 'normal',\n  CENTROID: 'centroid',\n  SAMPLE: 'sample',\n  FLAT_FIRST: 'flat first',\n  FLAT_EITHER: 'flat either'\n};\n\n/**\n * This type represents mouse buttons and interaction types in context of controls.\n *\n * @typedef {Object} ConstantsMouse\n * @property {number} MIDDLE - The left mouse button.\n * @property {number} LEFT - The middle mouse button.\n * @property {number} RIGHT - The right mouse button.\n * @property {number} ROTATE - A rotate interaction.\n * @property {number} DOLLY - A dolly interaction.\n * @property {number} PAN - A pan interaction.\n **/\n\n/**\n * This type represents touch interaction types in context of controls.\n *\n * @typedef {Object} ConstantsTouch\n * @property {number} ROTATE - A rotate interaction.\n * @property {number} PAN - A pan interaction.\n * @property {number} DOLLY_PAN - The dolly-pan interaction.\n * @property {number} DOLLY_ROTATE - A dolly-rotate interaction.\n **/\n\n/**\n * This type represents the different timestamp query types.\n *\n * @typedef {Object} ConstantsTimestampQuery\n * @property {string} COMPUTE - A `compute` timestamp query.\n * @property {string} RENDER - A `render` timestamp query.\n **/\n\n/**\n * Represents the different interpolation sampling types.\n *\n * @typedef {Object} ConstantsInterpolationSamplingType\n * @property {string} PERSPECTIVE - Perspective-correct interpolation.\n * @property {string} LINEAR - Linear interpolation.\n * @property {string} FLAT - Flat interpolation.\n */\n\n/**\n * Represents the different interpolation sampling modes.\n *\n * @typedef {Object} ConstantsInterpolationSamplingMode\n * @property {string} NORMAL - Normal sampling mode.\n * @property {string} CENTROID - Centroid sampling mode.\n * @property {string} SAMPLE - Sample-specific sampling mode.\n * @property {string} FLAT_FIRST - Flat interpolation using the first vertex.\n * @property {string} FLAT_EITHER - Flat interpolation using either vertex.\n */\n\n/**\n * This modules allows to dispatch event objects on custom JavaScript objects.\n *\n * Main repository: [eventdispatcher.js]{@link https://github.com/mrdoob/eventdispatcher.js/}\n *\n * Code Example:\n * ```js\n * class Car extends EventDispatcher {\n * \tstart() {\n *\t\tthis.dispatchEvent( { type: 'start', message: 'vroom vroom!' } );\n *\t}\n *};\n *\n * // Using events with the custom object\n * const car = new Car();\n * car.addEventListener( 'start', function ( event ) {\n * \talert( event.message );\n * } );\n *\n * car.start();\n * ```\n */\nclass EventDispatcher {\n  /**\n   * Adds the given event listener to the given event type.\n   *\n   * @param {string} type - The type of event to listen to.\n   * @param {Function} listener - The function that gets called when the event is fired.\n   */\n  addEventListener(type, listener) {\n    if (this._listeners === undefined) this._listeners = {};\n    const listeners = this._listeners;\n    if (listeners[type] === undefined) {\n      listeners[type] = [];\n    }\n    if (listeners[type].indexOf(listener) === -1) {\n      listeners[type].push(listener);\n    }\n  }\n\n  /**\n   * Returns `true` if the given event listener has been added to the given event type.\n   *\n   * @param {string} type - The type of event.\n   * @param {Function} listener - The listener to check.\n   * @return {boolean} Whether the given event listener has been added to the given event type.\n   */\n  hasEventListener(type, listener) {\n    const listeners = this._listeners;\n    if (listeners === undefined) return false;\n    return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n  }\n\n  /**\n   * Removes the given event listener from the given event type.\n   *\n   * @param {string} type - The type of event.\n   * @param {Function} listener - The listener to remove.\n   */\n  removeEventListener(type, listener) {\n    const listeners = this._listeners;\n    if (listeners === undefined) return;\n    const listenerArray = listeners[type];\n    if (listenerArray !== undefined) {\n      const index = listenerArray.indexOf(listener);\n      if (index !== -1) {\n        listenerArray.splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * Dispatches an event object.\n   *\n   * @param {Object} event - The event that gets fired.\n   */\n  dispatchEvent(event) {\n    const listeners = this._listeners;\n    if (listeners === undefined) return;\n    const listenerArray = listeners[event.type];\n    if (listenerArray !== undefined) {\n      event.target = this;\n\n      // Make a copy, in case listeners are removed while iterating.\n      const array = listenerArray.slice(0);\n      for (let i = 0, l = array.length; i < l; i++) {\n        array[i].call(this, event);\n      }\n      event.target = null;\n    }\n  }\n}\nconst _lut = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0a', '0b', '0c', '0d', '0e', '0f', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df', 'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff'];\nlet _seed = 1234567;\nconst DEG2RAD = Math.PI / 180;\nconst RAD2DEG = 180 / Math.PI;\n\n/**\n * Generate a [UUID]{@link https://en.wikipedia.org/wiki/Universally_unique_identifier}\n * (universally unique identifier).\n *\n * @return {string} The UUID.\n */\nfunction generateUUID() {\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n  const d0 = Math.random() * 0xffffffff | 0;\n  const d1 = Math.random() * 0xffffffff | 0;\n  const d2 = Math.random() * 0xffffffff | 0;\n  const d3 = Math.random() * 0xffffffff | 0;\n  const uuid = _lut[d0 & 0xff] + _lut[d0 >> 8 & 0xff] + _lut[d0 >> 16 & 0xff] + _lut[d0 >> 24 & 0xff] + '-' + _lut[d1 & 0xff] + _lut[d1 >> 8 & 0xff] + '-' + _lut[d1 >> 16 & 0x0f | 0x40] + _lut[d1 >> 24 & 0xff] + '-' + _lut[d2 & 0x3f | 0x80] + _lut[d2 >> 8 & 0xff] + '-' + _lut[d2 >> 16 & 0xff] + _lut[d2 >> 24 & 0xff] + _lut[d3 & 0xff] + _lut[d3 >> 8 & 0xff] + _lut[d3 >> 16 & 0xff] + _lut[d3 >> 24 & 0xff];\n\n  // .toLowerCase() here flattens concatenated strings to save heap memory space.\n  return uuid.toLowerCase();\n}\n\n/**\n * Clamps the given value between min and max.\n *\n * @param {number} value - The value to clamp.\n * @param {number} min - The min value.\n * @param {number} max - The max value.\n * @return {number} The clamped value.\n */\nfunction clamp(value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\n\n/**\n * Computes the Euclidean modulo of the given parameters that\n * is `( ( n % m ) + m ) % m`.\n *\n * @param {number} n - The first parameter.\n * @param {number} m - The second parameter.\n * @return {number} The Euclidean modulo.\n */\nfunction euclideanModulo(n, m) {\n  // https://en.wikipedia.org/wiki/Modulo_operation\n\n  return (n % m + m) % m;\n}\n\n/**\n * Performs a linear mapping from range `<a1, a2>` to range `<b1, b2>`\n * for the given value.\n *\n * @param {number} x - The value to be mapped.\n * @param {number} a1 - Minimum value for range A.\n * @param {number} a2 - Maximum value for range A.\n * @param {number} b1 - Minimum value for range B.\n * @param {number} b2 - Maximum value for range B.\n * @return {number} The mapped value.\n */\nfunction mapLinear(x, a1, a2, b1, b2) {\n  return b1 + (x - a1) * (b2 - b1) / (a2 - a1);\n}\n\n/**\n * Returns the percentage in the closed interval `[0, 1]` of the given value\n * between the start and end point.\n *\n * @param {number} x - The start point\n * @param {number} y - The end point.\n * @param {number} value - A value between start and end.\n * @return {number} The interpolation factor.\n */\nfunction inverseLerp(x, y, value) {\n  // https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/\n\n  if (x !== y) {\n    return (value - x) / (y - x);\n  } else {\n    return 0;\n  }\n}\n\n/**\n * Returns a value linearly interpolated from two known points based on the given interval -\n * `t = 0` will return `x` and `t = 1` will return `y`.\n *\n * @param {number} x - The start point\n * @param {number} y - The end point.\n * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.\n * @return {number} The interpolated value.\n */\nfunction lerp(x, y, t) {\n  return (1 - t) * x + t * y;\n}\n\n/**\n * Smoothly interpolate a number from `x` to `y` in  a spring-like manner using a delta\n * time to maintain frame rate independent movement. For details, see\n * [Frame rate independent damping using lerp]{@link http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/}.\n *\n * @param {number} x - The current point.\n * @param {number} y - The target point.\n * @param {number} lambda - A higher lambda value will make the movement more sudden,\n * and a lower value will make the movement more gradual.\n * @param {number} dt - Delta time in seconds.\n * @return {number} The interpolated value.\n */\nfunction damp(x, y, lambda, dt) {\n  return lerp(x, y, 1 - Math.exp(-lambda * dt));\n}\n\n/**\n * Returns a value that alternates between `0` and the given `length` parameter.\n *\n * @param {number} x - The value to pingpong.\n * @param {number} [length=1] - The positive value the function will pingpong to.\n * @return {number} The alternated value.\n */\nfunction pingpong(x) {\n  let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  // https://www.desmos.com/calculator/vcsjnyz7x4\n\n  return length - Math.abs(euclideanModulo(x, length * 2) - length);\n}\n\n/**\n * Returns a value in the range `[0,1]` that represents the percentage that `x` has\n * moved between `min` and `max`, but smoothed or slowed down the closer `x` is to\n * the `min` and `max`.\n *\n * See [Smoothstep]{@link http://en.wikipedia.org/wiki/Smoothstep} for more details.\n *\n * @param {number} x - The value to evaluate based on its position between min and max.\n * @param {number} min - The min value. Any x value below min will be `0`.\n * @param {number} max - The max value. Any x value above max will be `1`.\n * @return {number} The alternated value.\n */\nfunction smoothstep(x, min, max) {\n  if (x <= min) return 0;\n  if (x >= max) return 1;\n  x = (x - min) / (max - min);\n  return x * x * (3 - 2 * x);\n}\n\n/**\n * A [variation on smoothstep]{@link https://en.wikipedia.org/wiki/Smoothstep#Variations}\n * that has zero 1st and 2nd order derivatives at x=0 and x=1.\n *\n * @param {number} x - The value to evaluate based on its position between min and max.\n * @param {number} min - The min value. Any x value below min will be `0`.\n * @param {number} max - The max value. Any x value above max will be `1`.\n * @return {number} The alternated value.\n */\nfunction smootherstep(x, min, max) {\n  if (x <= min) return 0;\n  if (x >= max) return 1;\n  x = (x - min) / (max - min);\n  return x * x * x * (x * (x * 6 - 15) + 10);\n}\n\n/**\n * Returns a random integer from `<low, high>` interval.\n *\n * @param {number} low - The lower value boundary.\n * @param {number} high - The upper value boundary\n * @return {number} A random integer.\n */\nfunction randInt(low, high) {\n  return low + Math.floor(Math.random() * (high - low + 1));\n}\n\n/**\n * Returns a random float from `<low, high>` interval.\n *\n * @param {number} low - The lower value boundary.\n * @param {number} high - The upper value boundary\n * @return {number} A random float.\n */\nfunction randFloat(low, high) {\n  return low + Math.random() * (high - low);\n}\n\n/**\n * Returns a random integer from `<-range/2, range/2>` interval.\n *\n * @param {number} range - Defines the value range.\n * @return {number} A random float.\n */\nfunction randFloatSpread(range) {\n  return range * (0.5 - Math.random());\n}\n\n/**\n * Returns a deterministic pseudo-random float in the interval `[0, 1]`.\n *\n * @param {number} [s] - The integer seed.\n * @return {number} A random float.\n */\nfunction seededRandom(s) {\n  if (s !== undefined) _seed = s;\n\n  // Mulberry32 generator\n\n  let t = _seed += 0x6D2B79F5;\n  t = Math.imul(t ^ t >>> 15, t | 1);\n  t ^= t + Math.imul(t ^ t >>> 7, t | 61);\n  return ((t ^ t >>> 14) >>> 0) / 4294967296;\n}\n\n/**\n * Converts degrees to radians.\n *\n * @param {number} degrees - A value in degrees.\n * @return {number} The converted value in radians.\n */\nfunction degToRad(degrees) {\n  return degrees * DEG2RAD;\n}\n\n/**\n * Converts radians to degrees.\n *\n * @param {number} radians - A value in radians.\n * @return {number} The converted value in degrees.\n */\nfunction radToDeg(radians) {\n  return radians * RAD2DEG;\n}\n\n/**\n * Returns `true` if the given number is a power of two.\n *\n * @param {number} value - The value to check.\n * @return {boolean} Whether the given number is a power of two or not.\n */\nfunction isPowerOfTwo(value) {\n  return (value & value - 1) === 0 && value !== 0;\n}\n\n/**\n * Returns the smallest power of two that is greater than or equal to the given number.\n *\n * @param {number} value - The value to find a POT for.\n * @return {number} The smallest power of two that is greater than or equal to the given number.\n */\nfunction ceilPowerOfTwo(value) {\n  return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));\n}\n\n/**\n * Returns the largest power of two that is less than or equal to the given number.\n *\n * @param {number} value - The value to find a POT for.\n * @return {number} The largest power of two that is less than or equal to the given number.\n */\nfunction floorPowerOfTwo(value) {\n  return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));\n}\n\n/**\n * Sets the given quaternion from the [Intrinsic Proper Euler Angles]{@link https://en.wikipedia.org/wiki/Euler_angles}\n * defined by the given angles and order.\n *\n * Rotations are applied to the axes in the order specified by order:\n * rotation by angle `a` is applied first, then by angle `b`, then by angle `c`.\n *\n * @param {Quaternion} q - The quaternion to set.\n * @param {number} a - The rotation applied to the first axis, in radians.\n * @param {number} b - The rotation applied to the second axis, in radians.\n * @param {number} c - The rotation applied to the third axis, in radians.\n * @param {('XYX'|'XZX'|'YXY'|'YZY'|'ZXZ'|'ZYZ')} order - A string specifying the axes order.\n */\nfunction setQuaternionFromProperEuler(q, a, b, c, order) {\n  const cos = Math.cos;\n  const sin = Math.sin;\n  const c2 = cos(b / 2);\n  const s2 = sin(b / 2);\n  const c13 = cos((a + c) / 2);\n  const s13 = sin((a + c) / 2);\n  const c1_3 = cos((a - c) / 2);\n  const s1_3 = sin((a - c) / 2);\n  const c3_1 = cos((c - a) / 2);\n  const s3_1 = sin((c - a) / 2);\n  switch (order) {\n    case 'XYX':\n      q.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);\n      break;\n    case 'YZY':\n      q.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);\n      break;\n    case 'ZXZ':\n      q.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);\n      break;\n    case 'XZX':\n      q.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);\n      break;\n    case 'YXY':\n      q.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);\n      break;\n    case 'ZYZ':\n      q.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);\n      break;\n    default:\n      console.warn('THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order);\n  }\n}\n\n/**\n * Denormalizes the given value according to the given typed array.\n *\n * @param {number} value - The value to denormalize.\n * @param {TypedArray} array - The typed array that defines the data type of the value.\n * @return {number} The denormalize (float) value in the range `[0,1]`.\n */\nfunction denormalize(value, array) {\n  switch (array.constructor) {\n    case Float32Array:\n      return value;\n    case Uint32Array:\n      return value / 4294967295.0;\n    case Uint16Array:\n      return value / 65535.0;\n    case Uint8Array:\n      return value / 255.0;\n    case Int32Array:\n      return Math.max(value / 2147483647.0, -1);\n    case Int16Array:\n      return Math.max(value / 32767.0, -1);\n    case Int8Array:\n      return Math.max(value / 127.0, -1);\n    default:\n      throw new Error('Invalid component type.');\n  }\n}\n\n/**\n * Normalizes the given value according to the given typed array.\n *\n * @param {number} value - The float value in the range `[0,1]` to normalize.\n * @param {TypedArray} array - The typed array that defines the data type of the value.\n * @return {number} The normalize value.\n */\nfunction normalize(value, array) {\n  switch (array.constructor) {\n    case Float32Array:\n      return value;\n    case Uint32Array:\n      return Math.round(value * 4294967295.0);\n    case Uint16Array:\n      return Math.round(value * 65535.0);\n    case Uint8Array:\n      return Math.round(value * 255.0);\n    case Int32Array:\n      return Math.round(value * 2147483647.0);\n    case Int16Array:\n      return Math.round(value * 32767.0);\n    case Int8Array:\n      return Math.round(value * 127.0);\n    default:\n      throw new Error('Invalid component type.');\n  }\n}\n\n/**\n * @class\n * @classdesc A collection of math utility functions.\n * @hideconstructor\n */\nconst MathUtils = {\n  DEG2RAD: DEG2RAD,\n  RAD2DEG: RAD2DEG,\n  /**\n   * Generate a [UUID]{@link https://en.wikipedia.org/wiki/Universally_unique_identifier}\n   * (universally unique identifier).\n   *\n   * @static\n   * @method\n   * @return {string} The UUID.\n   */\n  generateUUID: generateUUID,\n  /**\n   * Clamps the given value between min and max.\n   *\n   * @static\n   * @method\n   * @param {number} value - The value to clamp.\n   * @param {number} min - The min value.\n   * @param {number} max - The max value.\n   * @return {number} The clamped value.\n   */\n  clamp: clamp,\n  /**\n   * Computes the Euclidean modulo of the given parameters that\n   * is `( ( n % m ) + m ) % m`.\n   *\n   * @static\n   * @method\n   * @param {number} n - The first parameter.\n   * @param {number} m - The second parameter.\n   * @return {number} The Euclidean modulo.\n   */\n  euclideanModulo: euclideanModulo,\n  /**\n   * Performs a linear mapping from range `<a1, a2>` to range `<b1, b2>`\n   * for the given value.\n   *\n   * @static\n   * @method\n   * @param {number} x - The value to be mapped.\n   * @param {number} a1 - Minimum value for range A.\n   * @param {number} a2 - Maximum value for range A.\n   * @param {number} b1 - Minimum value for range B.\n   * @param {number} b2 - Maximum value for range B.\n   * @return {number} The mapped value.\n   */\n  mapLinear: mapLinear,\n  /**\n   * Returns the percentage in the closed interval `[0, 1]` of the given value\n   * between the start and end point.\n   *\n   * @static\n   * @method\n   * @param {number} x - The start point\n   * @param {number} y - The end point.\n   * @param {number} value - A value between start and end.\n   * @return {number} The interpolation factor.\n   */\n  inverseLerp: inverseLerp,\n  /**\n   * Returns a value linearly interpolated from two known points based on the given interval -\n   * `t = 0` will return `x` and `t = 1` will return `y`.\n   *\n   * @static\n   * @method\n   * @param {number} x - The start point\n   * @param {number} y - The end point.\n   * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.\n   * @return {number} The interpolated value.\n   */\n  lerp: lerp,\n  /**\n   * Smoothly interpolate a number from `x` to `y` in  a spring-like manner using a delta\n   * time to maintain frame rate independent movement. For details, see\n   * [Frame rate independent damping using lerp]{@link http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/}.\n   *\n   * @static\n   * @method\n   * @param {number} x - The current point.\n   * @param {number} y - The target point.\n   * @param {number} lambda - A higher lambda value will make the movement more sudden,\n   * and a lower value will make the movement more gradual.\n   * @param {number} dt - Delta time in seconds.\n   * @return {number} The interpolated value.\n   */\n  damp: damp,\n  /**\n   * Returns a value that alternates between `0` and the given `length` parameter.\n   *\n   * @static\n   * @method\n   * @param {number} x - The value to pingpong.\n   * @param {number} [length=1] - The positive value the function will pingpong to.\n   * @return {number} The alternated value.\n   */\n  pingpong: pingpong,\n  /**\n   * Returns a value in the range `[0,1]` that represents the percentage that `x` has\n   * moved between `min` and `max`, but smoothed or slowed down the closer `x` is to\n   * the `min` and `max`.\n   *\n   * See [Smoothstep]{@link http://en.wikipedia.org/wiki/Smoothstep} for more details.\n   *\n   * @static\n   * @method\n   * @param {number} x - The value to evaluate based on its position between min and max.\n   * @param {number} min - The min value. Any x value below min will be `0`.\n   * @param {number} max - The max value. Any x value above max will be `1`.\n   * @return {number} The alternated value.\n   */\n  smoothstep: smoothstep,\n  /**\n   * A [variation on smoothstep]{@link https://en.wikipedia.org/wiki/Smoothstep#Variations}\n   * that has zero 1st and 2nd order derivatives at x=0 and x=1.\n   *\n   * @static\n   * @method\n   * @param {number} x - The value to evaluate based on its position between min and max.\n   * @param {number} min - The min value. Any x value below min will be `0`.\n   * @param {number} max - The max value. Any x value above max will be `1`.\n   * @return {number} The alternated value.\n   */\n  smootherstep: smootherstep,\n  /**\n   * Returns a random integer from `<low, high>` interval.\n   *\n   * @static\n   * @method\n   * @param {number} low - The lower value boundary.\n   * @param {number} high - The upper value boundary\n   * @return {number} A random integer.\n   */\n  randInt: randInt,\n  /**\n   * Returns a random float from `<low, high>` interval.\n   *\n   * @static\n   * @method\n   * @param {number} low - The lower value boundary.\n   * @param {number} high - The upper value boundary\n   * @return {number} A random float.\n   */\n  randFloat: randFloat,\n  /**\n   * Returns a random integer from `<-range/2, range/2>` interval.\n   *\n   * @static\n   * @method\n   * @param {number} range - Defines the value range.\n   * @return {number} A random float.\n   */\n  randFloatSpread: randFloatSpread,\n  /**\n   * Returns a deterministic pseudo-random float in the interval `[0, 1]`.\n   *\n   * @static\n   * @method\n   * @param {number} [s] - The integer seed.\n   * @return {number} A random float.\n   */\n  seededRandom: seededRandom,\n  /**\n   * Converts degrees to radians.\n   *\n   * @static\n   * @method\n   * @param {number} degrees - A value in degrees.\n   * @return {number} The converted value in radians.\n   */\n  degToRad: degToRad,\n  /**\n   * Converts radians to degrees.\n   *\n   * @static\n   * @method\n   * @param {number} radians - A value in radians.\n   * @return {number} The converted value in degrees.\n   */\n  radToDeg: radToDeg,\n  /**\n   * Returns `true` if the given number is a power of two.\n   *\n   * @static\n   * @method\n   * @param {number} value - The value to check.\n   * @return {boolean} Whether the given number is a power of two or not.\n   */\n  isPowerOfTwo: isPowerOfTwo,\n  /**\n   * Returns the smallest power of two that is greater than or equal to the given number.\n   *\n   * @static\n   * @method\n   * @param {number} value - The value to find a POT for.\n   * @return {number} The smallest power of two that is greater than or equal to the given number.\n   */\n  ceilPowerOfTwo: ceilPowerOfTwo,\n  /**\n   * Returns the largest power of two that is less than or equal to the given number.\n   *\n   * @static\n   * @method\n   * @param {number} value - The value to find a POT for.\n   * @return {number} The largest power of two that is less than or equal to the given number.\n   */\n  floorPowerOfTwo: floorPowerOfTwo,\n  /**\n   * Sets the given quaternion from the [Intrinsic Proper Euler Angles]{@link https://en.wikipedia.org/wiki/Euler_angles}\n   * defined by the given angles and order.\n   *\n   * Rotations are applied to the axes in the order specified by order:\n   * rotation by angle `a` is applied first, then by angle `b`, then by angle `c`.\n   *\n   * @static\n   * @method\n   * @param {Quaternion} q - The quaternion to set.\n   * @param {number} a - The rotation applied to the first axis, in radians.\n   * @param {number} b - The rotation applied to the second axis, in radians.\n   * @param {number} c - The rotation applied to the third axis, in radians.\n   * @param {('XYX'|'XZX'|'YXY'|'YZY'|'ZXZ'|'ZYZ')} order - A string specifying the axes order.\n   */\n  setQuaternionFromProperEuler: setQuaternionFromProperEuler,\n  /**\n   * Normalizes the given value according to the given typed array.\n   *\n   * @static\n   * @method\n   * @param {number} value - The float value in the range `[0,1]` to normalize.\n   * @param {TypedArray} array - The typed array that defines the data type of the value.\n   * @return {number} The normalize value.\n   */\n  normalize: normalize,\n  /**\n   * Denormalizes the given value according to the given typed array.\n   *\n   * @static\n   * @method\n   * @param {number} value - The value to denormalize.\n   * @param {TypedArray} array - The typed array that defines the data type of the value.\n   * @return {number} The denormalize (float) value in the range `[0,1]`.\n   */\n  denormalize: denormalize\n};\n\n/**\n * Class representing a 2D vector. A 2D vector is an ordered pair of numbers\n * (labeled x and y), which can be used to represent a number of things, such as:\n *\n * - A point in 2D space (i.e. a position on a plane).\n * - A direction and length across a plane. In three.js the length will\n * always be the Euclidean distance(straight-line distance) from `(0, 0)` to `(x, y)`\n * and the direction is also measured from `(0, 0)` towards `(x, y)`.\n * - Any arbitrary ordered pair of numbers.\n *\n * There are other things a 2D vector can be used to represent, such as\n * momentum vectors, complex numbers and so on, however these are the most\n * common uses in three.js.\n *\n * Iterating through a vector instance will yield its components `(x, y)` in\n * the corresponding order.\n * ```js\n * const a = new THREE.Vector2( 0, 1 );\n *\n * //no arguments; will be initialised to (0, 0)\n * const b = new THREE.Vector2( );\n *\n * const d = a.distanceTo( b );\n * ```\n */\nclass Vector2 {\n  /**\n   * Constructs a new 2D vector.\n   *\n   * @param {number} [x=0] - The x value of this vector.\n   * @param {number} [y=0] - The y value of this vector.\n   */\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    Vector2.prototype.isVector2 = true;\n\n    /**\n     * The x value of this vector.\n     *\n     * @type {number}\n     */\n    this.x = x;\n\n    /**\n     * The y value of this vector.\n     *\n     * @type {number}\n     */\n    this.y = y;\n  }\n\n  /**\n   * Alias for {@link Vector2#x}.\n   *\n   * @type {number}\n   */\n  get width() {\n    return this.x;\n  }\n  set width(value) {\n    this.x = value;\n  }\n\n  /**\n   * Alias for {@link Vector2#y}.\n   *\n   * @type {number}\n   */\n  get height() {\n    return this.y;\n  }\n  set height(value) {\n    this.y = value;\n  }\n\n  /**\n   * Sets the vector components.\n   *\n   * @param {number} x - The value of the x component.\n   * @param {number} y - The value of the y component.\n   * @return {Vector2} A reference to this vector.\n   */\n  set(x, y) {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * Sets the vector components to the same value.\n   *\n   * @param {number} scalar - The value to set for all vector components.\n   * @return {Vector2} A reference to this vector.\n   */\n  setScalar(scalar) {\n    this.x = scalar;\n    this.y = scalar;\n    return this;\n  }\n\n  /**\n   * Sets the vector's x component to the given value\n   *\n   * @param {number} x - The value to set.\n   * @return {Vector2} A reference to this vector.\n   */\n  setX(x) {\n    this.x = x;\n    return this;\n  }\n\n  /**\n   * Sets the vector's y component to the given value\n   *\n   * @param {number} y - The value to set.\n   * @return {Vector2} A reference to this vector.\n   */\n  setY(y) {\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * Allows to set a vector component with an index.\n   *\n   * @param {number} index - The component index. `0` equals to x, `1` equals to y.\n   * @param {number} value - The value to set.\n   * @return {Vector2} A reference to this vector.\n   */\n  setComponent(index, value) {\n    switch (index) {\n      case 0:\n        this.x = value;\n        break;\n      case 1:\n        this.y = value;\n        break;\n      default:\n        throw new Error('index is out of range: ' + index);\n    }\n    return this;\n  }\n\n  /**\n   * Returns the value of the vector component which matches the given index.\n   *\n   * @param {number} index - The component index. `0` equals to x, `1` equals to y.\n   * @return {number} A vector component value.\n   */\n  getComponent(index) {\n    switch (index) {\n      case 0:\n        return this.x;\n      case 1:\n        return this.y;\n      default:\n        throw new Error('index is out of range: ' + index);\n    }\n  }\n\n  /**\n   * Returns a new vector with copied values from this instance.\n   *\n   * @return {Vector2} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor(this.x, this.y);\n  }\n\n  /**\n   * Copies the values of the given vector to this instance.\n   *\n   * @param {Vector2} v - The vector to copy.\n   * @return {Vector2} A reference to this vector.\n   */\n  copy(v) {\n    this.x = v.x;\n    this.y = v.y;\n    return this;\n  }\n\n  /**\n   * Adds the given vector to this instance.\n   *\n   * @param {Vector2} v - The vector to add.\n   * @return {Vector2} A reference to this vector.\n   */\n  add(v) {\n    this.x += v.x;\n    this.y += v.y;\n    return this;\n  }\n\n  /**\n   * Adds the given scalar value to all components of this instance.\n   *\n   * @param {number} s - The scalar to add.\n   * @return {Vector2} A reference to this vector.\n   */\n  addScalar(s) {\n    this.x += s;\n    this.y += s;\n    return this;\n  }\n\n  /**\n   * Adds the given vectors and stores the result in this instance.\n   *\n   * @param {Vector2} a - The first vector.\n   * @param {Vector2} b - The second vector.\n   * @return {Vector2} A reference to this vector.\n   */\n  addVectors(a, b) {\n    this.x = a.x + b.x;\n    this.y = a.y + b.y;\n    return this;\n  }\n\n  /**\n   * Adds the given vector scaled by the given factor to this instance.\n   *\n   * @param {Vector2} v - The vector.\n   * @param {number} s - The factor that scales `v`.\n   * @return {Vector2} A reference to this vector.\n   */\n  addScaledVector(v, s) {\n    this.x += v.x * s;\n    this.y += v.y * s;\n    return this;\n  }\n\n  /**\n   * Subtracts the given vector from this instance.\n   *\n   * @param {Vector2} v - The vector to subtract.\n   * @return {Vector2} A reference to this vector.\n   */\n  sub(v) {\n    this.x -= v.x;\n    this.y -= v.y;\n    return this;\n  }\n\n  /**\n   * Subtracts the given scalar value from all components of this instance.\n   *\n   * @param {number} s - The scalar to subtract.\n   * @return {Vector2} A reference to this vector.\n   */\n  subScalar(s) {\n    this.x -= s;\n    this.y -= s;\n    return this;\n  }\n\n  /**\n   * Subtracts the given vectors and stores the result in this instance.\n   *\n   * @param {Vector2} a - The first vector.\n   * @param {Vector2} b - The second vector.\n   * @return {Vector2} A reference to this vector.\n   */\n  subVectors(a, b) {\n    this.x = a.x - b.x;\n    this.y = a.y - b.y;\n    return this;\n  }\n\n  /**\n   * Multiplies the given vector with this instance.\n   *\n   * @param {Vector2} v - The vector to multiply.\n   * @return {Vector2} A reference to this vector.\n   */\n  multiply(v) {\n    this.x *= v.x;\n    this.y *= v.y;\n    return this;\n  }\n\n  /**\n   * Multiplies the given scalar value with all components of this instance.\n   *\n   * @param {number} scalar - The scalar to multiply.\n   * @return {Vector2} A reference to this vector.\n   */\n  multiplyScalar(scalar) {\n    this.x *= scalar;\n    this.y *= scalar;\n    return this;\n  }\n\n  /**\n   * Divides this instance by the given vector.\n   *\n   * @param {Vector2} v - The vector to divide.\n   * @return {Vector2} A reference to this vector.\n   */\n  divide(v) {\n    this.x /= v.x;\n    this.y /= v.y;\n    return this;\n  }\n\n  /**\n   * Divides this vector by the given scalar.\n   *\n   * @param {number} scalar - The scalar to divide.\n   * @return {Vector2} A reference to this vector.\n   */\n  divideScalar(scalar) {\n    return this.multiplyScalar(1 / scalar);\n  }\n\n  /**\n   * Multiplies this vector (with an implicit 1 as the 3rd component) by\n   * the given 3x3 matrix.\n   *\n   * @param {Matrix3} m - The matrix to apply.\n   * @return {Vector2} A reference to this vector.\n   */\n  applyMatrix3(m) {\n    const x = this.x,\n      y = this.y;\n    const e = m.elements;\n    this.x = e[0] * x + e[3] * y + e[6];\n    this.y = e[1] * x + e[4] * y + e[7];\n    return this;\n  }\n\n  /**\n   * If this vector's x or y value is greater than the given vector's x or y\n   * value, replace that value with the corresponding min value.\n   *\n   * @param {Vector2} v - The vector.\n   * @return {Vector2} A reference to this vector.\n   */\n  min(v) {\n    this.x = Math.min(this.x, v.x);\n    this.y = Math.min(this.y, v.y);\n    return this;\n  }\n\n  /**\n   * If this vector's x or y value is less than the given vector's x or y\n   * value, replace that value with the corresponding max value.\n   *\n   * @param {Vector2} v - The vector.\n   * @return {Vector2} A reference to this vector.\n   */\n  max(v) {\n    this.x = Math.max(this.x, v.x);\n    this.y = Math.max(this.y, v.y);\n    return this;\n  }\n\n  /**\n   * If this vector's x or y value is greater than the max vector's x or y\n   * value, it is replaced by the corresponding value.\n   * If this vector's x or y value is less than the min vector's x or y value,\n   * it is replaced by the corresponding value.\n   *\n   * @param {Vector2} min - The minimum x and y values.\n   * @param {Vector2} max - The maximum x and y values in the desired range.\n   * @return {Vector2} A reference to this vector.\n   */\n  clamp(min, max) {\n    // assumes min < max, componentwise\n\n    this.x = clamp(this.x, min.x, max.x);\n    this.y = clamp(this.y, min.y, max.y);\n    return this;\n  }\n\n  /**\n   * If this vector's x or y values are greater than the max value, they are\n   * replaced by the max value.\n   * If this vector's x or y values are less than the min value, they are\n   * replaced by the min value.\n   *\n   * @param {number} minVal - The minimum value the components will be clamped to.\n   * @param {number} maxVal - The maximum value the components will be clamped to.\n   * @return {Vector2} A reference to this vector.\n   */\n  clampScalar(minVal, maxVal) {\n    this.x = clamp(this.x, minVal, maxVal);\n    this.y = clamp(this.y, minVal, maxVal);\n    return this;\n  }\n\n  /**\n   * If this vector's length is greater than the max value, it is replaced by\n   * the max value.\n   * If this vector's length is less than the min value, it is replaced by the\n   * min value.\n   *\n   * @param {number} min - The minimum value the vector length will be clamped to.\n   * @param {number} max - The maximum value the vector length will be clamped to.\n   * @return {Vector2} A reference to this vector.\n   */\n  clampLength(min, max) {\n    const length = this.length();\n    return this.divideScalar(length || 1).multiplyScalar(clamp(length, min, max));\n  }\n\n  /**\n   * The components of this vector are rounded down to the nearest integer value.\n   *\n   * @return {Vector2} A reference to this vector.\n   */\n  floor() {\n    this.x = Math.floor(this.x);\n    this.y = Math.floor(this.y);\n    return this;\n  }\n\n  /**\n   * The components of this vector are rounded up to the nearest integer value.\n   *\n   * @return {Vector2} A reference to this vector.\n   */\n  ceil() {\n    this.x = Math.ceil(this.x);\n    this.y = Math.ceil(this.y);\n    return this;\n  }\n\n  /**\n   * The components of this vector are rounded to the nearest integer value\n   *\n   * @return {Vector2} A reference to this vector.\n   */\n  round() {\n    this.x = Math.round(this.x);\n    this.y = Math.round(this.y);\n    return this;\n  }\n\n  /**\n   * The components of this vector are rounded towards zero (up if negative,\n   * down if positive) to an integer value.\n   *\n   * @return {Vector2} A reference to this vector.\n   */\n  roundToZero() {\n    this.x = Math.trunc(this.x);\n    this.y = Math.trunc(this.y);\n    return this;\n  }\n\n  /**\n   * Inverts this vector - i.e. sets x = -x and y = -y.\n   *\n   * @return {Vector2} A reference to this vector.\n   */\n  negate() {\n    this.x = -this.x;\n    this.y = -this.y;\n    return this;\n  }\n\n  /**\n   * Calculates the dot product of the given vector with this instance.\n   *\n   * @param {Vector2} v - The vector to compute the dot product with.\n   * @return {number} The result of the dot product.\n   */\n  dot(v) {\n    return this.x * v.x + this.y * v.y;\n  }\n\n  /**\n   * Calculates the cross product of the given vector with this instance.\n   *\n   * @param {Vector2} v - The vector to compute the cross product with.\n   * @return {number} The result of the cross product.\n   */\n  cross(v) {\n    return this.x * v.y - this.y * v.x;\n  }\n\n  /**\n   * Computes the square of the Euclidean length (straight-line length) from\n   * (0, 0) to (x, y). If you are comparing the lengths of vectors, you should\n   * compare the length squared instead as it is slightly more efficient to calculate.\n   *\n   * @return {number} The square length of this vector.\n   */\n  lengthSq() {\n    return this.x * this.x + this.y * this.y;\n  }\n\n  /**\n   * Computes the  Euclidean length (straight-line length) from (0, 0) to (x, y).\n   *\n   * @return {number} The length of this vector.\n   */\n  length() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  /**\n   * Computes the Manhattan length of this vector.\n   *\n   * @return {number} The length of this vector.\n   */\n  manhattanLength() {\n    return Math.abs(this.x) + Math.abs(this.y);\n  }\n\n  /**\n   * Converts this vector to a unit vector - that is, sets it equal to a vector\n   * with the same direction as this one, but with a vector length of `1`.\n   *\n   * @return {Vector2} A reference to this vector.\n   */\n  normalize() {\n    return this.divideScalar(this.length() || 1);\n  }\n\n  /**\n   * Computes the angle in radians of this vector with respect to the positive x-axis.\n   *\n   * @return {number} The angle in radians.\n   */\n  angle() {\n    const angle = Math.atan2(-this.y, -this.x) + Math.PI;\n    return angle;\n  }\n\n  /**\n   * Returns the angle between the given vector and this instance in radians.\n   *\n   * @param {Vector2} v - The vector to compute the angle with.\n   * @return {number} The angle in radians.\n   */\n  angleTo(v) {\n    const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());\n    if (denominator === 0) return Math.PI / 2;\n    const theta = this.dot(v) / denominator;\n\n    // clamp, to handle numerical problems\n\n    return Math.acos(clamp(theta, -1, 1));\n  }\n\n  /**\n   * Computes the distance from the given vector to this instance.\n   *\n   * @param {Vector2} v - The vector to compute the distance to.\n   * @return {number} The distance.\n   */\n  distanceTo(v) {\n    return Math.sqrt(this.distanceToSquared(v));\n  }\n\n  /**\n   * Computes the squared distance from the given vector to this instance.\n   * If you are just comparing the distance with another distance, you should compare\n   * the distance squared instead as it is slightly more efficient to calculate.\n   *\n   * @param {Vector2} v - The vector to compute the squared distance to.\n   * @return {number} The squared distance.\n   */\n  distanceToSquared(v) {\n    const dx = this.x - v.x,\n      dy = this.y - v.y;\n    return dx * dx + dy * dy;\n  }\n\n  /**\n   * Computes the Manhattan distance from the given vector to this instance.\n   *\n   * @param {Vector2} v - The vector to compute the Manhattan distance to.\n   * @return {number} The Manhattan distance.\n   */\n  manhattanDistanceTo(v) {\n    return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);\n  }\n\n  /**\n   * Sets this vector to a vector with the same direction as this one, but\n   * with the specified length.\n   *\n   * @param {number} length - The new length of this vector.\n   * @return {Vector2} A reference to this vector.\n   */\n  setLength(length) {\n    return this.normalize().multiplyScalar(length);\n  }\n\n  /**\n   * Linearly interpolates between the given vector and this instance, where\n   * alpha is the percent distance along the line - alpha = 0 will be this\n   * vector, and alpha = 1 will be the given one.\n   *\n   * @param {Vector2} v - The vector to interpolate towards.\n   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n   * @return {Vector2} A reference to this vector.\n   */\n  lerp(v, alpha) {\n    this.x += (v.x - this.x) * alpha;\n    this.y += (v.y - this.y) * alpha;\n    return this;\n  }\n\n  /**\n   * Linearly interpolates between the given vectors, where alpha is the percent\n   * distance along the line - alpha = 0 will be first vector, and alpha = 1 will\n   * be the second one. The result is stored in this instance.\n   *\n   * @param {Vector2} v1 - The first vector.\n   * @param {Vector2} v2 - The second vector.\n   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n   * @return {Vector2} A reference to this vector.\n   */\n  lerpVectors(v1, v2, alpha) {\n    this.x = v1.x + (v2.x - v1.x) * alpha;\n    this.y = v1.y + (v2.y - v1.y) * alpha;\n    return this;\n  }\n\n  /**\n   * Returns `true` if this vector is equal with the given one.\n   *\n   * @param {Vector2} v - The vector to test for equality.\n   * @return {boolean} Whether this vector is equal with the given one.\n   */\n  equals(v) {\n    return v.x === this.x && v.y === this.y;\n  }\n\n  /**\n   * Sets this vector's x value to be `array[ offset ]` and y\n   * value to be `array[ offset + 1 ]`.\n   *\n   * @param {Array<number>} array - An array holding the vector component values.\n   * @param {number} [offset=0] - The offset into the array.\n   * @return {Vector2} A reference to this vector.\n   */\n  fromArray(array) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.x = array[offset];\n    this.y = array[offset + 1];\n    return this;\n  }\n\n  /**\n   * Writes the components of this vector to the given array. If no array is provided,\n   * the method returns a new instance.\n   *\n   * @param {Array<number>} [array=[]] - The target array holding the vector components.\n   * @param {number} [offset=0] - Index of the first element in the array.\n   * @return {Array<number>} The vector components.\n   */\n  toArray() {\n    let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    array[offset] = this.x;\n    array[offset + 1] = this.y;\n    return array;\n  }\n\n  /**\n   * Sets the components of this vector from the given buffer attribute.\n   *\n   * @param {BufferAttribute} attribute - The buffer attribute holding vector data.\n   * @param {number} index - The index into the attribute.\n   * @return {Vector2} A reference to this vector.\n   */\n  fromBufferAttribute(attribute, index) {\n    this.x = attribute.getX(index);\n    this.y = attribute.getY(index);\n    return this;\n  }\n\n  /**\n   * Rotates this vector around the given center by the given angle.\n   *\n   * @param {Vector2} center - The point around which to rotate.\n   * @param {number} angle - The angle to rotate, in radians.\n   * @return {Vector2} A reference to this vector.\n   */\n  rotateAround(center, angle) {\n    const c = Math.cos(angle),\n      s = Math.sin(angle);\n    const x = this.x - center.x;\n    const y = this.y - center.y;\n    this.x = x * c - y * s + center.x;\n    this.y = x * s + y * c + center.y;\n    return this;\n  }\n\n  /**\n   * Sets each component of this vector to a pseudo-random value between `0` and\n   * `1`, excluding `1`.\n   *\n   * @return {Vector2} A reference to this vector.\n   */\n  random() {\n    this.x = Math.random();\n    this.y = Math.random();\n    return this;\n  }\n  *[Symbol.iterator]() {\n    yield this.x;\n    yield this.y;\n  }\n}\n\n/**\n * Represents a 3x3 matrix.\n *\n * A Note on Row-Major and Column-Major Ordering:\n *\n * The constructor and {@link Matrix3#set} method take arguments in\n * [row-major]{@link https://en.wikipedia.org/wiki/Row-_and_column-major_order#Column-major_order}\n * order, while internally they are stored in the {@link Matrix3#elements} array in column-major order.\n * This means that calling:\n * ```js\n * const m = new THREE.Matrix();\n * m.set( 11, 12, 13,\n *        21, 22, 23,\n *        31, 32, 33 );\n * ```\n * will result in the elements array containing:\n * ```js\n * m.elements = [ 11, 21, 31,\n *                12, 22, 32,\n *                13, 23, 33 ];\n * ```\n * and internally all calculations are performed using column-major ordering.\n * However, as the actual ordering makes no difference mathematically and\n * most people are used to thinking about matrices in row-major order, the\n * three.js documentation shows matrices in row-major order. Just bear in\n * mind that if you are reading the source code, you'll have to take the\n * transpose of any matrices outlined here to make sense of the calculations.\n */\nclass Matrix3 {\n  /**\n   * Constructs a new 3x3 matrix. The arguments are supposed to be\n   * in row-major order. If no arguments are provided, the constructor\n   * initializes the matrix as an identity matrix.\n   *\n   * @param {number} [n11] - 1-1 matrix element.\n   * @param {number} [n12] - 1-2 matrix element.\n   * @param {number} [n13] - 1-3 matrix element.\n   * @param {number} [n21] - 2-1 matrix element.\n   * @param {number} [n22] - 2-2 matrix element.\n   * @param {number} [n23] - 2-3 matrix element.\n   * @param {number} [n31] - 3-1 matrix element.\n   * @param {number} [n32] - 3-2 matrix element.\n   * @param {number} [n33] - 3-3 matrix element.\n   */\n  constructor(n11, n12, n13, n21, n22, n23, n31, n32, n33) {\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    Matrix3.prototype.isMatrix3 = true;\n\n    /**\n     * A column-major list of matrix values.\n     *\n     * @type {Array<number>}\n     */\n    this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    if (n11 !== undefined) {\n      this.set(n11, n12, n13, n21, n22, n23, n31, n32, n33);\n    }\n  }\n\n  /**\n   * Sets the elements of the matrix.The arguments are supposed to be\n   * in row-major order.\n   *\n   * @param {number} [n11] - 1-1 matrix element.\n   * @param {number} [n12] - 1-2 matrix element.\n   * @param {number} [n13] - 1-3 matrix element.\n   * @param {number} [n21] - 2-1 matrix element.\n   * @param {number} [n22] - 2-2 matrix element.\n   * @param {number} [n23] - 2-3 matrix element.\n   * @param {number} [n31] - 3-1 matrix element.\n   * @param {number} [n32] - 3-2 matrix element.\n   * @param {number} [n33] - 3-3 matrix element.\n   * @return {Matrix3} A reference to this matrix.\n   */\n  set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {\n    const te = this.elements;\n    te[0] = n11;\n    te[1] = n21;\n    te[2] = n31;\n    te[3] = n12;\n    te[4] = n22;\n    te[5] = n32;\n    te[6] = n13;\n    te[7] = n23;\n    te[8] = n33;\n    return this;\n  }\n\n  /**\n   * Sets this matrix to the 3x3 identity matrix.\n   *\n   * @return {Matrix3} A reference to this matrix.\n   */\n  identity() {\n    this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);\n    return this;\n  }\n\n  /**\n   * Copies the values of the given matrix to this instance.\n   *\n   * @param {Matrix3} m - The matrix to copy.\n   * @return {Matrix3} A reference to this matrix.\n   */\n  copy(m) {\n    const te = this.elements;\n    const me = m.elements;\n    te[0] = me[0];\n    te[1] = me[1];\n    te[2] = me[2];\n    te[3] = me[3];\n    te[4] = me[4];\n    te[5] = me[5];\n    te[6] = me[6];\n    te[7] = me[7];\n    te[8] = me[8];\n    return this;\n  }\n\n  /**\n   * Extracts the basis of this matrix into the three axis vectors provided.\n   *\n   * @param {Vector3} xAxis - The basis's x axis.\n   * @param {Vector3} yAxis - The basis's y axis.\n   * @param {Vector3} zAxis - The basis's z axis.\n   * @return {Matrix3} A reference to this matrix.\n   */\n  extractBasis(xAxis, yAxis, zAxis) {\n    xAxis.setFromMatrix3Column(this, 0);\n    yAxis.setFromMatrix3Column(this, 1);\n    zAxis.setFromMatrix3Column(this, 2);\n    return this;\n  }\n\n  /**\n   * Set this matrix to the upper 3x3 matrix of the given 4x4 matrix.\n   *\n   * @param {Matrix4} m - The 4x4 matrix.\n   * @return {Matrix3} A reference to this matrix.\n   */\n  setFromMatrix4(m) {\n    const me = m.elements;\n    this.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);\n    return this;\n  }\n\n  /**\n   * Post-multiplies this matrix by the given 3x3 matrix.\n   *\n   * @param {Matrix3} m - The matrix to multiply with.\n   * @return {Matrix3} A reference to this matrix.\n   */\n  multiply(m) {\n    return this.multiplyMatrices(this, m);\n  }\n\n  /**\n   * Pre-multiplies this matrix by the given 3x3 matrix.\n   *\n   * @param {Matrix3} m - The matrix to multiply with.\n   * @return {Matrix3} A reference to this matrix.\n   */\n  premultiply(m) {\n    return this.multiplyMatrices(m, this);\n  }\n\n  /**\n   * Multiples the given 3x3 matrices and stores the result\n   * in this matrix.\n   *\n   * @param {Matrix3} a - The first matrix.\n   * @param {Matrix3} b - The second matrix.\n   * @return {Matrix3} A reference to this matrix.\n   */\n  multiplyMatrices(a, b) {\n    const ae = a.elements;\n    const be = b.elements;\n    const te = this.elements;\n    const a11 = ae[0],\n      a12 = ae[3],\n      a13 = ae[6];\n    const a21 = ae[1],\n      a22 = ae[4],\n      a23 = ae[7];\n    const a31 = ae[2],\n      a32 = ae[5],\n      a33 = ae[8];\n    const b11 = be[0],\n      b12 = be[3],\n      b13 = be[6];\n    const b21 = be[1],\n      b22 = be[4],\n      b23 = be[7];\n    const b31 = be[2],\n      b32 = be[5],\n      b33 = be[8];\n    te[0] = a11 * b11 + a12 * b21 + a13 * b31;\n    te[3] = a11 * b12 + a12 * b22 + a13 * b32;\n    te[6] = a11 * b13 + a12 * b23 + a13 * b33;\n    te[1] = a21 * b11 + a22 * b21 + a23 * b31;\n    te[4] = a21 * b12 + a22 * b22 + a23 * b32;\n    te[7] = a21 * b13 + a22 * b23 + a23 * b33;\n    te[2] = a31 * b11 + a32 * b21 + a33 * b31;\n    te[5] = a31 * b12 + a32 * b22 + a33 * b32;\n    te[8] = a31 * b13 + a32 * b23 + a33 * b33;\n    return this;\n  }\n\n  /**\n   * Multiplies every component of the matrix by the given scalar.\n   *\n   * @param {number} s - The scalar.\n   * @return {Matrix3} A reference to this matrix.\n   */\n  multiplyScalar(s) {\n    const te = this.elements;\n    te[0] *= s;\n    te[3] *= s;\n    te[6] *= s;\n    te[1] *= s;\n    te[4] *= s;\n    te[7] *= s;\n    te[2] *= s;\n    te[5] *= s;\n    te[8] *= s;\n    return this;\n  }\n\n  /**\n   * Computes and returns the determinant of this matrix.\n   *\n   * @return {number} The determinant.\n   */\n  determinant() {\n    const te = this.elements;\n    const a = te[0],\n      b = te[1],\n      c = te[2],\n      d = te[3],\n      e = te[4],\n      f = te[5],\n      g = te[6],\n      h = te[7],\n      i = te[8];\n    return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n  }\n\n  /**\n   * Inverts this matrix, using the [analytic method]{@link https://en.wikipedia.org/wiki/Invertible_matrix#Analytic_solution}.\n   * You can not invert with a determinant of zero. If you attempt this, the method produces\n   * a zero matrix instead.\n   *\n   * @return {Matrix3} A reference to this matrix.\n   */\n  invert() {\n    const te = this.elements,\n      n11 = te[0],\n      n21 = te[1],\n      n31 = te[2],\n      n12 = te[3],\n      n22 = te[4],\n      n32 = te[5],\n      n13 = te[6],\n      n23 = te[7],\n      n33 = te[8],\n      t11 = n33 * n22 - n32 * n23,\n      t12 = n32 * n13 - n33 * n12,\n      t13 = n23 * n12 - n22 * n13,\n      det = n11 * t11 + n21 * t12 + n31 * t13;\n    if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);\n    const detInv = 1 / det;\n    te[0] = t11 * detInv;\n    te[1] = (n31 * n23 - n33 * n21) * detInv;\n    te[2] = (n32 * n21 - n31 * n22) * detInv;\n    te[3] = t12 * detInv;\n    te[4] = (n33 * n11 - n31 * n13) * detInv;\n    te[5] = (n31 * n12 - n32 * n11) * detInv;\n    te[6] = t13 * detInv;\n    te[7] = (n21 * n13 - n23 * n11) * detInv;\n    te[8] = (n22 * n11 - n21 * n12) * detInv;\n    return this;\n  }\n\n  /**\n   * Transposes this matrix in place.\n   *\n   * @return {Matrix3} A reference to this matrix.\n   */\n  transpose() {\n    let tmp;\n    const m = this.elements;\n    tmp = m[1];\n    m[1] = m[3];\n    m[3] = tmp;\n    tmp = m[2];\n    m[2] = m[6];\n    m[6] = tmp;\n    tmp = m[5];\n    m[5] = m[7];\n    m[7] = tmp;\n    return this;\n  }\n\n  /**\n   * Computes the normal matrix which is the inverse transpose of the upper\n   * left 3x3 portion of the given 4x4 matrix.\n   *\n   * @param {Matrix4} matrix4 - The 4x4 matrix.\n   * @return {Matrix3} A reference to this matrix.\n   */\n  getNormalMatrix(matrix4) {\n    return this.setFromMatrix4(matrix4).invert().transpose();\n  }\n\n  /**\n   * Transposes this matrix into the supplied array, and returns itself unchanged.\n   *\n   * @param {Array<number>} r - An array to store the transposed matrix elements.\n   * @return {Matrix3} A reference to this matrix.\n   */\n  transposeIntoArray(r) {\n    const m = this.elements;\n    r[0] = m[0];\n    r[1] = m[3];\n    r[2] = m[6];\n    r[3] = m[1];\n    r[4] = m[4];\n    r[5] = m[7];\n    r[6] = m[2];\n    r[7] = m[5];\n    r[8] = m[8];\n    return this;\n  }\n\n  /**\n   * Sets the UV transform matrix from offset, repeat, rotation, and center.\n   *\n   * @param {number} tx - Offset x.\n   * @param {number} ty - Offset y.\n   * @param {number} sx - Repeat x.\n   * @param {number} sy - Repeat y.\n   * @param {number} rotation - Rotation, in radians. Positive values rotate counterclockwise.\n   * @param {number} cx - Center x of rotation.\n   * @param {number} cy - Center y of rotation\n   * @return {Matrix3} A reference to this matrix.\n   */\n  setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {\n    const c = Math.cos(rotation);\n    const s = Math.sin(rotation);\n    this.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1);\n    return this;\n  }\n\n  /**\n   * Scales this matrix with the given scalar values.\n   *\n   * @param {number} sx - The amount to scale in the X axis.\n   * @param {number} sy - The amount to scale in the Y axis.\n   * @return {Matrix3} A reference to this matrix.\n   */\n  scale(sx, sy) {\n    this.premultiply(_m3.makeScale(sx, sy));\n    return this;\n  }\n\n  /**\n   * Rotates this matrix by the given angle.\n   *\n   * @param {number} theta - The rotation in radians.\n   * @return {Matrix3} A reference to this matrix.\n   */\n  rotate(theta) {\n    this.premultiply(_m3.makeRotation(-theta));\n    return this;\n  }\n\n  /**\n   * Translates this matrix by the given scalar values.\n   *\n   * @param {number} tx - The amount to translate in the X axis.\n   * @param {number} ty - The amount to translate in the Y axis.\n   * @return {Matrix3} A reference to this matrix.\n   */\n  translate(tx, ty) {\n    this.premultiply(_m3.makeTranslation(tx, ty));\n    return this;\n  }\n\n  // for 2D Transforms\n\n  /**\n   * Sets this matrix as a 2D translation transform.\n   *\n   * @param {number|Vector2} x - The amount to translate in the X axis or alternatively a translation vector.\n   * @param {number} y - The amount to translate in the Y axis.\n   * @return {Matrix3} A reference to this matrix.\n   */\n  makeTranslation(x, y) {\n    if (x.isVector2) {\n      this.set(1, 0, x.x, 0, 1, x.y, 0, 0, 1);\n    } else {\n      this.set(1, 0, x, 0, 1, y, 0, 0, 1);\n    }\n    return this;\n  }\n\n  /**\n   * Sets this matrix as a 2D rotational transformation.\n   *\n   * @param {number} theta - The rotation in radians.\n   * @return {Matrix3} A reference to this matrix.\n   */\n  makeRotation(theta) {\n    // counterclockwise\n\n    const c = Math.cos(theta);\n    const s = Math.sin(theta);\n    this.set(c, -s, 0, s, c, 0, 0, 0, 1);\n    return this;\n  }\n\n  /**\n   * Sets this matrix as a 2D scale transform.\n   *\n   * @param {number} x - The amount to scale in the X axis.\n   * @param {number} y - The amount to scale in the Y axis.\n   * @return {Matrix3} A reference to this matrix.\n   */\n  makeScale(x, y) {\n    this.set(x, 0, 0, 0, y, 0, 0, 0, 1);\n    return this;\n  }\n\n  /**\n   * Returns `true` if this matrix is equal with the given one.\n   *\n   * @param {Matrix3} matrix - The matrix to test for equality.\n   * @return {boolean} Whether this matrix is equal with the given one.\n   */\n  equals(matrix) {\n    const te = this.elements;\n    const me = matrix.elements;\n    for (let i = 0; i < 9; i++) {\n      if (te[i] !== me[i]) return false;\n    }\n    return true;\n  }\n\n  /**\n   * Sets the elements of the matrix from the given array.\n   *\n   * @param {Array<number>} array - The matrix elements in column-major order.\n   * @param {number} [offset=0] - Index of the first element in the array.\n   * @return {Matrix3} A reference to this matrix.\n   */\n  fromArray(array) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    for (let i = 0; i < 9; i++) {\n      this.elements[i] = array[i + offset];\n    }\n    return this;\n  }\n\n  /**\n   * Writes the elements of this matrix to the given array. If no array is provided,\n   * the method returns a new instance.\n   *\n   * @param {Array<number>} [array=[]] - The target array holding the matrix elements in column-major order.\n   * @param {number} [offset=0] - Index of the first element in the array.\n   * @return {Array<number>} The matrix elements in column-major order.\n   */\n  toArray() {\n    let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const te = this.elements;\n    array[offset] = te[0];\n    array[offset + 1] = te[1];\n    array[offset + 2] = te[2];\n    array[offset + 3] = te[3];\n    array[offset + 4] = te[4];\n    array[offset + 5] = te[5];\n    array[offset + 6] = te[6];\n    array[offset + 7] = te[7];\n    array[offset + 8] = te[8];\n    return array;\n  }\n\n  /**\n   * Returns a matrix with copied values from this instance.\n   *\n   * @return {Matrix3} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().fromArray(this.elements);\n  }\n}\nconst _m3 = /*@__PURE__*/new Matrix3();\nfunction arrayNeedsUint32(array) {\n  // assumes larger values usually on last\n\n  for (let i = array.length - 1; i >= 0; --i) {\n    if (array[i] >= 65535) return true; // account for PRIMITIVE_RESTART_FIXED_INDEX, #24565\n  }\n  return false;\n}\nconst TYPED_ARRAYS = {\n  Int8Array: Int8Array,\n  Uint8Array: Uint8Array,\n  Uint8ClampedArray: Uint8ClampedArray,\n  Int16Array: Int16Array,\n  Uint16Array: Uint16Array,\n  Int32Array: Int32Array,\n  Uint32Array: Uint32Array,\n  Float32Array: Float32Array,\n  Float64Array: Float64Array\n};\nfunction getTypedArray(type, buffer) {\n  return new TYPED_ARRAYS[type](buffer);\n}\nfunction createElementNS(name) {\n  return document.createElementNS('http://www.w3.org/1999/xhtml', name);\n}\nfunction createCanvasElement() {\n  const canvas = createElementNS('canvas');\n  canvas.style.display = 'block';\n  return canvas;\n}\nconst _cache = {};\nfunction warnOnce(message) {\n  if (message in _cache) return;\n  _cache[message] = true;\n  console.warn(message);\n}\nfunction probeAsync(gl, sync, interval) {\n  return new Promise(function (resolve, reject) {\n    function probe() {\n      switch (gl.clientWaitSync(sync, gl.SYNC_FLUSH_COMMANDS_BIT, 0)) {\n        case gl.WAIT_FAILED:\n          reject();\n          break;\n        case gl.TIMEOUT_EXPIRED:\n          setTimeout(probe, interval);\n          break;\n        default:\n          resolve();\n      }\n    }\n    setTimeout(probe, interval);\n  });\n}\nfunction toNormalizedProjectionMatrix(projectionMatrix) {\n  const m = projectionMatrix.elements;\n\n  // Convert [-1, 1] to [0, 1] projection matrix\n  m[2] = 0.5 * m[2] + 0.5 * m[3];\n  m[6] = 0.5 * m[6] + 0.5 * m[7];\n  m[10] = 0.5 * m[10] + 0.5 * m[11];\n  m[14] = 0.5 * m[14] + 0.5 * m[15];\n}\nfunction toReversedProjectionMatrix(projectionMatrix) {\n  const m = projectionMatrix.elements;\n  const isPerspectiveMatrix = m[11] === -1;\n\n  // Reverse [0, 1] projection matrix\n  if (isPerspectiveMatrix) {\n    m[10] = -m[10] - 1;\n    m[14] = -m[14];\n  } else {\n    m[10] = -m[10];\n    m[14] = -m[14] + 1;\n  }\n}\nconst LINEAR_REC709_TO_XYZ = /*@__PURE__*/new Matrix3().set(0.4123908, 0.3575843, 0.1804808, 0.2126390, 0.7151687, 0.0721923, 0.0193308, 0.1191948, 0.9505322);\nconst XYZ_TO_LINEAR_REC709 = /*@__PURE__*/new Matrix3().set(3.2409699, -1.5373832, -0.4986108, -0.9692436, 1.8759675, 0.0415551, 0.0556301, -0.203977, 1.0569715);\nfunction createColorManagement() {\n  const ColorManagement = {\n    enabled: true,\n    workingColorSpace: LinearSRGBColorSpace,\n    /**\n     * Implementations of supported color spaces.\n     *\n     * Required:\n     *\t- primaries: chromaticity coordinates [ rx ry gx gy bx by ]\n     *\t- whitePoint: reference white [ x y ]\n     *\t- transfer: transfer function (pre-defined)\n     *\t- toXYZ: Matrix3 RGB to XYZ transform\n     *\t- fromXYZ: Matrix3 XYZ to RGB transform\n     *\t- luminanceCoefficients: RGB luminance coefficients\n     *\n     * Optional:\n     *  - outputColorSpaceConfig: { drawingBufferColorSpace: ColorSpace }\n     *  - workingColorSpaceConfig: { unpackColorSpace: ColorSpace }\n     *\n     * Reference:\n     * - https://www.russellcottrell.com/photo/matrixCalculator.htm\n     */\n    spaces: {},\n    convert: function (color, sourceColorSpace, targetColorSpace) {\n      if (this.enabled === false || sourceColorSpace === targetColorSpace || !sourceColorSpace || !targetColorSpace) {\n        return color;\n      }\n      if (this.spaces[sourceColorSpace].transfer === SRGBTransfer) {\n        color.r = SRGBToLinear(color.r);\n        color.g = SRGBToLinear(color.g);\n        color.b = SRGBToLinear(color.b);\n      }\n      if (this.spaces[sourceColorSpace].primaries !== this.spaces[targetColorSpace].primaries) {\n        color.applyMatrix3(this.spaces[sourceColorSpace].toXYZ);\n        color.applyMatrix3(this.spaces[targetColorSpace].fromXYZ);\n      }\n      if (this.spaces[targetColorSpace].transfer === SRGBTransfer) {\n        color.r = LinearToSRGB(color.r);\n        color.g = LinearToSRGB(color.g);\n        color.b = LinearToSRGB(color.b);\n      }\n      return color;\n    },\n    fromWorkingColorSpace: function (color, targetColorSpace) {\n      return this.convert(color, this.workingColorSpace, targetColorSpace);\n    },\n    toWorkingColorSpace: function (color, sourceColorSpace) {\n      return this.convert(color, sourceColorSpace, this.workingColorSpace);\n    },\n    getPrimaries: function (colorSpace) {\n      return this.spaces[colorSpace].primaries;\n    },\n    getTransfer: function (colorSpace) {\n      if (colorSpace === NoColorSpace) return LinearTransfer;\n      return this.spaces[colorSpace].transfer;\n    },\n    getLuminanceCoefficients: function (target) {\n      let colorSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.workingColorSpace;\n      return target.fromArray(this.spaces[colorSpace].luminanceCoefficients);\n    },\n    define: function (colorSpaces) {\n      Object.assign(this.spaces, colorSpaces);\n    },\n    // Internal APIs\n\n    _getMatrix: function (targetMatrix, sourceColorSpace, targetColorSpace) {\n      return targetMatrix.copy(this.spaces[sourceColorSpace].toXYZ).multiply(this.spaces[targetColorSpace].fromXYZ);\n    },\n    _getDrawingBufferColorSpace: function (colorSpace) {\n      return this.spaces[colorSpace].outputColorSpaceConfig.drawingBufferColorSpace;\n    },\n    _getUnpackColorSpace: function () {\n      let colorSpace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.workingColorSpace;\n      return this.spaces[colorSpace].workingColorSpaceConfig.unpackColorSpace;\n    }\n  };\n\n  /******************************************************************************\n   * sRGB definitions\n   */\n\n  const REC709_PRIMARIES = [0.640, 0.330, 0.300, 0.600, 0.150, 0.060];\n  const REC709_LUMINANCE_COEFFICIENTS = [0.2126, 0.7152, 0.0722];\n  const D65 = [0.3127, 0.3290];\n  ColorManagement.define({\n    [LinearSRGBColorSpace]: {\n      primaries: REC709_PRIMARIES,\n      whitePoint: D65,\n      transfer: LinearTransfer,\n      toXYZ: LINEAR_REC709_TO_XYZ,\n      fromXYZ: XYZ_TO_LINEAR_REC709,\n      luminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,\n      workingColorSpaceConfig: {\n        unpackColorSpace: SRGBColorSpace\n      },\n      outputColorSpaceConfig: {\n        drawingBufferColorSpace: SRGBColorSpace\n      }\n    },\n    [SRGBColorSpace]: {\n      primaries: REC709_PRIMARIES,\n      whitePoint: D65,\n      transfer: SRGBTransfer,\n      toXYZ: LINEAR_REC709_TO_XYZ,\n      fromXYZ: XYZ_TO_LINEAR_REC709,\n      luminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,\n      outputColorSpaceConfig: {\n        drawingBufferColorSpace: SRGBColorSpace\n      }\n    }\n  });\n  return ColorManagement;\n}\nconst ColorManagement = /*@__PURE__*/createColorManagement();\nfunction SRGBToLinear(c) {\n  return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\n}\nfunction LinearToSRGB(c) {\n  return c < 0.0031308 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;\n}\nlet _canvas;\n\n/**\n * A class containing utility functions for images.\n *\n * @hideconstructor\n */\nclass ImageUtils {\n  /**\n   * Returns a data URI containing a representation of the given image.\n   *\n   * @param {(HTMLImageElement|HTMLCanvasElement)} image - The image object.\n   * @param {string} [type='image/png'] - Indicates the image format.\n   * @return {string} The data URI.\n   */\n  static getDataURL(image) {\n    let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'image/png';\n    if (/^data:/i.test(image.src)) {\n      return image.src;\n    }\n    if (typeof HTMLCanvasElement === 'undefined') {\n      return image.src;\n    }\n    let canvas;\n    if (image instanceof HTMLCanvasElement) {\n      canvas = image;\n    } else {\n      if (_canvas === undefined) _canvas = createElementNS('canvas');\n      _canvas.width = image.width;\n      _canvas.height = image.height;\n      const context = _canvas.getContext('2d');\n      if (image instanceof ImageData) {\n        context.putImageData(image, 0, 0);\n      } else {\n        context.drawImage(image, 0, 0, image.width, image.height);\n      }\n      canvas = _canvas;\n    }\n    return canvas.toDataURL(type);\n  }\n\n  /**\n   * Converts the given sRGB image data to linear color space.\n   *\n   * @param {(HTMLImageElement|HTMLCanvasElement|ImageBitmap|Object)} image - The image object.\n   * @return {HTMLCanvasElement|Object} The converted image.\n   */\n  static sRGBToLinear(image) {\n    if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n      const canvas = createElementNS('canvas');\n      canvas.width = image.width;\n      canvas.height = image.height;\n      const context = canvas.getContext('2d');\n      context.drawImage(image, 0, 0, image.width, image.height);\n      const imageData = context.getImageData(0, 0, image.width, image.height);\n      const data = imageData.data;\n      for (let i = 0; i < data.length; i++) {\n        data[i] = SRGBToLinear(data[i] / 255) * 255;\n      }\n      context.putImageData(imageData, 0, 0);\n      return canvas;\n    } else if (image.data) {\n      const data = image.data.slice(0);\n      for (let i = 0; i < data.length; i++) {\n        if (data instanceof Uint8Array || data instanceof Uint8ClampedArray) {\n          data[i] = Math.floor(SRGBToLinear(data[i] / 255) * 255);\n        } else {\n          // assuming float\n\n          data[i] = SRGBToLinear(data[i]);\n        }\n      }\n      return {\n        data: data,\n        width: image.width,\n        height: image.height\n      };\n    } else {\n      console.warn('THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.');\n      return image;\n    }\n  }\n}\nlet _sourceId = 0;\n\n/**\n * Represents the data source of a texture.\n *\n * The main purpose of this class is to decouple the data definition from the texture\n * definition so the same data can be used with multiple texture instances.\n */\nclass Source {\n  /**\n   * Constructs a new video texture.\n   *\n   * @param {any} [data=null] - The data definition of a texture.\n   */\n  constructor() {\n    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isSource = true;\n\n    /**\n     * The ID of the source.\n     *\n     * @name Source#id\n     * @type {number}\n     * @readonly\n     */\n    Object.defineProperty(this, 'id', {\n      value: _sourceId++\n    });\n\n    /**\n     * The UUID of the source.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.uuid = generateUUID();\n\n    /**\n     * The data definition of a texture.\n     *\n     * @type {any}\n     */\n    this.data = data;\n\n    /**\n     * This property is only relevant when {@link Source#needsUpdate} is set to `true` and\n     * provides more control on how texture data should be processed. When `dataReady` is set\n     * to `false`, the engine performs the memory allocation (if necessary) but does not transfer\n     * the data into the GPU memory.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.dataReady = true;\n\n    /**\n     * This starts at `0` and counts how many times {@link Source#needsUpdate} is set to `true`.\n     *\n     * @type {number}\n     * @readonly\n     * @default 0\n     */\n    this.version = 0;\n  }\n\n  /**\n   * When the property is set to `true`, the engine allocates the memory\n   * for the texture (if necessary) and triggers the actual texture upload\n   * to the GPU next time the source is used.\n   *\n   * @type {boolean}\n   * @default false\n   * @param {boolean} value\n   */\n  set needsUpdate(value) {\n    if (value === true) this.version++;\n  }\n\n  /**\n   * Serializes the source into JSON.\n   *\n   * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n   * @return {Object} A JSON object representing the serialized source.\n   * @see {@link ObjectLoader#parse}\n   */\n  toJSON(meta) {\n    const isRootObject = meta === undefined || typeof meta === 'string';\n    if (!isRootObject && meta.images[this.uuid] !== undefined) {\n      return meta.images[this.uuid];\n    }\n    const output = {\n      uuid: this.uuid,\n      url: ''\n    };\n    const data = this.data;\n    if (data !== null) {\n      let url;\n      if (Array.isArray(data)) {\n        // cube texture\n\n        url = [];\n        for (let i = 0, l = data.length; i < l; i++) {\n          if (data[i].isDataTexture) {\n            url.push(serializeImage(data[i].image));\n          } else {\n            url.push(serializeImage(data[i]));\n          }\n        }\n      } else {\n        // texture\n\n        url = serializeImage(data);\n      }\n      output.url = url;\n    }\n    if (!isRootObject) {\n      meta.images[this.uuid] = output;\n    }\n    return output;\n  }\n}\nfunction serializeImage(image) {\n  if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n    // default images\n\n    return ImageUtils.getDataURL(image);\n  } else {\n    if (image.data) {\n      // images of DataTexture\n\n      return {\n        data: Array.from(image.data),\n        width: image.width,\n        height: image.height,\n        type: image.data.constructor.name\n      };\n    } else {\n      console.warn('THREE.Texture: Unable to serialize Texture.');\n      return {};\n    }\n  }\n}\nlet _textureId = 0;\n\n/**\n * Base class for all textures.\n *\n * Note: After the initial use of a texture, its dimensions, format, and type\n * cannot be changed. Instead, call {@link Texture#dispose} on the texture and instantiate a new one.\n *\n * @augments EventDispatcher\n */\nclass Texture extends EventDispatcher {\n  /**\n   * Constructs a new texture.\n   *\n   * @param {?Object} [image=Texture.DEFAULT_IMAGE] - The image holding the texture data.\n   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n   * @param {number} [magFilter=LinearFilter] - The mag filter value.\n   * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.\n   * @param {number} [format=RGBAFormat] - The texture format.\n   * @param {number} [type=UnsignedByteType] - The texture type.\n   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n   * @param {string} [colorSpace=NoColorSpace] - The color space.\n   */\n  constructor() {\n    let image = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Texture.DEFAULT_IMAGE;\n    let mapping = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Texture.DEFAULT_MAPPING;\n    let wrapS = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ClampToEdgeWrapping;\n    let wrapT = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ClampToEdgeWrapping;\n    let magFilter = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : LinearFilter;\n    let minFilter = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : LinearMipmapLinearFilter;\n    let format = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : RGBAFormat;\n    let type = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : UnsignedByteType;\n    let anisotropy = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : Texture.DEFAULT_ANISOTROPY;\n    let colorSpace = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : NoColorSpace;\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isTexture = true;\n\n    /**\n     * The ID of the texture.\n     *\n     * @name Texture#id\n     * @type {number}\n     * @readonly\n     */\n    Object.defineProperty(this, 'id', {\n      value: _textureId++\n    });\n\n    /**\n     * The UUID of the material.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.uuid = generateUUID();\n\n    /**\n     * The name of the material.\n     *\n     * @type {string}\n     */\n    this.name = '';\n\n    /**\n     * The data definition of a texture. A reference to the data source can be\n     * shared across textures. This is often useful in context of spritesheets\n     * where multiple textures render the same data but with different texture\n     * transformations.\n     *\n     * @type {Source}\n     */\n    this.source = new Source(image);\n\n    /**\n     * An array holding user-defined mipmaps.\n     *\n     * @type {Array<Object>}\n     */\n    this.mipmaps = [];\n\n    /**\n     * How the texture is applied to the object. The value `UVMapping`\n     * is the default, where texture or uv coordinates are used to apply the map.\n     *\n     * @type {(UVMapping|CubeReflectionMapping|CubeRefractionMapping|EquirectangularReflectionMapping|EquirectangularRefractionMapping|CubeUVReflectionMapping)}\n     * @default UVMapping\n    */\n    this.mapping = mapping;\n\n    /**\n     * Lets you select the uv attribute to map the texture to. `0` for `uv`,\n     * `1` for `uv1`, `2` for `uv2` and `3` for `uv3`.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.channel = 0;\n\n    /**\n     * This defines how the texture is wrapped horizontally and corresponds to\n     * *U* in UV mapping.\n     *\n     * @type {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)}\n     * @default ClampToEdgeWrapping\n     */\n    this.wrapS = wrapS;\n\n    /**\n     * This defines how the texture is wrapped horizontally and corresponds to\n     * *V* in UV mapping.\n     *\n     * @type {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)}\n     * @default ClampToEdgeWrapping\n     */\n    this.wrapT = wrapT;\n\n    /**\n     * How the texture is sampled when a texel covers more than one pixel.\n     *\n     * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n     * @default LinearFilter\n     */\n    this.magFilter = magFilter;\n\n    /**\n     * How the texture is sampled when a texel covers less than one pixel.\n     *\n     * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n     * @default LinearMipmapLinearFilter\n     */\n    this.minFilter = minFilter;\n\n    /**\n     * The number of samples taken along the axis through the pixel that has the\n     * highest density of texels. By default, this value is `1`. A higher value\n     * gives a less blurry result than a basic mipmap, at the cost of more\n     * texture samples being used.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.anisotropy = anisotropy;\n\n    /**\n     * The format of the texture.\n     *\n     * @type {number}\n     * @default RGBAFormat\n     */\n    this.format = format;\n\n    /**\n     * The default internal format is derived from {@link Texture#format} and {@link Texture#type} and\n     * defines how the texture data is going to be stored on the GPU.\n     *\n     * This property allows to overwrite the default format.\n     *\n     * @type {?string}\n     * @default null\n     */\n    this.internalFormat = null;\n\n    /**\n     * The data type of the texture.\n     *\n     * @type {number}\n     * @default UnsignedByteType\n     */\n    this.type = type;\n\n    /**\n     * How much a single repetition of the texture is offset from the beginning,\n     * in each direction U and V. Typical range is `0.0` to `1.0`.\n     *\n     * @type {Vector2}\n     * @default (0,0)\n     */\n    this.offset = new Vector2(0, 0);\n\n    /**\n     * How many times the texture is repeated across the surface, in each\n     * direction U and V. If repeat is set greater than `1` in either direction,\n     * the corresponding wrap parameter should also be set to `RepeatWrapping`\n     * or `MirroredRepeatWrapping` to achieve the desired tiling effect.\n     *\n     * @type {Vector2}\n     * @default (1,1)\n     */\n    this.repeat = new Vector2(1, 1);\n\n    /**\n     * The point around which rotation occurs. A value of `(0.5, 0.5)` corresponds\n     * to the center of the texture. Default is `(0, 0)`, the lower left.\n     *\n     * @type {Vector2}\n     * @default (0,0)\n     */\n    this.center = new Vector2(0, 0);\n\n    /**\n     * How much the texture is rotated around the center point, in radians.\n     * Positive values are counter-clockwise.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.rotation = 0;\n\n    /**\n     * Whether to update the texture's uv-transformation {@link Texture#matrix}\n     * from the properties {@link Texture#offset}, {@link Texture#repeat},\n     * {@link Texture#rotation}, and {@link Texture#center}.\n     *\n     * Set this to `false` if you are specifying the uv-transform matrix directly.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.matrixAutoUpdate = true;\n\n    /**\n     * The uv-transformation matrix of the texture.\n     *\n     * @type {Matrix3}\n     */\n    this.matrix = new Matrix3();\n\n    /**\n     * Whether to generate mipmaps (if possible) for a texture.\n     *\n     * Set this to `false` if you are creating mipmaps manually.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.generateMipmaps = true;\n\n    /**\n     * If set to `true`, the alpha channel, if present, is multiplied into the\n     * color channels when the texture is uploaded to the GPU.\n     *\n     * Note that this property has no effect when using `ImageBitmap`. You need to\n     * configure premultiply alpha on bitmap creation instead.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.premultiplyAlpha = false;\n\n    /**\n     * If set to `true`, the texture is flipped along the vertical axis when\n     * uploaded to the GPU.\n     *\n     * Note that this property has no effect when using `ImageBitmap`. You need to\n     * configure the flip on bitmap creation instead.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.flipY = true;\n\n    /**\n     * Specifies the alignment requirements for the start of each pixel row in memory.\n     * The allowable values are `1` (byte-alignment), `2` (rows aligned to even-numbered bytes),\n     * `4` (word-alignment), and `8` (rows start on double-word boundaries).\n     *\n     * @type {number}\n     * @default 4\n     */\n    this.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n    /**\n     * Textures containing color data should be annotated with `SRGBColorSpace` or `LinearSRGBColorSpace`.\n     *\n     * @type {string}\n     * @default NoColorSpace\n     */\n    this.colorSpace = colorSpace;\n\n    /**\n     * An object that can be used to store custom data about the texture. It\n     * should not hold references to functions as these will not be cloned.\n     *\n     * @type {Object}\n     */\n    this.userData = {};\n\n    /**\n     * This starts at `0` and counts how many times {@link Texture#needsUpdate} is set to `true`.\n     *\n     * @type {number}\n     * @readonly\n     * @default 0\n     */\n    this.version = 0;\n\n    /**\n     * A callback function, called when the texture is updated (e.g., when\n     * {@link Texture#needsUpdate} has been set to true and then the texture is used).\n     *\n     * @type {?Function}\n     * @default null\n     */\n    this.onUpdate = null;\n\n    /**\n     * An optional back reference to the textures render target.\n     *\n     * @type {?(RenderTarget|WebGLRenderTarget)}\n     * @default null\n     */\n    this.renderTarget = null;\n\n    /**\n     * Indicates whether a texture belongs to a render target or not.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default false\n     */\n    this.isRenderTargetTexture = false;\n\n    /**\n     * Indicates if a texture should be handled like a texture array.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default false\n     */\n    this.isTextureArray = false;\n\n    /**\n     * Indicates whether this texture should be processed by `PMREMGenerator` or not\n     * (only relevant for render target textures).\n     *\n     * @type {number}\n     * @readonly\n     * @default 0\n     */\n    this.pmremVersion = 0;\n  }\n\n  /**\n   * The image object holding the texture data.\n   *\n   * @type {?Object}\n   */\n  get image() {\n    return this.source.data;\n  }\n  set image(value) {\n    if (value === void 0) {\n      value = null;\n    }\n    this.source.data = value;\n  }\n\n  /**\n   * Updates the texture transformation matrix from the from the properties {@link Texture#offset},\n   * {@link Texture#repeat}, {@link Texture#rotation}, and {@link Texture#center}.\n   */\n  updateMatrix() {\n    this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);\n  }\n\n  /**\n   * Returns a new texture with copied values from this instance.\n   *\n   * @return {Texture} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  /**\n   * Copies the values of the given texture to this instance.\n   *\n   * @param {Texture} source - The texture to copy.\n   * @return {Texture} A reference to this instance.\n   */\n  copy(source) {\n    this.name = source.name;\n    this.source = source.source;\n    this.mipmaps = source.mipmaps.slice(0);\n    this.mapping = source.mapping;\n    this.channel = source.channel;\n    this.wrapS = source.wrapS;\n    this.wrapT = source.wrapT;\n    this.magFilter = source.magFilter;\n    this.minFilter = source.minFilter;\n    this.anisotropy = source.anisotropy;\n    this.format = source.format;\n    this.internalFormat = source.internalFormat;\n    this.type = source.type;\n    this.offset.copy(source.offset);\n    this.repeat.copy(source.repeat);\n    this.center.copy(source.center);\n    this.rotation = source.rotation;\n    this.matrixAutoUpdate = source.matrixAutoUpdate;\n    this.matrix.copy(source.matrix);\n    this.generateMipmaps = source.generateMipmaps;\n    this.premultiplyAlpha = source.premultiplyAlpha;\n    this.flipY = source.flipY;\n    this.unpackAlignment = source.unpackAlignment;\n    this.colorSpace = source.colorSpace;\n    this.renderTarget = source.renderTarget;\n    this.isRenderTargetTexture = source.isRenderTargetTexture;\n    this.isTextureArray = source.isTextureArray;\n    this.userData = JSON.parse(JSON.stringify(source.userData));\n    this.needsUpdate = true;\n    return this;\n  }\n\n  /**\n   * Serializes the texture into JSON.\n   *\n   * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n   * @return {Object} A JSON object representing the serialized texture.\n   * @see {@link ObjectLoader#parse}\n   */\n  toJSON(meta) {\n    const isRootObject = meta === undefined || typeof meta === 'string';\n    if (!isRootObject && meta.textures[this.uuid] !== undefined) {\n      return meta.textures[this.uuid];\n    }\n    const output = {\n      metadata: {\n        version: 4.6,\n        type: 'Texture',\n        generator: 'Texture.toJSON'\n      },\n      uuid: this.uuid,\n      name: this.name,\n      image: this.source.toJSON(meta).uuid,\n      mapping: this.mapping,\n      channel: this.channel,\n      repeat: [this.repeat.x, this.repeat.y],\n      offset: [this.offset.x, this.offset.y],\n      center: [this.center.x, this.center.y],\n      rotation: this.rotation,\n      wrap: [this.wrapS, this.wrapT],\n      format: this.format,\n      internalFormat: this.internalFormat,\n      type: this.type,\n      colorSpace: this.colorSpace,\n      minFilter: this.minFilter,\n      magFilter: this.magFilter,\n      anisotropy: this.anisotropy,\n      flipY: this.flipY,\n      generateMipmaps: this.generateMipmaps,\n      premultiplyAlpha: this.premultiplyAlpha,\n      unpackAlignment: this.unpackAlignment\n    };\n    if (Object.keys(this.userData).length > 0) output.userData = this.userData;\n    if (!isRootObject) {\n      meta.textures[this.uuid] = output;\n    }\n    return output;\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   *\n   * @fires Texture#dispose\n   */\n  dispose() {\n    /**\n     * Fires when the texture has been disposed of.\n     *\n     * @event Texture#dispose\n     * @type {Object}\n     */\n    this.dispatchEvent({\n      type: 'dispose'\n    });\n  }\n\n  /**\n   * Transforms the given uv vector with the textures uv transformation matrix.\n   *\n   * @param {Vector2} uv - The uv vector.\n   * @return {Vector2} The transformed uv vector.\n   */\n  transformUv(uv) {\n    if (this.mapping !== UVMapping) return uv;\n    uv.applyMatrix3(this.matrix);\n    if (uv.x < 0 || uv.x > 1) {\n      switch (this.wrapS) {\n        case RepeatWrapping:\n          uv.x = uv.x - Math.floor(uv.x);\n          break;\n        case ClampToEdgeWrapping:\n          uv.x = uv.x < 0 ? 0 : 1;\n          break;\n        case MirroredRepeatWrapping:\n          if (Math.abs(Math.floor(uv.x) % 2) === 1) {\n            uv.x = Math.ceil(uv.x) - uv.x;\n          } else {\n            uv.x = uv.x - Math.floor(uv.x);\n          }\n          break;\n      }\n    }\n    if (uv.y < 0 || uv.y > 1) {\n      switch (this.wrapT) {\n        case RepeatWrapping:\n          uv.y = uv.y - Math.floor(uv.y);\n          break;\n        case ClampToEdgeWrapping:\n          uv.y = uv.y < 0 ? 0 : 1;\n          break;\n        case MirroredRepeatWrapping:\n          if (Math.abs(Math.floor(uv.y) % 2) === 1) {\n            uv.y = Math.ceil(uv.y) - uv.y;\n          } else {\n            uv.y = uv.y - Math.floor(uv.y);\n          }\n          break;\n      }\n    }\n    if (this.flipY) {\n      uv.y = 1 - uv.y;\n    }\n    return uv;\n  }\n\n  /**\n   * Setting this property to `true` indicates the engine the texture\n   * must be updated in the next render. This triggers a texture upload\n   * to the GPU and ensures correct texture parameter configuration.\n   *\n   * @type {boolean}\n   * @default false\n   * @param {boolean} value\n   */\n  set needsUpdate(value) {\n    if (value === true) {\n      this.version++;\n      this.source.needsUpdate = true;\n    }\n  }\n\n  /**\n   * Setting this property to `true` indicates the engine the PMREM\n   * must be regenerated.\n   *\n   * @type {boolean}\n   * @default false\n   * @param {boolean} value\n   */\n  set needsPMREMUpdate(value) {\n    if (value === true) {\n      this.pmremVersion++;\n    }\n  }\n}\n\n/**\n * The default image for all textures.\n *\n * @static\n * @type {?Image}\n * @default null\n */\nTexture.DEFAULT_IMAGE = null;\n\n/**\n * The default mapping for all textures.\n *\n * @static\n * @type {number}\n * @default UVMapping\n */\nTexture.DEFAULT_MAPPING = UVMapping;\n\n/**\n * The default anisotropy value for all textures.\n *\n * @static\n * @type {number}\n * @default 1\n */\nTexture.DEFAULT_ANISOTROPY = 1;\n\n/**\n * Class representing a 4D vector. A 4D vector is an ordered quadruplet of numbers\n * (labeled x, y, z and w), which can be used to represent a number of things, such as:\n *\n * - A point in 4D space.\n * - A direction and length in 4D space. In three.js the length will\n * always be the Euclidean distance(straight-line distance) from `(0, 0, 0, 0)` to `(x, y, z, w)`\n * and the direction is also measured from `(0, 0, 0, 0)` towards `(x, y, z, w)`.\n * - Any arbitrary ordered quadruplet of numbers.\n *\n * There are other things a 4D vector can be used to represent, however these\n * are the most common uses in *three.js*.\n *\n * Iterating through a vector instance will yield its components `(x, y, z, w)` in\n * the corresponding order.\n * ```js\n * const a = new THREE.Vector4( 0, 1, 0, 0 );\n *\n * //no arguments; will be initialised to (0, 0, 0, 1)\n * const b = new THREE.Vector4( );\n *\n * const d = a.dot( b );\n * ```\n */\nclass Vector4 {\n  /**\n   * Constructs a new 4D vector.\n   *\n   * @param {number} [x=0] - The x value of this vector.\n   * @param {number} [y=0] - The y value of this vector.\n   * @param {number} [z=0] - The z value of this vector.\n   * @param {number} [w=1] - The w value of this vector.\n   */\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    Vector4.prototype.isVector4 = true;\n\n    /**\n     * The x value of this vector.\n     *\n     * @type {number}\n     */\n    this.x = x;\n\n    /**\n     * The y value of this vector.\n     *\n     * @type {number}\n     */\n    this.y = y;\n\n    /**\n     * The z value of this vector.\n     *\n     * @type {number}\n     */\n    this.z = z;\n\n    /**\n     * The w value of this vector.\n     *\n     * @type {number}\n     */\n    this.w = w;\n  }\n\n  /**\n   * Alias for {@link Vector4#z}.\n   *\n   * @type {number}\n   */\n  get width() {\n    return this.z;\n  }\n  set width(value) {\n    this.z = value;\n  }\n\n  /**\n   * Alias for {@link Vector4#w}.\n   *\n   * @type {number}\n   */\n  get height() {\n    return this.w;\n  }\n  set height(value) {\n    this.w = value;\n  }\n\n  /**\n   * Sets the vector components.\n   *\n   * @param {number} x - The value of the x component.\n   * @param {number} y - The value of the y component.\n   * @param {number} z - The value of the z component.\n   * @param {number} w - The value of the w component.\n   * @return {Vector4} A reference to this vector.\n   */\n  set(x, y, z, w) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n    return this;\n  }\n\n  /**\n   * Sets the vector components to the same value.\n   *\n   * @param {number} scalar - The value to set for all vector components.\n   * @return {Vector4} A reference to this vector.\n   */\n  setScalar(scalar) {\n    this.x = scalar;\n    this.y = scalar;\n    this.z = scalar;\n    this.w = scalar;\n    return this;\n  }\n\n  /**\n   * Sets the vector's x component to the given value\n   *\n   * @param {number} x - The value to set.\n   * @return {Vector4} A reference to this vector.\n   */\n  setX(x) {\n    this.x = x;\n    return this;\n  }\n\n  /**\n   * Sets the vector's y component to the given value\n   *\n   * @param {number} y - The value to set.\n   * @return {Vector4} A reference to this vector.\n   */\n  setY(y) {\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * Sets the vector's z component to the given value\n   *\n   * @param {number} z - The value to set.\n   * @return {Vector4} A reference to this vector.\n   */\n  setZ(z) {\n    this.z = z;\n    return this;\n  }\n\n  /**\n   * Sets the vector's w component to the given value\n   *\n   * @param {number} w - The value to set.\n   * @return {Vector4} A reference to this vector.\n   */\n  setW(w) {\n    this.w = w;\n    return this;\n  }\n\n  /**\n   * Allows to set a vector component with an index.\n   *\n   * @param {number} index - The component index. `0` equals to x, `1` equals to y,\n   * `2` equals to z, `3` equals to w.\n   * @param {number} value - The value to set.\n   * @return {Vector4} A reference to this vector.\n   */\n  setComponent(index, value) {\n    switch (index) {\n      case 0:\n        this.x = value;\n        break;\n      case 1:\n        this.y = value;\n        break;\n      case 2:\n        this.z = value;\n        break;\n      case 3:\n        this.w = value;\n        break;\n      default:\n        throw new Error('index is out of range: ' + index);\n    }\n    return this;\n  }\n\n  /**\n   * Returns the value of the vector component which matches the given index.\n   *\n   * @param {number} index - The component index. `0` equals to x, `1` equals to y,\n   * `2` equals to z, `3` equals to w.\n   * @return {number} A vector component value.\n   */\n  getComponent(index) {\n    switch (index) {\n      case 0:\n        return this.x;\n      case 1:\n        return this.y;\n      case 2:\n        return this.z;\n      case 3:\n        return this.w;\n      default:\n        throw new Error('index is out of range: ' + index);\n    }\n  }\n\n  /**\n   * Returns a new vector with copied values from this instance.\n   *\n   * @return {Vector4} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor(this.x, this.y, this.z, this.w);\n  }\n\n  /**\n   * Copies the values of the given vector to this instance.\n   *\n   * @param {Vector3|Vector4} v - The vector to copy.\n   * @return {Vector4} A reference to this vector.\n   */\n  copy(v) {\n    this.x = v.x;\n    this.y = v.y;\n    this.z = v.z;\n    this.w = v.w !== undefined ? v.w : 1;\n    return this;\n  }\n\n  /**\n   * Adds the given vector to this instance.\n   *\n   * @param {Vector4} v - The vector to add.\n   * @return {Vector4} A reference to this vector.\n   */\n  add(v) {\n    this.x += v.x;\n    this.y += v.y;\n    this.z += v.z;\n    this.w += v.w;\n    return this;\n  }\n\n  /**\n   * Adds the given scalar value to all components of this instance.\n   *\n   * @param {number} s - The scalar to add.\n   * @return {Vector4} A reference to this vector.\n   */\n  addScalar(s) {\n    this.x += s;\n    this.y += s;\n    this.z += s;\n    this.w += s;\n    return this;\n  }\n\n  /**\n   * Adds the given vectors and stores the result in this instance.\n   *\n   * @param {Vector4} a - The first vector.\n   * @param {Vector4} b - The second vector.\n   * @return {Vector4} A reference to this vector.\n   */\n  addVectors(a, b) {\n    this.x = a.x + b.x;\n    this.y = a.y + b.y;\n    this.z = a.z + b.z;\n    this.w = a.w + b.w;\n    return this;\n  }\n\n  /**\n   * Adds the given vector scaled by the given factor to this instance.\n   *\n   * @param {Vector4} v - The vector.\n   * @param {number} s - The factor that scales `v`.\n   * @return {Vector4} A reference to this vector.\n   */\n  addScaledVector(v, s) {\n    this.x += v.x * s;\n    this.y += v.y * s;\n    this.z += v.z * s;\n    this.w += v.w * s;\n    return this;\n  }\n\n  /**\n   * Subtracts the given vector from this instance.\n   *\n   * @param {Vector4} v - The vector to subtract.\n   * @return {Vector4} A reference to this vector.\n   */\n  sub(v) {\n    this.x -= v.x;\n    this.y -= v.y;\n    this.z -= v.z;\n    this.w -= v.w;\n    return this;\n  }\n\n  /**\n   * Subtracts the given scalar value from all components of this instance.\n   *\n   * @param {number} s - The scalar to subtract.\n   * @return {Vector4} A reference to this vector.\n   */\n  subScalar(s) {\n    this.x -= s;\n    this.y -= s;\n    this.z -= s;\n    this.w -= s;\n    return this;\n  }\n\n  /**\n   * Subtracts the given vectors and stores the result in this instance.\n   *\n   * @param {Vector4} a - The first vector.\n   * @param {Vector4} b - The second vector.\n   * @return {Vector4} A reference to this vector.\n   */\n  subVectors(a, b) {\n    this.x = a.x - b.x;\n    this.y = a.y - b.y;\n    this.z = a.z - b.z;\n    this.w = a.w - b.w;\n    return this;\n  }\n\n  /**\n   * Multiplies the given vector with this instance.\n   *\n   * @param {Vector4} v - The vector to multiply.\n   * @return {Vector4} A reference to this vector.\n   */\n  multiply(v) {\n    this.x *= v.x;\n    this.y *= v.y;\n    this.z *= v.z;\n    this.w *= v.w;\n    return this;\n  }\n\n  /**\n   * Multiplies the given scalar value with all components of this instance.\n   *\n   * @param {number} scalar - The scalar to multiply.\n   * @return {Vector4} A reference to this vector.\n   */\n  multiplyScalar(scalar) {\n    this.x *= scalar;\n    this.y *= scalar;\n    this.z *= scalar;\n    this.w *= scalar;\n    return this;\n  }\n\n  /**\n   * Multiplies this vector with the given 4x4 matrix.\n   *\n   * @param {Matrix4} m - The 4x4 matrix.\n   * @return {Vector4} A reference to this vector.\n   */\n  applyMatrix4(m) {\n    const x = this.x,\n      y = this.y,\n      z = this.z,\n      w = this.w;\n    const e = m.elements;\n    this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;\n    this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;\n    this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;\n    this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;\n    return this;\n  }\n\n  /**\n   * Divides this instance by the given vector.\n   *\n   * @param {Vector4} v - The vector to divide.\n   * @return {Vector4} A reference to this vector.\n   */\n  divide(v) {\n    this.x /= v.x;\n    this.y /= v.y;\n    this.z /= v.z;\n    this.w /= v.w;\n    return this;\n  }\n\n  /**\n   * Divides this vector by the given scalar.\n   *\n   * @param {number} scalar - The scalar to divide.\n   * @return {Vector4} A reference to this vector.\n   */\n  divideScalar(scalar) {\n    return this.multiplyScalar(1 / scalar);\n  }\n\n  /**\n   * Sets the x, y and z components of this\n   * vector to the quaternion's axis and w to the angle.\n   *\n   * @param {Quaternion} q - The Quaternion to set.\n   * @return {Vector4} A reference to this vector.\n   */\n  setAxisAngleFromQuaternion(q) {\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n    // q is assumed to be normalized\n\n    this.w = 2 * Math.acos(q.w);\n    const s = Math.sqrt(1 - q.w * q.w);\n    if (s < 0.0001) {\n      this.x = 1;\n      this.y = 0;\n      this.z = 0;\n    } else {\n      this.x = q.x / s;\n      this.y = q.y / s;\n      this.z = q.z / s;\n    }\n    return this;\n  }\n\n  /**\n   * Sets the x, y and z components of this\n   * vector to the axis of rotation and w to the angle.\n   *\n   * @param {Matrix4} m - A 4x4 matrix of which the upper left 3x3 matrix is a pure rotation matrix.\n   * @return {Vector4} A reference to this vector.\n   */\n  setAxisAngleFromRotationMatrix(m) {\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n    let angle, x, y, z; // variables for result\n    const epsilon = 0.01,\n      // margin to allow for rounding errors\n      epsilon2 = 0.1,\n      // margin to distinguish between 0 and 180 degrees\n\n      te = m.elements,\n      m11 = te[0],\n      m12 = te[4],\n      m13 = te[8],\n      m21 = te[1],\n      m22 = te[5],\n      m23 = te[9],\n      m31 = te[2],\n      m32 = te[6],\n      m33 = te[10];\n    if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {\n      // singularity found\n      // first check for identity matrix which must have +1 for all terms\n      // in leading diagonal and zero in other terms\n\n      if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {\n        // this singularity is identity matrix so angle = 0\n\n        this.set(1, 0, 0, 0);\n        return this; // zero angle, arbitrary axis\n      }\n\n      // otherwise this singularity is angle = 180\n\n      angle = Math.PI;\n      const xx = (m11 + 1) / 2;\n      const yy = (m22 + 1) / 2;\n      const zz = (m33 + 1) / 2;\n      const xy = (m12 + m21) / 4;\n      const xz = (m13 + m31) / 4;\n      const yz = (m23 + m32) / 4;\n      if (xx > yy && xx > zz) {\n        // m11 is the largest diagonal term\n\n        if (xx < epsilon) {\n          x = 0;\n          y = 0.707106781;\n          z = 0.707106781;\n        } else {\n          x = Math.sqrt(xx);\n          y = xy / x;\n          z = xz / x;\n        }\n      } else if (yy > zz) {\n        // m22 is the largest diagonal term\n\n        if (yy < epsilon) {\n          x = 0.707106781;\n          y = 0;\n          z = 0.707106781;\n        } else {\n          y = Math.sqrt(yy);\n          x = xy / y;\n          z = yz / y;\n        }\n      } else {\n        // m33 is the largest diagonal term so base result on this\n\n        if (zz < epsilon) {\n          x = 0.707106781;\n          y = 0.707106781;\n          z = 0;\n        } else {\n          z = Math.sqrt(zz);\n          x = xz / z;\n          y = yz / z;\n        }\n      }\n      this.set(x, y, z, angle);\n      return this; // return 180 deg rotation\n    }\n\n    // as we have reached here there are no singularities so we can handle normally\n\n    let s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12)); // used to normalize\n\n    if (Math.abs(s) < 0.001) s = 1;\n\n    // prevent divide by zero, should not happen if matrix is orthogonal and should be\n    // caught by singularity test above, but I've left it in just in case\n\n    this.x = (m32 - m23) / s;\n    this.y = (m13 - m31) / s;\n    this.z = (m21 - m12) / s;\n    this.w = Math.acos((m11 + m22 + m33 - 1) / 2);\n    return this;\n  }\n\n  /**\n   * Sets the vector components to the position elements of the\n   * given transformation matrix.\n   *\n   * @param {Matrix4} m - The 4x4 matrix.\n   * @return {Vector4} A reference to this vector.\n   */\n  setFromMatrixPosition(m) {\n    const e = m.elements;\n    this.x = e[12];\n    this.y = e[13];\n    this.z = e[14];\n    this.w = e[15];\n    return this;\n  }\n\n  /**\n   * If this vector's x, y, z or w value is greater than the given vector's x, y, z or w\n   * value, replace that value with the corresponding min value.\n   *\n   * @param {Vector4} v - The vector.\n   * @return {Vector4} A reference to this vector.\n   */\n  min(v) {\n    this.x = Math.min(this.x, v.x);\n    this.y = Math.min(this.y, v.y);\n    this.z = Math.min(this.z, v.z);\n    this.w = Math.min(this.w, v.w);\n    return this;\n  }\n\n  /**\n   * If this vector's x, y, z or w value is less than the given vector's x, y, z or w\n   * value, replace that value with the corresponding max value.\n   *\n   * @param {Vector4} v - The vector.\n   * @return {Vector4} A reference to this vector.\n   */\n  max(v) {\n    this.x = Math.max(this.x, v.x);\n    this.y = Math.max(this.y, v.y);\n    this.z = Math.max(this.z, v.z);\n    this.w = Math.max(this.w, v.w);\n    return this;\n  }\n\n  /**\n   * If this vector's x, y, z or w value is greater than the max vector's x, y, z or w\n   * value, it is replaced by the corresponding value.\n   * If this vector's x, y, z or w value is less than the min vector's x, y, z or w value,\n   * it is replaced by the corresponding value.\n   *\n   * @param {Vector4} min - The minimum x, y and z values.\n   * @param {Vector4} max - The maximum x, y and z values in the desired range.\n   * @return {Vector4} A reference to this vector.\n   */\n  clamp(min, max) {\n    // assumes min < max, componentwise\n\n    this.x = clamp(this.x, min.x, max.x);\n    this.y = clamp(this.y, min.y, max.y);\n    this.z = clamp(this.z, min.z, max.z);\n    this.w = clamp(this.w, min.w, max.w);\n    return this;\n  }\n\n  /**\n   * If this vector's x, y, z or w values are greater than the max value, they are\n   * replaced by the max value.\n   * If this vector's x, y, z or w values are less than the min value, they are\n   * replaced by the min value.\n   *\n   * @param {number} minVal - The minimum value the components will be clamped to.\n   * @param {number} maxVal - The maximum value the components will be clamped to.\n   * @return {Vector4} A reference to this vector.\n   */\n  clampScalar(minVal, maxVal) {\n    this.x = clamp(this.x, minVal, maxVal);\n    this.y = clamp(this.y, minVal, maxVal);\n    this.z = clamp(this.z, minVal, maxVal);\n    this.w = clamp(this.w, minVal, maxVal);\n    return this;\n  }\n\n  /**\n   * If this vector's length is greater than the max value, it is replaced by\n   * the max value.\n   * If this vector's length is less than the min value, it is replaced by the\n   * min value.\n   *\n   * @param {number} min - The minimum value the vector length will be clamped to.\n   * @param {number} max - The maximum value the vector length will be clamped to.\n   * @return {Vector4} A reference to this vector.\n   */\n  clampLength(min, max) {\n    const length = this.length();\n    return this.divideScalar(length || 1).multiplyScalar(clamp(length, min, max));\n  }\n\n  /**\n   * The components of this vector are rounded down to the nearest integer value.\n   *\n   * @return {Vector4} A reference to this vector.\n   */\n  floor() {\n    this.x = Math.floor(this.x);\n    this.y = Math.floor(this.y);\n    this.z = Math.floor(this.z);\n    this.w = Math.floor(this.w);\n    return this;\n  }\n\n  /**\n   * The components of this vector are rounded up to the nearest integer value.\n   *\n   * @return {Vector4} A reference to this vector.\n   */\n  ceil() {\n    this.x = Math.ceil(this.x);\n    this.y = Math.ceil(this.y);\n    this.z = Math.ceil(this.z);\n    this.w = Math.ceil(this.w);\n    return this;\n  }\n\n  /**\n   * The components of this vector are rounded to the nearest integer value\n   *\n   * @return {Vector4} A reference to this vector.\n   */\n  round() {\n    this.x = Math.round(this.x);\n    this.y = Math.round(this.y);\n    this.z = Math.round(this.z);\n    this.w = Math.round(this.w);\n    return this;\n  }\n\n  /**\n   * The components of this vector are rounded towards zero (up if negative,\n   * down if positive) to an integer value.\n   *\n   * @return {Vector4} A reference to this vector.\n   */\n  roundToZero() {\n    this.x = Math.trunc(this.x);\n    this.y = Math.trunc(this.y);\n    this.z = Math.trunc(this.z);\n    this.w = Math.trunc(this.w);\n    return this;\n  }\n\n  /**\n   * Inverts this vector - i.e. sets x = -x, y = -y, z = -z, w = -w.\n   *\n   * @return {Vector4} A reference to this vector.\n   */\n  negate() {\n    this.x = -this.x;\n    this.y = -this.y;\n    this.z = -this.z;\n    this.w = -this.w;\n    return this;\n  }\n\n  /**\n   * Calculates the dot product of the given vector with this instance.\n   *\n   * @param {Vector4} v - The vector to compute the dot product with.\n   * @return {number} The result of the dot product.\n   */\n  dot(v) {\n    return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n  }\n\n  /**\n   * Computes the square of the Euclidean length (straight-line length) from\n   * (0, 0, 0, 0) to (x, y, z, w). If you are comparing the lengths of vectors, you should\n   * compare the length squared instead as it is slightly more efficient to calculate.\n   *\n   * @return {number} The square length of this vector.\n   */\n  lengthSq() {\n    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n  }\n\n  /**\n   * Computes the  Euclidean length (straight-line length) from (0, 0, 0, 0) to (x, y, z, w).\n   *\n   * @return {number} The length of this vector.\n   */\n  length() {\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n  }\n\n  /**\n   * Computes the Manhattan length of this vector.\n   *\n   * @return {number} The length of this vector.\n   */\n  manhattanLength() {\n    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);\n  }\n\n  /**\n   * Converts this vector to a unit vector - that is, sets it equal to a vector\n   * with the same direction as this one, but with a vector length of `1`.\n   *\n   * @return {Vector4} A reference to this vector.\n   */\n  normalize() {\n    return this.divideScalar(this.length() || 1);\n  }\n\n  /**\n   * Sets this vector to a vector with the same direction as this one, but\n   * with the specified length.\n   *\n   * @param {number} length - The new length of this vector.\n   * @return {Vector4} A reference to this vector.\n   */\n  setLength(length) {\n    return this.normalize().multiplyScalar(length);\n  }\n\n  /**\n   * Linearly interpolates between the given vector and this instance, where\n   * alpha is the percent distance along the line - alpha = 0 will be this\n   * vector, and alpha = 1 will be the given one.\n   *\n   * @param {Vector4} v - The vector to interpolate towards.\n   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n   * @return {Vector4} A reference to this vector.\n   */\n  lerp(v, alpha) {\n    this.x += (v.x - this.x) * alpha;\n    this.y += (v.y - this.y) * alpha;\n    this.z += (v.z - this.z) * alpha;\n    this.w += (v.w - this.w) * alpha;\n    return this;\n  }\n\n  /**\n   * Linearly interpolates between the given vectors, where alpha is the percent\n   * distance along the line - alpha = 0 will be first vector, and alpha = 1 will\n   * be the second one. The result is stored in this instance.\n   *\n   * @param {Vector4} v1 - The first vector.\n   * @param {Vector4} v2 - The second vector.\n   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n   * @return {Vector4} A reference to this vector.\n   */\n  lerpVectors(v1, v2, alpha) {\n    this.x = v1.x + (v2.x - v1.x) * alpha;\n    this.y = v1.y + (v2.y - v1.y) * alpha;\n    this.z = v1.z + (v2.z - v1.z) * alpha;\n    this.w = v1.w + (v2.w - v1.w) * alpha;\n    return this;\n  }\n\n  /**\n   * Returns `true` if this vector is equal with the given one.\n   *\n   * @param {Vector4} v - The vector to test for equality.\n   * @return {boolean} Whether this vector is equal with the given one.\n   */\n  equals(v) {\n    return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;\n  }\n\n  /**\n   * Sets this vector's x value to be `array[ offset ]`, y value to be `array[ offset + 1 ]`,\n   * z value to be `array[ offset + 2 ]`, w value to be `array[ offset + 3 ]`.\n   *\n   * @param {Array<number>} array - An array holding the vector component values.\n   * @param {number} [offset=0] - The offset into the array.\n   * @return {Vector4} A reference to this vector.\n   */\n  fromArray(array) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.x = array[offset];\n    this.y = array[offset + 1];\n    this.z = array[offset + 2];\n    this.w = array[offset + 3];\n    return this;\n  }\n\n  /**\n   * Writes the components of this vector to the given array. If no array is provided,\n   * the method returns a new instance.\n   *\n   * @param {Array<number>} [array=[]] - The target array holding the vector components.\n   * @param {number} [offset=0] - Index of the first element in the array.\n   * @return {Array<number>} The vector components.\n   */\n  toArray() {\n    let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    array[offset] = this.x;\n    array[offset + 1] = this.y;\n    array[offset + 2] = this.z;\n    array[offset + 3] = this.w;\n    return array;\n  }\n\n  /**\n   * Sets the components of this vector from the given buffer attribute.\n   *\n   * @param {BufferAttribute} attribute - The buffer attribute holding vector data.\n   * @param {number} index - The index into the attribute.\n   * @return {Vector4} A reference to this vector.\n   */\n  fromBufferAttribute(attribute, index) {\n    this.x = attribute.getX(index);\n    this.y = attribute.getY(index);\n    this.z = attribute.getZ(index);\n    this.w = attribute.getW(index);\n    return this;\n  }\n\n  /**\n   * Sets each component of this vector to a pseudo-random value between `0` and\n   * `1`, excluding `1`.\n   *\n   * @return {Vector4} A reference to this vector.\n   */\n  random() {\n    this.x = Math.random();\n    this.y = Math.random();\n    this.z = Math.random();\n    this.w = Math.random();\n    return this;\n  }\n  *[Symbol.iterator]() {\n    yield this.x;\n    yield this.y;\n    yield this.z;\n    yield this.w;\n  }\n}\n\n/**\n * A render target is a buffer where the video card draws pixels for a scene\n * that is being rendered in the background. It is used in different effects,\n * such as applying postprocessing to a rendered image before displaying it\n * on the screen.\n *\n * @augments EventDispatcher\n */\nclass RenderTarget extends EventDispatcher {\n  /**\n   * Render target options.\n   *\n   * @typedef {Object} RenderTarget~Options\n   * @property {boolean} [generateMipmaps=false] - Whether to generate mipmaps or not.\n   * @property {number} [magFilter=LinearFilter] - The mag filter.\n   * @property {number} [minFilter=LinearFilter] - The min filter.\n   * @property {number} [format=RGBAFormat] - The texture format.\n   * @property {number} [type=UnsignedByteType] - The texture type.\n   * @property {?string} [internalFormat=null] - The texture's internal format.\n   * @property {number} [wrapS=ClampToEdgeWrapping] - The texture's uv wrapping mode.\n   * @property {number} [wrapT=ClampToEdgeWrapping] - The texture's uv wrapping mode.\n   * @property {number} [anisotropy=1] - The texture's anisotropy value.\n   * @property {string} [colorSpace=NoColorSpace] - The texture's color space.\n   * @property {boolean} [depthBuffer=true] - Whether to allocate a depth buffer or not.\n   * @property {boolean} [stencilBuffer=false] - Whether to allocate a stencil buffer or not.\n   * @property {boolean} [resolveDepthBuffer=true] - Whether to resolve the depth buffer or not.\n   * @property {boolean} [resolveStencilBuffer=true] - Whether  to resolve the stencil buffer or not.\n   * @property {?Texture} [depthTexture=null] - Reference to a depth texture.\n   * @property {number} [samples=0] - The MSAA samples count.\n   * @property {number} [count=1] - Defines the number of color attachments . Must be at least `1`.\n   * @property {boolean} [multiview=false] - Whether this target is used for multiview rendering.\n   */\n\n  /**\n   * Constructs a new render target.\n   *\n   * @param {number} [width=1] - The width of the render target.\n   * @param {number} [height=1] - The height of the render target.\n   * @param {RenderTarget~Options} [options] - The configuration object.\n   */\n  constructor() {\n    let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isRenderTarget = true;\n\n    /**\n     * The width of the render target.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.width = width;\n\n    /**\n     * The height of the render target.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.height = height;\n\n    /**\n     * The depth of the render target.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.depth = options.depth ? options.depth : 1;\n\n    /**\n     * A rectangular area inside the render target's viewport. Fragments that are\n     * outside the area will be discarded.\n     *\n     * @type {Vector4}\n     * @default (0,0,width,height)\n     */\n    this.scissor = new Vector4(0, 0, width, height);\n\n    /**\n     * Indicates whether the scissor test should be enabled when rendering into\n     * this render target or not.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.scissorTest = false;\n\n    /**\n     * A rectangular area representing the render target's viewport.\n     *\n     * @type {Vector4}\n     * @default (0,0,width,height)\n     */\n    this.viewport = new Vector4(0, 0, width, height);\n    const image = {\n      width: width,\n      height: height,\n      depth: this.depth\n    };\n    options = Object.assign({\n      generateMipmaps: false,\n      internalFormat: null,\n      minFilter: LinearFilter,\n      depthBuffer: true,\n      stencilBuffer: false,\n      resolveDepthBuffer: true,\n      resolveStencilBuffer: true,\n      depthTexture: null,\n      samples: 0,\n      count: 1,\n      multiview: false\n    }, options);\n    const texture = new Texture(image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace);\n    texture.flipY = false;\n    texture.generateMipmaps = options.generateMipmaps;\n    texture.internalFormat = options.internalFormat;\n\n    /**\n     * An array of textures. Each color attachment is represented as a separate texture.\n     * Has at least a single entry for the default color attachment.\n     *\n     * @type {Array<Texture>}\n     */\n    this.textures = [];\n    const count = options.count;\n    for (let i = 0; i < count; i++) {\n      this.textures[i] = texture.clone();\n      this.textures[i].isRenderTargetTexture = true;\n      this.textures[i].renderTarget = this;\n    }\n\n    /**\n     * Whether to allocate a depth buffer or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.depthBuffer = options.depthBuffer;\n\n    /**\n     * Whether to allocate a stencil buffer or not.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.stencilBuffer = options.stencilBuffer;\n\n    /**\n     * Whether to resolve the depth buffer or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.resolveDepthBuffer = options.resolveDepthBuffer;\n\n    /**\n     * Whether to resolve the stencil buffer or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.resolveStencilBuffer = options.resolveStencilBuffer;\n    this._depthTexture = null;\n    this.depthTexture = options.depthTexture;\n\n    /**\n     * The number of MSAA samples.\n     *\n     * A value of `0` disables MSAA.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.samples = options.samples;\n\n    /**\n     * Whether to this target is used in multiview rendering.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.multiview = options.multiview;\n  }\n\n  /**\n   * The texture representing the default color attachment.\n   *\n   * @type {Texture}\n   */\n  get texture() {\n    return this.textures[0];\n  }\n  set texture(value) {\n    this.textures[0] = value;\n  }\n  set depthTexture(current) {\n    if (this._depthTexture !== null) this._depthTexture.renderTarget = null;\n    if (current !== null) current.renderTarget = this;\n    this._depthTexture = current;\n  }\n\n  /**\n   * Instead of saving the depth in a renderbuffer, a texture\n   * can be used instead which is useful for further processing\n   * e.g. in context of post-processing.\n   *\n   * @type {?DepthTexture}\n   * @default null\n   */\n  get depthTexture() {\n    return this._depthTexture;\n  }\n\n  /**\n   * Sets the size of this render target.\n   *\n   * @param {number} width - The width.\n   * @param {number} height - The height.\n   * @param {number} [depth=1] - The depth.\n   */\n  setSize(width, height) {\n    let depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    if (this.width !== width || this.height !== height || this.depth !== depth) {\n      this.width = width;\n      this.height = height;\n      this.depth = depth;\n      for (let i = 0, il = this.textures.length; i < il; i++) {\n        this.textures[i].image.width = width;\n        this.textures[i].image.height = height;\n        this.textures[i].image.depth = depth;\n      }\n      this.dispose();\n    }\n    this.viewport.set(0, 0, width, height);\n    this.scissor.set(0, 0, width, height);\n  }\n\n  /**\n   * Returns a new render target with copied values from this instance.\n   *\n   * @return {RenderTarget} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  /**\n   * Copies the settings of the given render target. This is a structural copy so\n   * no resources are shared between render targets after the copy. That includes\n   * all MRT textures and the depth texture.\n   *\n   * @param {RenderTarget} source - The render target to copy.\n   * @return {RenderTarget} A reference to this instance.\n   */\n  copy(source) {\n    this.width = source.width;\n    this.height = source.height;\n    this.depth = source.depth;\n    this.scissor.copy(source.scissor);\n    this.scissorTest = source.scissorTest;\n    this.viewport.copy(source.viewport);\n    this.textures.length = 0;\n    for (let i = 0, il = source.textures.length; i < il; i++) {\n      this.textures[i] = source.textures[i].clone();\n      this.textures[i].isRenderTargetTexture = true;\n      this.textures[i].renderTarget = this;\n\n      // ensure image object is not shared, see #20328\n\n      const image = Object.assign({}, source.textures[i].image);\n      this.textures[i].source = new Source(image);\n    }\n    this.depthBuffer = source.depthBuffer;\n    this.stencilBuffer = source.stencilBuffer;\n    this.resolveDepthBuffer = source.resolveDepthBuffer;\n    this.resolveStencilBuffer = source.resolveStencilBuffer;\n    if (source.depthTexture !== null) this.depthTexture = source.depthTexture.clone();\n    this.samples = source.samples;\n    return this;\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   *\n   * @fires RenderTarget#dispose\n   */\n  dispose() {\n    this.dispatchEvent({\n      type: 'dispose'\n    });\n  }\n}\n\n/**\n * A render target used in context of {@link WebGLRenderer}.\n *\n * @augments RenderTarget\n */\nclass WebGLRenderTarget extends RenderTarget {\n  /**\n   * Constructs a new 3D render target.\n   *\n   * @param {number} [width=1] - The width of the render target.\n   * @param {number} [height=1] - The height of the render target.\n   * @param {RenderTarget~Options} [options] - The configuration object.\n   */\n  constructor() {\n    let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super(width, height, options);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isWebGLRenderTarget = true;\n  }\n}\n\n/**\n * Creates an array of textures directly from raw buffer data.\n *\n * @augments Texture\n */\nclass DataArrayTexture extends Texture {\n  /**\n   * Constructs a new data array texture.\n   *\n   * @param {?TypedArray} [data=null] - The buffer data.\n   * @param {number} [width=1] - The width of the texture.\n   * @param {number} [height=1] - The height of the texture.\n   * @param {number} [depth=1] - The depth of the texture.\n   */\n  constructor() {\n    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let depth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    super(null);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isDataArrayTexture = true;\n\n    /**\n     * The image definition of a data texture.\n     *\n     * @type {{data:TypedArray,width:number,height:number,depth:number}}\n     */\n    this.image = {\n      data,\n      width,\n      height,\n      depth\n    };\n\n    /**\n     * How the texture is sampled when a texel covers more than one pixel.\n     *\n     * Overwritten and set to `NearestFilter` by default.\n     *\n     * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n     * @default NearestFilter\n     */\n    this.magFilter = NearestFilter;\n\n    /**\n     * How the texture is sampled when a texel covers less than one pixel.\n     *\n     * Overwritten and set to `NearestFilter` by default.\n     *\n     * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n     * @default NearestFilter\n     */\n    this.minFilter = NearestFilter;\n\n    /**\n     * This defines how the texture is wrapped in the depth and corresponds to\n     * *W* in UVW mapping.\n     *\n     * @type {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)}\n     * @default ClampToEdgeWrapping\n     */\n    this.wrapR = ClampToEdgeWrapping;\n\n    /**\n     * Whether to generate mipmaps (if possible) for a texture.\n     *\n     * Overwritten and set to `false` by default.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.generateMipmaps = false;\n\n    /**\n     * If set to `true`, the texture is flipped along the vertical axis when\n     * uploaded to the GPU.\n     *\n     * Overwritten and set to `false` by default.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.flipY = false;\n\n    /**\n     * Specifies the alignment requirements for the start of each pixel row in memory.\n     *\n     * Overwritten and set to `1` by default.\n     *\n     * @type {boolean}\n     * @default 1\n     */\n    this.unpackAlignment = 1;\n\n    /**\n     * A set of all layers which need to be updated in the texture.\n     *\n     * @type {Set<number>}\n     */\n    this.layerUpdates = new Set();\n  }\n\n  /**\n   * Describes that a specific layer of the texture needs to be updated.\n   * Normally when {@link Texture#needsUpdate} is set to `true`, the\n   * entire data texture array is sent to the GPU. Marking specific\n   * layers will only transmit subsets of all mipmaps associated with a\n   * specific depth in the array which is often much more performant.\n   *\n   * @param {number} layerIndex - The layer index that should be updated.\n   */\n  addLayerUpdate(layerIndex) {\n    this.layerUpdates.add(layerIndex);\n  }\n\n  /**\n   * Resets the layer updates registry.\n   */\n  clearLayerUpdates() {\n    this.layerUpdates.clear();\n  }\n}\n\n/**\n * An array render target used in context of {@link WebGLRenderer}.\n *\n * @augments WebGLRenderTarget\n */\nclass WebGLArrayRenderTarget extends WebGLRenderTarget {\n  /**\n   * Constructs a new array render target.\n   *\n   * @param {number} [width=1] - The width of the render target.\n   * @param {number} [height=1] - The height of the render target.\n   * @param {number} [depth=1] - The height of the render target.\n   * @param {RenderTarget~Options} [options] - The configuration object.\n   */\n  constructor() {\n    let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    super(width, height, options);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isWebGLArrayRenderTarget = true;\n    this.depth = depth;\n\n    /**\n     * Overwritten with a different texture type.\n     *\n     * @type {DataArrayTexture}\n     */\n    this.texture = new DataArrayTexture(null, width, height, depth);\n    this.texture.isRenderTargetTexture = true;\n  }\n}\n\n/**\n * Creates a three-dimensional texture from raw data, with parameters to\n * divide it into width, height, and depth.\n *\n * @augments Texture\n */\nclass Data3DTexture extends Texture {\n  /**\n   * Constructs a new data array texture.\n   *\n   * @param {?TypedArray} [data=null] - The buffer data.\n   * @param {number} [width=1] - The width of the texture.\n   * @param {number} [height=1] - The height of the texture.\n   * @param {number} [depth=1] - The depth of the texture.\n   */\n  constructor() {\n    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let depth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    // We're going to add .setXXX() methods for setting properties later.\n    // Users can still set in Data3DTexture directly.\n    //\n    //\tconst texture = new THREE.Data3DTexture( data, width, height, depth );\n    // \ttexture.anisotropy = 16;\n    //\n    // See #14839\n\n    super(null);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isData3DTexture = true;\n\n    /**\n     * The image definition of a data texture.\n     *\n     * @type {{data:TypedArray,width:number,height:number,depth:number}}\n     */\n    this.image = {\n      data,\n      width,\n      height,\n      depth\n    };\n\n    /**\n     * How the texture is sampled when a texel covers more than one pixel.\n     *\n     * Overwritten and set to `NearestFilter` by default.\n     *\n     * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n     * @default NearestFilter\n     */\n    this.magFilter = NearestFilter;\n\n    /**\n     * How the texture is sampled when a texel covers less than one pixel.\n     *\n     * Overwritten and set to `NearestFilter` by default.\n     *\n     * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n     * @default NearestFilter\n     */\n    this.minFilter = NearestFilter;\n\n    /**\n     * This defines how the texture is wrapped in the depth and corresponds to\n     * *W* in UVW mapping.\n     *\n     * @type {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)}\n     * @default ClampToEdgeWrapping\n     */\n    this.wrapR = ClampToEdgeWrapping;\n\n    /**\n     * Whether to generate mipmaps (if possible) for a texture.\n     *\n     * Overwritten and set to `false` by default.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.generateMipmaps = false;\n\n    /**\n     * If set to `true`, the texture is flipped along the vertical axis when\n     * uploaded to the GPU.\n     *\n     * Overwritten and set to `false` by default.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.flipY = false;\n\n    /**\n     * Specifies the alignment requirements for the start of each pixel row in memory.\n     *\n     * Overwritten and set to `1` by default.\n     *\n     * @type {boolean}\n     * @default 1\n     */\n    this.unpackAlignment = 1;\n  }\n}\n\n/**\n * A 3D render target used in context of {@link WebGLRenderer}.\n *\n * @augments WebGLRenderTarget\n */\nclass WebGL3DRenderTarget extends WebGLRenderTarget {\n  /**\n   * Constructs a new 3D render target.\n   *\n   * @param {number} [width=1] - The width of the render target.\n   * @param {number} [height=1] - The height of the render target.\n   * @param {number} [depth=1] - The height of the render target.\n   * @param {RenderTarget~Options} [options] - The configuration object.\n   */\n  constructor() {\n    let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    super(width, height, options);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isWebGL3DRenderTarget = true;\n    this.depth = depth;\n\n    /**\n     * Overwritten with a different texture type.\n     *\n     * @type {Data3DTexture}\n     */\n    this.texture = new Data3DTexture(null, width, height, depth);\n    this.texture.isRenderTargetTexture = true;\n  }\n}\n\n/**\n * Class for representing a Quaternion. Quaternions are used in three.js to represent rotations.\n *\n * Iterating through a vector instance will yield its components `(x, y, z, w)` in\n * the corresponding order.\n *\n * Note that three.js expects Quaternions to be normalized.\n * ```js\n * const quaternion = new THREE.Quaternion();\n * quaternion.setFromAxisAngle( new THREE.Vector3( 0, 1, 0 ), Math.PI / 2 );\n *\n * const vector = new THREE.Vector3( 1, 0, 0 );\n * vector.applyQuaternion( quaternion );\n * ```\n */\nclass Quaternion {\n  /**\n   * Constructs a new quaternion.\n   *\n   * @param {number} [x=0] - The x value of this quaternion.\n   * @param {number} [y=0] - The y value of this quaternion.\n   * @param {number} [z=0] - The z value of this quaternion.\n   * @param {number} [w=1] - The w value of this quaternion.\n   */\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isQuaternion = true;\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n  }\n\n  /**\n   * Interpolates between two quaternions via SLERP. This implementation assumes the\n   * quaternion data are managed  in flat arrays.\n   *\n   * @param {Array<number>} dst - The destination array.\n   * @param {number} dstOffset - An offset into the destination array.\n   * @param {Array<number>} src0 - The source array of the first quaternion.\n   * @param {number} srcOffset0 - An offset into the first source array.\n   * @param {Array<number>} src1 -  The source array of the second quaternion.\n   * @param {number} srcOffset1 - An offset into the second source array.\n   * @param {number} t - The interpolation factor in the range `[0,1]`.\n   * @see {@link Quaternion#slerp}\n   */\n  static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {\n    // fuzz-free, array-based Quaternion SLERP operation\n\n    let x0 = src0[srcOffset0 + 0],\n      y0 = src0[srcOffset0 + 1],\n      z0 = src0[srcOffset0 + 2],\n      w0 = src0[srcOffset0 + 3];\n    const x1 = src1[srcOffset1 + 0],\n      y1 = src1[srcOffset1 + 1],\n      z1 = src1[srcOffset1 + 2],\n      w1 = src1[srcOffset1 + 3];\n    if (t === 0) {\n      dst[dstOffset + 0] = x0;\n      dst[dstOffset + 1] = y0;\n      dst[dstOffset + 2] = z0;\n      dst[dstOffset + 3] = w0;\n      return;\n    }\n    if (t === 1) {\n      dst[dstOffset + 0] = x1;\n      dst[dstOffset + 1] = y1;\n      dst[dstOffset + 2] = z1;\n      dst[dstOffset + 3] = w1;\n      return;\n    }\n    if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {\n      let s = 1 - t;\n      const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n        dir = cos >= 0 ? 1 : -1,\n        sqrSin = 1 - cos * cos;\n\n      // Skip the Slerp for tiny steps to avoid numeric problems:\n      if (sqrSin > Number.EPSILON) {\n        const sin = Math.sqrt(sqrSin),\n          len = Math.atan2(sin, cos * dir);\n        s = Math.sin(s * len) / sin;\n        t = Math.sin(t * len) / sin;\n      }\n      const tDir = t * dir;\n      x0 = x0 * s + x1 * tDir;\n      y0 = y0 * s + y1 * tDir;\n      z0 = z0 * s + z1 * tDir;\n      w0 = w0 * s + w1 * tDir;\n\n      // Normalize in case we just did a lerp:\n      if (s === 1 - t) {\n        const f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);\n        x0 *= f;\n        y0 *= f;\n        z0 *= f;\n        w0 *= f;\n      }\n    }\n    dst[dstOffset] = x0;\n    dst[dstOffset + 1] = y0;\n    dst[dstOffset + 2] = z0;\n    dst[dstOffset + 3] = w0;\n  }\n\n  /**\n   * Multiplies two quaternions. This implementation assumes the quaternion data are managed\n   * in flat arrays.\n   *\n   * @param {Array<number>} dst - The destination array.\n   * @param {number} dstOffset - An offset into the destination array.\n   * @param {Array<number>} src0 - The source array of the first quaternion.\n   * @param {number} srcOffset0 - An offset into the first source array.\n   * @param {Array<number>} src1 -  The source array of the second quaternion.\n   * @param {number} srcOffset1 - An offset into the second source array.\n   * @return {Array<number>} The destination array.\n   * @see {@link Quaternion#multiplyQuaternions}.\n   */\n  static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {\n    const x0 = src0[srcOffset0];\n    const y0 = src0[srcOffset0 + 1];\n    const z0 = src0[srcOffset0 + 2];\n    const w0 = src0[srcOffset0 + 3];\n    const x1 = src1[srcOffset1];\n    const y1 = src1[srcOffset1 + 1];\n    const z1 = src1[srcOffset1 + 2];\n    const w1 = src1[srcOffset1 + 3];\n    dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n    dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n    dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n    dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n    return dst;\n  }\n\n  /**\n   * The x value of this quaternion.\n   *\n   * @type {number}\n   * @default 0\n   */\n  get x() {\n    return this._x;\n  }\n  set x(value) {\n    this._x = value;\n    this._onChangeCallback();\n  }\n\n  /**\n   * The y value of this quaternion.\n   *\n   * @type {number}\n   * @default 0\n   */\n  get y() {\n    return this._y;\n  }\n  set y(value) {\n    this._y = value;\n    this._onChangeCallback();\n  }\n\n  /**\n   * The z value of this quaternion.\n   *\n   * @type {number}\n   * @default 0\n   */\n  get z() {\n    return this._z;\n  }\n  set z(value) {\n    this._z = value;\n    this._onChangeCallback();\n  }\n\n  /**\n   * The w value of this quaternion.\n   *\n   * @type {number}\n   * @default 1\n   */\n  get w() {\n    return this._w;\n  }\n  set w(value) {\n    this._w = value;\n    this._onChangeCallback();\n  }\n\n  /**\n   * Sets the quaternion components.\n   *\n   * @param {number} x - The x value of this quaternion.\n   * @param {number} y - The y value of this quaternion.\n   * @param {number} z - The z value of this quaternion.\n   * @param {number} w - The w value of this quaternion.\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  set(x, y, z, w) {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n    this._onChangeCallback();\n    return this;\n  }\n\n  /**\n   * Returns a new quaternion with copied values from this instance.\n   *\n   * @return {Quaternion} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor(this._x, this._y, this._z, this._w);\n  }\n\n  /**\n   * Copies the values of the given quaternion to this instance.\n   *\n   * @param {Quaternion} quaternion - The quaternion to copy.\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  copy(quaternion) {\n    this._x = quaternion.x;\n    this._y = quaternion.y;\n    this._z = quaternion.z;\n    this._w = quaternion.w;\n    this._onChangeCallback();\n    return this;\n  }\n\n  /**\n   * Sets this quaternion from the rotation specified by the given\n   * Euler angles.\n   *\n   * @param {Euler} euler - The Euler angles.\n   * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  setFromEuler(euler) {\n    let update = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const x = euler._x,\n      y = euler._y,\n      z = euler._z,\n      order = euler._order;\n\n    // http://www.mathworks.com/matlabcentral/fileexchange/\n    // \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n    //\tcontent/SpinCalc.m\n\n    const cos = Math.cos;\n    const sin = Math.sin;\n    const c1 = cos(x / 2);\n    const c2 = cos(y / 2);\n    const c3 = cos(z / 2);\n    const s1 = sin(x / 2);\n    const s2 = sin(y / 2);\n    const s3 = sin(z / 2);\n    switch (order) {\n      case 'XYZ':\n        this._x = s1 * c2 * c3 + c1 * s2 * s3;\n        this._y = c1 * s2 * c3 - s1 * c2 * s3;\n        this._z = c1 * c2 * s3 + s1 * s2 * c3;\n        this._w = c1 * c2 * c3 - s1 * s2 * s3;\n        break;\n      case 'YXZ':\n        this._x = s1 * c2 * c3 + c1 * s2 * s3;\n        this._y = c1 * s2 * c3 - s1 * c2 * s3;\n        this._z = c1 * c2 * s3 - s1 * s2 * c3;\n        this._w = c1 * c2 * c3 + s1 * s2 * s3;\n        break;\n      case 'ZXY':\n        this._x = s1 * c2 * c3 - c1 * s2 * s3;\n        this._y = c1 * s2 * c3 + s1 * c2 * s3;\n        this._z = c1 * c2 * s3 + s1 * s2 * c3;\n        this._w = c1 * c2 * c3 - s1 * s2 * s3;\n        break;\n      case 'ZYX':\n        this._x = s1 * c2 * c3 - c1 * s2 * s3;\n        this._y = c1 * s2 * c3 + s1 * c2 * s3;\n        this._z = c1 * c2 * s3 - s1 * s2 * c3;\n        this._w = c1 * c2 * c3 + s1 * s2 * s3;\n        break;\n      case 'YZX':\n        this._x = s1 * c2 * c3 + c1 * s2 * s3;\n        this._y = c1 * s2 * c3 + s1 * c2 * s3;\n        this._z = c1 * c2 * s3 - s1 * s2 * c3;\n        this._w = c1 * c2 * c3 - s1 * s2 * s3;\n        break;\n      case 'XZY':\n        this._x = s1 * c2 * c3 - c1 * s2 * s3;\n        this._y = c1 * s2 * c3 - s1 * c2 * s3;\n        this._z = c1 * c2 * s3 + s1 * s2 * c3;\n        this._w = c1 * c2 * c3 + s1 * s2 * s3;\n        break;\n      default:\n        console.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order);\n    }\n    if (update === true) this._onChangeCallback();\n    return this;\n  }\n\n  /**\n   * Sets this quaternion from the given axis and angle.\n   *\n   * @param {Vector3} axis - The normalized axis.\n   * @param {number} angle - The angle in radians.\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  setFromAxisAngle(axis, angle) {\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n    const halfAngle = angle / 2,\n      s = Math.sin(halfAngle);\n    this._x = axis.x * s;\n    this._y = axis.y * s;\n    this._z = axis.z * s;\n    this._w = Math.cos(halfAngle);\n    this._onChangeCallback();\n    return this;\n  }\n\n  /**\n   * Sets this quaternion from the given rotation matrix.\n   *\n   * @param {Matrix4} m - A 4x4 matrix of which the upper 3x3 of matrix is a pure rotation matrix (i.e. unscaled).\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  setFromRotationMatrix(m) {\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n    const te = m.elements,\n      m11 = te[0],\n      m12 = te[4],\n      m13 = te[8],\n      m21 = te[1],\n      m22 = te[5],\n      m23 = te[9],\n      m31 = te[2],\n      m32 = te[6],\n      m33 = te[10],\n      trace = m11 + m22 + m33;\n    if (trace > 0) {\n      const s = 0.5 / Math.sqrt(trace + 1.0);\n      this._w = 0.25 / s;\n      this._x = (m32 - m23) * s;\n      this._y = (m13 - m31) * s;\n      this._z = (m21 - m12) * s;\n    } else if (m11 > m22 && m11 > m33) {\n      const s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n      this._w = (m32 - m23) / s;\n      this._x = 0.25 * s;\n      this._y = (m12 + m21) / s;\n      this._z = (m13 + m31) / s;\n    } else if (m22 > m33) {\n      const s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n      this._w = (m13 - m31) / s;\n      this._x = (m12 + m21) / s;\n      this._y = 0.25 * s;\n      this._z = (m23 + m32) / s;\n    } else {\n      const s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n      this._w = (m21 - m12) / s;\n      this._x = (m13 + m31) / s;\n      this._y = (m23 + m32) / s;\n      this._z = 0.25 * s;\n    }\n    this._onChangeCallback();\n    return this;\n  }\n\n  /**\n   * Sets this quaternion to the rotation required to rotate the direction vector\n   * `vFrom` to the direction vector `vTo`.\n   *\n   * @param {Vector3} vFrom - The first (normalized) direction vector.\n   * @param {Vector3} vTo - The second (normalized) direction vector.\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  setFromUnitVectors(vFrom, vTo) {\n    // assumes direction vectors vFrom and vTo are normalized\n\n    let r = vFrom.dot(vTo) + 1;\n    if (r < Number.EPSILON) {\n      // vFrom and vTo point in opposite directions\n\n      r = 0;\n      if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n        this._x = -vFrom.y;\n        this._y = vFrom.x;\n        this._z = 0;\n        this._w = r;\n      } else {\n        this._x = 0;\n        this._y = -vFrom.z;\n        this._z = vFrom.y;\n        this._w = r;\n      }\n    } else {\n      // crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n      this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n      this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n      this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n      this._w = r;\n    }\n    return this.normalize();\n  }\n\n  /**\n   * Returns the angle between this quaternion and the given one in radians.\n   *\n   * @param {Quaternion} q - The quaternion to compute the angle with.\n   * @return {number} The angle in radians.\n   */\n  angleTo(q) {\n    return 2 * Math.acos(Math.abs(clamp(this.dot(q), -1, 1)));\n  }\n\n  /**\n   * Rotates this quaternion by a given angular step to the given quaternion.\n   * The method ensures that the final quaternion will not overshoot `q`.\n   *\n   * @param {Quaternion} q - The target quaternion.\n   * @param {number} step - The angular step in radians.\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  rotateTowards(q, step) {\n    const angle = this.angleTo(q);\n    if (angle === 0) return this;\n    const t = Math.min(1, step / angle);\n    this.slerp(q, t);\n    return this;\n  }\n\n  /**\n   * Sets this quaternion to the identity quaternion; that is, to the\n   * quaternion that represents \"no rotation\".\n   *\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  identity() {\n    return this.set(0, 0, 0, 1);\n  }\n\n  /**\n   * Inverts this quaternion via {@link Quaternion#conjugate}. The\n   * quaternion is assumed to have unit length.\n   *\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  invert() {\n    return this.conjugate();\n  }\n\n  /**\n   * Returns the rotational conjugate of this quaternion. The conjugate of a\n   * quaternion represents the same rotation in the opposite direction about\n   * the rotational axis.\n   *\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  conjugate() {\n    this._x *= -1;\n    this._y *= -1;\n    this._z *= -1;\n    this._onChangeCallback();\n    return this;\n  }\n\n  /**\n   * Calculates the dot product of this quaternion and the given one.\n   *\n   * @param {Quaternion} v - The quaternion to compute the dot product with.\n   * @return {number} The result of the dot product.\n   */\n  dot(v) {\n    return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n  }\n\n  /**\n   * Computes the squared Euclidean length (straight-line length) of this quaternion,\n   * considered as a 4 dimensional vector. This can be useful if you are comparing the\n   * lengths of two quaternions, as this is a slightly more efficient calculation than\n   * {@link Quaternion#length}.\n   *\n   * @return {number} The squared Euclidean length.\n   */\n  lengthSq() {\n    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n  }\n\n  /**\n   * Computes the Euclidean length (straight-line length) of this quaternion,\n   * considered as a 4 dimensional vector.\n   *\n   * @return {number} The Euclidean length.\n   */\n  length() {\n    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);\n  }\n\n  /**\n   * Normalizes this quaternion - that is, calculated the quaternion that performs\n   * the same rotation as this one, but has a length equal to `1`.\n   *\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  normalize() {\n    let l = this.length();\n    if (l === 0) {\n      this._x = 0;\n      this._y = 0;\n      this._z = 0;\n      this._w = 1;\n    } else {\n      l = 1 / l;\n      this._x = this._x * l;\n      this._y = this._y * l;\n      this._z = this._z * l;\n      this._w = this._w * l;\n    }\n    this._onChangeCallback();\n    return this;\n  }\n\n  /**\n   * Multiplies this quaternion by the given one.\n   *\n   * @param {Quaternion} q - The quaternion.\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  multiply(q) {\n    return this.multiplyQuaternions(this, q);\n  }\n\n  /**\n   * Pre-multiplies this quaternion by the given one.\n   *\n   * @param {Quaternion} q - The quaternion.\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  premultiply(q) {\n    return this.multiplyQuaternions(q, this);\n  }\n\n  /**\n   * Multiplies the given quaternions and stores the result in this instance.\n   *\n   * @param {Quaternion} a - The first quaternion.\n   * @param {Quaternion} b - The second quaternion.\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  multiplyQuaternions(a, b) {\n    // from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n    const qax = a._x,\n      qay = a._y,\n      qaz = a._z,\n      qaw = a._w;\n    const qbx = b._x,\n      qby = b._y,\n      qbz = b._z,\n      qbw = b._w;\n    this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n    this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n    this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n    this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n    this._onChangeCallback();\n    return this;\n  }\n\n  /**\n   * Performs a spherical linear interpolation between quaternions.\n   *\n   * @param {Quaternion} qb - The target quaternion.\n   * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  slerp(qb, t) {\n    if (t === 0) return this;\n    if (t === 1) return this.copy(qb);\n    const x = this._x,\n      y = this._y,\n      z = this._z,\n      w = this._w;\n\n    // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n    let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n    if (cosHalfTheta < 0) {\n      this._w = -qb._w;\n      this._x = -qb._x;\n      this._y = -qb._y;\n      this._z = -qb._z;\n      cosHalfTheta = -cosHalfTheta;\n    } else {\n      this.copy(qb);\n    }\n    if (cosHalfTheta >= 1.0) {\n      this._w = w;\n      this._x = x;\n      this._y = y;\n      this._z = z;\n      return this;\n    }\n    const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n    if (sqrSinHalfTheta <= Number.EPSILON) {\n      const s = 1 - t;\n      this._w = s * w + t * this._w;\n      this._x = s * x + t * this._x;\n      this._y = s * y + t * this._y;\n      this._z = s * z + t * this._z;\n      this.normalize(); // normalize calls _onChangeCallback()\n\n      return this;\n    }\n    const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);\n    const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);\n    const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,\n      ratioB = Math.sin(t * halfTheta) / sinHalfTheta;\n    this._w = w * ratioA + this._w * ratioB;\n    this._x = x * ratioA + this._x * ratioB;\n    this._y = y * ratioA + this._y * ratioB;\n    this._z = z * ratioA + this._z * ratioB;\n    this._onChangeCallback();\n    return this;\n  }\n\n  /**\n   * Performs a spherical linear interpolation between the given quaternions\n   * and stores the result in this quaternion.\n   *\n   * @param {Quaternion} qa - The source quaternion.\n   * @param {Quaternion} qb - The target quaternion.\n   * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  slerpQuaternions(qa, qb, t) {\n    return this.copy(qa).slerp(qb, t);\n  }\n\n  /**\n   * Sets this quaternion to a uniformly random, normalized quaternion.\n   *\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  random() {\n    // Ken Shoemake\n    // Uniform random rotations\n    // D. Kirk, editor, Graphics Gems III, pages 124-132. Academic Press, New York, 1992.\n\n    const theta1 = 2 * Math.PI * Math.random();\n    const theta2 = 2 * Math.PI * Math.random();\n    const x0 = Math.random();\n    const r1 = Math.sqrt(1 - x0);\n    const r2 = Math.sqrt(x0);\n    return this.set(r1 * Math.sin(theta1), r1 * Math.cos(theta1), r2 * Math.sin(theta2), r2 * Math.cos(theta2));\n  }\n\n  /**\n   * Returns `true` if this quaternion is equal with the given one.\n   *\n   * @param {Quaternion} quaternion - The quaternion to test for equality.\n   * @return {boolean} Whether this quaternion is equal with the given one.\n   */\n  equals(quaternion) {\n    return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;\n  }\n\n  /**\n   * Sets this quaternion's components from the given array.\n   *\n   * @param {Array<number>} array - An array holding the quaternion component values.\n   * @param {number} [offset=0] - The offset into the array.\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  fromArray(array) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this._x = array[offset];\n    this._y = array[offset + 1];\n    this._z = array[offset + 2];\n    this._w = array[offset + 3];\n    this._onChangeCallback();\n    return this;\n  }\n\n  /**\n   * Writes the components of this quaternion to the given array. If no array is provided,\n   * the method returns a new instance.\n   *\n   * @param {Array<number>} [array=[]] - The target array holding the quaternion components.\n   * @param {number} [offset=0] - Index of the first element in the array.\n   * @return {Array<number>} The quaternion components.\n   */\n  toArray() {\n    let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    array[offset] = this._x;\n    array[offset + 1] = this._y;\n    array[offset + 2] = this._z;\n    array[offset + 3] = this._w;\n    return array;\n  }\n\n  /**\n   * Sets the components of this quaternion from the given buffer attribute.\n   *\n   * @param {BufferAttribute} attribute - The buffer attribute holding quaternion data.\n   * @param {number} index - The index into the attribute.\n   * @return {Quaternion} A reference to this quaternion.\n   */\n  fromBufferAttribute(attribute, index) {\n    this._x = attribute.getX(index);\n    this._y = attribute.getY(index);\n    this._z = attribute.getZ(index);\n    this._w = attribute.getW(index);\n    this._onChangeCallback();\n    return this;\n  }\n\n  /**\n   * This methods defines the serialization result of this class. Returns the\n   * numerical elements of this quaternion in an array of format `[x, y, z, w]`.\n   *\n   * @return {Array<number>} The serialized quaternion.\n   */\n  toJSON() {\n    return this.toArray();\n  }\n  _onChange(callback) {\n    this._onChangeCallback = callback;\n    return this;\n  }\n  _onChangeCallback() {}\n  *[Symbol.iterator]() {\n    yield this._x;\n    yield this._y;\n    yield this._z;\n    yield this._w;\n  }\n}\n\n/**\n * Class representing a 3D vector. A 3D vector is an ordered triplet of numbers\n * (labeled x, y and z), which can be used to represent a number of things, such as:\n *\n * - A point in 3D space.\n * - A direction and length in 3D space. In three.js the length will\n * always be the Euclidean distance(straight-line distance) from `(0, 0, 0)` to `(x, y, z)`\n * and the direction is also measured from `(0, 0, 0)` towards `(x, y, z)`.\n * - Any arbitrary ordered triplet of numbers.\n *\n * There are other things a 3D vector can be used to represent, such as\n * momentum vectors and so on, however these are the most\n * common uses in three.js.\n *\n * Iterating through a vector instance will yield its components `(x, y, z)` in\n * the corresponding order.\n * ```js\n * const a = new THREE.Vector3( 0, 1, 0 );\n *\n * //no arguments; will be initialised to (0, 0, 0)\n * const b = new THREE.Vector3( );\n *\n * const d = a.distanceTo( b );\n * ```\n */\nclass Vector3 {\n  /**\n   * Constructs a new 3D vector.\n   *\n   * @param {number} [x=0] - The x value of this vector.\n   * @param {number} [y=0] - The y value of this vector.\n   * @param {number} [z=0] - The z value of this vector.\n   */\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    Vector3.prototype.isVector3 = true;\n\n    /**\n     * The x value of this vector.\n     *\n     * @type {number}\n     */\n    this.x = x;\n\n    /**\n     * The y value of this vector.\n     *\n     * @type {number}\n     */\n    this.y = y;\n\n    /**\n     * The z value of this vector.\n     *\n     * @type {number}\n     */\n    this.z = z;\n  }\n\n  /**\n   * Sets the vector components.\n   *\n   * @param {number} x - The value of the x component.\n   * @param {number} y - The value of the y component.\n   * @param {number} z - The value of the z component.\n   * @return {Vector3} A reference to this vector.\n   */\n  set(x, y, z) {\n    if (z === undefined) z = this.z; // sprite.scale.set(x,y)\n\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    return this;\n  }\n\n  /**\n   * Sets the vector components to the same value.\n   *\n   * @param {number} scalar - The value to set for all vector components.\n   * @return {Vector3} A reference to this vector.\n   */\n  setScalar(scalar) {\n    this.x = scalar;\n    this.y = scalar;\n    this.z = scalar;\n    return this;\n  }\n\n  /**\n   * Sets the vector's x component to the given value\n   *\n   * @param {number} x - The value to set.\n   * @return {Vector3} A reference to this vector.\n   */\n  setX(x) {\n    this.x = x;\n    return this;\n  }\n\n  /**\n   * Sets the vector's y component to the given value\n   *\n   * @param {number} y - The value to set.\n   * @return {Vector3} A reference to this vector.\n   */\n  setY(y) {\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * Sets the vector's z component to the given value\n   *\n   * @param {number} z - The value to set.\n   * @return {Vector3} A reference to this vector.\n   */\n  setZ(z) {\n    this.z = z;\n    return this;\n  }\n\n  /**\n   * Allows to set a vector component with an index.\n   *\n   * @param {number} index - The component index. `0` equals to x, `1` equals to y, `2` equals to z.\n   * @param {number} value - The value to set.\n   * @return {Vector3} A reference to this vector.\n   */\n  setComponent(index, value) {\n    switch (index) {\n      case 0:\n        this.x = value;\n        break;\n      case 1:\n        this.y = value;\n        break;\n      case 2:\n        this.z = value;\n        break;\n      default:\n        throw new Error('index is out of range: ' + index);\n    }\n    return this;\n  }\n\n  /**\n   * Returns the value of the vector component which matches the given index.\n   *\n   * @param {number} index - The component index. `0` equals to x, `1` equals to y, `2` equals to z.\n   * @return {number} A vector component value.\n   */\n  getComponent(index) {\n    switch (index) {\n      case 0:\n        return this.x;\n      case 1:\n        return this.y;\n      case 2:\n        return this.z;\n      default:\n        throw new Error('index is out of range: ' + index);\n    }\n  }\n\n  /**\n   * Returns a new vector with copied values from this instance.\n   *\n   * @return {Vector3} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor(this.x, this.y, this.z);\n  }\n\n  /**\n   * Copies the values of the given vector to this instance.\n   *\n   * @param {Vector3} v - The vector to copy.\n   * @return {Vector3} A reference to this vector.\n   */\n  copy(v) {\n    this.x = v.x;\n    this.y = v.y;\n    this.z = v.z;\n    return this;\n  }\n\n  /**\n   * Adds the given vector to this instance.\n   *\n   * @param {Vector3} v - The vector to add.\n   * @return {Vector3} A reference to this vector.\n   */\n  add(v) {\n    this.x += v.x;\n    this.y += v.y;\n    this.z += v.z;\n    return this;\n  }\n\n  /**\n   * Adds the given scalar value to all components of this instance.\n   *\n   * @param {number} s - The scalar to add.\n   * @return {Vector3} A reference to this vector.\n   */\n  addScalar(s) {\n    this.x += s;\n    this.y += s;\n    this.z += s;\n    return this;\n  }\n\n  /**\n   * Adds the given vectors and stores the result in this instance.\n   *\n   * @param {Vector3} a - The first vector.\n   * @param {Vector3} b - The second vector.\n   * @return {Vector3} A reference to this vector.\n   */\n  addVectors(a, b) {\n    this.x = a.x + b.x;\n    this.y = a.y + b.y;\n    this.z = a.z + b.z;\n    return this;\n  }\n\n  /**\n   * Adds the given vector scaled by the given factor to this instance.\n   *\n   * @param {Vector3|Vector4} v - The vector.\n   * @param {number} s - The factor that scales `v`.\n   * @return {Vector3} A reference to this vector.\n   */\n  addScaledVector(v, s) {\n    this.x += v.x * s;\n    this.y += v.y * s;\n    this.z += v.z * s;\n    return this;\n  }\n\n  /**\n   * Subtracts the given vector from this instance.\n   *\n   * @param {Vector3} v - The vector to subtract.\n   * @return {Vector3} A reference to this vector.\n   */\n  sub(v) {\n    this.x -= v.x;\n    this.y -= v.y;\n    this.z -= v.z;\n    return this;\n  }\n\n  /**\n   * Subtracts the given scalar value from all components of this instance.\n   *\n   * @param {number} s - The scalar to subtract.\n   * @return {Vector3} A reference to this vector.\n   */\n  subScalar(s) {\n    this.x -= s;\n    this.y -= s;\n    this.z -= s;\n    return this;\n  }\n\n  /**\n   * Subtracts the given vectors and stores the result in this instance.\n   *\n   * @param {Vector3} a - The first vector.\n   * @param {Vector3} b - The second vector.\n   * @return {Vector3} A reference to this vector.\n   */\n  subVectors(a, b) {\n    this.x = a.x - b.x;\n    this.y = a.y - b.y;\n    this.z = a.z - b.z;\n    return this;\n  }\n\n  /**\n   * Multiplies the given vector with this instance.\n   *\n   * @param {Vector3} v - The vector to multiply.\n   * @return {Vector3} A reference to this vector.\n   */\n  multiply(v) {\n    this.x *= v.x;\n    this.y *= v.y;\n    this.z *= v.z;\n    return this;\n  }\n\n  /**\n   * Multiplies the given scalar value with all components of this instance.\n   *\n   * @param {number} scalar - The scalar to multiply.\n   * @return {Vector3} A reference to this vector.\n   */\n  multiplyScalar(scalar) {\n    this.x *= scalar;\n    this.y *= scalar;\n    this.z *= scalar;\n    return this;\n  }\n\n  /**\n   * Multiplies the given vectors and stores the result in this instance.\n   *\n   * @param {Vector3} a - The first vector.\n   * @param {Vector3} b - The second vector.\n   * @return {Vector3} A reference to this vector.\n   */\n  multiplyVectors(a, b) {\n    this.x = a.x * b.x;\n    this.y = a.y * b.y;\n    this.z = a.z * b.z;\n    return this;\n  }\n\n  /**\n   * Applies the given Euler rotation to this vector.\n   *\n   * @param {Euler} euler - The Euler angles.\n   * @return {Vector3} A reference to this vector.\n   */\n  applyEuler(euler) {\n    return this.applyQuaternion(_quaternion$4.setFromEuler(euler));\n  }\n\n  /**\n   * Applies a rotation specified by an axis and an angle to this vector.\n   *\n   * @param {Vector3} axis - A normalized vector representing the rotation axis.\n   * @param {number} angle - The angle in radians.\n   * @return {Vector3} A reference to this vector.\n   */\n  applyAxisAngle(axis, angle) {\n    return this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle));\n  }\n\n  /**\n   * Multiplies this vector with the given 3x3 matrix.\n   *\n   * @param {Matrix3} m - The 3x3 matrix.\n   * @return {Vector3} A reference to this vector.\n   */\n  applyMatrix3(m) {\n    const x = this.x,\n      y = this.y,\n      z = this.z;\n    const e = m.elements;\n    this.x = e[0] * x + e[3] * y + e[6] * z;\n    this.y = e[1] * x + e[4] * y + e[7] * z;\n    this.z = e[2] * x + e[5] * y + e[8] * z;\n    return this;\n  }\n\n  /**\n   * Multiplies this vector by the given normal matrix and normalizes\n   * the result.\n   *\n   * @param {Matrix3} m - The normal matrix.\n   * @return {Vector3} A reference to this vector.\n   */\n  applyNormalMatrix(m) {\n    return this.applyMatrix3(m).normalize();\n  }\n\n  /**\n   * Multiplies this vector (with an implicit 1 in the 4th dimension) by m, and\n   * divides by perspective.\n   *\n   * @param {Matrix4} m - The matrix to apply.\n   * @return {Vector3} A reference to this vector.\n   */\n  applyMatrix4(m) {\n    const x = this.x,\n      y = this.y,\n      z = this.z;\n    const e = m.elements;\n    const w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);\n    this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;\n    this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;\n    this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;\n    return this;\n  }\n\n  /**\n   * Applies the given Quaternion to this vector.\n   *\n   * @param {Quaternion} q - The Quaternion.\n   * @return {Vector3} A reference to this vector.\n   */\n  applyQuaternion(q) {\n    // quaternion q is assumed to have unit length\n\n    const vx = this.x,\n      vy = this.y,\n      vz = this.z;\n    const qx = q.x,\n      qy = q.y,\n      qz = q.z,\n      qw = q.w;\n\n    // t = 2 * cross( q.xyz, v );\n    const tx = 2 * (qy * vz - qz * vy);\n    const ty = 2 * (qz * vx - qx * vz);\n    const tz = 2 * (qx * vy - qy * vx);\n\n    // v + q.w * t + cross( q.xyz, t );\n    this.x = vx + qw * tx + qy * tz - qz * ty;\n    this.y = vy + qw * ty + qz * tx - qx * tz;\n    this.z = vz + qw * tz + qx * ty - qy * tx;\n    return this;\n  }\n\n  /**\n   * Projects this vector from world space into the camera's normalized\n   * device coordinate (NDC) space.\n   *\n   * @param {Camera} camera - The camera.\n   * @return {Vector3} A reference to this vector.\n   */\n  project(camera) {\n    return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);\n  }\n\n  /**\n   * Unprojects this vector from the camera's normalized device coordinate (NDC)\n   * space into world space.\n   *\n   * @param {Camera} camera - The camera.\n   * @return {Vector3} A reference to this vector.\n   */\n  unproject(camera) {\n    return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);\n  }\n\n  /**\n   * Transforms the direction of this vector by a matrix (the upper left 3 x 3\n   * subset of the given 4x4 matrix and then normalizes the result.\n   *\n   * @param {Matrix4} m - The matrix.\n   * @return {Vector3} A reference to this vector.\n   */\n  transformDirection(m) {\n    // input: THREE.Matrix4 affine matrix\n    // vector interpreted as a direction\n\n    const x = this.x,\n      y = this.y,\n      z = this.z;\n    const e = m.elements;\n    this.x = e[0] * x + e[4] * y + e[8] * z;\n    this.y = e[1] * x + e[5] * y + e[9] * z;\n    this.z = e[2] * x + e[6] * y + e[10] * z;\n    return this.normalize();\n  }\n\n  /**\n   * Divides this instance by the given vector.\n   *\n   * @param {Vector3} v - The vector to divide.\n   * @return {Vector3} A reference to this vector.\n   */\n  divide(v) {\n    this.x /= v.x;\n    this.y /= v.y;\n    this.z /= v.z;\n    return this;\n  }\n\n  /**\n   * Divides this vector by the given scalar.\n   *\n   * @param {number} scalar - The scalar to divide.\n   * @return {Vector3} A reference to this vector.\n   */\n  divideScalar(scalar) {\n    return this.multiplyScalar(1 / scalar);\n  }\n\n  /**\n   * If this vector's x, y or z value is greater than the given vector's x, y or z\n   * value, replace that value with the corresponding min value.\n   *\n   * @param {Vector3} v - The vector.\n   * @return {Vector3} A reference to this vector.\n   */\n  min(v) {\n    this.x = Math.min(this.x, v.x);\n    this.y = Math.min(this.y, v.y);\n    this.z = Math.min(this.z, v.z);\n    return this;\n  }\n\n  /**\n   * If this vector's x, y or z value is less than the given vector's x, y or z\n   * value, replace that value with the corresponding max value.\n   *\n   * @param {Vector3} v - The vector.\n   * @return {Vector3} A reference to this vector.\n   */\n  max(v) {\n    this.x = Math.max(this.x, v.x);\n    this.y = Math.max(this.y, v.y);\n    this.z = Math.max(this.z, v.z);\n    return this;\n  }\n\n  /**\n   * If this vector's x, y or z value is greater than the max vector's x, y or z\n   * value, it is replaced by the corresponding value.\n   * If this vector's x, y or z value is less than the min vector's x, y or z value,\n   * it is replaced by the corresponding value.\n   *\n   * @param {Vector3} min - The minimum x, y and z values.\n   * @param {Vector3} max - The maximum x, y and z values in the desired range.\n   * @return {Vector3} A reference to this vector.\n   */\n  clamp(min, max) {\n    // assumes min < max, componentwise\n\n    this.x = clamp(this.x, min.x, max.x);\n    this.y = clamp(this.y, min.y, max.y);\n    this.z = clamp(this.z, min.z, max.z);\n    return this;\n  }\n\n  /**\n   * If this vector's x, y or z values are greater than the max value, they are\n   * replaced by the max value.\n   * If this vector's x, y or z values are less than the min value, they are\n   * replaced by the min value.\n   *\n   * @param {number} minVal - The minimum value the components will be clamped to.\n   * @param {number} maxVal - The maximum value the components will be clamped to.\n   * @return {Vector3} A reference to this vector.\n   */\n  clampScalar(minVal, maxVal) {\n    this.x = clamp(this.x, minVal, maxVal);\n    this.y = clamp(this.y, minVal, maxVal);\n    this.z = clamp(this.z, minVal, maxVal);\n    return this;\n  }\n\n  /**\n   * If this vector's length is greater than the max value, it is replaced by\n   * the max value.\n   * If this vector's length is less than the min value, it is replaced by the\n   * min value.\n   *\n   * @param {number} min - The minimum value the vector length will be clamped to.\n   * @param {number} max - The maximum value the vector length will be clamped to.\n   * @return {Vector3} A reference to this vector.\n   */\n  clampLength(min, max) {\n    const length = this.length();\n    return this.divideScalar(length || 1).multiplyScalar(clamp(length, min, max));\n  }\n\n  /**\n   * The components of this vector are rounded down to the nearest integer value.\n   *\n   * @return {Vector3} A reference to this vector.\n   */\n  floor() {\n    this.x = Math.floor(this.x);\n    this.y = Math.floor(this.y);\n    this.z = Math.floor(this.z);\n    return this;\n  }\n\n  /**\n   * The components of this vector are rounded up to the nearest integer value.\n   *\n   * @return {Vector3} A reference to this vector.\n   */\n  ceil() {\n    this.x = Math.ceil(this.x);\n    this.y = Math.ceil(this.y);\n    this.z = Math.ceil(this.z);\n    return this;\n  }\n\n  /**\n   * The components of this vector are rounded to the nearest integer value\n   *\n   * @return {Vector3} A reference to this vector.\n   */\n  round() {\n    this.x = Math.round(this.x);\n    this.y = Math.round(this.y);\n    this.z = Math.round(this.z);\n    return this;\n  }\n\n  /**\n   * The components of this vector are rounded towards zero (up if negative,\n   * down if positive) to an integer value.\n   *\n   * @return {Vector3} A reference to this vector.\n   */\n  roundToZero() {\n    this.x = Math.trunc(this.x);\n    this.y = Math.trunc(this.y);\n    this.z = Math.trunc(this.z);\n    return this;\n  }\n\n  /**\n   * Inverts this vector - i.e. sets x = -x, y = -y and z = -z.\n   *\n   * @return {Vector3} A reference to this vector.\n   */\n  negate() {\n    this.x = -this.x;\n    this.y = -this.y;\n    this.z = -this.z;\n    return this;\n  }\n\n  /**\n   * Calculates the dot product of the given vector with this instance.\n   *\n   * @param {Vector3} v - The vector to compute the dot product with.\n   * @return {number} The result of the dot product.\n   */\n  dot(v) {\n    return this.x * v.x + this.y * v.y + this.z * v.z;\n  }\n\n  // TODO lengthSquared?\n\n  /**\n   * Computes the square of the Euclidean length (straight-line length) from\n   * (0, 0, 0) to (x, y, z). If you are comparing the lengths of vectors, you should\n   * compare the length squared instead as it is slightly more efficient to calculate.\n   *\n   * @return {number} The square length of this vector.\n   */\n  lengthSq() {\n    return this.x * this.x + this.y * this.y + this.z * this.z;\n  }\n\n  /**\n   * Computes the  Euclidean length (straight-line length) from (0, 0, 0) to (x, y, z).\n   *\n   * @return {number} The length of this vector.\n   */\n  length() {\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n  }\n\n  /**\n   * Computes the Manhattan length of this vector.\n   *\n   * @return {number} The length of this vector.\n   */\n  manhattanLength() {\n    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\n  }\n\n  /**\n   * Converts this vector to a unit vector - that is, sets it equal to a vector\n   * with the same direction as this one, but with a vector length of `1`.\n   *\n   * @return {Vector3} A reference to this vector.\n   */\n  normalize() {\n    return this.divideScalar(this.length() || 1);\n  }\n\n  /**\n   * Sets this vector to a vector with the same direction as this one, but\n   * with the specified length.\n   *\n   * @param {number} length - The new length of this vector.\n   * @return {Vector3} A reference to this vector.\n   */\n  setLength(length) {\n    return this.normalize().multiplyScalar(length);\n  }\n\n  /**\n   * Linearly interpolates between the given vector and this instance, where\n   * alpha is the percent distance along the line - alpha = 0 will be this\n   * vector, and alpha = 1 will be the given one.\n   *\n   * @param {Vector3} v - The vector to interpolate towards.\n   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n   * @return {Vector3} A reference to this vector.\n   */\n  lerp(v, alpha) {\n    this.x += (v.x - this.x) * alpha;\n    this.y += (v.y - this.y) * alpha;\n    this.z += (v.z - this.z) * alpha;\n    return this;\n  }\n\n  /**\n   * Linearly interpolates between the given vectors, where alpha is the percent\n   * distance along the line - alpha = 0 will be first vector, and alpha = 1 will\n   * be the second one. The result is stored in this instance.\n   *\n   * @param {Vector3} v1 - The first vector.\n   * @param {Vector3} v2 - The second vector.\n   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n   * @return {Vector3} A reference to this vector.\n   */\n  lerpVectors(v1, v2, alpha) {\n    this.x = v1.x + (v2.x - v1.x) * alpha;\n    this.y = v1.y + (v2.y - v1.y) * alpha;\n    this.z = v1.z + (v2.z - v1.z) * alpha;\n    return this;\n  }\n\n  /**\n   * Calculates the cross product of the given vector with this instance.\n   *\n   * @param {Vector3} v - The vector to compute the cross product with.\n   * @return {Vector3} The result of the cross product.\n   */\n  cross(v) {\n    return this.crossVectors(this, v);\n  }\n\n  /**\n   * Calculates the cross product of the given vectors and stores the result\n   * in this instance.\n   *\n   * @param {Vector3} a - The first vector.\n   * @param {Vector3} b - The second vector.\n   * @return {Vector3} A reference to this vector.\n   */\n  crossVectors(a, b) {\n    const ax = a.x,\n      ay = a.y,\n      az = a.z;\n    const bx = b.x,\n      by = b.y,\n      bz = b.z;\n    this.x = ay * bz - az * by;\n    this.y = az * bx - ax * bz;\n    this.z = ax * by - ay * bx;\n    return this;\n  }\n\n  /**\n   * Projects this vector onto the given one.\n   *\n   * @param {Vector3} v - The vector to project to.\n   * @return {Vector3} A reference to this vector.\n   */\n  projectOnVector(v) {\n    const denominator = v.lengthSq();\n    if (denominator === 0) return this.set(0, 0, 0);\n    const scalar = v.dot(this) / denominator;\n    return this.copy(v).multiplyScalar(scalar);\n  }\n\n  /**\n   * Projects this vector onto a plane by subtracting this\n   * vector projected onto the plane's normal from this vector.\n   *\n   * @param {Vector3} planeNormal - The plane normal.\n   * @return {Vector3} A reference to this vector.\n   */\n  projectOnPlane(planeNormal) {\n    _vector$c.copy(this).projectOnVector(planeNormal);\n    return this.sub(_vector$c);\n  }\n\n  /**\n   * Reflects this vector off a plane orthogonal to the given normal vector.\n   *\n   * @param {Vector3} normal - The (normalized) normal vector.\n   * @return {Vector3} A reference to this vector.\n   */\n  reflect(normal) {\n    return this.sub(_vector$c.copy(normal).multiplyScalar(2 * this.dot(normal)));\n  }\n  /**\n   * Returns the angle between the given vector and this instance in radians.\n   *\n   * @param {Vector3} v - The vector to compute the angle with.\n   * @return {number} The angle in radians.\n   */\n  angleTo(v) {\n    const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());\n    if (denominator === 0) return Math.PI / 2;\n    const theta = this.dot(v) / denominator;\n\n    // clamp, to handle numerical problems\n\n    return Math.acos(clamp(theta, -1, 1));\n  }\n\n  /**\n   * Computes the distance from the given vector to this instance.\n   *\n   * @param {Vector3} v - The vector to compute the distance to.\n   * @return {number} The distance.\n   */\n  distanceTo(v) {\n    return Math.sqrt(this.distanceToSquared(v));\n  }\n\n  /**\n   * Computes the squared distance from the given vector to this instance.\n   * If you are just comparing the distance with another distance, you should compare\n   * the distance squared instead as it is slightly more efficient to calculate.\n   *\n   * @param {Vector3} v - The vector to compute the squared distance to.\n   * @return {number} The squared distance.\n   */\n  distanceToSquared(v) {\n    const dx = this.x - v.x,\n      dy = this.y - v.y,\n      dz = this.z - v.z;\n    return dx * dx + dy * dy + dz * dz;\n  }\n\n  /**\n   * Computes the Manhattan distance from the given vector to this instance.\n   *\n   * @param {Vector3} v - The vector to compute the Manhattan distance to.\n   * @return {number} The Manhattan distance.\n   */\n  manhattanDistanceTo(v) {\n    return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);\n  }\n\n  /**\n   * Sets the vector components from the given spherical coordinates.\n   *\n   * @param {Spherical} s - The spherical coordinates.\n   * @return {Vector3} A reference to this vector.\n   */\n  setFromSpherical(s) {\n    return this.setFromSphericalCoords(s.radius, s.phi, s.theta);\n  }\n\n  /**\n   * Sets the vector components from the given spherical coordinates.\n   *\n   * @param {number} radius - The radius.\n   * @param {number} phi - The phi angle in radians.\n   * @param {number} theta - The theta angle in radians.\n   * @return {Vector3} A reference to this vector.\n   */\n  setFromSphericalCoords(radius, phi, theta) {\n    const sinPhiRadius = Math.sin(phi) * radius;\n    this.x = sinPhiRadius * Math.sin(theta);\n    this.y = Math.cos(phi) * radius;\n    this.z = sinPhiRadius * Math.cos(theta);\n    return this;\n  }\n\n  /**\n   * Sets the vector components from the given cylindrical coordinates.\n   *\n   * @param {Cylindrical} c - The cylindrical coordinates.\n   * @return {Vector3} A reference to this vector.\n   */\n  setFromCylindrical(c) {\n    return this.setFromCylindricalCoords(c.radius, c.theta, c.y);\n  }\n\n  /**\n   * Sets the vector components from the given cylindrical coordinates.\n   *\n   * @param {number} radius - The radius.\n   * @param {number} theta - The theta angle in radians.\n   * @param {number} y - The y value.\n   * @return {Vector3} A reference to this vector.\n   */\n  setFromCylindricalCoords(radius, theta, y) {\n    this.x = radius * Math.sin(theta);\n    this.y = y;\n    this.z = radius * Math.cos(theta);\n    return this;\n  }\n\n  /**\n   * Sets the vector components to the position elements of the\n   * given transformation matrix.\n   *\n   * @param {Matrix4} m - The 4x4 matrix.\n   * @return {Vector3} A reference to this vector.\n   */\n  setFromMatrixPosition(m) {\n    const e = m.elements;\n    this.x = e[12];\n    this.y = e[13];\n    this.z = e[14];\n    return this;\n  }\n\n  /**\n   * Sets the vector components to the scale elements of the\n   * given transformation matrix.\n   *\n   * @param {Matrix4} m - The 4x4 matrix.\n   * @return {Vector3} A reference to this vector.\n   */\n  setFromMatrixScale(m) {\n    const sx = this.setFromMatrixColumn(m, 0).length();\n    const sy = this.setFromMatrixColumn(m, 1).length();\n    const sz = this.setFromMatrixColumn(m, 2).length();\n    this.x = sx;\n    this.y = sy;\n    this.z = sz;\n    return this;\n  }\n\n  /**\n   * Sets the vector components from the specified matrix column.\n   *\n   * @param {Matrix4} m - The 4x4 matrix.\n   * @param {number} index - The column index.\n   * @return {Vector3} A reference to this vector.\n   */\n  setFromMatrixColumn(m, index) {\n    return this.fromArray(m.elements, index * 4);\n  }\n\n  /**\n   * Sets the vector components from the specified matrix column.\n   *\n   * @param {Matrix3} m - The 3x3 matrix.\n   * @param {number} index - The column index.\n   * @return {Vector3} A reference to this vector.\n   */\n  setFromMatrix3Column(m, index) {\n    return this.fromArray(m.elements, index * 3);\n  }\n\n  /**\n   * Sets the vector components from the given Euler angles.\n   *\n   * @param {Euler} e - The Euler angles to set.\n   * @return {Vector3} A reference to this vector.\n   */\n  setFromEuler(e) {\n    this.x = e._x;\n    this.y = e._y;\n    this.z = e._z;\n    return this;\n  }\n\n  /**\n   * Sets the vector components from the RGB components of the\n   * given color.\n   *\n   * @param {Color} c - The color to set.\n   * @return {Vector3} A reference to this vector.\n   */\n  setFromColor(c) {\n    this.x = c.r;\n    this.y = c.g;\n    this.z = c.b;\n    return this;\n  }\n\n  /**\n   * Returns `true` if this vector is equal with the given one.\n   *\n   * @param {Vector3} v - The vector to test for equality.\n   * @return {boolean} Whether this vector is equal with the given one.\n   */\n  equals(v) {\n    return v.x === this.x && v.y === this.y && v.z === this.z;\n  }\n\n  /**\n   * Sets this vector's x value to be `array[ offset ]`, y value to be `array[ offset + 1 ]`\n   * and z value to be `array[ offset + 2 ]`.\n   *\n   * @param {Array<number>} array - An array holding the vector component values.\n   * @param {number} [offset=0] - The offset into the array.\n   * @return {Vector3} A reference to this vector.\n   */\n  fromArray(array) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.x = array[offset];\n    this.y = array[offset + 1];\n    this.z = array[offset + 2];\n    return this;\n  }\n\n  /**\n   * Writes the components of this vector to the given array. If no array is provided,\n   * the method returns a new instance.\n   *\n   * @param {Array<number>} [array=[]] - The target array holding the vector components.\n   * @param {number} [offset=0] - Index of the first element in the array.\n   * @return {Array<number>} The vector components.\n   */\n  toArray() {\n    let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    array[offset] = this.x;\n    array[offset + 1] = this.y;\n    array[offset + 2] = this.z;\n    return array;\n  }\n\n  /**\n   * Sets the components of this vector from the given buffer attribute.\n   *\n   * @param {BufferAttribute} attribute - The buffer attribute holding vector data.\n   * @param {number} index - The index into the attribute.\n   * @return {Vector3} A reference to this vector.\n   */\n  fromBufferAttribute(attribute, index) {\n    this.x = attribute.getX(index);\n    this.y = attribute.getY(index);\n    this.z = attribute.getZ(index);\n    return this;\n  }\n\n  /**\n   * Sets each component of this vector to a pseudo-random value between `0` and\n   * `1`, excluding `1`.\n   *\n   * @return {Vector3} A reference to this vector.\n   */\n  random() {\n    this.x = Math.random();\n    this.y = Math.random();\n    this.z = Math.random();\n    return this;\n  }\n\n  /**\n   * Sets this vector to a uniformly random point on a unit sphere.\n   *\n   * @return {Vector3} A reference to this vector.\n   */\n  randomDirection() {\n    // https://mathworld.wolfram.com/SpherePointPicking.html\n\n    const theta = Math.random() * Math.PI * 2;\n    const u = Math.random() * 2 - 1;\n    const c = Math.sqrt(1 - u * u);\n    this.x = c * Math.cos(theta);\n    this.y = u;\n    this.z = c * Math.sin(theta);\n    return this;\n  }\n  *[Symbol.iterator]() {\n    yield this.x;\n    yield this.y;\n    yield this.z;\n  }\n}\nconst _vector$c = /*@__PURE__*/new Vector3();\nconst _quaternion$4 = /*@__PURE__*/new Quaternion();\n\n/**\n * Represents an axis-aligned bounding box (AABB) in 3D space.\n */\nclass Box3 {\n  /**\n   * Constructs a new bounding box.\n   *\n   * @param {Vector3} [min=(Infinity,Infinity,Infinity)] - A vector representing the lower boundary of the box.\n   * @param {Vector3} [max=(-Infinity,-Infinity,-Infinity)] - A vector representing the upper boundary of the box.\n   */\n  constructor() {\n    let min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3(+Infinity, +Infinity, +Infinity);\n    let max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3(-Infinity, -Infinity, -Infinity);\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isBox3 = true;\n\n    /**\n     * The lower boundary of the box.\n     *\n     * @type {Vector3}\n     */\n    this.min = min;\n\n    /**\n     * The upper boundary of the box.\n     *\n     * @type {Vector3}\n     */\n    this.max = max;\n  }\n\n  /**\n   * Sets the lower and upper boundaries of this box.\n   * Please note that this method only copies the values from the given objects.\n   *\n   * @param {Vector3} min - The lower boundary of the box.\n   * @param {Vector3} max - The upper boundary of the box.\n   * @return {Box3} A reference to this bounding box.\n   */\n  set(min, max) {\n    this.min.copy(min);\n    this.max.copy(max);\n    return this;\n  }\n\n  /**\n   * Sets the upper and lower bounds of this box so it encloses the position data\n   * in the given array.\n   *\n   * @param {Array<number>} array - An array holding 3D position data.\n   * @return {Box3} A reference to this bounding box.\n   */\n  setFromArray(array) {\n    this.makeEmpty();\n    for (let i = 0, il = array.length; i < il; i += 3) {\n      this.expandByPoint(_vector$b.fromArray(array, i));\n    }\n    return this;\n  }\n\n  /**\n   * Sets the upper and lower bounds of this box so it encloses the position data\n   * in the given buffer attribute.\n   *\n   * @param {BufferAttribute} attribute - A buffer attribute holding 3D position data.\n   * @return {Box3} A reference to this bounding box.\n   */\n  setFromBufferAttribute(attribute) {\n    this.makeEmpty();\n    for (let i = 0, il = attribute.count; i < il; i++) {\n      this.expandByPoint(_vector$b.fromBufferAttribute(attribute, i));\n    }\n    return this;\n  }\n\n  /**\n   * Sets the upper and lower bounds of this box so it encloses the position data\n   * in the given array.\n   *\n   * @param {Array<Vector3>} points - An array holding 3D position data as instances of {@link Vector3}.\n   * @return {Box3} A reference to this bounding box.\n   */\n  setFromPoints(points) {\n    this.makeEmpty();\n    for (let i = 0, il = points.length; i < il; i++) {\n      this.expandByPoint(points[i]);\n    }\n    return this;\n  }\n\n  /**\n   * Centers this box on the given center vector and sets this box's width, height and\n   * depth to the given size values.\n   *\n   * @param {Vector3} center - The center of the box.\n   * @param {Vector3} size - The x, y and z dimensions of the box.\n   * @return {Box3} A reference to this bounding box.\n   */\n  setFromCenterAndSize(center, size) {\n    const halfSize = _vector$b.copy(size).multiplyScalar(0.5);\n    this.min.copy(center).sub(halfSize);\n    this.max.copy(center).add(halfSize);\n    return this;\n  }\n\n  /**\n   * Computes the world-axis-aligned bounding box for the given 3D object\n   * (including its children), accounting for the object's, and children's,\n   * world transforms. The function may result in a larger box than strictly necessary.\n   *\n   * @param {Object3D} object - The 3D object to compute the bounding box for.\n   * @param {boolean} [precise=false] - If set to `true`, the method computes the smallest\n   * world-axis-aligned bounding box at the expense of more computation.\n   * @return {Box3} A reference to this bounding box.\n   */\n  setFromObject(object) {\n    let precise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    this.makeEmpty();\n    return this.expandByObject(object, precise);\n  }\n\n  /**\n   * Returns a new box with copied values from this instance.\n   *\n   * @return {Box3} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  /**\n   * Copies the values of the given box to this instance.\n   *\n   * @param {Box3} box - The box to copy.\n   * @return {Box3} A reference to this bounding box.\n   */\n  copy(box) {\n    this.min.copy(box.min);\n    this.max.copy(box.max);\n    return this;\n  }\n\n  /**\n   * Makes this box empty which means in encloses a zero space in 3D.\n   *\n   * @return {Box3} A reference to this bounding box.\n   */\n  makeEmpty() {\n    this.min.x = this.min.y = this.min.z = +Infinity;\n    this.max.x = this.max.y = this.max.z = -Infinity;\n    return this;\n  }\n\n  /**\n   * Returns true if this box includes zero points within its bounds.\n   * Note that a box with equal lower and upper bounds still includes one\n   * point, the one both bounds share.\n   *\n   * @return {boolean} Whether this box is empty or not.\n   */\n  isEmpty() {\n    // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;\n  }\n\n  /**\n   * Returns the center point of this box.\n   *\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} The center point.\n   */\n  getCenter(target) {\n    return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n  }\n\n  /**\n   * Returns the dimensions of this box.\n   *\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} The size.\n   */\n  getSize(target) {\n    return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);\n  }\n\n  /**\n   * Expands the boundaries of this box to include the given point.\n   *\n   * @param {Vector3} point - The point that should be included by the bounding box.\n   * @return {Box3} A reference to this bounding box.\n   */\n  expandByPoint(point) {\n    this.min.min(point);\n    this.max.max(point);\n    return this;\n  }\n\n  /**\n   * Expands this box equilaterally by the given vector. The width of this\n   * box will be expanded by the x component of the vector in both\n   * directions. The height of this box will be expanded by the y component of\n   * the vector in both directions. The depth of this box will be\n   * expanded by the z component of the vector in both directions.\n   *\n   * @param {Vector3} vector - The vector that should expand the bounding box.\n   * @return {Box3} A reference to this bounding box.\n   */\n  expandByVector(vector) {\n    this.min.sub(vector);\n    this.max.add(vector);\n    return this;\n  }\n\n  /**\n   * Expands each dimension of the box by the given scalar. If negative, the\n   * dimensions of the box will be contracted.\n   *\n   * @param {number} scalar - The scalar value that should expand the bounding box.\n   * @return {Box3} A reference to this bounding box.\n   */\n  expandByScalar(scalar) {\n    this.min.addScalar(-scalar);\n    this.max.addScalar(scalar);\n    return this;\n  }\n\n  /**\n   * Expands the boundaries of this box to include the given 3D object and\n   * its children, accounting for the object's, and children's, world\n   * transforms. The function may result in a larger box than strictly\n   * necessary (unless the precise parameter is set to true).\n   *\n   * @param {Object3D} object - The 3D object that should expand the bounding box.\n   * @param {boolean} precise - If set to `true`, the method expands the bounding box\n   * as little as necessary at the expense of more computation.\n   * @return {Box3} A reference to this bounding box.\n   */\n  expandByObject(object) {\n    let precise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    // Computes the world-axis-aligned bounding box of an object (including its children),\n    // accounting for both the object's, and children's, world transforms\n\n    object.updateWorldMatrix(false, false);\n    const geometry = object.geometry;\n    if (geometry !== undefined) {\n      const positionAttribute = geometry.getAttribute('position');\n\n      // precise AABB computation based on vertex data requires at least a position attribute.\n      // instancing isn't supported so far and uses the normal (conservative) code path.\n\n      if (precise === true && positionAttribute !== undefined && object.isInstancedMesh !== true) {\n        for (let i = 0, l = positionAttribute.count; i < l; i++) {\n          if (object.isMesh === true) {\n            object.getVertexPosition(i, _vector$b);\n          } else {\n            _vector$b.fromBufferAttribute(positionAttribute, i);\n          }\n          _vector$b.applyMatrix4(object.matrixWorld);\n          this.expandByPoint(_vector$b);\n        }\n      } else {\n        if (object.boundingBox !== undefined) {\n          // object-level bounding box\n\n          if (object.boundingBox === null) {\n            object.computeBoundingBox();\n          }\n          _box$4.copy(object.boundingBox);\n        } else {\n          // geometry-level bounding box\n\n          if (geometry.boundingBox === null) {\n            geometry.computeBoundingBox();\n          }\n          _box$4.copy(geometry.boundingBox);\n        }\n        _box$4.applyMatrix4(object.matrixWorld);\n        this.union(_box$4);\n      }\n    }\n    const children = object.children;\n    for (let i = 0, l = children.length; i < l; i++) {\n      this.expandByObject(children[i], precise);\n    }\n    return this;\n  }\n\n  /**\n   * Returns `true` if the given point lies within or on the boundaries of this box.\n   *\n   * @param {Vector3} point - The point to test.\n   * @return {boolean} Whether the bounding box contains the given point or not.\n   */\n  containsPoint(point) {\n    return point.x >= this.min.x && point.x <= this.max.x && point.y >= this.min.y && point.y <= this.max.y && point.z >= this.min.z && point.z <= this.max.z;\n  }\n\n  /**\n   * Returns `true` if this bounding box includes the entirety of the given bounding box.\n   * If this box and the given one are identical, this function also returns `true`.\n   *\n   * @param {Box3} box - The bounding box to test.\n   * @return {boolean} Whether the bounding box contains the given bounding box or not.\n   */\n  containsBox(box) {\n    return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;\n  }\n\n  /**\n   * Returns a point as a proportion of this box's width, height and depth.\n   *\n   * @param {Vector3} point - A point in 3D space.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} A point as a proportion of this box's width, height and depth.\n   */\n  getParameter(point, target) {\n    // This can potentially have a divide by zero if the box\n    // has a size dimension of 0.\n\n    return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));\n  }\n\n  /**\n   * Returns `true` if the given bounding box intersects with this bounding box.\n   *\n   * @param {Box3} box - The bounding box to test.\n   * @return {boolean} Whether the given bounding box intersects with this bounding box.\n   */\n  intersectsBox(box) {\n    // using 6 splitting planes to rule out intersections.\n    return box.max.x >= this.min.x && box.min.x <= this.max.x && box.max.y >= this.min.y && box.min.y <= this.max.y && box.max.z >= this.min.z && box.min.z <= this.max.z;\n  }\n\n  /**\n   * Returns `true` if the given bounding sphere intersects with this bounding box.\n   *\n   * @param {Sphere} sphere - The bounding sphere to test.\n   * @return {boolean} Whether the given bounding sphere intersects with this bounding box.\n   */\n  intersectsSphere(sphere) {\n    // Find the point on the AABB closest to the sphere center.\n    this.clampPoint(sphere.center, _vector$b);\n\n    // If that point is inside the sphere, the AABB and sphere intersect.\n    return _vector$b.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n  }\n\n  /**\n   * Returns `true` if the given plane intersects with this bounding box.\n   *\n   * @param {Plane} plane - The plane to test.\n   * @return {boolean} Whether the given plane intersects with this bounding box.\n   */\n  intersectsPlane(plane) {\n    // We compute the minimum and maximum dot product values. If those values\n    // are on the same side (back or front) of the plane, then there is no intersection.\n\n    let min, max;\n    if (plane.normal.x > 0) {\n      min = plane.normal.x * this.min.x;\n      max = plane.normal.x * this.max.x;\n    } else {\n      min = plane.normal.x * this.max.x;\n      max = plane.normal.x * this.min.x;\n    }\n    if (plane.normal.y > 0) {\n      min += plane.normal.y * this.min.y;\n      max += plane.normal.y * this.max.y;\n    } else {\n      min += plane.normal.y * this.max.y;\n      max += plane.normal.y * this.min.y;\n    }\n    if (plane.normal.z > 0) {\n      min += plane.normal.z * this.min.z;\n      max += plane.normal.z * this.max.z;\n    } else {\n      min += plane.normal.z * this.max.z;\n      max += plane.normal.z * this.min.z;\n    }\n    return min <= -plane.constant && max >= -plane.constant;\n  }\n\n  /**\n   * Returns `true` if the given triangle intersects with this bounding box.\n   *\n   * @param {Triangle} triangle - The triangle to test.\n   * @return {boolean} Whether the given triangle intersects with this bounding box.\n   */\n  intersectsTriangle(triangle) {\n    if (this.isEmpty()) {\n      return false;\n    }\n\n    // compute box center and extents\n    this.getCenter(_center);\n    _extents.subVectors(this.max, _center);\n\n    // translate triangle to aabb origin\n    _v0$2.subVectors(triangle.a, _center);\n    _v1$7.subVectors(triangle.b, _center);\n    _v2$4.subVectors(triangle.c, _center);\n\n    // compute edge vectors for triangle\n    _f0.subVectors(_v1$7, _v0$2);\n    _f1.subVectors(_v2$4, _v1$7);\n    _f2.subVectors(_v0$2, _v2$4);\n\n    // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n    // make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n    // axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n    let axes = [0, -_f0.z, _f0.y, 0, -_f1.z, _f1.y, 0, -_f2.z, _f2.y, _f0.z, 0, -_f0.x, _f1.z, 0, -_f1.x, _f2.z, 0, -_f2.x, -_f0.y, _f0.x, 0, -_f1.y, _f1.x, 0, -_f2.y, _f2.x, 0];\n    if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {\n      return false;\n    }\n\n    // test 3 face normals from the aabb\n    axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {\n      return false;\n    }\n\n    // finally testing the face normal of the triangle\n    // use already existing triangle edge vectors here\n    _triangleNormal.crossVectors(_f0, _f1);\n    axes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];\n    return satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents);\n  }\n\n  /**\n   * Clamps the given point within the bounds of this box.\n   *\n   * @param {Vector3} point - The point to clamp.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} The clamped point.\n   */\n  clampPoint(point, target) {\n    return target.copy(point).clamp(this.min, this.max);\n  }\n\n  /**\n   * Returns the euclidean distance from any edge of this box to the specified point. If\n   * the given point lies inside of this box, the distance will be `0`.\n   *\n   * @param {Vector3} point - The point to compute the distance to.\n   * @return {number} The euclidean distance.\n   */\n  distanceToPoint(point) {\n    return this.clampPoint(point, _vector$b).distanceTo(point);\n  }\n\n  /**\n   * Returns a bounding sphere that encloses this bounding box.\n   *\n   * @param {Sphere} target - The target sphere that is used to store the method's result.\n   * @return {Sphere} The bounding sphere that encloses this bounding box.\n   */\n  getBoundingSphere(target) {\n    if (this.isEmpty()) {\n      target.makeEmpty();\n    } else {\n      this.getCenter(target.center);\n      target.radius = this.getSize(_vector$b).length() * 0.5;\n    }\n    return target;\n  }\n\n  /**\n   * Computes the intersection of this bounding box and the given one, setting the upper\n   * bound of this box to the lesser of the two boxes' upper bounds and the\n   * lower bound of this box to the greater of the two boxes' lower bounds. If\n   * there's no overlap, makes this box empty.\n   *\n   * @param {Box3} box - The bounding box to intersect with.\n   * @return {Box3} A reference to this bounding box.\n   */\n  intersect(box) {\n    this.min.max(box.min);\n    this.max.min(box.max);\n\n    // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n    if (this.isEmpty()) this.makeEmpty();\n    return this;\n  }\n\n  /**\n   * Computes the union of this box and another and the given one, setting the upper\n   * bound of this box to the greater of the two boxes' upper bounds and the\n   * lower bound of this box to the lesser of the two boxes' lower bounds.\n   *\n   * @param {Box3} box - The bounding box that will be unioned with this instance.\n   * @return {Box3} A reference to this bounding box.\n   */\n  union(box) {\n    this.min.min(box.min);\n    this.max.max(box.max);\n    return this;\n  }\n\n  /**\n   * Transforms this bounding box by the given 4x4 transformation matrix.\n   *\n   * @param {Matrix4} matrix - The transformation matrix.\n   * @return {Box3} A reference to this bounding box.\n   */\n  applyMatrix4(matrix) {\n    // transform of empty box is an empty box.\n    if (this.isEmpty()) return this;\n\n    // NOTE: I am using a binary pattern to specify all 2^3 combinations below\n    _points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000\n    _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001\n    _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010\n    _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011\n    _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100\n    _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101\n    _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110\n    _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111\n\n    this.setFromPoints(_points);\n    return this;\n  }\n\n  /**\n   * Adds the given offset to both the upper and lower bounds of this bounding box,\n   * effectively moving it in 3D space.\n   *\n   * @param {Vector3} offset - The offset that should be used to translate the bounding box.\n   * @return {Box3} A reference to this bounding box.\n   */\n  translate(offset) {\n    this.min.add(offset);\n    this.max.add(offset);\n    return this;\n  }\n\n  /**\n   * Returns `true` if this bounding box is equal with the given one.\n   *\n   * @param {Box3} box - The box to test for equality.\n   * @return {boolean} Whether this bounding box is equal with the given one.\n   */\n  equals(box) {\n    return box.min.equals(this.min) && box.max.equals(this.max);\n  }\n}\nconst _points = [/*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3()];\nconst _vector$b = /*@__PURE__*/new Vector3();\nconst _box$4 = /*@__PURE__*/new Box3();\n\n// triangle centered vertices\n\nconst _v0$2 = /*@__PURE__*/new Vector3();\nconst _v1$7 = /*@__PURE__*/new Vector3();\nconst _v2$4 = /*@__PURE__*/new Vector3();\n\n// triangle edge vectors\n\nconst _f0 = /*@__PURE__*/new Vector3();\nconst _f1 = /*@__PURE__*/new Vector3();\nconst _f2 = /*@__PURE__*/new Vector3();\nconst _center = /*@__PURE__*/new Vector3();\nconst _extents = /*@__PURE__*/new Vector3();\nconst _triangleNormal = /*@__PURE__*/new Vector3();\nconst _testAxis = /*@__PURE__*/new Vector3();\nfunction satForAxes(axes, v0, v1, v2, extents) {\n  for (let i = 0, j = axes.length - 3; i <= j; i += 3) {\n    _testAxis.fromArray(axes, i);\n    // project the aabb onto the separating axis\n    const r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z);\n    // project all 3 vertices of the triangle onto the separating axis\n    const p0 = v0.dot(_testAxis);\n    const p1 = v1.dot(_testAxis);\n    const p2 = v2.dot(_testAxis);\n    // actual test, basically see if either of the most extreme of the triangle points intersects r\n    if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {\n      // points of the projected triangle are outside the projected half-length of the aabb\n      // the axis is separating and we can exit\n      return false;\n    }\n  }\n  return true;\n}\nconst _box$3 = /*@__PURE__*/new Box3();\nconst _v1$6 = /*@__PURE__*/new Vector3();\nconst _v2$3 = /*@__PURE__*/new Vector3();\n\n/**\n * An analytical 3D sphere defined by a center and radius. This class is mainly\n * used as a Bounding Sphere for 3D objects.\n */\nclass Sphere {\n  /**\n   * Constructs a new sphere.\n   *\n   * @param {Vector3} [center=(0,0,0)] - The center of the sphere\n   * @param {number} [radius=-1] - The radius of the sphere.\n   */\n  constructor() {\n    let center = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n    let radius = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isSphere = true;\n\n    /**\n     * The center of the sphere\n     *\n     * @type {Vector3}\n     */\n    this.center = center;\n\n    /**\n     * The radius of the sphere.\n     *\n     * @type {number}\n     */\n    this.radius = radius;\n  }\n\n  /**\n   * Sets the sphere's components by copying the given values.\n   *\n   * @param {Vector3} center - The center.\n   * @param {number} radius - The radius.\n   * @return {Sphere} A reference to this sphere.\n   */\n  set(center, radius) {\n    this.center.copy(center);\n    this.radius = radius;\n    return this;\n  }\n\n  /**\n   * Computes the minimum bounding sphere for list of points.\n   * If the optional center point is given, it is used as the sphere's\n   * center. Otherwise, the center of the axis-aligned bounding box\n   * encompassing the points is calculated.\n   *\n   * @param {Array<Vector3>} points - A list of points in 3D space.\n   * @param {Vector3} [optionalCenter] - The center of the sphere.\n   * @return {Sphere} A reference to this sphere.\n   */\n  setFromPoints(points, optionalCenter) {\n    const center = this.center;\n    if (optionalCenter !== undefined) {\n      center.copy(optionalCenter);\n    } else {\n      _box$3.setFromPoints(points).getCenter(center);\n    }\n    let maxRadiusSq = 0;\n    for (let i = 0, il = points.length; i < il; i++) {\n      maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));\n    }\n    this.radius = Math.sqrt(maxRadiusSq);\n    return this;\n  }\n\n  /**\n   * Copies the values of the given sphere to this instance.\n   *\n   * @param {Sphere} sphere - The sphere to copy.\n   * @return {Sphere} A reference to this sphere.\n   */\n  copy(sphere) {\n    this.center.copy(sphere.center);\n    this.radius = sphere.radius;\n    return this;\n  }\n\n  /**\n   * Returns `true` if the sphere is empty (the radius set to a negative number).\n   *\n   * Spheres with a radius of `0` contain only their center point and are not\n   * considered to be empty.\n   *\n   * @return {boolean} Whether this sphere is empty or not.\n   */\n  isEmpty() {\n    return this.radius < 0;\n  }\n\n  /**\n   * Makes this sphere empty which means in encloses a zero space in 3D.\n   *\n   * @return {Sphere} A reference to this sphere.\n   */\n  makeEmpty() {\n    this.center.set(0, 0, 0);\n    this.radius = -1;\n    return this;\n  }\n\n  /**\n   * Returns `true` if this sphere contains the given point inclusive of\n   * the surface of the sphere.\n   *\n   * @param {Vector3} point - The point to check.\n   * @return {boolean} Whether this sphere contains the given point or not.\n   */\n  containsPoint(point) {\n    return point.distanceToSquared(this.center) <= this.radius * this.radius;\n  }\n\n  /**\n   * Returns the closest distance from the boundary of the sphere to the\n   * given point. If the sphere contains the point, the distance will\n   * be negative.\n   *\n   * @param {Vector3} point - The point to compute the distance to.\n   * @return {number} The distance to the point.\n   */\n  distanceToPoint(point) {\n    return point.distanceTo(this.center) - this.radius;\n  }\n\n  /**\n   * Returns `true` if this sphere intersects with the given one.\n   *\n   * @param {Sphere} sphere - The sphere to test.\n   * @return {boolean} Whether this sphere intersects with the given one or not.\n   */\n  intersectsSphere(sphere) {\n    const radiusSum = this.radius + sphere.radius;\n    return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;\n  }\n\n  /**\n   * Returns `true` if this sphere intersects with the given box.\n   *\n   * @param {Box3} box - The box to test.\n   * @return {boolean} Whether this sphere intersects with the given box or not.\n   */\n  intersectsBox(box) {\n    return box.intersectsSphere(this);\n  }\n\n  /**\n   * Returns `true` if this sphere intersects with the given plane.\n   *\n   * @param {Plane} plane - The plane to test.\n   * @return {boolean} Whether this sphere intersects with the given plane or not.\n   */\n  intersectsPlane(plane) {\n    return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;\n  }\n\n  /**\n   * Clamps a point within the sphere. If the point is outside the sphere, it\n   * will clamp it to the closest point on the edge of the sphere. Points\n   * already inside the sphere will not be affected.\n   *\n   * @param {Vector3} point - The plane to clamp.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} The clamped point.\n   */\n  clampPoint(point, target) {\n    const deltaLengthSq = this.center.distanceToSquared(point);\n    target.copy(point);\n    if (deltaLengthSq > this.radius * this.radius) {\n      target.sub(this.center).normalize();\n      target.multiplyScalar(this.radius).add(this.center);\n    }\n    return target;\n  }\n\n  /**\n   * Returns a bounding box that encloses this sphere.\n   *\n   * @param {Box3} target - The target box that is used to store the method's result.\n   * @return {Box3} The bounding box that encloses this sphere.\n   */\n  getBoundingBox(target) {\n    if (this.isEmpty()) {\n      // Empty sphere produces empty bounding box\n      target.makeEmpty();\n      return target;\n    }\n    target.set(this.center, this.center);\n    target.expandByScalar(this.radius);\n    return target;\n  }\n\n  /**\n   * Transforms this sphere with the given 4x4 transformation matrix.\n   *\n   * @param {Matrix4} matrix - The transformation matrix.\n   * @return {Sphere} A reference to this sphere.\n   */\n  applyMatrix4(matrix) {\n    this.center.applyMatrix4(matrix);\n    this.radius = this.radius * matrix.getMaxScaleOnAxis();\n    return this;\n  }\n\n  /**\n   * Translates the sphere's center by the given offset.\n   *\n   * @param {Vector3} offset - The offset.\n   * @return {Sphere} A reference to this sphere.\n   */\n  translate(offset) {\n    this.center.add(offset);\n    return this;\n  }\n\n  /**\n   * Expands the boundaries of this sphere to include the given point.\n   *\n   * @param {Vector3} point - The point to include.\n   * @return {Sphere} A reference to this sphere.\n   */\n  expandByPoint(point) {\n    if (this.isEmpty()) {\n      this.center.copy(point);\n      this.radius = 0;\n      return this;\n    }\n    _v1$6.subVectors(point, this.center);\n    const lengthSq = _v1$6.lengthSq();\n    if (lengthSq > this.radius * this.radius) {\n      // calculate the minimal sphere\n\n      const length = Math.sqrt(lengthSq);\n      const delta = (length - this.radius) * 0.5;\n      this.center.addScaledVector(_v1$6, delta / length);\n      this.radius += delta;\n    }\n    return this;\n  }\n\n  /**\n   * Expands this sphere to enclose both the original sphere and the given sphere.\n   *\n   * @param {Sphere} sphere - The sphere to include.\n   * @return {Sphere} A reference to this sphere.\n   */\n  union(sphere) {\n    if (sphere.isEmpty()) {\n      return this;\n    }\n    if (this.isEmpty()) {\n      this.copy(sphere);\n      return this;\n    }\n    if (this.center.equals(sphere.center) === true) {\n      this.radius = Math.max(this.radius, sphere.radius);\n    } else {\n      _v2$3.subVectors(sphere.center, this.center).setLength(sphere.radius);\n      this.expandByPoint(_v1$6.copy(sphere.center).add(_v2$3));\n      this.expandByPoint(_v1$6.copy(sphere.center).sub(_v2$3));\n    }\n    return this;\n  }\n\n  /**\n   * Returns `true` if this sphere is equal with the given one.\n   *\n   * @param {Sphere} sphere - The sphere to test for equality.\n   * @return {boolean} Whether this bounding sphere is equal with the given one.\n   */\n  equals(sphere) {\n    return sphere.center.equals(this.center) && sphere.radius === this.radius;\n  }\n\n  /**\n   * Returns a new sphere with copied values from this instance.\n   *\n   * @return {Sphere} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n}\nconst _vector$a = /*@__PURE__*/new Vector3();\nconst _segCenter = /*@__PURE__*/new Vector3();\nconst _segDir = /*@__PURE__*/new Vector3();\nconst _diff = /*@__PURE__*/new Vector3();\nconst _edge1 = /*@__PURE__*/new Vector3();\nconst _edge2 = /*@__PURE__*/new Vector3();\nconst _normal$1 = /*@__PURE__*/new Vector3();\n\n/**\n * A ray that emits from an origin in a certain direction. The class is used by\n * {@link Raycaster} to assist with raycasting. Raycasting is used for\n * mouse picking (working out what objects in the 3D space the mouse is over)\n * amongst other things.\n */\nclass Ray {\n  /**\n   * Constructs a new ray.\n   *\n   * @param {Vector3} [origin=(0,0,0)] - The origin of the ray.\n   * @param {Vector3} [direction=(0,0,-1)] - The (normalized) direction of the ray.\n   */\n  constructor() {\n    let origin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n    let direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3(0, 0, -1);\n    /**\n     * The origin of the ray.\n     *\n     * @type {Vector3}\n     */\n    this.origin = origin;\n\n    /**\n     * The (normalized) direction of the ray.\n     *\n     * @type {Vector3}\n     */\n    this.direction = direction;\n  }\n\n  /**\n   * Sets the ray's components by copying the given values.\n   *\n   * @param {Vector3} origin - The origin.\n   * @param {Vector3} direction - The direction.\n   * @return {Ray} A reference to this ray.\n   */\n  set(origin, direction) {\n    this.origin.copy(origin);\n    this.direction.copy(direction);\n    return this;\n  }\n\n  /**\n   * Copies the values of the given ray to this instance.\n   *\n   * @param {Ray} ray - The ray to copy.\n   * @return {Ray} A reference to this ray.\n   */\n  copy(ray) {\n    this.origin.copy(ray.origin);\n    this.direction.copy(ray.direction);\n    return this;\n  }\n\n  /**\n   * Returns a vector that is located at a given distance along this ray.\n   *\n   * @param {number} t - The distance along the ray to retrieve a position for.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} A position on the ray.\n   */\n  at(t, target) {\n    return target.copy(this.origin).addScaledVector(this.direction, t);\n  }\n\n  /**\n   * Adjusts the direction of the ray to point at the given vector in world space.\n   *\n   * @param {Vector3} v - The target position.\n   * @return {Ray} A reference to this ray.\n   */\n  lookAt(v) {\n    this.direction.copy(v).sub(this.origin).normalize();\n    return this;\n  }\n\n  /**\n   * Shift the origin of this ray along its direction by the given distance.\n   *\n   * @param {number} t - The distance along the ray to interpolate.\n   * @return {Ray} A reference to this ray.\n   */\n  recast(t) {\n    this.origin.copy(this.at(t, _vector$a));\n    return this;\n  }\n\n  /**\n   * Returns the point along this ray that is closest to the given point.\n   *\n   * @param {Vector3} point - A point in 3D space to get the closet location on the ray for.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} The closest point on this ray.\n   */\n  closestPointToPoint(point, target) {\n    target.subVectors(point, this.origin);\n    const directionDistance = target.dot(this.direction);\n    if (directionDistance < 0) {\n      return target.copy(this.origin);\n    }\n    return target.copy(this.origin).addScaledVector(this.direction, directionDistance);\n  }\n\n  /**\n   * Returns the distance of the closest approach between this ray and the given point.\n   *\n   * @param {Vector3} point - A point in 3D space to compute the distance to.\n   * @return {number} The distance.\n   */\n  distanceToPoint(point) {\n    return Math.sqrt(this.distanceSqToPoint(point));\n  }\n\n  /**\n   * Returns the squared distance of the closest approach between this ray and the given point.\n   *\n   * @param {Vector3} point - A point in 3D space to compute the distance to.\n   * @return {number} The squared distance.\n   */\n  distanceSqToPoint(point) {\n    const directionDistance = _vector$a.subVectors(point, this.origin).dot(this.direction);\n\n    // point behind the ray\n\n    if (directionDistance < 0) {\n      return this.origin.distanceToSquared(point);\n    }\n    _vector$a.copy(this.origin).addScaledVector(this.direction, directionDistance);\n    return _vector$a.distanceToSquared(point);\n  }\n\n  /**\n   * Returns the squared distance between this ray and the given line segment.\n   *\n   * @param {Vector3} v0 - The start point of the line segment.\n   * @param {Vector3} v1 - The end point of the line segment.\n   * @param {Vector3} [optionalPointOnRay] - When provided, it receives the point on this ray that is closest to the segment.\n   * @param {Vector3} [optionalPointOnSegment] - When provided, it receives the point on the line segment that is closest to this ray.\n   * @return {number} The squared distance.\n   */\n  distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {\n    // from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h\n    // It returns the min distance between the ray and the segment\n    // defined by v0 and v1\n    // It can also set two optional targets :\n    // - The closest point on the ray\n    // - The closest point on the segment\n\n    _segCenter.copy(v0).add(v1).multiplyScalar(0.5);\n    _segDir.copy(v1).sub(v0).normalize();\n    _diff.copy(this.origin).sub(_segCenter);\n    const segExtent = v0.distanceTo(v1) * 0.5;\n    const a01 = -this.direction.dot(_segDir);\n    const b0 = _diff.dot(this.direction);\n    const b1 = -_diff.dot(_segDir);\n    const c = _diff.lengthSq();\n    const det = Math.abs(1 - a01 * a01);\n    let s0, s1, sqrDist, extDet;\n    if (det > 0) {\n      // The ray and segment are not parallel.\n\n      s0 = a01 * b1 - b0;\n      s1 = a01 * b0 - b1;\n      extDet = segExtent * det;\n      if (s0 >= 0) {\n        if (s1 >= -extDet) {\n          if (s1 <= extDet) {\n            // region 0\n            // Minimum at interior points of ray and segment.\n\n            const invDet = 1 / det;\n            s0 *= invDet;\n            s1 *= invDet;\n            sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;\n          } else {\n            // region 1\n\n            s1 = segExtent;\n            s0 = Math.max(0, -(a01 * s1 + b0));\n            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n          }\n        } else {\n          // region 5\n\n          s1 = -segExtent;\n          s0 = Math.max(0, -(a01 * s1 + b0));\n          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n        }\n      } else {\n        if (s1 <= -extDet) {\n          // region 4\n\n          s0 = Math.max(0, -(-a01 * segExtent + b0));\n          s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n        } else if (s1 <= extDet) {\n          // region 3\n\n          s0 = 0;\n          s1 = Math.min(Math.max(-segExtent, -b1), segExtent);\n          sqrDist = s1 * (s1 + 2 * b1) + c;\n        } else {\n          // region 2\n\n          s0 = Math.max(0, -(a01 * segExtent + b0));\n          s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n        }\n      }\n    } else {\n      // Ray and segment are parallel.\n\n      s1 = a01 > 0 ? -segExtent : segExtent;\n      s0 = Math.max(0, -(a01 * s1 + b0));\n      sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n    }\n    if (optionalPointOnRay) {\n      optionalPointOnRay.copy(this.origin).addScaledVector(this.direction, s0);\n    }\n    if (optionalPointOnSegment) {\n      optionalPointOnSegment.copy(_segCenter).addScaledVector(_segDir, s1);\n    }\n    return sqrDist;\n  }\n\n  /**\n   * Intersects this ray with the given sphere, returning the intersection\n   * point or `null` if there is no intersection.\n   *\n   * @param {Sphere} sphere - The sphere to intersect.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {?Vector3} The intersection point.\n   */\n  intersectSphere(sphere, target) {\n    _vector$a.subVectors(sphere.center, this.origin);\n    const tca = _vector$a.dot(this.direction);\n    const d2 = _vector$a.dot(_vector$a) - tca * tca;\n    const radius2 = sphere.radius * sphere.radius;\n    if (d2 > radius2) return null;\n    const thc = Math.sqrt(radius2 - d2);\n\n    // t0 = first intersect point - entrance on front of sphere\n    const t0 = tca - thc;\n\n    // t1 = second intersect point - exit point on back of sphere\n    const t1 = tca + thc;\n\n    // test to see if t1 is behind the ray - if so, return null\n    if (t1 < 0) return null;\n\n    // test to see if t0 is behind the ray:\n    // if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n    // in order to always return an intersect point that is in front of the ray.\n    if (t0 < 0) return this.at(t1, target);\n\n    // else t0 is in front of the ray, so return the first collision point scaled by t0\n    return this.at(t0, target);\n  }\n\n  /**\n   * Returns `true` if this ray intersects with the given sphere.\n   *\n   * @param {Sphere} sphere - The sphere to intersect.\n   * @return {boolean} Whether this ray intersects with the given sphere or not.\n   */\n  intersectsSphere(sphere) {\n    return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;\n  }\n\n  /**\n   * Computes the distance from the ray's origin to the given plane. Returns `null` if the ray\n   * does not intersect with the plane.\n   *\n   * @param {Plane} plane - The plane to compute the distance to.\n   * @return {?number} Whether this ray intersects with the given sphere or not.\n   */\n  distanceToPlane(plane) {\n    const denominator = plane.normal.dot(this.direction);\n    if (denominator === 0) {\n      // line is coplanar, return origin\n      if (plane.distanceToPoint(this.origin) === 0) {\n        return 0;\n      }\n\n      // Null is preferable to undefined since undefined means.... it is undefined\n\n      return null;\n    }\n    const t = -(this.origin.dot(plane.normal) + plane.constant) / denominator;\n\n    // Return if the ray never intersects the plane\n\n    return t >= 0 ? t : null;\n  }\n\n  /**\n   * Intersects this ray with the given plane, returning the intersection\n   * point or `null` if there is no intersection.\n   *\n   * @param {Plane} plane - The plane to intersect.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {?Vector3} The intersection point.\n   */\n  intersectPlane(plane, target) {\n    const t = this.distanceToPlane(plane);\n    if (t === null) {\n      return null;\n    }\n    return this.at(t, target);\n  }\n\n  /**\n   * Returns `true` if this ray intersects with the given plane.\n   *\n   * @param {Plane} plane - The plane to intersect.\n   * @return {boolean} Whether this ray intersects with the given plane or not.\n   */\n  intersectsPlane(plane) {\n    // check if the ray lies on the plane first\n\n    const distToPoint = plane.distanceToPoint(this.origin);\n    if (distToPoint === 0) {\n      return true;\n    }\n    const denominator = plane.normal.dot(this.direction);\n    if (denominator * distToPoint < 0) {\n      return true;\n    }\n\n    // ray origin is behind the plane (and is pointing behind it)\n\n    return false;\n  }\n\n  /**\n   * Intersects this ray with the given bounding box, returning the intersection\n   * point or `null` if there is no intersection.\n   *\n   * @param {Box3} box - The box to intersect.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {?Vector3} The intersection point.\n   */\n  intersectBox(box, target) {\n    let tmin, tmax, tymin, tymax, tzmin, tzmax;\n    const invdirx = 1 / this.direction.x,\n      invdiry = 1 / this.direction.y,\n      invdirz = 1 / this.direction.z;\n    const origin = this.origin;\n    if (invdirx >= 0) {\n      tmin = (box.min.x - origin.x) * invdirx;\n      tmax = (box.max.x - origin.x) * invdirx;\n    } else {\n      tmin = (box.max.x - origin.x) * invdirx;\n      tmax = (box.min.x - origin.x) * invdirx;\n    }\n    if (invdiry >= 0) {\n      tymin = (box.min.y - origin.y) * invdiry;\n      tymax = (box.max.y - origin.y) * invdiry;\n    } else {\n      tymin = (box.max.y - origin.y) * invdiry;\n      tymax = (box.min.y - origin.y) * invdiry;\n    }\n    if (tmin > tymax || tymin > tmax) return null;\n    if (tymin > tmin || isNaN(tmin)) tmin = tymin;\n    if (tymax < tmax || isNaN(tmax)) tmax = tymax;\n    if (invdirz >= 0) {\n      tzmin = (box.min.z - origin.z) * invdirz;\n      tzmax = (box.max.z - origin.z) * invdirz;\n    } else {\n      tzmin = (box.max.z - origin.z) * invdirz;\n      tzmax = (box.min.z - origin.z) * invdirz;\n    }\n    if (tmin > tzmax || tzmin > tmax) return null;\n    if (tzmin > tmin || tmin !== tmin) tmin = tzmin;\n    if (tzmax < tmax || tmax !== tmax) tmax = tzmax;\n\n    //return point closest to the ray (positive side)\n\n    if (tmax < 0) return null;\n    return this.at(tmin >= 0 ? tmin : tmax, target);\n  }\n\n  /**\n   * Returns `true` if this ray intersects with the given box.\n   *\n   * @param {Box3} box - The box to intersect.\n   * @return {boolean} Whether this ray intersects with the given box or not.\n   */\n  intersectsBox(box) {\n    return this.intersectBox(box, _vector$a) !== null;\n  }\n\n  /**\n   * Intersects this ray with the given triangle, returning the intersection\n   * point or `null` if there is no intersection.\n   *\n   * @param {Vector3} a - The first vertex of the triangle.\n   * @param {Vector3} b - The second vertex of the triangle.\n   * @param {Vector3} c - The third vertex of the triangle.\n   * @param {boolean} backfaceCulling - Whether to use backface culling or not.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {?Vector3} The intersection point.\n   */\n  intersectTriangle(a, b, c, backfaceCulling, target) {\n    // Compute the offset origin, edges, and normal.\n\n    // from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n    _edge1.subVectors(b, a);\n    _edge2.subVectors(c, a);\n    _normal$1.crossVectors(_edge1, _edge2);\n\n    // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n    // E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n    //   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n    //   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n    //   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n    let DdN = this.direction.dot(_normal$1);\n    let sign;\n    if (DdN > 0) {\n      if (backfaceCulling) return null;\n      sign = 1;\n    } else if (DdN < 0) {\n      sign = -1;\n      DdN = -DdN;\n    } else {\n      return null;\n    }\n    _diff.subVectors(this.origin, a);\n    const DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2));\n\n    // b1 < 0, no intersection\n    if (DdQxE2 < 0) {\n      return null;\n    }\n    const DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff));\n\n    // b2 < 0, no intersection\n    if (DdE1xQ < 0) {\n      return null;\n    }\n\n    // b1+b2 > 1, no intersection\n    if (DdQxE2 + DdE1xQ > DdN) {\n      return null;\n    }\n\n    // Line intersects triangle, check if ray does.\n    const QdN = -sign * _diff.dot(_normal$1);\n\n    // t < 0, no intersection\n    if (QdN < 0) {\n      return null;\n    }\n\n    // Ray intersects triangle.\n    return this.at(QdN / DdN, target);\n  }\n\n  /**\n   * Transforms this ray with the given 4x4 transformation matrix.\n   *\n   * @param {Matrix4} matrix4 - The transformation matrix.\n   * @return {Ray} A reference to this ray.\n   */\n  applyMatrix4(matrix4) {\n    this.origin.applyMatrix4(matrix4);\n    this.direction.transformDirection(matrix4);\n    return this;\n  }\n\n  /**\n   * Returns `true` if this ray is equal with the given one.\n   *\n   * @param {Ray} ray - The ray to test for equality.\n   * @return {boolean} Whether this ray is equal with the given one.\n   */\n  equals(ray) {\n    return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);\n  }\n\n  /**\n   * Returns a new ray with copied values from this instance.\n   *\n   * @return {Ray} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n}\n\n/**\n * Represents a 4x4 matrix.\n *\n * The most common use of a 4x4 matrix in 3D computer graphics is as a transformation matrix.\n * For an introduction to transformation matrices as used in WebGL, check out [this tutorial]{@link https://www.opengl-tutorial.org/beginners-tutorials/tutorial-3-matrices}\n *\n * This allows a 3D vector representing a point in 3D space to undergo\n * transformations such as translation, rotation, shear, scale, reflection,\n * orthogonal or perspective projection and so on, by being multiplied by the\n * matrix. This is known as `applying` the matrix to the vector.\n *\n * A Note on Row-Major and Column-Major Ordering:\n *\n * The constructor and {@link Matrix3#set} method take arguments in\n * [row-major]{@link https://en.wikipedia.org/wiki/Row-_and_column-major_order#Column-major_order}\n * order, while internally they are stored in the {@link Matrix3#elements} array in column-major order.\n * This means that calling:\n * ```js\n * const m = new THREE.Matrix4();\n * m.set( 11, 12, 13, 14,\n *        21, 22, 23, 24,\n *        31, 32, 33, 34,\n *        41, 42, 43, 44 );\n * ```\n * will result in the elements array containing:\n * ```js\n * m.elements = [ 11, 21, 31, 41,\n *                12, 22, 32, 42,\n *                13, 23, 33, 43,\n *                14, 24, 34, 44 ];\n * ```\n * and internally all calculations are performed using column-major ordering.\n * However, as the actual ordering makes no difference mathematically and\n * most people are used to thinking about matrices in row-major order, the\n * three.js documentation shows matrices in row-major order. Just bear in\n * mind that if you are reading the source code, you'll have to take the\n * transpose of any matrices outlined here to make sense of the calculations.\n */\nclass Matrix4 {\n  /**\n   * Constructs a new 4x4 matrix. The arguments are supposed to be\n   * in row-major order. If no arguments are provided, the constructor\n   * initializes the matrix as an identity matrix.\n   *\n   * @param {number} [n11] - 1-1 matrix element.\n   * @param {number} [n12] - 1-2 matrix element.\n   * @param {number} [n13] - 1-3 matrix element.\n   * @param {number} [n14] - 1-4 matrix element.\n   * @param {number} [n21] - 2-1 matrix element.\n   * @param {number} [n22] - 2-2 matrix element.\n   * @param {number} [n23] - 2-3 matrix element.\n   * @param {number} [n24] - 2-4 matrix element.\n   * @param {number} [n31] - 3-1 matrix element.\n   * @param {number} [n32] - 3-2 matrix element.\n   * @param {number} [n33] - 3-3 matrix element.\n   * @param {number} [n34] - 3-4 matrix element.\n   * @param {number} [n41] - 4-1 matrix element.\n   * @param {number} [n42] - 4-2 matrix element.\n   * @param {number} [n43] - 4-3 matrix element.\n   * @param {number} [n44] - 4-4 matrix element.\n   */\n  constructor(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    Matrix4.prototype.isMatrix4 = true;\n\n    /**\n     * A column-major list of matrix values.\n     *\n     * @type {Array<number>}\n     */\n    this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n    if (n11 !== undefined) {\n      this.set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44);\n    }\n  }\n\n  /**\n   * Sets the elements of the matrix.The arguments are supposed to be\n   * in row-major order.\n   *\n   * @param {number} [n11] - 1-1 matrix element.\n   * @param {number} [n12] - 1-2 matrix element.\n   * @param {number} [n13] - 1-3 matrix element.\n   * @param {number} [n14] - 1-4 matrix element.\n   * @param {number} [n21] - 2-1 matrix element.\n   * @param {number} [n22] - 2-2 matrix element.\n   * @param {number} [n23] - 2-3 matrix element.\n   * @param {number} [n24] - 2-4 matrix element.\n   * @param {number} [n31] - 3-1 matrix element.\n   * @param {number} [n32] - 3-2 matrix element.\n   * @param {number} [n33] - 3-3 matrix element.\n   * @param {number} [n34] - 3-4 matrix element.\n   * @param {number} [n41] - 4-1 matrix element.\n   * @param {number} [n42] - 4-2 matrix element.\n   * @param {number} [n43] - 4-3 matrix element.\n   * @param {number} [n44] - 4-4 matrix element.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {\n    const te = this.elements;\n    te[0] = n11;\n    te[4] = n12;\n    te[8] = n13;\n    te[12] = n14;\n    te[1] = n21;\n    te[5] = n22;\n    te[9] = n23;\n    te[13] = n24;\n    te[2] = n31;\n    te[6] = n32;\n    te[10] = n33;\n    te[14] = n34;\n    te[3] = n41;\n    te[7] = n42;\n    te[11] = n43;\n    te[15] = n44;\n    return this;\n  }\n\n  /**\n   * Sets this matrix to the 4x4 identity matrix.\n   *\n   * @return {Matrix4} A reference to this matrix.\n   */\n  identity() {\n    this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n    return this;\n  }\n\n  /**\n   * Returns a matrix with copied values from this instance.\n   *\n   * @return {Matrix4} A clone of this instance.\n   */\n  clone() {\n    return new Matrix4().fromArray(this.elements);\n  }\n\n  /**\n   * Copies the values of the given matrix to this instance.\n   *\n   * @param {Matrix4} m - The matrix to copy.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  copy(m) {\n    const te = this.elements;\n    const me = m.elements;\n    te[0] = me[0];\n    te[1] = me[1];\n    te[2] = me[2];\n    te[3] = me[3];\n    te[4] = me[4];\n    te[5] = me[5];\n    te[6] = me[6];\n    te[7] = me[7];\n    te[8] = me[8];\n    te[9] = me[9];\n    te[10] = me[10];\n    te[11] = me[11];\n    te[12] = me[12];\n    te[13] = me[13];\n    te[14] = me[14];\n    te[15] = me[15];\n    return this;\n  }\n\n  /**\n   * Copies the translation component of the given matrix\n   * into this matrix's translation component.\n   *\n   * @param {Matrix4} m - The matrix to copy the translation component.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  copyPosition(m) {\n    const te = this.elements,\n      me = m.elements;\n    te[12] = me[12];\n    te[13] = me[13];\n    te[14] = me[14];\n    return this;\n  }\n\n  /**\n   * Set the upper 3x3 elements of this matrix to the values of given 3x3 matrix.\n   *\n   * @param {Matrix3} m - The 3x3 matrix.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  setFromMatrix3(m) {\n    const me = m.elements;\n    this.set(me[0], me[3], me[6], 0, me[1], me[4], me[7], 0, me[2], me[5], me[8], 0, 0, 0, 0, 1);\n    return this;\n  }\n\n  /**\n   * Extracts the basis of this matrix into the three axis vectors provided.\n   *\n   * @param {Vector3} xAxis - The basis's x axis.\n   * @param {Vector3} yAxis - The basis's y axis.\n   * @param {Vector3} zAxis - The basis's z axis.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  extractBasis(xAxis, yAxis, zAxis) {\n    xAxis.setFromMatrixColumn(this, 0);\n    yAxis.setFromMatrixColumn(this, 1);\n    zAxis.setFromMatrixColumn(this, 2);\n    return this;\n  }\n\n  /**\n   * Sets the given basis vectors to this matrix.\n   *\n   * @param {Vector3} xAxis - The basis's x axis.\n   * @param {Vector3} yAxis - The basis's y axis.\n   * @param {Vector3} zAxis - The basis's z axis.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  makeBasis(xAxis, yAxis, zAxis) {\n    this.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);\n    return this;\n  }\n\n  /**\n   * Extracts the rotation component of the given matrix\n   * into this matrix's rotation component.\n   *\n   * Note: This method does not support reflection matrices.\n   *\n   * @param {Matrix4} m - The matrix.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  extractRotation(m) {\n    const te = this.elements;\n    const me = m.elements;\n    const scaleX = 1 / _v1$5.setFromMatrixColumn(m, 0).length();\n    const scaleY = 1 / _v1$5.setFromMatrixColumn(m, 1).length();\n    const scaleZ = 1 / _v1$5.setFromMatrixColumn(m, 2).length();\n    te[0] = me[0] * scaleX;\n    te[1] = me[1] * scaleX;\n    te[2] = me[2] * scaleX;\n    te[3] = 0;\n    te[4] = me[4] * scaleY;\n    te[5] = me[5] * scaleY;\n    te[6] = me[6] * scaleY;\n    te[7] = 0;\n    te[8] = me[8] * scaleZ;\n    te[9] = me[9] * scaleZ;\n    te[10] = me[10] * scaleZ;\n    te[11] = 0;\n    te[12] = 0;\n    te[13] = 0;\n    te[14] = 0;\n    te[15] = 1;\n    return this;\n  }\n\n  /**\n   * Sets the rotation component (the upper left 3x3 matrix) of this matrix to\n   * the rotation specified by the given Euler angles. The rest of\n   * the matrix is set to the identity. Depending on the {@link Euler#order},\n   * there are six possible outcomes. See [this page]{@link https://en.wikipedia.org/wiki/Euler_angles#Rotation_matrix}\n   * for a complete list.\n   *\n   * @param {Euler} euler - The Euler angles.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  makeRotationFromEuler(euler) {\n    const te = this.elements;\n    const x = euler.x,\n      y = euler.y,\n      z = euler.z;\n    const a = Math.cos(x),\n      b = Math.sin(x);\n    const c = Math.cos(y),\n      d = Math.sin(y);\n    const e = Math.cos(z),\n      f = Math.sin(z);\n    if (euler.order === 'XYZ') {\n      const ae = a * e,\n        af = a * f,\n        be = b * e,\n        bf = b * f;\n      te[0] = c * e;\n      te[4] = -c * f;\n      te[8] = d;\n      te[1] = af + be * d;\n      te[5] = ae - bf * d;\n      te[9] = -b * c;\n      te[2] = bf - ae * d;\n      te[6] = be + af * d;\n      te[10] = a * c;\n    } else if (euler.order === 'YXZ') {\n      const ce = c * e,\n        cf = c * f,\n        de = d * e,\n        df = d * f;\n      te[0] = ce + df * b;\n      te[4] = de * b - cf;\n      te[8] = a * d;\n      te[1] = a * f;\n      te[5] = a * e;\n      te[9] = -b;\n      te[2] = cf * b - de;\n      te[6] = df + ce * b;\n      te[10] = a * c;\n    } else if (euler.order === 'ZXY') {\n      const ce = c * e,\n        cf = c * f,\n        de = d * e,\n        df = d * f;\n      te[0] = ce - df * b;\n      te[4] = -a * f;\n      te[8] = de + cf * b;\n      te[1] = cf + de * b;\n      te[5] = a * e;\n      te[9] = df - ce * b;\n      te[2] = -a * d;\n      te[6] = b;\n      te[10] = a * c;\n    } else if (euler.order === 'ZYX') {\n      const ae = a * e,\n        af = a * f,\n        be = b * e,\n        bf = b * f;\n      te[0] = c * e;\n      te[4] = be * d - af;\n      te[8] = ae * d + bf;\n      te[1] = c * f;\n      te[5] = bf * d + ae;\n      te[9] = af * d - be;\n      te[2] = -d;\n      te[6] = b * c;\n      te[10] = a * c;\n    } else if (euler.order === 'YZX') {\n      const ac = a * c,\n        ad = a * d,\n        bc = b * c,\n        bd = b * d;\n      te[0] = c * e;\n      te[4] = bd - ac * f;\n      te[8] = bc * f + ad;\n      te[1] = f;\n      te[5] = a * e;\n      te[9] = -b * e;\n      te[2] = -d * e;\n      te[6] = ad * f + bc;\n      te[10] = ac - bd * f;\n    } else if (euler.order === 'XZY') {\n      const ac = a * c,\n        ad = a * d,\n        bc = b * c,\n        bd = b * d;\n      te[0] = c * e;\n      te[4] = -f;\n      te[8] = d * e;\n      te[1] = ac * f + bd;\n      te[5] = a * e;\n      te[9] = ad * f - bc;\n      te[2] = bc * f - ad;\n      te[6] = b * e;\n      te[10] = bd * f + ac;\n    }\n\n    // bottom row\n    te[3] = 0;\n    te[7] = 0;\n    te[11] = 0;\n\n    // last column\n    te[12] = 0;\n    te[13] = 0;\n    te[14] = 0;\n    te[15] = 1;\n    return this;\n  }\n\n  /**\n   * Sets the rotation component of this matrix to the rotation specified by\n   * the given Quaternion as outlined [here]{@link https://en.wikipedia.org/wiki/Rotation_matrix#Quaternion}\n   * The rest of the matrix is set to the identity.\n   *\n   * @param {Quaternion} q - The Quaternion.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  makeRotationFromQuaternion(q) {\n    return this.compose(_zero, q, _one);\n  }\n\n  /**\n   * Sets the rotation component of the transformation matrix, looking from `eye` towards\n   * `target`, and oriented by the up-direction.\n   *\n   * @param {Vector3} eye - The eye vector.\n   * @param {Vector3} target - The target vector.\n   * @param {Vector3} up - The up vector.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  lookAt(eye, target, up) {\n    const te = this.elements;\n    _z.subVectors(eye, target);\n    if (_z.lengthSq() === 0) {\n      // eye and target are in the same position\n\n      _z.z = 1;\n    }\n    _z.normalize();\n    _x.crossVectors(up, _z);\n    if (_x.lengthSq() === 0) {\n      // up and z are parallel\n\n      if (Math.abs(up.z) === 1) {\n        _z.x += 0.0001;\n      } else {\n        _z.z += 0.0001;\n      }\n      _z.normalize();\n      _x.crossVectors(up, _z);\n    }\n    _x.normalize();\n    _y.crossVectors(_z, _x);\n    te[0] = _x.x;\n    te[4] = _y.x;\n    te[8] = _z.x;\n    te[1] = _x.y;\n    te[5] = _y.y;\n    te[9] = _z.y;\n    te[2] = _x.z;\n    te[6] = _y.z;\n    te[10] = _z.z;\n    return this;\n  }\n\n  /**\n   * Post-multiplies this matrix by the given 4x4 matrix.\n   *\n   * @param {Matrix4} m - The matrix to multiply with.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  multiply(m) {\n    return this.multiplyMatrices(this, m);\n  }\n\n  /**\n   * Pre-multiplies this matrix by the given 4x4 matrix.\n   *\n   * @param {Matrix4} m - The matrix to multiply with.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  premultiply(m) {\n    return this.multiplyMatrices(m, this);\n  }\n\n  /**\n   * Multiples the given 4x4 matrices and stores the result\n   * in this matrix.\n   *\n   * @param {Matrix4} a - The first matrix.\n   * @param {Matrix4} b - The second matrix.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  multiplyMatrices(a, b) {\n    const ae = a.elements;\n    const be = b.elements;\n    const te = this.elements;\n    const a11 = ae[0],\n      a12 = ae[4],\n      a13 = ae[8],\n      a14 = ae[12];\n    const a21 = ae[1],\n      a22 = ae[5],\n      a23 = ae[9],\n      a24 = ae[13];\n    const a31 = ae[2],\n      a32 = ae[6],\n      a33 = ae[10],\n      a34 = ae[14];\n    const a41 = ae[3],\n      a42 = ae[7],\n      a43 = ae[11],\n      a44 = ae[15];\n    const b11 = be[0],\n      b12 = be[4],\n      b13 = be[8],\n      b14 = be[12];\n    const b21 = be[1],\n      b22 = be[5],\n      b23 = be[9],\n      b24 = be[13];\n    const b31 = be[2],\n      b32 = be[6],\n      b33 = be[10],\n      b34 = be[14];\n    const b41 = be[3],\n      b42 = be[7],\n      b43 = be[11],\n      b44 = be[15];\n    te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n    te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n    te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n    te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n    te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n    te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n    te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n    te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n    te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n    te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n    te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n    te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n    te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n    te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n    te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n    te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n    return this;\n  }\n\n  /**\n   * Multiplies every component of the matrix by the given scalar.\n   *\n   * @param {number} s - The scalar.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  multiplyScalar(s) {\n    const te = this.elements;\n    te[0] *= s;\n    te[4] *= s;\n    te[8] *= s;\n    te[12] *= s;\n    te[1] *= s;\n    te[5] *= s;\n    te[9] *= s;\n    te[13] *= s;\n    te[2] *= s;\n    te[6] *= s;\n    te[10] *= s;\n    te[14] *= s;\n    te[3] *= s;\n    te[7] *= s;\n    te[11] *= s;\n    te[15] *= s;\n    return this;\n  }\n\n  /**\n   * Computes and returns the determinant of this matrix.\n   *\n   * Based on the method outlined [here]{@link http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.html}.\n   *\n   * @return {number} The determinant.\n   */\n  determinant() {\n    const te = this.elements;\n    const n11 = te[0],\n      n12 = te[4],\n      n13 = te[8],\n      n14 = te[12];\n    const n21 = te[1],\n      n22 = te[5],\n      n23 = te[9],\n      n24 = te[13];\n    const n31 = te[2],\n      n32 = te[6],\n      n33 = te[10],\n      n34 = te[14];\n    const n41 = te[3],\n      n42 = te[7],\n      n43 = te[11],\n      n44 = te[15];\n\n    //TODO: make this more efficient\n\n    return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);\n  }\n\n  /**\n   * Transposes this matrix in place.\n   *\n   * @return {Matrix4} A reference to this matrix.\n   */\n  transpose() {\n    const te = this.elements;\n    let tmp;\n    tmp = te[1];\n    te[1] = te[4];\n    te[4] = tmp;\n    tmp = te[2];\n    te[2] = te[8];\n    te[8] = tmp;\n    tmp = te[6];\n    te[6] = te[9];\n    te[9] = tmp;\n    tmp = te[3];\n    te[3] = te[12];\n    te[12] = tmp;\n    tmp = te[7];\n    te[7] = te[13];\n    te[13] = tmp;\n    tmp = te[11];\n    te[11] = te[14];\n    te[14] = tmp;\n    return this;\n  }\n\n  /**\n   * Sets the position component for this matrix from the given vector,\n   * without affecting the rest of the matrix.\n   *\n   * @param {number|Vector3} x - The x component of the vector or alternatively the vector object.\n   * @param {number} y - The y component of the vector.\n   * @param {number} z - The z component of the vector.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  setPosition(x, y, z) {\n    const te = this.elements;\n    if (x.isVector3) {\n      te[12] = x.x;\n      te[13] = x.y;\n      te[14] = x.z;\n    } else {\n      te[12] = x;\n      te[13] = y;\n      te[14] = z;\n    }\n    return this;\n  }\n\n  /**\n   * Inverts this matrix, using the [analytic method]{@link https://en.wikipedia.org/wiki/Invertible_matrix#Analytic_solution}.\n   * You can not invert with a determinant of zero. If you attempt this, the method produces\n   * a zero matrix instead.\n   *\n   * @return {Matrix4} A reference to this matrix.\n   */\n  invert() {\n    // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n    const te = this.elements,\n      n11 = te[0],\n      n21 = te[1],\n      n31 = te[2],\n      n41 = te[3],\n      n12 = te[4],\n      n22 = te[5],\n      n32 = te[6],\n      n42 = te[7],\n      n13 = te[8],\n      n23 = te[9],\n      n33 = te[10],\n      n43 = te[11],\n      n14 = te[12],\n      n24 = te[13],\n      n34 = te[14],\n      n44 = te[15],\n      t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n      t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n      t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n      t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n    const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n    if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    const detInv = 1 / det;\n    te[0] = t11 * detInv;\n    te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;\n    te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;\n    te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;\n    te[4] = t12 * detInv;\n    te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;\n    te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;\n    te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;\n    te[8] = t13 * detInv;\n    te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;\n    te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;\n    te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;\n    te[12] = t14 * detInv;\n    te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;\n    te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;\n    te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;\n    return this;\n  }\n\n  /**\n   * Multiplies the columns of this matrix by the given vector.\n   *\n   * @param {Vector3} v - The scale vector.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  scale(v) {\n    const te = this.elements;\n    const x = v.x,\n      y = v.y,\n      z = v.z;\n    te[0] *= x;\n    te[4] *= y;\n    te[8] *= z;\n    te[1] *= x;\n    te[5] *= y;\n    te[9] *= z;\n    te[2] *= x;\n    te[6] *= y;\n    te[10] *= z;\n    te[3] *= x;\n    te[7] *= y;\n    te[11] *= z;\n    return this;\n  }\n\n  /**\n   * Gets the maximum scale value of the three axes.\n   *\n   * @return {number} The maximum scale.\n   */\n  getMaxScaleOnAxis() {\n    const te = this.elements;\n    const scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];\n    const scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];\n    const scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];\n    return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));\n  }\n\n  /**\n   * Sets this matrix as a translation transform from the given vector.\n   *\n   * @param {number|Vector3} x - The amount to translate in the X axis or alternatively a translation vector.\n   * @param {number} y - The amount to translate in the Y axis.\n   * @param {number} z - The amount to translate in the z axis.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  makeTranslation(x, y, z) {\n    if (x.isVector3) {\n      this.set(1, 0, 0, x.x, 0, 1, 0, x.y, 0, 0, 1, x.z, 0, 0, 0, 1);\n    } else {\n      this.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);\n    }\n    return this;\n  }\n\n  /**\n   * Sets this matrix as a rotational transformation around the X axis by\n   * the given angle.\n   *\n   * @param {number} theta - The rotation in radians.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  makeRotationX(theta) {\n    const c = Math.cos(theta),\n      s = Math.sin(theta);\n    this.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);\n    return this;\n  }\n\n  /**\n   * Sets this matrix as a rotational transformation around the Y axis by\n   * the given angle.\n   *\n   * @param {number} theta - The rotation in radians.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  makeRotationY(theta) {\n    const c = Math.cos(theta),\n      s = Math.sin(theta);\n    this.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);\n    return this;\n  }\n\n  /**\n   * Sets this matrix as a rotational transformation around the Z axis by\n   * the given angle.\n   *\n   * @param {number} theta - The rotation in radians.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  makeRotationZ(theta) {\n    const c = Math.cos(theta),\n      s = Math.sin(theta);\n    this.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n    return this;\n  }\n\n  /**\n   * Sets this matrix as a rotational transformation around the given axis by\n   * the given angle.\n   *\n   * This is a somewhat controversial but mathematically sound alternative to\n   * rotating via Quaternions. See the discussion [here]{@link https://www.gamedev.net/articles/programming/math-and-physics/do-we-really-need-quaternions-r1199}.\n   *\n   * @param {Vector3} axis - The normalized rotation axis.\n   * @param {number} angle - The rotation in radians.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  makeRotationAxis(axis, angle) {\n    // Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n    const c = Math.cos(angle);\n    const s = Math.sin(angle);\n    const t = 1 - c;\n    const x = axis.x,\n      y = axis.y,\n      z = axis.z;\n    const tx = t * x,\n      ty = t * y;\n    this.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);\n    return this;\n  }\n\n  /**\n   * Sets this matrix as a scale transformation.\n   *\n   * @param {number} x - The amount to scale in the X axis.\n   * @param {number} y - The amount to scale in the Y axis.\n   * @param {number} z - The amount to scale in the Z axis.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  makeScale(x, y, z) {\n    this.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);\n    return this;\n  }\n\n  /**\n   * Sets this matrix as a shear transformation.\n   *\n   * @param {number} xy - The amount to shear X by Y.\n   * @param {number} xz - The amount to shear X by Z.\n   * @param {number} yx - The amount to shear Y by X.\n   * @param {number} yz - The amount to shear Y by Z.\n   * @param {number} zx - The amount to shear Z by X.\n   * @param {number} zy - The amount to shear Z by Y.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  makeShear(xy, xz, yx, yz, zx, zy) {\n    this.set(1, yx, zx, 0, xy, 1, zy, 0, xz, yz, 1, 0, 0, 0, 0, 1);\n    return this;\n  }\n\n  /**\n   * Sets this matrix to the transformation composed of the given position,\n   * rotation (Quaternion) and scale.\n   *\n   * @param {Vector3} position - The position vector.\n   * @param {Quaternion} quaternion - The rotation as a Quaternion.\n   * @param {Vector3} scale - The scale vector.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  compose(position, quaternion, scale) {\n    const te = this.elements;\n    const x = quaternion._x,\n      y = quaternion._y,\n      z = quaternion._z,\n      w = quaternion._w;\n    const x2 = x + x,\n      y2 = y + y,\n      z2 = z + z;\n    const xx = x * x2,\n      xy = x * y2,\n      xz = x * z2;\n    const yy = y * y2,\n      yz = y * z2,\n      zz = z * z2;\n    const wx = w * x2,\n      wy = w * y2,\n      wz = w * z2;\n    const sx = scale.x,\n      sy = scale.y,\n      sz = scale.z;\n    te[0] = (1 - (yy + zz)) * sx;\n    te[1] = (xy + wz) * sx;\n    te[2] = (xz - wy) * sx;\n    te[3] = 0;\n    te[4] = (xy - wz) * sy;\n    te[5] = (1 - (xx + zz)) * sy;\n    te[6] = (yz + wx) * sy;\n    te[7] = 0;\n    te[8] = (xz + wy) * sz;\n    te[9] = (yz - wx) * sz;\n    te[10] = (1 - (xx + yy)) * sz;\n    te[11] = 0;\n    te[12] = position.x;\n    te[13] = position.y;\n    te[14] = position.z;\n    te[15] = 1;\n    return this;\n  }\n\n  /**\n   * Decomposes this matrix into its position, rotation and scale components\n   * and provides the result in the given objects.\n   *\n   * Note: Not all matrices are decomposable in this way. For example, if an\n   * object has a non-uniformly scaled parent, then the object's world matrix\n   * may not be decomposable, and this method may not be appropriate.\n   *\n   * @param {Vector3} position - The position vector.\n   * @param {Quaternion} quaternion - The rotation as a Quaternion.\n   * @param {Vector3} scale - The scale vector.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  decompose(position, quaternion, scale) {\n    const te = this.elements;\n    let sx = _v1$5.set(te[0], te[1], te[2]).length();\n    const sy = _v1$5.set(te[4], te[5], te[6]).length();\n    const sz = _v1$5.set(te[8], te[9], te[10]).length();\n\n    // if determine is negative, we need to invert one scale\n    const det = this.determinant();\n    if (det < 0) sx = -sx;\n    position.x = te[12];\n    position.y = te[13];\n    position.z = te[14];\n\n    // scale the rotation part\n    _m1$2.copy(this);\n    const invSX = 1 / sx;\n    const invSY = 1 / sy;\n    const invSZ = 1 / sz;\n    _m1$2.elements[0] *= invSX;\n    _m1$2.elements[1] *= invSX;\n    _m1$2.elements[2] *= invSX;\n    _m1$2.elements[4] *= invSY;\n    _m1$2.elements[5] *= invSY;\n    _m1$2.elements[6] *= invSY;\n    _m1$2.elements[8] *= invSZ;\n    _m1$2.elements[9] *= invSZ;\n    _m1$2.elements[10] *= invSZ;\n    quaternion.setFromRotationMatrix(_m1$2);\n    scale.x = sx;\n    scale.y = sy;\n    scale.z = sz;\n    return this;\n  }\n\n  /**\n   * Creates a perspective projection matrix. This is used internally by\n   * {@link PerspectiveCamera#updateProjectionMatrix}.\n  \t * @param {number} left - Left boundary of the viewing frustum at the near plane.\n   * @param {number} right - Right boundary of the viewing frustum at the near plane.\n   * @param {number} top - Top boundary of the viewing frustum at the near plane.\n   * @param {number} bottom - Bottom boundary of the viewing frustum at the near plane.\n   * @param {number} near - The distance from the camera to the near plane.\n   * @param {number} far - The distance from the camera to the far plane.\n   * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} [coordinateSystem=WebGLCoordinateSystem] - The coordinate system.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  makePerspective(left, right, top, bottom, near, far) {\n    let coordinateSystem = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : WebGLCoordinateSystem;\n    const te = this.elements;\n    const x = 2 * near / (right - left);\n    const y = 2 * near / (top - bottom);\n    const a = (right + left) / (right - left);\n    const b = (top + bottom) / (top - bottom);\n    let c, d;\n    if (coordinateSystem === WebGLCoordinateSystem) {\n      c = -(far + near) / (far - near);\n      d = -2 * far * near / (far - near);\n    } else if (coordinateSystem === WebGPUCoordinateSystem) {\n      c = -far / (far - near);\n      d = -far * near / (far - near);\n    } else {\n      throw new Error('THREE.Matrix4.makePerspective(): Invalid coordinate system: ' + coordinateSystem);\n    }\n    te[0] = x;\n    te[4] = 0;\n    te[8] = a;\n    te[12] = 0;\n    te[1] = 0;\n    te[5] = y;\n    te[9] = b;\n    te[13] = 0;\n    te[2] = 0;\n    te[6] = 0;\n    te[10] = c;\n    te[14] = d;\n    te[3] = 0;\n    te[7] = 0;\n    te[11] = -1;\n    te[15] = 0;\n    return this;\n  }\n\n  /**\n   * Creates a orthographic projection matrix. This is used internally by\n   * {@link OrthographicCamera#updateProjectionMatrix}.\n  \t * @param {number} left - Left boundary of the viewing frustum at the near plane.\n   * @param {number} right - Right boundary of the viewing frustum at the near plane.\n   * @param {number} top - Top boundary of the viewing frustum at the near plane.\n   * @param {number} bottom - Bottom boundary of the viewing frustum at the near plane.\n   * @param {number} near - The distance from the camera to the near plane.\n   * @param {number} far - The distance from the camera to the far plane.\n   * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} [coordinateSystem=WebGLCoordinateSystem] - The coordinate system.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  makeOrthographic(left, right, top, bottom, near, far) {\n    let coordinateSystem = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : WebGLCoordinateSystem;\n    const te = this.elements;\n    const w = 1.0 / (right - left);\n    const h = 1.0 / (top - bottom);\n    const p = 1.0 / (far - near);\n    const x = (right + left) * w;\n    const y = (top + bottom) * h;\n    let z, zInv;\n    if (coordinateSystem === WebGLCoordinateSystem) {\n      z = (far + near) * p;\n      zInv = -2 * p;\n    } else if (coordinateSystem === WebGPUCoordinateSystem) {\n      z = near * p;\n      zInv = -1 * p;\n    } else {\n      throw new Error('THREE.Matrix4.makeOrthographic(): Invalid coordinate system: ' + coordinateSystem);\n    }\n    te[0] = 2 * w;\n    te[4] = 0;\n    te[8] = 0;\n    te[12] = -x;\n    te[1] = 0;\n    te[5] = 2 * h;\n    te[9] = 0;\n    te[13] = -y;\n    te[2] = 0;\n    te[6] = 0;\n    te[10] = zInv;\n    te[14] = -z;\n    te[3] = 0;\n    te[7] = 0;\n    te[11] = 0;\n    te[15] = 1;\n    return this;\n  }\n\n  /**\n   * Returns `true` if this matrix is equal with the given one.\n   *\n   * @param {Matrix4} matrix - The matrix to test for equality.\n   * @return {boolean} Whether this matrix is equal with the given one.\n   */\n  equals(matrix) {\n    const te = this.elements;\n    const me = matrix.elements;\n    for (let i = 0; i < 16; i++) {\n      if (te[i] !== me[i]) return false;\n    }\n    return true;\n  }\n\n  /**\n   * Sets the elements of the matrix from the given array.\n   *\n   * @param {Array<number>} array - The matrix elements in column-major order.\n   * @param {number} [offset=0] - Index of the first element in the array.\n   * @return {Matrix4} A reference to this matrix.\n   */\n  fromArray(array) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    for (let i = 0; i < 16; i++) {\n      this.elements[i] = array[i + offset];\n    }\n    return this;\n  }\n\n  /**\n   * Writes the elements of this matrix to the given array. If no array is provided,\n   * the method returns a new instance.\n   *\n   * @param {Array<number>} [array=[]] - The target array holding the matrix elements in column-major order.\n   * @param {number} [offset=0] - Index of the first element in the array.\n   * @return {Array<number>} The matrix elements in column-major order.\n   */\n  toArray() {\n    let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const te = this.elements;\n    array[offset] = te[0];\n    array[offset + 1] = te[1];\n    array[offset + 2] = te[2];\n    array[offset + 3] = te[3];\n    array[offset + 4] = te[4];\n    array[offset + 5] = te[5];\n    array[offset + 6] = te[6];\n    array[offset + 7] = te[7];\n    array[offset + 8] = te[8];\n    array[offset + 9] = te[9];\n    array[offset + 10] = te[10];\n    array[offset + 11] = te[11];\n    array[offset + 12] = te[12];\n    array[offset + 13] = te[13];\n    array[offset + 14] = te[14];\n    array[offset + 15] = te[15];\n    return array;\n  }\n}\nconst _v1$5 = /*@__PURE__*/new Vector3();\nconst _m1$2 = /*@__PURE__*/new Matrix4();\nconst _zero = /*@__PURE__*/new Vector3(0, 0, 0);\nconst _one = /*@__PURE__*/new Vector3(1, 1, 1);\nconst _x = /*@__PURE__*/new Vector3();\nconst _y = /*@__PURE__*/new Vector3();\nconst _z = /*@__PURE__*/new Vector3();\nconst _matrix$2 = /*@__PURE__*/new Matrix4();\nconst _quaternion$3 = /*@__PURE__*/new Quaternion();\n\n/**\n * A class representing Euler angles.\n *\n * Euler angles describe a rotational transformation by rotating an object on\n * its various axes in specified amounts per axis, and a specified axis\n * order.\n *\n * Iterating through an instance will yield its components (x, y, z,\n * order) in the corresponding order.\n *\n * ```js\n * const a = new THREE.Euler( 0, 1, 1.57, 'XYZ' );\n * const b = new THREE.Vector3( 1, 0, 1 );\n * b.applyEuler(a);\n * ```\n */\nclass Euler {\n  /**\n   * Constructs a new euler instance.\n   *\n   * @param {number} [x=0] - The angle of the x axis in radians.\n   * @param {number} [y=0] - The angle of the y axis in radians.\n   * @param {number} [z=0] - The angle of the z axis in radians.\n   * @param {string} [order=Euler.DEFAULT_ORDER] - A string representing the order that the rotations are applied.\n   */\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Euler.DEFAULT_ORDER;\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isEuler = true;\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._order = order;\n  }\n\n  /**\n   * The angle of the x axis in radians.\n   *\n   * @type {number}\n   * @default 0\n   */\n  get x() {\n    return this._x;\n  }\n  set x(value) {\n    this._x = value;\n    this._onChangeCallback();\n  }\n\n  /**\n   * The angle of the y axis in radians.\n   *\n   * @type {number}\n   * @default 0\n   */\n  get y() {\n    return this._y;\n  }\n  set y(value) {\n    this._y = value;\n    this._onChangeCallback();\n  }\n\n  /**\n   * The angle of the z axis in radians.\n   *\n   * @type {number}\n   * @default 0\n   */\n  get z() {\n    return this._z;\n  }\n  set z(value) {\n    this._z = value;\n    this._onChangeCallback();\n  }\n\n  /**\n   * A string representing the order that the rotations are applied.\n   *\n   * @type {string}\n   * @default 'XYZ'\n   */\n  get order() {\n    return this._order;\n  }\n  set order(value) {\n    this._order = value;\n    this._onChangeCallback();\n  }\n\n  /**\n   * Sets the Euler components.\n   *\n   * @param {number} x - The angle of the x axis in radians.\n   * @param {number} y - The angle of the y axis in radians.\n   * @param {number} z - The angle of the z axis in radians.\n   * @param {string} [order] - A string representing the order that the rotations are applied.\n   * @return {Euler} A reference to this Euler instance.\n   */\n  set(x, y, z) {\n    let order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this._order;\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._order = order;\n    this._onChangeCallback();\n    return this;\n  }\n\n  /**\n   * Returns a new Euler instance with copied values from this instance.\n   *\n   * @return {Euler} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor(this._x, this._y, this._z, this._order);\n  }\n\n  /**\n   * Copies the values of the given Euler instance to this instance.\n   *\n   * @param {Euler} euler - The Euler instance to copy.\n   * @return {Euler} A reference to this Euler instance.\n   */\n  copy(euler) {\n    this._x = euler._x;\n    this._y = euler._y;\n    this._z = euler._z;\n    this._order = euler._order;\n    this._onChangeCallback();\n    return this;\n  }\n\n  /**\n   * Sets the angles of this Euler instance from a pure rotation matrix.\n   *\n   * @param {Matrix4} m - A 4x4 matrix of which the upper 3x3 of matrix is a pure rotation matrix (i.e. unscaled).\n   * @param {string} [order] - A string representing the order that the rotations are applied.\n   * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.\n   * @return {Euler} A reference to this Euler instance.\n   */\n  setFromRotationMatrix(m) {\n    let order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._order;\n    let update = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const te = m.elements;\n    const m11 = te[0],\n      m12 = te[4],\n      m13 = te[8];\n    const m21 = te[1],\n      m22 = te[5],\n      m23 = te[9];\n    const m31 = te[2],\n      m32 = te[6],\n      m33 = te[10];\n    switch (order) {\n      case 'XYZ':\n        this._y = Math.asin(clamp(m13, -1, 1));\n        if (Math.abs(m13) < 0.9999999) {\n          this._x = Math.atan2(-m23, m33);\n          this._z = Math.atan2(-m12, m11);\n        } else {\n          this._x = Math.atan2(m32, m22);\n          this._z = 0;\n        }\n        break;\n      case 'YXZ':\n        this._x = Math.asin(-clamp(m23, -1, 1));\n        if (Math.abs(m23) < 0.9999999) {\n          this._y = Math.atan2(m13, m33);\n          this._z = Math.atan2(m21, m22);\n        } else {\n          this._y = Math.atan2(-m31, m11);\n          this._z = 0;\n        }\n        break;\n      case 'ZXY':\n        this._x = Math.asin(clamp(m32, -1, 1));\n        if (Math.abs(m32) < 0.9999999) {\n          this._y = Math.atan2(-m31, m33);\n          this._z = Math.atan2(-m12, m22);\n        } else {\n          this._y = 0;\n          this._z = Math.atan2(m21, m11);\n        }\n        break;\n      case 'ZYX':\n        this._y = Math.asin(-clamp(m31, -1, 1));\n        if (Math.abs(m31) < 0.9999999) {\n          this._x = Math.atan2(m32, m33);\n          this._z = Math.atan2(m21, m11);\n        } else {\n          this._x = 0;\n          this._z = Math.atan2(-m12, m22);\n        }\n        break;\n      case 'YZX':\n        this._z = Math.asin(clamp(m21, -1, 1));\n        if (Math.abs(m21) < 0.9999999) {\n          this._x = Math.atan2(-m23, m22);\n          this._y = Math.atan2(-m31, m11);\n        } else {\n          this._x = 0;\n          this._y = Math.atan2(m13, m33);\n        }\n        break;\n      case 'XZY':\n        this._z = Math.asin(-clamp(m12, -1, 1));\n        if (Math.abs(m12) < 0.9999999) {\n          this._x = Math.atan2(m32, m22);\n          this._y = Math.atan2(m13, m11);\n        } else {\n          this._x = Math.atan2(-m23, m33);\n          this._y = 0;\n        }\n        break;\n      default:\n        console.warn('THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order);\n    }\n    this._order = order;\n    if (update === true) this._onChangeCallback();\n    return this;\n  }\n\n  /**\n   * Sets the angles of this Euler instance from a normalized quaternion.\n   *\n   * @param {Quaternion} q - A normalized Quaternion.\n   * @param {string} [order] - A string representing the order that the rotations are applied.\n   * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.\n   * @return {Euler} A reference to this Euler instance.\n   */\n  setFromQuaternion(q, order, update) {\n    _matrix$2.makeRotationFromQuaternion(q);\n    return this.setFromRotationMatrix(_matrix$2, order, update);\n  }\n\n  /**\n   * Sets the angles of this Euler instance from the given vector.\n   *\n   * @param {Vector3} v - The vector.\n   * @param {string} [order] - A string representing the order that the rotations are applied.\n   * @return {Euler} A reference to this Euler instance.\n   */\n  setFromVector3(v) {\n    let order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._order;\n    return this.set(v.x, v.y, v.z, order);\n  }\n\n  /**\n   * Resets the euler angle with a new order by creating a quaternion from this\n   * euler angle and then setting this euler angle with the quaternion and the\n   * new order.\n   *\n   * Warning: This discards revolution information.\n   *\n   * @param {string} [newOrder] - A string representing the new order that the rotations are applied.\n   * @return {Euler} A reference to this Euler instance.\n   */\n  reorder(newOrder) {\n    _quaternion$3.setFromEuler(this);\n    return this.setFromQuaternion(_quaternion$3, newOrder);\n  }\n\n  /**\n   * Returns `true` if this Euler instance is equal with the given one.\n   *\n   * @param {Euler} euler - The Euler instance to test for equality.\n   * @return {boolean} Whether this Euler instance is equal with the given one.\n   */\n  equals(euler) {\n    return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;\n  }\n\n  /**\n   * Sets this Euler instance's components to values from the given array. The first three\n   * entries of the array are assign to the x,y and z components. An optional fourth entry\n   * defines the Euler order.\n   *\n   * @param {Array<number,number,number,?string>} array - An array holding the Euler component values.\n   * @return {Euler} A reference to this Euler instance.\n   */\n  fromArray(array) {\n    this._x = array[0];\n    this._y = array[1];\n    this._z = array[2];\n    if (array[3] !== undefined) this._order = array[3];\n    this._onChangeCallback();\n    return this;\n  }\n\n  /**\n   * Writes the components of this Euler instance to the given array. If no array is provided,\n   * the method returns a new instance.\n   *\n   * @param {Array<number,number,number,string>} [array=[]] - The target array holding the Euler components.\n   * @param {number} [offset=0] - Index of the first element in the array.\n   * @return {Array<number,number,number,string>} The Euler components.\n   */\n  toArray() {\n    let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    array[offset] = this._x;\n    array[offset + 1] = this._y;\n    array[offset + 2] = this._z;\n    array[offset + 3] = this._order;\n    return array;\n  }\n  _onChange(callback) {\n    this._onChangeCallback = callback;\n    return this;\n  }\n  _onChangeCallback() {}\n  *[Symbol.iterator]() {\n    yield this._x;\n    yield this._y;\n    yield this._z;\n    yield this._order;\n  }\n}\n\n/**\n * The default Euler angle order.\n *\n * @static\n * @type {string}\n * @default 'XYZ'\n */\nEuler.DEFAULT_ORDER = 'XYZ';\n\n/**\n * A layers object assigns an 3D object to 1 or more of 32\n * layers numbered `0` to `31` - internally the layers are stored as a\n * bit mask], and by default all 3D objects are a member of layer `0`.\n *\n * This can be used to control visibility - an object must share a layer with\n * a camera to be visible when that camera's view is\n * rendered.\n *\n * All classes that inherit from {@link Object3D} have an `layers` property which\n * is an instance of this class.\n */\nclass Layers {\n  /**\n   * Constructs a new layers instance, with membership\n   * initially set to layer `0`.\n   */\n  constructor() {\n    /**\n     * A bit mask storing which of the 32 layers this layers object is currently\n     * a member of.\n     *\n     * @type {number}\n     */\n    this.mask = 1 | 0;\n  }\n\n  /**\n   * Sets membership to the given layer, and remove membership all other layers.\n   *\n   * @param {number} layer - The layer to set.\n   */\n  set(layer) {\n    this.mask = (1 << layer | 0) >>> 0;\n  }\n\n  /**\n   * Adds membership of the given layer.\n   *\n   * @param {number} layer - The layer to enable.\n   */\n  enable(layer) {\n    this.mask |= 1 << layer | 0;\n  }\n\n  /**\n   * Adds membership to all layers.\n   */\n  enableAll() {\n    this.mask = 0xffffffff | 0;\n  }\n\n  /**\n   * Toggles the membership of the given layer.\n   *\n   * @param {number} layer - The layer to toggle.\n   */\n  toggle(layer) {\n    this.mask ^= 1 << layer | 0;\n  }\n\n  /**\n   * Removes membership of the given layer.\n   *\n   * @param {number} layer - The layer to enable.\n   */\n  disable(layer) {\n    this.mask &= ~(1 << layer | 0);\n  }\n\n  /**\n   * Removes the membership from all layers.\n   */\n  disableAll() {\n    this.mask = 0;\n  }\n\n  /**\n   * Returns `true` if this and the given layers object have at least one\n   * layer in common.\n   *\n   * @param {Layers} layers - The layers to test.\n   * @return {boolean } Whether this and the given layers object have at least one layer in common or not.\n   */\n  test(layers) {\n    return (this.mask & layers.mask) !== 0;\n  }\n\n  /**\n   * Returns `true` if the given layer is enabled.\n   *\n   * @param {number} layer - The layer to test.\n   * @return {boolean } Whether the given layer is enabled or not.\n   */\n  isEnabled(layer) {\n    return (this.mask & (1 << layer | 0)) !== 0;\n  }\n}\nlet _object3DId = 0;\nconst _v1$4 = /*@__PURE__*/new Vector3();\nconst _q1 = /*@__PURE__*/new Quaternion();\nconst _m1$1 = /*@__PURE__*/new Matrix4();\nconst _target = /*@__PURE__*/new Vector3();\nconst _position$3 = /*@__PURE__*/new Vector3();\nconst _scale$2 = /*@__PURE__*/new Vector3();\nconst _quaternion$2 = /*@__PURE__*/new Quaternion();\nconst _xAxis = /*@__PURE__*/new Vector3(1, 0, 0);\nconst _yAxis = /*@__PURE__*/new Vector3(0, 1, 0);\nconst _zAxis = /*@__PURE__*/new Vector3(0, 0, 1);\n\n/**\n * Fires when the object has been added to its parent object.\n *\n * @event Object3D#added\n * @type {Object}\n */\nconst _addedEvent = {\n  type: 'added'\n};\n\n/**\n * Fires when the object has been removed from its parent object.\n *\n * @event Object3D#removed\n * @type {Object}\n */\nconst _removedEvent = {\n  type: 'removed'\n};\n\n/**\n * Fires when a new child object has been added.\n *\n * @event Object3D#childadded\n * @type {Object}\n */\nconst _childaddedEvent = {\n  type: 'childadded',\n  child: null\n};\n\n/**\n * Fires when a new child object has been added.\n *\n * @event Object3D#childremoved\n * @type {Object}\n */\nconst _childremovedEvent = {\n  type: 'childremoved',\n  child: null\n};\n\n/**\n * This is the base class for most objects in three.js and provides a set of\n * properties and methods for manipulating objects in 3D space.\n *\n * @augments EventDispatcher\n */\nclass Object3D extends EventDispatcher {\n  /**\n   * Constructs a new 3D object.\n   */\n  constructor() {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isObject3D = true;\n\n    /**\n     * The ID of the 3D object.\n     *\n     * @name Object3D#id\n     * @type {number}\n     * @readonly\n     */\n    Object.defineProperty(this, 'id', {\n      value: _object3DId++\n    });\n\n    /**\n     * The UUID of the 3D object.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.uuid = generateUUID();\n\n    /**\n     * The name of the 3D object.\n     *\n     * @type {string}\n     */\n    this.name = '';\n\n    /**\n     * The type property is used for detecting the object type\n     * in context of serialization/deserialization.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.type = 'Object3D';\n\n    /**\n     * A reference to the parent object.\n     *\n     * @type {?Object3D}\n     * @default null\n     */\n    this.parent = null;\n\n    /**\n     * An array holding the child 3D objects of this instance.\n     *\n     * @type {Array<Object3D>}\n     */\n    this.children = [];\n\n    /**\n     * Defines the `up` direction of the 3D object which influences\n     * the orientation via methods like {@link Object3D#lookAt}.\n     *\n     * The default values for all 3D objects is defined by `Object3D.DEFAULT_UP`.\n     *\n     * @type {Vector3}\n     */\n    this.up = Object3D.DEFAULT_UP.clone();\n    const position = new Vector3();\n    const rotation = new Euler();\n    const quaternion = new Quaternion();\n    const scale = new Vector3(1, 1, 1);\n    function onRotationChange() {\n      quaternion.setFromEuler(rotation, false);\n    }\n    function onQuaternionChange() {\n      rotation.setFromQuaternion(quaternion, undefined, false);\n    }\n    rotation._onChange(onRotationChange);\n    quaternion._onChange(onQuaternionChange);\n    Object.defineProperties(this, {\n      /**\n       * Represents the object's local position.\n       *\n       * @name Object3D#position\n       * @type {Vector3}\n       * @default (0,0,0)\n       */\n      position: {\n        configurable: true,\n        enumerable: true,\n        value: position\n      },\n      /**\n       * Represents the object's local rotation as Euler angles, in radians.\n       *\n       * @name Object3D#rotation\n       * @type {Euler}\n       * @default (0,0,0)\n       */\n      rotation: {\n        configurable: true,\n        enumerable: true,\n        value: rotation\n      },\n      /**\n       * Represents the object's local rotation as Quaternions.\n       *\n       * @name Object3D#quaternion\n       * @type {Quaternion}\n       */\n      quaternion: {\n        configurable: true,\n        enumerable: true,\n        value: quaternion\n      },\n      /**\n       * Represents the object's local scale.\n       *\n       * @name Object3D#scale\n       * @type {Vector3}\n       * @default (1,1,1)\n       */\n      scale: {\n        configurable: true,\n        enumerable: true,\n        value: scale\n      },\n      /**\n       * Represents the object's model-view matrix.\n       *\n       * @name Object3D#modelViewMatrix\n       * @type {Matrix4}\n       */\n      modelViewMatrix: {\n        value: new Matrix4()\n      },\n      /**\n       * Represents the object's normal matrix.\n       *\n       * @name Object3D#normalMatrix\n       * @type {Matrix3}\n       */\n      normalMatrix: {\n        value: new Matrix3()\n      }\n    });\n\n    /**\n     * Represents the object's transformation matrix in local space.\n     *\n     * @type {Matrix4}\n     */\n    this.matrix = new Matrix4();\n\n    /**\n     * Represents the object's transformation matrix in world space.\n     * If the 3D object has no parent, then it's identical to the local transformation matrix\n     *\n     * @type {Matrix4}\n     */\n    this.matrixWorld = new Matrix4();\n\n    /**\n     * When set to `true`, the engine automatically computes the local matrix from position,\n     * rotation and scale every frame.\n     *\n     * The default values for all 3D objects is defined by `Object3D.DEFAULT_MATRIX_AUTO_UPDATE`.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.matrixAutoUpdate = Object3D.DEFAULT_MATRIX_AUTO_UPDATE;\n\n    /**\n     * When set to `true`, the engine automatically computes the world matrix from the current local\n     * matrix and the object's transformation hierarchy.\n     *\n     * The default values for all 3D objects is defined by `Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE`.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.matrixWorldAutoUpdate = Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE; // checked by the renderer\n\n    /**\n     * When set to `true`, it calculates the world matrix in that frame and resets this property\n     * to `false`.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.matrixWorldNeedsUpdate = false;\n\n    /**\n     * The layer membership of the 3D object. The 3D object is only visible if it has\n     * at least one layer in common with the camera in use. This property can also be\n     * used to filter out unwanted objects in ray-intersection tests when using {@link Raycaster}.\n     *\n     * @type {Layers}\n     */\n    this.layers = new Layers();\n\n    /**\n     * When set to `true`, the 3D object gets rendered.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.visible = true;\n\n    /**\n     * When set to `true`, the 3D object gets rendered into shadow maps.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.castShadow = false;\n\n    /**\n     * When set to `true`, the 3D object is affected by shadows in the scene.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.receiveShadow = false;\n\n    /**\n     * When set to `true`, the 3D object is honored by view frustum culling.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.frustumCulled = true;\n\n    /**\n     * This value allows the default rendering order of scene graph objects to be\n     * overridden although opaque and transparent objects remain sorted independently.\n     * When this property is set for an instance of {@link Group},all descendants\n     * objects will be sorted and rendered together. Sorting is from lowest to highest\n     * render order.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.renderOrder = 0;\n\n    /**\n     * An array holding the animation clips of the 3D object.\n     *\n     * @type {Array<AnimationClip>}\n     */\n    this.animations = [];\n\n    /**\n     * Custom depth material to be used when rendering to the depth map. Can only be used\n     * in context of meshes. When shadow-casting with a {@link DirectionalLight} or {@link SpotLight},\n     * if you are modifying vertex positions in the vertex shader you must specify a custom depth\n     * material for proper shadows.\n     *\n     * Only relevant in context of {@link WebGLRenderer}.\n     *\n     * @type {(Material|undefined)}\n     * @default undefined\n     */\n    this.customDepthMaterial = undefined;\n\n    /**\n     * Same as {@link Object3D#customDepthMaterial}, but used with {@link PointLight}.\n     *\n     * Only relevant in context of {@link WebGLRenderer}.\n     *\n     * @type {(Material|undefined)}\n     * @default undefined\n     */\n    this.customDistanceMaterial = undefined;\n\n    /**\n     * An object that can be used to store custom data about the 3D object. It\n     * should not hold references to functions as these will not be cloned.\n     *\n     * @type {Object}\n     */\n    this.userData = {};\n  }\n\n  /**\n   * A callback that is executed immediately before a 3D object is rendered to a shadow map.\n   *\n   * @param {Renderer|WebGLRenderer} renderer - The renderer.\n   * @param {Object3D} object - The 3D object.\n   * @param {Camera} camera - The camera that is used to render the scene.\n   * @param {Camera} shadowCamera - The shadow camera.\n   * @param {BufferGeometry} geometry - The 3D object's geometry.\n   * @param {Material} depthMaterial - The depth material.\n   * @param {Object} group - The geometry group data.\n   */\n  onBeforeShadow(/* renderer, object, camera, shadowCamera, geometry, depthMaterial, group */) {}\n\n  /**\n   * A callback that is executed immediately after a 3D object is rendered to a shadow map.\n   *\n   * @param {Renderer|WebGLRenderer} renderer - The renderer.\n   * @param {Object3D} object - The 3D object.\n   * @param {Camera} camera - The camera that is used to render the scene.\n   * @param {Camera} shadowCamera - The shadow camera.\n   * @param {BufferGeometry} geometry - The 3D object's geometry.\n   * @param {Material} depthMaterial - The depth material.\n   * @param {Object} group - The geometry group data.\n   */\n  onAfterShadow(/* renderer, object, camera, shadowCamera, geometry, depthMaterial, group */) {}\n\n  /**\n   * A callback that is executed immediately before a 3D object is rendered.\n   *\n   * @param {Renderer|WebGLRenderer} renderer - The renderer.\n   * @param {Object3D} object - The 3D object.\n   * @param {Camera} camera - The camera that is used to render the scene.\n   * @param {BufferGeometry} geometry - The 3D object's geometry.\n   * @param {Material} material - The 3D object's material.\n   * @param {Object} group - The geometry group data.\n   */\n  onBeforeRender(/* renderer, scene, camera, geometry, material, group */) {}\n\n  /**\n   * A callback that is executed immediately after a 3D object is rendered.\n   *\n   * @param {Renderer|WebGLRenderer} renderer - The renderer.\n   * @param {Object3D} object - The 3D object.\n   * @param {Camera} camera - The camera that is used to render the scene.\n   * @param {BufferGeometry} geometry - The 3D object's geometry.\n   * @param {Material} material - The 3D object's material.\n   * @param {Object} group - The geometry group data.\n   */\n  onAfterRender(/* renderer, scene, camera, geometry, material, group */) {}\n\n  /**\n   * Applies the given transformation matrix to the object and updates the object's position,\n   * rotation and scale.\n   *\n   * @param {Matrix4} matrix - The transformation matrix.\n   */\n  applyMatrix4(matrix) {\n    if (this.matrixAutoUpdate) this.updateMatrix();\n    this.matrix.premultiply(matrix);\n    this.matrix.decompose(this.position, this.quaternion, this.scale);\n  }\n\n  /**\n   * Applies a rotation represented by given the quaternion to the 3D object.\n   *\n   * @param {Quaternion} q - The quaternion.\n   * @return {Object3D} A reference to this instance.\n   */\n  applyQuaternion(q) {\n    this.quaternion.premultiply(q);\n    return this;\n  }\n\n  /**\n   * Sets the given rotation represented as an axis/angle couple to the 3D object.\n   *\n   * @param {Vector3} axis - The (normalized) axis vector.\n   * @param {number} angle - The angle in radians.\n   */\n  setRotationFromAxisAngle(axis, angle) {\n    // assumes axis is normalized\n\n    this.quaternion.setFromAxisAngle(axis, angle);\n  }\n\n  /**\n   * Sets the given rotation represented as Euler angles to the 3D object.\n   *\n   * @param {Euler} euler - The Euler angles.\n   */\n  setRotationFromEuler(euler) {\n    this.quaternion.setFromEuler(euler, true);\n  }\n\n  /**\n   * Sets the given rotation represented as rotation matrix to the 3D object.\n   *\n   * @param {Matrix4} m - Although a 4x4 matrix is expected, the upper 3x3 portion must be\n   * a pure rotation matrix (i.e, unscaled).\n   */\n  setRotationFromMatrix(m) {\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n    this.quaternion.setFromRotationMatrix(m);\n  }\n\n  /**\n   * Sets the given rotation represented as a Quaternion to the 3D object.\n   *\n   * @param {Quaternion} q - The Quaternion\n   */\n  setRotationFromQuaternion(q) {\n    // assumes q is normalized\n\n    this.quaternion.copy(q);\n  }\n\n  /**\n   * Rotates the 3D object along an axis in local space.\n   *\n   * @param {Vector3} axis - The (normalized) axis vector.\n   * @param {number} angle - The angle in radians.\n   * @return {Object3D} A reference to this instance.\n   */\n  rotateOnAxis(axis, angle) {\n    // rotate object on axis in object space\n    // axis is assumed to be normalized\n\n    _q1.setFromAxisAngle(axis, angle);\n    this.quaternion.multiply(_q1);\n    return this;\n  }\n\n  /**\n   * Rotates the 3D object along an axis in world space.\n   *\n   * @param {Vector3} axis - The (normalized) axis vector.\n   * @param {number} angle - The angle in radians.\n   * @return {Object3D} A reference to this instance.\n   */\n  rotateOnWorldAxis(axis, angle) {\n    // rotate object on axis in world space\n    // axis is assumed to be normalized\n    // method assumes no rotated parent\n\n    _q1.setFromAxisAngle(axis, angle);\n    this.quaternion.premultiply(_q1);\n    return this;\n  }\n\n  /**\n   * Rotates the 3D object around its X axis in local space.\n   *\n   * @param {number} angle - The angle in radians.\n   * @return {Object3D} A reference to this instance.\n   */\n  rotateX(angle) {\n    return this.rotateOnAxis(_xAxis, angle);\n  }\n\n  /**\n   * Rotates the 3D object around its Y axis in local space.\n   *\n   * @param {number} angle - The angle in radians.\n   * @return {Object3D} A reference to this instance.\n   */\n  rotateY(angle) {\n    return this.rotateOnAxis(_yAxis, angle);\n  }\n\n  /**\n   * Rotates the 3D object around its Z axis in local space.\n   *\n   * @param {number} angle - The angle in radians.\n   * @return {Object3D} A reference to this instance.\n   */\n  rotateZ(angle) {\n    return this.rotateOnAxis(_zAxis, angle);\n  }\n\n  /**\n   * Translate the 3D object by a distance along the given axis in local space.\n   *\n   * @param {Vector3} axis - The (normalized) axis vector.\n   * @param {number} distance - The distance in world units.\n   * @return {Object3D} A reference to this instance.\n   */\n  translateOnAxis(axis, distance) {\n    // translate object by distance along axis in object space\n    // axis is assumed to be normalized\n\n    _v1$4.copy(axis).applyQuaternion(this.quaternion);\n    this.position.add(_v1$4.multiplyScalar(distance));\n    return this;\n  }\n\n  /**\n   * Translate the 3D object by a distance along its X-axis in local space.\n   *\n   * @param {number} distance - The distance in world units.\n   * @return {Object3D} A reference to this instance.\n   */\n  translateX(distance) {\n    return this.translateOnAxis(_xAxis, distance);\n  }\n\n  /**\n   * Translate the 3D object by a distance along its Y-axis in local space.\n   *\n   * @param {number} distance - The distance in world units.\n   * @return {Object3D} A reference to this instance.\n   */\n  translateY(distance) {\n    return this.translateOnAxis(_yAxis, distance);\n  }\n\n  /**\n   * Translate the 3D object by a distance along its Z-axis in local space.\n   *\n   * @param {number} distance - The distance in world units.\n   * @return {Object3D} A reference to this instance.\n   */\n  translateZ(distance) {\n    return this.translateOnAxis(_zAxis, distance);\n  }\n\n  /**\n   * Converts the given vector from this 3D object's local space to world space.\n   *\n   * @param {Vector3} vector - The vector to convert.\n   * @return {Vector3} The converted vector.\n   */\n  localToWorld(vector) {\n    this.updateWorldMatrix(true, false);\n    return vector.applyMatrix4(this.matrixWorld);\n  }\n\n  /**\n   * Converts the given vector from this 3D object's word space to local space.\n   *\n   * @param {Vector3} vector - The vector to convert.\n   * @return {Vector3} The converted vector.\n   */\n  worldToLocal(vector) {\n    this.updateWorldMatrix(true, false);\n    return vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());\n  }\n\n  /**\n   * Rotates the object to face a point in world space.\n   *\n   * This method does not support objects having non-uniformly-scaled parent(s).\n   *\n   * @param {number|Vector3} x - The x coordinate in world space. Alternatively, a vector representing a position in world space\n   * @param {number} [y] - The y coordinate in world space.\n   * @param {number} [z] - The z coordinate in world space.\n   */\n  lookAt(x, y, z) {\n    // This method does not support objects having non-uniformly-scaled parent(s)\n\n    if (x.isVector3) {\n      _target.copy(x);\n    } else {\n      _target.set(x, y, z);\n    }\n    const parent = this.parent;\n    this.updateWorldMatrix(true, false);\n    _position$3.setFromMatrixPosition(this.matrixWorld);\n    if (this.isCamera || this.isLight) {\n      _m1$1.lookAt(_position$3, _target, this.up);\n    } else {\n      _m1$1.lookAt(_target, _position$3, this.up);\n    }\n    this.quaternion.setFromRotationMatrix(_m1$1);\n    if (parent) {\n      _m1$1.extractRotation(parent.matrixWorld);\n      _q1.setFromRotationMatrix(_m1$1);\n      this.quaternion.premultiply(_q1.invert());\n    }\n  }\n\n  /**\n   * Adds the given 3D object as a child to this 3D object. An arbitrary number of\n   * objects may be added. Any current parent on an object passed in here will be\n   * removed, since an object can have at most one parent.\n   *\n   * @fires Object3D#added\n   * @fires Object3D#childadded\n   * @param {Object3D} object - The 3D object to add.\n   * @return {Object3D} A reference to this instance.\n   */\n  add(object) {\n    if (arguments.length > 1) {\n      for (let i = 0; i < arguments.length; i++) {\n        this.add(arguments[i]);\n      }\n      return this;\n    }\n    if (object === this) {\n      console.error('THREE.Object3D.add: object can\\'t be added as a child of itself.', object);\n      return this;\n    }\n    if (object && object.isObject3D) {\n      object.removeFromParent();\n      object.parent = this;\n      this.children.push(object);\n      object.dispatchEvent(_addedEvent);\n      _childaddedEvent.child = object;\n      this.dispatchEvent(_childaddedEvent);\n      _childaddedEvent.child = null;\n    } else {\n      console.error('THREE.Object3D.add: object not an instance of THREE.Object3D.', object);\n    }\n    return this;\n  }\n\n  /**\n   * Removes the given 3D object as child from this 3D object.\n   * An arbitrary number of objects may be removed.\n   *\n   * @fires Object3D#removed\n   * @fires Object3D#childremoved\n   * @param {Object3D} object - The 3D object to remove.\n   * @return {Object3D} A reference to this instance.\n   */\n  remove(object) {\n    if (arguments.length > 1) {\n      for (let i = 0; i < arguments.length; i++) {\n        this.remove(arguments[i]);\n      }\n      return this;\n    }\n    const index = this.children.indexOf(object);\n    if (index !== -1) {\n      object.parent = null;\n      this.children.splice(index, 1);\n      object.dispatchEvent(_removedEvent);\n      _childremovedEvent.child = object;\n      this.dispatchEvent(_childremovedEvent);\n      _childremovedEvent.child = null;\n    }\n    return this;\n  }\n\n  /**\n   * Removes this 3D object from its current parent.\n   *\n   * @fires Object3D#removed\n   * @fires Object3D#childremoved\n   * @return {Object3D} A reference to this instance.\n   */\n  removeFromParent() {\n    const parent = this.parent;\n    if (parent !== null) {\n      parent.remove(this);\n    }\n    return this;\n  }\n\n  /**\n   * Removes all child objects.\n   *\n   * @fires Object3D#removed\n   * @fires Object3D#childremoved\n   * @return {Object3D} A reference to this instance.\n   */\n  clear() {\n    return this.remove(...this.children);\n  }\n\n  /**\n   * Adds the given 3D object as a child of this 3D object, while maintaining the object's world\n   * transform. This method does not support scene graphs having non-uniformly-scaled nodes(s).\n   *\n   * @fires Object3D#added\n   * @fires Object3D#childadded\n   * @param {Object3D} object - The 3D object to attach.\n   * @return {Object3D} A reference to this instance.\n   */\n  attach(object) {\n    // adds object as a child of this, while maintaining the object's world transform\n\n    // Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)\n\n    this.updateWorldMatrix(true, false);\n    _m1$1.copy(this.matrixWorld).invert();\n    if (object.parent !== null) {\n      object.parent.updateWorldMatrix(true, false);\n      _m1$1.multiply(object.parent.matrixWorld);\n    }\n    object.applyMatrix4(_m1$1);\n    object.removeFromParent();\n    object.parent = this;\n    this.children.push(object);\n    object.updateWorldMatrix(false, true);\n    object.dispatchEvent(_addedEvent);\n    _childaddedEvent.child = object;\n    this.dispatchEvent(_childaddedEvent);\n    _childaddedEvent.child = null;\n    return this;\n  }\n\n  /**\n   * Searches through the 3D object and its children, starting with the 3D object\n   * itself, and returns the first with a matching ID.\n   *\n   * @param {number} id - The id.\n   * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.\n   */\n  getObjectById(id) {\n    return this.getObjectByProperty('id', id);\n  }\n\n  /**\n   * Searches through the 3D object and its children, starting with the 3D object\n   * itself, and returns the first with a matching name.\n   *\n   * @param {string} name - The name.\n   * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.\n   */\n  getObjectByName(name) {\n    return this.getObjectByProperty('name', name);\n  }\n\n  /**\n   * Searches through the 3D object and its children, starting with the 3D object\n   * itself, and returns the first with a matching property value.\n   *\n   * @param {string} name - The name of the property.\n   * @param {any} value - The value.\n   * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.\n   */\n  getObjectByProperty(name, value) {\n    if (this[name] === value) return this;\n    for (let i = 0, l = this.children.length; i < l; i++) {\n      const child = this.children[i];\n      const object = child.getObjectByProperty(name, value);\n      if (object !== undefined) {\n        return object;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Searches through the 3D object and its children, starting with the 3D object\n   * itself, and returns all 3D objects with a matching property value.\n   *\n   * @param {string} name - The name of the property.\n   * @param {any} value - The value.\n   * @param {Array<Object3D>} result - The method stores the result in this array.\n   * @return {Array<Object3D>} The found 3D objects.\n   */\n  getObjectsByProperty(name, value) {\n    let result = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    if (this[name] === value) result.push(this);\n    const children = this.children;\n    for (let i = 0, l = children.length; i < l; i++) {\n      children[i].getObjectsByProperty(name, value, result);\n    }\n    return result;\n  }\n\n  /**\n   * Returns a vector representing the position of the 3D object in world space.\n   *\n   * @param {Vector3} target - The target vector the result is stored to.\n   * @return {Vector3} The 3D object's position in world space.\n   */\n  getWorldPosition(target) {\n    this.updateWorldMatrix(true, false);\n    return target.setFromMatrixPosition(this.matrixWorld);\n  }\n\n  /**\n   * Returns a Quaternion representing the position of the 3D object in world space.\n   *\n   * @param {Quaternion} target - The target Quaternion the result is stored to.\n   * @return {Quaternion} The 3D object's rotation in world space.\n   */\n  getWorldQuaternion(target) {\n    this.updateWorldMatrix(true, false);\n    this.matrixWorld.decompose(_position$3, target, _scale$2);\n    return target;\n  }\n\n  /**\n   * Returns a vector representing the scale of the 3D object in world space.\n   *\n   * @param {Vector3} target - The target vector the result is stored to.\n   * @return {Vector3} The 3D object's scale in world space.\n   */\n  getWorldScale(target) {\n    this.updateWorldMatrix(true, false);\n    this.matrixWorld.decompose(_position$3, _quaternion$2, target);\n    return target;\n  }\n\n  /**\n   * Returns a vector representing the (\"look\") direction of the 3D object in world space.\n   *\n   * @param {Vector3} target - The target vector the result is stored to.\n   * @return {Vector3} The 3D object's direction in world space.\n   */\n  getWorldDirection(target) {\n    this.updateWorldMatrix(true, false);\n    const e = this.matrixWorld.elements;\n    return target.set(e[8], e[9], e[10]).normalize();\n  }\n\n  /**\n   * Abstract method to get intersections between a casted ray and this\n   * 3D object. Renderable 3D objects such as {@link Mesh}, {@link Line} or {@link Points}\n   * implement this method in order to use raycasting.\n   *\n   * @abstract\n   * @param {Raycaster} raycaster - The raycaster.\n   * @param {Array<Object>} intersects - An array holding the result of the method.\n   */\n  raycast(/* raycaster, intersects */) {}\n\n  /**\n   * Executes the callback on this 3D object and all descendants.\n   *\n   * Note: Modifying the scene graph inside the callback is discouraged.\n   *\n   * @param {Function} callback - A callback function that allows to process the current 3D object.\n   */\n  traverse(callback) {\n    callback(this);\n    const children = this.children;\n    for (let i = 0, l = children.length; i < l; i++) {\n      children[i].traverse(callback);\n    }\n  }\n\n  /**\n   * Like {@link Object3D#traverse}, but the callback will only be executed for visible 3D objects.\n   * Descendants of invisible 3D objects are not traversed.\n   *\n   * Note: Modifying the scene graph inside the callback is discouraged.\n   *\n   * @param {Function} callback - A callback function that allows to process the current 3D object.\n   */\n  traverseVisible(callback) {\n    if (this.visible === false) return;\n    callback(this);\n    const children = this.children;\n    for (let i = 0, l = children.length; i < l; i++) {\n      children[i].traverseVisible(callback);\n    }\n  }\n\n  /**\n   * Like {@link Object3D#traverse}, but the callback will only be executed for all ancestors.\n   *\n   * Note: Modifying the scene graph inside the callback is discouraged.\n   *\n   * @param {Function} callback - A callback function that allows to process the current 3D object.\n   */\n  traverseAncestors(callback) {\n    const parent = this.parent;\n    if (parent !== null) {\n      callback(parent);\n      parent.traverseAncestors(callback);\n    }\n  }\n\n  /**\n   * Updates the transformation matrix in local space by computing it from the current\n   * position, rotation and scale values.\n   */\n  updateMatrix() {\n    this.matrix.compose(this.position, this.quaternion, this.scale);\n    this.matrixWorldNeedsUpdate = true;\n  }\n\n  /**\n   * Updates the transformation matrix in world space of this 3D objects and its descendants.\n   *\n   * To ensure correct results, this method also recomputes the 3D object's transformation matrix in\n   * local space. The computation of the local and world matrix can be controlled with the\n   * {@link Object3D#matrixAutoUpdate} and {@link Object3D#matrixWorldAutoUpdate} flags which are both\n   * `true` by default.  Set these flags to `false` if you need more control over the update matrix process.\n   *\n   * @param {boolean} [force=false] - When set to `true`, a recomputation of world matrices is forced even\n   * when {@link Object3D#matrixWorldAutoUpdate} is set to `false`.\n   */\n  updateMatrixWorld(force) {\n    if (this.matrixAutoUpdate) this.updateMatrix();\n    if (this.matrixWorldNeedsUpdate || force) {\n      if (this.matrixWorldAutoUpdate === true) {\n        if (this.parent === null) {\n          this.matrixWorld.copy(this.matrix);\n        } else {\n          this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n        }\n      }\n      this.matrixWorldNeedsUpdate = false;\n      force = true;\n    }\n\n    // make sure descendants are updated if required\n\n    const children = this.children;\n    for (let i = 0, l = children.length; i < l; i++) {\n      const child = children[i];\n      child.updateMatrixWorld(force);\n    }\n  }\n\n  /**\n   * An alternative version of {@link Object3D#updateMatrixWorld} with more control over the\n   * update of ancestor and descendant nodes.\n   *\n   * @param {boolean} [updateParents=false] Whether ancestor nodes should be updated or not.\n   * @param {boolean} [updateChildren=false] Whether descendant nodes should be updated or not.\n   */\n  updateWorldMatrix(updateParents, updateChildren) {\n    const parent = this.parent;\n    if (updateParents === true && parent !== null) {\n      parent.updateWorldMatrix(true, false);\n    }\n    if (this.matrixAutoUpdate) this.updateMatrix();\n    if (this.matrixWorldAutoUpdate === true) {\n      if (this.parent === null) {\n        this.matrixWorld.copy(this.matrix);\n      } else {\n        this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n      }\n    }\n\n    // make sure descendants are updated\n\n    if (updateChildren === true) {\n      const children = this.children;\n      for (let i = 0, l = children.length; i < l; i++) {\n        const child = children[i];\n        child.updateWorldMatrix(false, true);\n      }\n    }\n  }\n\n  /**\n   * Serializes the 3D object into JSON.\n   *\n   * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n   * @return {Object} A JSON object representing the serialized 3D object.\n   * @see {@link ObjectLoader#parse}\n   */\n  toJSON(meta) {\n    // meta is a string when called from JSON.stringify\n    const isRootObject = meta === undefined || typeof meta === 'string';\n    const output = {};\n\n    // meta is a hash used to collect geometries, materials.\n    // not providing it implies that this is the root object\n    // being serialized.\n    if (isRootObject) {\n      // initialize meta obj\n      meta = {\n        geometries: {},\n        materials: {},\n        textures: {},\n        images: {},\n        shapes: {},\n        skeletons: {},\n        animations: {},\n        nodes: {}\n      };\n      output.metadata = {\n        version: 4.6,\n        type: 'Object',\n        generator: 'Object3D.toJSON'\n      };\n    }\n\n    // standard Object3D serialization\n\n    const object = {};\n    object.uuid = this.uuid;\n    object.type = this.type;\n    if (this.name !== '') object.name = this.name;\n    if (this.castShadow === true) object.castShadow = true;\n    if (this.receiveShadow === true) object.receiveShadow = true;\n    if (this.visible === false) object.visible = false;\n    if (this.frustumCulled === false) object.frustumCulled = false;\n    if (this.renderOrder !== 0) object.renderOrder = this.renderOrder;\n    if (Object.keys(this.userData).length > 0) object.userData = this.userData;\n    object.layers = this.layers.mask;\n    object.matrix = this.matrix.toArray();\n    object.up = this.up.toArray();\n    if (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false;\n\n    // object specific properties\n\n    if (this.isInstancedMesh) {\n      object.type = 'InstancedMesh';\n      object.count = this.count;\n      object.instanceMatrix = this.instanceMatrix.toJSON();\n      if (this.instanceColor !== null) object.instanceColor = this.instanceColor.toJSON();\n    }\n    if (this.isBatchedMesh) {\n      object.type = 'BatchedMesh';\n      object.perObjectFrustumCulled = this.perObjectFrustumCulled;\n      object.sortObjects = this.sortObjects;\n      object.drawRanges = this._drawRanges;\n      object.reservedRanges = this._reservedRanges;\n      object.geometryInfo = this._geometryInfo.map(info => ({\n        ...info,\n        boundingBox: info.boundingBox ? {\n          min: info.boundingBox.min.toArray(),\n          max: info.boundingBox.max.toArray()\n        } : undefined,\n        boundingSphere: info.boundingSphere ? {\n          radius: info.boundingSphere.radius,\n          center: info.boundingSphere.center.toArray()\n        } : undefined\n      }));\n      object.instanceInfo = this._instanceInfo.map(info => ({\n        ...info\n      }));\n      object.availableInstanceIds = this._availableInstanceIds.slice();\n      object.availableGeometryIds = this._availableGeometryIds.slice();\n      object.nextIndexStart = this._nextIndexStart;\n      object.nextVertexStart = this._nextVertexStart;\n      object.geometryCount = this._geometryCount;\n      object.maxInstanceCount = this._maxInstanceCount;\n      object.maxVertexCount = this._maxVertexCount;\n      object.maxIndexCount = this._maxIndexCount;\n      object.geometryInitialized = this._geometryInitialized;\n      object.matricesTexture = this._matricesTexture.toJSON(meta);\n      object.indirectTexture = this._indirectTexture.toJSON(meta);\n      if (this._colorsTexture !== null) {\n        object.colorsTexture = this._colorsTexture.toJSON(meta);\n      }\n      if (this.boundingSphere !== null) {\n        object.boundingSphere = {\n          center: this.boundingSphere.center.toArray(),\n          radius: this.boundingSphere.radius\n        };\n      }\n      if (this.boundingBox !== null) {\n        object.boundingBox = {\n          min: this.boundingBox.min.toArray(),\n          max: this.boundingBox.max.toArray()\n        };\n      }\n    }\n\n    //\n\n    function serialize(library, element) {\n      if (library[element.uuid] === undefined) {\n        library[element.uuid] = element.toJSON(meta);\n      }\n      return element.uuid;\n    }\n    if (this.isScene) {\n      if (this.background) {\n        if (this.background.isColor) {\n          object.background = this.background.toJSON();\n        } else if (this.background.isTexture) {\n          object.background = this.background.toJSON(meta).uuid;\n        }\n      }\n      if (this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true) {\n        object.environment = this.environment.toJSON(meta).uuid;\n      }\n    } else if (this.isMesh || this.isLine || this.isPoints) {\n      object.geometry = serialize(meta.geometries, this.geometry);\n      const parameters = this.geometry.parameters;\n      if (parameters !== undefined && parameters.shapes !== undefined) {\n        const shapes = parameters.shapes;\n        if (Array.isArray(shapes)) {\n          for (let i = 0, l = shapes.length; i < l; i++) {\n            const shape = shapes[i];\n            serialize(meta.shapes, shape);\n          }\n        } else {\n          serialize(meta.shapes, shapes);\n        }\n      }\n    }\n    if (this.isSkinnedMesh) {\n      object.bindMode = this.bindMode;\n      object.bindMatrix = this.bindMatrix.toArray();\n      if (this.skeleton !== undefined) {\n        serialize(meta.skeletons, this.skeleton);\n        object.skeleton = this.skeleton.uuid;\n      }\n    }\n    if (this.material !== undefined) {\n      if (Array.isArray(this.material)) {\n        const uuids = [];\n        for (let i = 0, l = this.material.length; i < l; i++) {\n          uuids.push(serialize(meta.materials, this.material[i]));\n        }\n        object.material = uuids;\n      } else {\n        object.material = serialize(meta.materials, this.material);\n      }\n    }\n\n    //\n\n    if (this.children.length > 0) {\n      object.children = [];\n      for (let i = 0; i < this.children.length; i++) {\n        object.children.push(this.children[i].toJSON(meta).object);\n      }\n    }\n\n    //\n\n    if (this.animations.length > 0) {\n      object.animations = [];\n      for (let i = 0; i < this.animations.length; i++) {\n        const animation = this.animations[i];\n        object.animations.push(serialize(meta.animations, animation));\n      }\n    }\n    if (isRootObject) {\n      const geometries = extractFromCache(meta.geometries);\n      const materials = extractFromCache(meta.materials);\n      const textures = extractFromCache(meta.textures);\n      const images = extractFromCache(meta.images);\n      const shapes = extractFromCache(meta.shapes);\n      const skeletons = extractFromCache(meta.skeletons);\n      const animations = extractFromCache(meta.animations);\n      const nodes = extractFromCache(meta.nodes);\n      if (geometries.length > 0) output.geometries = geometries;\n      if (materials.length > 0) output.materials = materials;\n      if (textures.length > 0) output.textures = textures;\n      if (images.length > 0) output.images = images;\n      if (shapes.length > 0) output.shapes = shapes;\n      if (skeletons.length > 0) output.skeletons = skeletons;\n      if (animations.length > 0) output.animations = animations;\n      if (nodes.length > 0) output.nodes = nodes;\n    }\n    output.object = object;\n    return output;\n\n    // extract data from the cache hash\n    // remove metadata on each item\n    // and return as array\n    function extractFromCache(cache) {\n      const values = [];\n      for (const key in cache) {\n        const data = cache[key];\n        delete data.metadata;\n        values.push(data);\n      }\n      return values;\n    }\n  }\n\n  /**\n   * Returns a new 3D object with copied values from this instance.\n   *\n   * @param {boolean} [recursive=true] - When set to `true`, descendants of the 3D object are also cloned.\n   * @return {Object3D} A clone of this instance.\n   */\n  clone(recursive) {\n    return new this.constructor().copy(this, recursive);\n  }\n\n  /**\n   * Copies the values of the given 3D object to this instance.\n   *\n   * @param {Object3D} source - The 3D object to copy.\n   * @param {boolean} [recursive=true] - When set to `true`, descendants of the 3D object are cloned.\n   * @return {Object3D} A reference to this instance.\n   */\n  copy(source) {\n    let recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    this.name = source.name;\n    this.up.copy(source.up);\n    this.position.copy(source.position);\n    this.rotation.order = source.rotation.order;\n    this.quaternion.copy(source.quaternion);\n    this.scale.copy(source.scale);\n    this.matrix.copy(source.matrix);\n    this.matrixWorld.copy(source.matrixWorld);\n    this.matrixAutoUpdate = source.matrixAutoUpdate;\n    this.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;\n    this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n    this.layers.mask = source.layers.mask;\n    this.visible = source.visible;\n    this.castShadow = source.castShadow;\n    this.receiveShadow = source.receiveShadow;\n    this.frustumCulled = source.frustumCulled;\n    this.renderOrder = source.renderOrder;\n    this.animations = source.animations.slice();\n    this.userData = JSON.parse(JSON.stringify(source.userData));\n    if (recursive === true) {\n      for (let i = 0; i < source.children.length; i++) {\n        const child = source.children[i];\n        this.add(child.clone());\n      }\n    }\n    return this;\n  }\n}\n\n/**\n * The default up direction for objects, also used as the default\n * position for {@link DirectionalLight} and {@link HemisphereLight}.\n *\n * @static\n * @type {Vector3}\n * @default (0,1,0)\n */\nObject3D.DEFAULT_UP = /*@__PURE__*/new Vector3(0, 1, 0);\n\n/**\n * The default setting for {@link Object3D#matrixAutoUpdate} for\n * newly created 3D objects.\n *\n * @static\n * @type {boolean}\n * @default true\n */\nObject3D.DEFAULT_MATRIX_AUTO_UPDATE = true;\n\n/**\n * The default setting for {@link Object3D#matrixWorldAutoUpdate} for\n * newly created 3D objects.\n *\n * @static\n * @type {boolean}\n * @default true\n */\nObject3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;\nconst _v0$1 = /*@__PURE__*/new Vector3();\nconst _v1$3 = /*@__PURE__*/new Vector3();\nconst _v2$2 = /*@__PURE__*/new Vector3();\nconst _v3$2 = /*@__PURE__*/new Vector3();\nconst _vab = /*@__PURE__*/new Vector3();\nconst _vac = /*@__PURE__*/new Vector3();\nconst _vbc = /*@__PURE__*/new Vector3();\nconst _vap = /*@__PURE__*/new Vector3();\nconst _vbp = /*@__PURE__*/new Vector3();\nconst _vcp = /*@__PURE__*/new Vector3();\nconst _v40 = /*@__PURE__*/new Vector4();\nconst _v41 = /*@__PURE__*/new Vector4();\nconst _v42 = /*@__PURE__*/new Vector4();\n\n/**\n * A geometric triangle as defined by three vectors representing its three corners.\n */\nclass Triangle {\n  /**\n   * Constructs a new triangle.\n   *\n   * @param {Vector3} [a=(0,0,0)] - The first corner of the triangle.\n   * @param {Vector3} [b=(0,0,0)] - The second corner of the triangle.\n   * @param {Vector3} [c=(0,0,0)] - The third corner of the triangle.\n   */\n  constructor() {\n    let a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Vector3();\n    /**\n     * The first corner of the triangle.\n     *\n     * @type {Vector3}\n     */\n    this.a = a;\n\n    /**\n     * The second corner of the triangle.\n     *\n     * @type {Vector3}\n     */\n    this.b = b;\n\n    /**\n     * The third corner of the triangle.\n     *\n     * @type {Vector3}\n     */\n    this.c = c;\n  }\n\n  /**\n   * Computes the normal vector of a triangle.\n   *\n   * @param {Vector3} a - The first corner of the triangle.\n   * @param {Vector3} b - The second corner of the triangle.\n   * @param {Vector3} c - The third corner of the triangle.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} The triangle's normal.\n   */\n  static getNormal(a, b, c, target) {\n    target.subVectors(c, b);\n    _v0$1.subVectors(a, b);\n    target.cross(_v0$1);\n    const targetLengthSq = target.lengthSq();\n    if (targetLengthSq > 0) {\n      return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));\n    }\n    return target.set(0, 0, 0);\n  }\n\n  /**\n   * Computes a barycentric coordinates from the given vector.\n   * Returns `null` if the triangle is degenerate.\n   *\n   * @param {Vector3} point - A point in 3D space.\n   * @param {Vector3} a - The first corner of the triangle.\n   * @param {Vector3} b - The second corner of the triangle.\n   * @param {Vector3} c - The third corner of the triangle.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {?Vector3} The barycentric coordinates for the given point\n   */\n  static getBarycoord(point, a, b, c, target) {\n    // based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\n    _v0$1.subVectors(c, a);\n    _v1$3.subVectors(b, a);\n    _v2$2.subVectors(point, a);\n    const dot00 = _v0$1.dot(_v0$1);\n    const dot01 = _v0$1.dot(_v1$3);\n    const dot02 = _v0$1.dot(_v2$2);\n    const dot11 = _v1$3.dot(_v1$3);\n    const dot12 = _v1$3.dot(_v2$2);\n    const denom = dot00 * dot11 - dot01 * dot01;\n\n    // collinear or singular triangle\n    if (denom === 0) {\n      target.set(0, 0, 0);\n      return null;\n    }\n    const invDenom = 1 / denom;\n    const u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n    const v = (dot00 * dot12 - dot01 * dot02) * invDenom;\n\n    // barycentric coordinates must always sum to 1\n    return target.set(1 - u - v, v, u);\n  }\n\n  /**\n   * Returns `true` if the given point, when projected onto the plane of the\n   * triangle, lies within the triangle.\n   *\n   * @param {Vector3} point - The point in 3D space to test.\n   * @param {Vector3} a - The first corner of the triangle.\n   * @param {Vector3} b - The second corner of the triangle.\n   * @param {Vector3} c - The third corner of the triangle.\n   * @return {boolean} Whether the given point, when projected onto the plane of the\n   * triangle, lies within the triangle or not.\n   */\n  static containsPoint(point, a, b, c) {\n    // if the triangle is degenerate then we can't contain a point\n    if (this.getBarycoord(point, a, b, c, _v3$2) === null) {\n      return false;\n    }\n    return _v3$2.x >= 0 && _v3$2.y >= 0 && _v3$2.x + _v3$2.y <= 1;\n  }\n\n  /**\n   * Computes the value barycentrically interpolated for the given point on the\n   * triangle. Returns `null` if the triangle is degenerate.\n   *\n   * @param {Vector3} point - Position of interpolated point.\n   * @param {Vector3} p1 - The first corner of the triangle.\n   * @param {Vector3} p2 - The second corner of the triangle.\n   * @param {Vector3} p3 - The third corner of the triangle.\n   * @param {Vector3} v1 - Value to interpolate of first vertex.\n   * @param {Vector3} v2 - Value to interpolate of second vertex.\n   * @param {Vector3} v3 - Value to interpolate of third vertex.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {?Vector3} The interpolated value.\n   */\n  static getInterpolation(point, p1, p2, p3, v1, v2, v3, target) {\n    if (this.getBarycoord(point, p1, p2, p3, _v3$2) === null) {\n      target.x = 0;\n      target.y = 0;\n      if ('z' in target) target.z = 0;\n      if ('w' in target) target.w = 0;\n      return null;\n    }\n    target.setScalar(0);\n    target.addScaledVector(v1, _v3$2.x);\n    target.addScaledVector(v2, _v3$2.y);\n    target.addScaledVector(v3, _v3$2.z);\n    return target;\n  }\n\n  /**\n   * Computes the value barycentrically interpolated for the given attribute and indices.\n   *\n   * @param {BufferAttribute} attr - The attribute to interpolate.\n   * @param {number} i1 - Index of first vertex.\n   * @param {number} i2 - Index of second vertex.\n   * @param {number} i3 - Index of third vertex.\n   * @param {Vector3} barycoord - The barycoordinate value to use to interpolate.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} The interpolated attribute value.\n   */\n  static getInterpolatedAttribute(attr, i1, i2, i3, barycoord, target) {\n    _v40.setScalar(0);\n    _v41.setScalar(0);\n    _v42.setScalar(0);\n    _v40.fromBufferAttribute(attr, i1);\n    _v41.fromBufferAttribute(attr, i2);\n    _v42.fromBufferAttribute(attr, i3);\n    target.setScalar(0);\n    target.addScaledVector(_v40, barycoord.x);\n    target.addScaledVector(_v41, barycoord.y);\n    target.addScaledVector(_v42, barycoord.z);\n    return target;\n  }\n\n  /**\n   * Returns `true` if the triangle is oriented towards the given direction.\n   *\n   * @param {Vector3} a - The first corner of the triangle.\n   * @param {Vector3} b - The second corner of the triangle.\n   * @param {Vector3} c - The third corner of the triangle.\n   * @param {Vector3} direction - The (normalized) direction vector.\n   * @return {boolean} Whether the triangle is oriented towards the given direction or not.\n   */\n  static isFrontFacing(a, b, c, direction) {\n    _v0$1.subVectors(c, b);\n    _v1$3.subVectors(a, b);\n\n    // strictly front facing\n    return _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;\n  }\n\n  /**\n   * Sets the triangle's vertices by copying the given values.\n   *\n   * @param {Vector3} a - The first corner of the triangle.\n   * @param {Vector3} b - The second corner of the triangle.\n   * @param {Vector3} c - The third corner of the triangle.\n   * @return {Triangle} A reference to this triangle.\n   */\n  set(a, b, c) {\n    this.a.copy(a);\n    this.b.copy(b);\n    this.c.copy(c);\n    return this;\n  }\n\n  /**\n   * Sets the triangle's vertices by copying the given array values.\n   *\n   * @param {Array<Vector3>} points - An array with 3D points.\n   * @param {number} i0 - The array index representing the first corner of the triangle.\n   * @param {number} i1 - The array index representing the second corner of the triangle.\n   * @param {number} i2 - The array index representing the third corner of the triangle.\n   * @return {Triangle} A reference to this triangle.\n   */\n  setFromPointsAndIndices(points, i0, i1, i2) {\n    this.a.copy(points[i0]);\n    this.b.copy(points[i1]);\n    this.c.copy(points[i2]);\n    return this;\n  }\n\n  /**\n   * Sets the triangle's vertices by copying the given attribute values.\n   *\n   * @param {BufferAttribute} attribute - A buffer attribute with 3D points data.\n   * @param {number} i0 - The attribute index representing the first corner of the triangle.\n   * @param {number} i1 - The attribute index representing the second corner of the triangle.\n   * @param {number} i2 - The attribute index representing the third corner of the triangle.\n   * @return {Triangle} A reference to this triangle.\n   */\n  setFromAttributeAndIndices(attribute, i0, i1, i2) {\n    this.a.fromBufferAttribute(attribute, i0);\n    this.b.fromBufferAttribute(attribute, i1);\n    this.c.fromBufferAttribute(attribute, i2);\n    return this;\n  }\n\n  /**\n   * Returns a new triangle with copied values from this instance.\n   *\n   * @return {Triangle} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  /**\n   * Copies the values of the given triangle to this instance.\n   *\n   * @param {Triangle} triangle - The triangle to copy.\n   * @return {Triangle} A reference to this triangle.\n   */\n  copy(triangle) {\n    this.a.copy(triangle.a);\n    this.b.copy(triangle.b);\n    this.c.copy(triangle.c);\n    return this;\n  }\n\n  /**\n   * Computes the area of the triangle.\n   *\n   * @return {number} The triangle's area.\n   */\n  getArea() {\n    _v0$1.subVectors(this.c, this.b);\n    _v1$3.subVectors(this.a, this.b);\n    return _v0$1.cross(_v1$3).length() * 0.5;\n  }\n\n  /**\n   * Computes the midpoint of the triangle.\n   *\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} The triangle's midpoint.\n   */\n  getMidpoint(target) {\n    return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);\n  }\n\n  /**\n   * Computes the normal of the triangle.\n   *\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} The triangle's normal.\n   */\n  getNormal(target) {\n    return Triangle.getNormal(this.a, this.b, this.c, target);\n  }\n\n  /**\n   * Computes a plane the triangle lies within.\n   *\n   * @param {Plane} target - The target vector that is used to store the method's result.\n   * @return {Plane} The plane the triangle lies within.\n   */\n  getPlane(target) {\n    return target.setFromCoplanarPoints(this.a, this.b, this.c);\n  }\n\n  /**\n   * Computes a barycentric coordinates from the given vector.\n   * Returns `null` if the triangle is degenerate.\n   *\n   * @param {Vector3} point - A point in 3D space.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {?Vector3} The barycentric coordinates for the given point\n   */\n  getBarycoord(point, target) {\n    return Triangle.getBarycoord(point, this.a, this.b, this.c, target);\n  }\n\n  /**\n   * Computes the value barycentrically interpolated for the given point on the\n   * triangle. Returns `null` if the triangle is degenerate.\n   *\n   * @param {Vector3} point - Position of interpolated point.\n   * @param {Vector3} v1 - Value to interpolate of first vertex.\n   * @param {Vector3} v2 - Value to interpolate of second vertex.\n   * @param {Vector3} v3 - Value to interpolate of third vertex.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {?Vector3} The interpolated value.\n   */\n  getInterpolation(point, v1, v2, v3, target) {\n    return Triangle.getInterpolation(point, this.a, this.b, this.c, v1, v2, v3, target);\n  }\n\n  /**\n   * Returns `true` if the given point, when projected onto the plane of the\n   * triangle, lies within the triangle.\n   *\n   * @param {Vector3} point - The point in 3D space to test.\n   * @return {boolean} Whether the given point, when projected onto the plane of the\n   * triangle, lies within the triangle or not.\n   */\n  containsPoint(point) {\n    return Triangle.containsPoint(point, this.a, this.b, this.c);\n  }\n\n  /**\n   * Returns `true` if the triangle is oriented towards the given direction.\n   *\n   * @param {Vector3} direction - The (normalized) direction vector.\n   * @return {boolean} Whether the triangle is oriented towards the given direction or not.\n   */\n  isFrontFacing(direction) {\n    return Triangle.isFrontFacing(this.a, this.b, this.c, direction);\n  }\n\n  /**\n   * Returns `true` if this triangle intersects with the given box.\n   *\n   * @param {Box3} box - The box to intersect.\n   * @return {boolean} Whether this triangle intersects with the given box or not.\n   */\n  intersectsBox(box) {\n    return box.intersectsTriangle(this);\n  }\n\n  /**\n   * Returns the closest point on the triangle to the given point.\n   *\n   * @param {Vector3} p - The point to compute the closest point for.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} The closest point on the triangle.\n   */\n  closestPointToPoint(p, target) {\n    const a = this.a,\n      b = this.b,\n      c = this.c;\n    let v, w;\n\n    // algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n    // published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n    // under the accompanying license; see chapter 5.1.5 for detailed explanation.\n    // basically, we're distinguishing which of the voronoi regions of the triangle\n    // the point lies in with the minimum amount of redundant computation.\n\n    _vab.subVectors(b, a);\n    _vac.subVectors(c, a);\n    _vap.subVectors(p, a);\n    const d1 = _vab.dot(_vap);\n    const d2 = _vac.dot(_vap);\n    if (d1 <= 0 && d2 <= 0) {\n      // vertex region of A; barycentric coords (1, 0, 0)\n      return target.copy(a);\n    }\n    _vbp.subVectors(p, b);\n    const d3 = _vab.dot(_vbp);\n    const d4 = _vac.dot(_vbp);\n    if (d3 >= 0 && d4 <= d3) {\n      // vertex region of B; barycentric coords (0, 1, 0)\n      return target.copy(b);\n    }\n    const vc = d1 * d4 - d3 * d2;\n    if (vc <= 0 && d1 >= 0 && d3 <= 0) {\n      v = d1 / (d1 - d3);\n      // edge region of AB; barycentric coords (1-v, v, 0)\n      return target.copy(a).addScaledVector(_vab, v);\n    }\n    _vcp.subVectors(p, c);\n    const d5 = _vab.dot(_vcp);\n    const d6 = _vac.dot(_vcp);\n    if (d6 >= 0 && d5 <= d6) {\n      // vertex region of C; barycentric coords (0, 0, 1)\n      return target.copy(c);\n    }\n    const vb = d5 * d2 - d1 * d6;\n    if (vb <= 0 && d2 >= 0 && d6 <= 0) {\n      w = d2 / (d2 - d6);\n      // edge region of AC; barycentric coords (1-w, 0, w)\n      return target.copy(a).addScaledVector(_vac, w);\n    }\n    const va = d3 * d6 - d5 * d4;\n    if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {\n      _vbc.subVectors(c, b);\n      w = (d4 - d3) / (d4 - d3 + (d5 - d6));\n      // edge region of BC; barycentric coords (0, 1-w, w)\n      return target.copy(b).addScaledVector(_vbc, w); // edge region of BC\n    }\n\n    // face region\n    const denom = 1 / (va + vb + vc);\n    // u = va * denom\n    v = vb * denom;\n    w = vc * denom;\n    return target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);\n  }\n\n  /**\n   * Returns `true` if this triangle is equal with the given one.\n   *\n   * @param {Triangle} triangle - The triangle to test for equality.\n   * @return {boolean} Whether this triangle is equal with the given one.\n   */\n  equals(triangle) {\n    return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);\n  }\n}\nconst _colorKeywords = {\n  'aliceblue': 0xF0F8FF,\n  'antiquewhite': 0xFAEBD7,\n  'aqua': 0x00FFFF,\n  'aquamarine': 0x7FFFD4,\n  'azure': 0xF0FFFF,\n  'beige': 0xF5F5DC,\n  'bisque': 0xFFE4C4,\n  'black': 0x000000,\n  'blanchedalmond': 0xFFEBCD,\n  'blue': 0x0000FF,\n  'blueviolet': 0x8A2BE2,\n  'brown': 0xA52A2A,\n  'burlywood': 0xDEB887,\n  'cadetblue': 0x5F9EA0,\n  'chartreuse': 0x7FFF00,\n  'chocolate': 0xD2691E,\n  'coral': 0xFF7F50,\n  'cornflowerblue': 0x6495ED,\n  'cornsilk': 0xFFF8DC,\n  'crimson': 0xDC143C,\n  'cyan': 0x00FFFF,\n  'darkblue': 0x00008B,\n  'darkcyan': 0x008B8B,\n  'darkgoldenrod': 0xB8860B,\n  'darkgray': 0xA9A9A9,\n  'darkgreen': 0x006400,\n  'darkgrey': 0xA9A9A9,\n  'darkkhaki': 0xBDB76B,\n  'darkmagenta': 0x8B008B,\n  'darkolivegreen': 0x556B2F,\n  'darkorange': 0xFF8C00,\n  'darkorchid': 0x9932CC,\n  'darkred': 0x8B0000,\n  'darksalmon': 0xE9967A,\n  'darkseagreen': 0x8FBC8F,\n  'darkslateblue': 0x483D8B,\n  'darkslategray': 0x2F4F4F,\n  'darkslategrey': 0x2F4F4F,\n  'darkturquoise': 0x00CED1,\n  'darkviolet': 0x9400D3,\n  'deeppink': 0xFF1493,\n  'deepskyblue': 0x00BFFF,\n  'dimgray': 0x696969,\n  'dimgrey': 0x696969,\n  'dodgerblue': 0x1E90FF,\n  'firebrick': 0xB22222,\n  'floralwhite': 0xFFFAF0,\n  'forestgreen': 0x228B22,\n  'fuchsia': 0xFF00FF,\n  'gainsboro': 0xDCDCDC,\n  'ghostwhite': 0xF8F8FF,\n  'gold': 0xFFD700,\n  'goldenrod': 0xDAA520,\n  'gray': 0x808080,\n  'green': 0x008000,\n  'greenyellow': 0xADFF2F,\n  'grey': 0x808080,\n  'honeydew': 0xF0FFF0,\n  'hotpink': 0xFF69B4,\n  'indianred': 0xCD5C5C,\n  'indigo': 0x4B0082,\n  'ivory': 0xFFFFF0,\n  'khaki': 0xF0E68C,\n  'lavender': 0xE6E6FA,\n  'lavenderblush': 0xFFF0F5,\n  'lawngreen': 0x7CFC00,\n  'lemonchiffon': 0xFFFACD,\n  'lightblue': 0xADD8E6,\n  'lightcoral': 0xF08080,\n  'lightcyan': 0xE0FFFF,\n  'lightgoldenrodyellow': 0xFAFAD2,\n  'lightgray': 0xD3D3D3,\n  'lightgreen': 0x90EE90,\n  'lightgrey': 0xD3D3D3,\n  'lightpink': 0xFFB6C1,\n  'lightsalmon': 0xFFA07A,\n  'lightseagreen': 0x20B2AA,\n  'lightskyblue': 0x87CEFA,\n  'lightslategray': 0x778899,\n  'lightslategrey': 0x778899,\n  'lightsteelblue': 0xB0C4DE,\n  'lightyellow': 0xFFFFE0,\n  'lime': 0x00FF00,\n  'limegreen': 0x32CD32,\n  'linen': 0xFAF0E6,\n  'magenta': 0xFF00FF,\n  'maroon': 0x800000,\n  'mediumaquamarine': 0x66CDAA,\n  'mediumblue': 0x0000CD,\n  'mediumorchid': 0xBA55D3,\n  'mediumpurple': 0x9370DB,\n  'mediumseagreen': 0x3CB371,\n  'mediumslateblue': 0x7B68EE,\n  'mediumspringgreen': 0x00FA9A,\n  'mediumturquoise': 0x48D1CC,\n  'mediumvioletred': 0xC71585,\n  'midnightblue': 0x191970,\n  'mintcream': 0xF5FFFA,\n  'mistyrose': 0xFFE4E1,\n  'moccasin': 0xFFE4B5,\n  'navajowhite': 0xFFDEAD,\n  'navy': 0x000080,\n  'oldlace': 0xFDF5E6,\n  'olive': 0x808000,\n  'olivedrab': 0x6B8E23,\n  'orange': 0xFFA500,\n  'orangered': 0xFF4500,\n  'orchid': 0xDA70D6,\n  'palegoldenrod': 0xEEE8AA,\n  'palegreen': 0x98FB98,\n  'paleturquoise': 0xAFEEEE,\n  'palevioletred': 0xDB7093,\n  'papayawhip': 0xFFEFD5,\n  'peachpuff': 0xFFDAB9,\n  'peru': 0xCD853F,\n  'pink': 0xFFC0CB,\n  'plum': 0xDDA0DD,\n  'powderblue': 0xB0E0E6,\n  'purple': 0x800080,\n  'rebeccapurple': 0x663399,\n  'red': 0xFF0000,\n  'rosybrown': 0xBC8F8F,\n  'royalblue': 0x4169E1,\n  'saddlebrown': 0x8B4513,\n  'salmon': 0xFA8072,\n  'sandybrown': 0xF4A460,\n  'seagreen': 0x2E8B57,\n  'seashell': 0xFFF5EE,\n  'sienna': 0xA0522D,\n  'silver': 0xC0C0C0,\n  'skyblue': 0x87CEEB,\n  'slateblue': 0x6A5ACD,\n  'slategray': 0x708090,\n  'slategrey': 0x708090,\n  'snow': 0xFFFAFA,\n  'springgreen': 0x00FF7F,\n  'steelblue': 0x4682B4,\n  'tan': 0xD2B48C,\n  'teal': 0x008080,\n  'thistle': 0xD8BFD8,\n  'tomato': 0xFF6347,\n  'turquoise': 0x40E0D0,\n  'violet': 0xEE82EE,\n  'wheat': 0xF5DEB3,\n  'white': 0xFFFFFF,\n  'whitesmoke': 0xF5F5F5,\n  'yellow': 0xFFFF00,\n  'yellowgreen': 0x9ACD32\n};\nconst _hslA = {\n  h: 0,\n  s: 0,\n  l: 0\n};\nconst _hslB = {\n  h: 0,\n  s: 0,\n  l: 0\n};\nfunction hue2rgb(p, q, t) {\n  if (t < 0) t += 1;\n  if (t > 1) t -= 1;\n  if (t < 1 / 6) return p + (q - p) * 6 * t;\n  if (t < 1 / 2) return q;\n  if (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);\n  return p;\n}\n\n/**\n * A Color instance is represented by RGB components in the linear <i>working\n * color space</i>, which defaults to `LinearSRGBColorSpace`. Inputs\n * conventionally using `SRGBColorSpace` (such as hexadecimals and CSS\n * strings) are converted to the working color space automatically.\n *\n * ```js\n * // converted automatically from SRGBColorSpace to LinearSRGBColorSpace\n * const color = new THREE.Color().setHex( 0x112233 );\n * ```\n * Source color spaces may be specified explicitly, to ensure correct conversions.\n * ```js\n * // assumed already LinearSRGBColorSpace; no conversion\n * const color = new THREE.Color().setRGB( 0.5, 0.5, 0.5 );\n *\n * // converted explicitly from SRGBColorSpace to LinearSRGBColorSpace\n * const color = new THREE.Color().setRGB( 0.5, 0.5, 0.5, SRGBColorSpace );\n * ```\n * If THREE.ColorManagement is disabled, no conversions occur. For details,\n * see <i>Color management</i>. Iterating through a Color instance will yield\n * its components (r, g, b) in the corresponding order. A Color can be initialised\n * in any of the following ways:\n * ```js\n * //empty constructor - will default white\n * const color1 = new THREE.Color();\n *\n * //Hexadecimal color (recommended)\n * const color2 = new THREE.Color( 0xff0000 );\n *\n * //RGB string\n * const color3 = new THREE.Color(\"rgb(255, 0, 0)\");\n * const color4 = new THREE.Color(\"rgb(100%, 0%, 0%)\");\n *\n * //X11 color name - all 140 color names are supported.\n * //Note the lack of CamelCase in the name\n * const color5 = new THREE.Color( 'skyblue' );\n * //HSL string\n * const color6 = new THREE.Color(\"hsl(0, 100%, 50%)\");\n *\n * //Separate RGB values between 0 and 1\n * const color7 = new THREE.Color( 1, 0, 0 );\n * ```\n */\nclass Color {\n  /**\n   * Constructs a new color.\n   *\n   * Note that standard method of specifying color in three.js is with a hexadecimal triplet,\n   * and that method is used throughout the rest of the documentation.\n   *\n   * @param {(number|string|Color)} [r] - The red component of the color. If `g` and `b` are\n   * not provided, it can be hexadecimal triplet, a CSS-style string or another `Color` instance.\n   * @param {number} [g] - The green component.\n   * @param {number} [b] - The blue component.\n   */\n  constructor(r, g, b) {\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isColor = true;\n\n    /**\n     * The red component.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.r = 1;\n\n    /**\n     * The green component.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.g = 1;\n\n    /**\n     * The blue component.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.b = 1;\n    return this.set(r, g, b);\n  }\n\n  /**\n   * Sets the colors's components from the given values.\n   *\n   * @param {(number|string|Color)} [r] - The red component of the color. If `g` and `b` are\n   * not provided, it can be hexadecimal triplet, a CSS-style string or another `Color` instance.\n   * @param {number} [g] - The green component.\n   * @param {number} [b] - The blue component.\n   * @return {Color} A reference to this color.\n   */\n  set(r, g, b) {\n    if (g === undefined && b === undefined) {\n      // r is THREE.Color, hex or string\n\n      const value = r;\n      if (value && value.isColor) {\n        this.copy(value);\n      } else if (typeof value === 'number') {\n        this.setHex(value);\n      } else if (typeof value === 'string') {\n        this.setStyle(value);\n      }\n    } else {\n      this.setRGB(r, g, b);\n    }\n    return this;\n  }\n\n  /**\n   * Sets the colors's components to the given scalar value.\n   *\n   * @param {number} scalar - The scalar value.\n   * @return {Color} A reference to this color.\n   */\n  setScalar(scalar) {\n    this.r = scalar;\n    this.g = scalar;\n    this.b = scalar;\n    return this;\n  }\n\n  /**\n   * Sets this color from a hexadecimal value.\n   *\n   * @param {number} hex - The hexadecimal value.\n   * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n   * @return {Color} A reference to this color.\n   */\n  setHex(hex) {\n    let colorSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SRGBColorSpace;\n    hex = Math.floor(hex);\n    this.r = (hex >> 16 & 255) / 255;\n    this.g = (hex >> 8 & 255) / 255;\n    this.b = (hex & 255) / 255;\n    ColorManagement.toWorkingColorSpace(this, colorSpace);\n    return this;\n  }\n\n  /**\n   * Sets this color from RGB values.\n   *\n   * @param {number} r - Red channel value between `0.0` and `1.0`.\n   * @param {number} g - Green channel value between `0.0` and `1.0`.\n   * @param {number} b - Blue channel value between `0.0` and `1.0`.\n   * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.\n   * @return {Color} A reference to this color.\n   */\n  setRGB(r, g, b) {\n    let colorSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ColorManagement.workingColorSpace;\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    ColorManagement.toWorkingColorSpace(this, colorSpace);\n    return this;\n  }\n\n  /**\n   * Sets this color from RGB values.\n   *\n   * @param {number} h - Hue value between `0.0` and `1.0`.\n   * @param {number} s - Saturation value between `0.0` and `1.0`.\n   * @param {number} l - Lightness value between `0.0` and `1.0`.\n   * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.\n   * @return {Color} A reference to this color.\n   */\n  setHSL(h, s, l) {\n    let colorSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ColorManagement.workingColorSpace;\n    // h,s,l ranges are in 0.0 - 1.0\n    h = euclideanModulo(h, 1);\n    s = clamp(s, 0, 1);\n    l = clamp(l, 0, 1);\n    if (s === 0) {\n      this.r = this.g = this.b = l;\n    } else {\n      const p = l <= 0.5 ? l * (1 + s) : l + s - l * s;\n      const q = 2 * l - p;\n      this.r = hue2rgb(q, p, h + 1 / 3);\n      this.g = hue2rgb(q, p, h);\n      this.b = hue2rgb(q, p, h - 1 / 3);\n    }\n    ColorManagement.toWorkingColorSpace(this, colorSpace);\n    return this;\n  }\n\n  /**\n   * Sets this color from a CSS-style string. For example, `rgb(250, 0,0)`,\n   * `rgb(100%, 0%, 0%)`, `hsl(0, 100%, 50%)`, `#ff0000`, `#f00`, or `red` ( or\n   * any [X11 color name]{@link https://en.wikipedia.org/wiki/X11_color_names#Color_name_chart} -\n   * all 140 color names are supported).\n   *\n   * @param {string} style - Color as a CSS-style string.\n   * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n   * @return {Color} A reference to this color.\n   */\n  setStyle(style) {\n    let colorSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SRGBColorSpace;\n    function handleAlpha(string) {\n      if (string === undefined) return;\n      if (parseFloat(string) < 1) {\n        console.warn('THREE.Color: Alpha component of ' + style + ' will be ignored.');\n      }\n    }\n    let m;\n    if (m = /^(\\w+)\\(([^\\)]*)\\)/.exec(style)) {\n      // rgb / hsl\n\n      let color;\n      const name = m[1];\n      const components = m[2];\n      switch (name) {\n        case 'rgb':\n        case 'rgba':\n          if (color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n            // rgb(255,0,0) rgba(255,0,0,0.5)\n\n            handleAlpha(color[4]);\n            return this.setRGB(Math.min(255, parseInt(color[1], 10)) / 255, Math.min(255, parseInt(color[2], 10)) / 255, Math.min(255, parseInt(color[3], 10)) / 255, colorSpace);\n          }\n          if (color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n            // rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\n            handleAlpha(color[4]);\n            return this.setRGB(Math.min(100, parseInt(color[1], 10)) / 100, Math.min(100, parseInt(color[2], 10)) / 100, Math.min(100, parseInt(color[3], 10)) / 100, colorSpace);\n          }\n          break;\n        case 'hsl':\n        case 'hsla':\n          if (color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n            // hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\n            handleAlpha(color[4]);\n            return this.setHSL(parseFloat(color[1]) / 360, parseFloat(color[2]) / 100, parseFloat(color[3]) / 100, colorSpace);\n          }\n          break;\n        default:\n          console.warn('THREE.Color: Unknown color model ' + style);\n      }\n    } else if (m = /^\\#([A-Fa-f\\d]+)$/.exec(style)) {\n      // hex color\n\n      const hex = m[1];\n      const size = hex.length;\n      if (size === 3) {\n        // #ff0\n        return this.setRGB(parseInt(hex.charAt(0), 16) / 15, parseInt(hex.charAt(1), 16) / 15, parseInt(hex.charAt(2), 16) / 15, colorSpace);\n      } else if (size === 6) {\n        // #ff0000\n        return this.setHex(parseInt(hex, 16), colorSpace);\n      } else {\n        console.warn('THREE.Color: Invalid hex color ' + style);\n      }\n    } else if (style && style.length > 0) {\n      return this.setColorName(style, colorSpace);\n    }\n    return this;\n  }\n\n  /**\n   * Sets this color from a color name. Faster than {@link Color#setStyle} if\n   * you don't need the other CSS-style formats.\n   *\n   * For convenience, the list of names is exposed in `Color.NAMES` as a hash.\n   * ```js\n   * Color.NAMES.aliceblue // returns 0xF0F8FF\n   * ```\n   *\n   * @param {string} style - The color name.\n   * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n   * @return {Color} A reference to this color.\n   */\n  setColorName(style) {\n    let colorSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SRGBColorSpace;\n    // color keywords\n    const hex = _colorKeywords[style.toLowerCase()];\n    if (hex !== undefined) {\n      // red\n      this.setHex(hex, colorSpace);\n    } else {\n      // unknown color\n      console.warn('THREE.Color: Unknown color ' + style);\n    }\n    return this;\n  }\n\n  /**\n   * Returns a new color with copied values from this instance.\n   *\n   * @return {Color} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor(this.r, this.g, this.b);\n  }\n\n  /**\n   * Copies the values of the given color to this instance.\n   *\n   * @param {Color} color - The color to copy.\n   * @return {Color} A reference to this color.\n   */\n  copy(color) {\n    this.r = color.r;\n    this.g = color.g;\n    this.b = color.b;\n    return this;\n  }\n\n  /**\n   * Copies the given color into this color, and then converts this color from\n   * `SRGBColorSpace` to `LinearSRGBColorSpace`.\n   *\n   * @param {Color} color - The color to copy/convert.\n   * @return {Color} A reference to this color.\n   */\n  copySRGBToLinear(color) {\n    this.r = SRGBToLinear(color.r);\n    this.g = SRGBToLinear(color.g);\n    this.b = SRGBToLinear(color.b);\n    return this;\n  }\n\n  /**\n   * Copies the given color into this color, and then converts this color from\n   * `LinearSRGBColorSpace` to `SRGBColorSpace`.\n   *\n   * @param {Color} color - The color to copy/convert.\n   * @return {Color} A reference to this color.\n   */\n  copyLinearToSRGB(color) {\n    this.r = LinearToSRGB(color.r);\n    this.g = LinearToSRGB(color.g);\n    this.b = LinearToSRGB(color.b);\n    return this;\n  }\n\n  /**\n   * Converts this color from `SRGBColorSpace` to `LinearSRGBColorSpace`.\n   *\n   * @return {Color} A reference to this color.\n   */\n  convertSRGBToLinear() {\n    this.copySRGBToLinear(this);\n    return this;\n  }\n\n  /**\n   * Converts this color from `LinearSRGBColorSpace` to `SRGBColorSpace`.\n   *\n   * @return {Color} A reference to this color.\n   */\n  convertLinearToSRGB() {\n    this.copyLinearToSRGB(this);\n    return this;\n  }\n\n  /**\n   * Returns the hexadecimal value of this color.\n   *\n   * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n   * @return {number} The hexadecimal value.\n   */\n  getHex() {\n    let colorSpace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SRGBColorSpace;\n    ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);\n    return Math.round(clamp(_color.r * 255, 0, 255)) * 65536 + Math.round(clamp(_color.g * 255, 0, 255)) * 256 + Math.round(clamp(_color.b * 255, 0, 255));\n  }\n\n  /**\n   * Returns the hexadecimal value of this color as a string (for example, 'FFFFFF').\n   *\n   * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n   * @return {string} The hexadecimal value as a string.\n   */\n  getHexString() {\n    let colorSpace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SRGBColorSpace;\n    return ('000000' + this.getHex(colorSpace).toString(16)).slice(-6);\n  }\n\n  /**\n   * Converts the colors RGB values into the HSL format and stores them into the\n   * given target object.\n   *\n   * @param {{h:number,s:number,l:number}} target - The target object that is used to store the method's result.\n   * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.\n   * @return {{h:number,s:number,l:number}} The HSL representation of this color.\n   */\n  getHSL(target) {\n    let colorSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ColorManagement.workingColorSpace;\n    // h,s,l ranges are in 0.0 - 1.0\n\n    ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);\n    const r = _color.r,\n      g = _color.g,\n      b = _color.b;\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    let hue, saturation;\n    const lightness = (min + max) / 2.0;\n    if (min === max) {\n      hue = 0;\n      saturation = 0;\n    } else {\n      const delta = max - min;\n      saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);\n      switch (max) {\n        case r:\n          hue = (g - b) / delta + (g < b ? 6 : 0);\n          break;\n        case g:\n          hue = (b - r) / delta + 2;\n          break;\n        case b:\n          hue = (r - g) / delta + 4;\n          break;\n      }\n      hue /= 6;\n    }\n    target.h = hue;\n    target.s = saturation;\n    target.l = lightness;\n    return target;\n  }\n\n  /**\n   * Returns the RGB values of this color and stores them into the given target object.\n   *\n   * @param {Color} target - The target color that is used to store the method's result.\n   * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.\n   * @return {Color} The RGB representation of this color.\n   */\n  getRGB(target) {\n    let colorSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ColorManagement.workingColorSpace;\n    ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);\n    target.r = _color.r;\n    target.g = _color.g;\n    target.b = _color.b;\n    return target;\n  }\n\n  /**\n   * Returns the value of this color as a CSS style string. Example: `rgb(255,0,0)`.\n   *\n   * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n   * @return {string} The CSS representation of this color.\n   */\n  getStyle() {\n    let colorSpace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SRGBColorSpace;\n    ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);\n    const r = _color.r,\n      g = _color.g,\n      b = _color.b;\n    if (colorSpace !== SRGBColorSpace) {\n      // Requires CSS Color Module Level 4 (https://www.w3.org/TR/css-color-4/).\n      return `color(${colorSpace} ${r.toFixed(3)} ${g.toFixed(3)} ${b.toFixed(3)})`;\n    }\n    return `rgb(${Math.round(r * 255)},${Math.round(g * 255)},${Math.round(b * 255)})`;\n  }\n\n  /**\n   * Adds the given HSL values to this color's values.\n   * Internally, this converts the color's RGB values to HSL, adds HSL\n   * and then converts the color back to RGB.\n   *\n   * @param {number} h - Hue value between `0.0` and `1.0`.\n   * @param {number} s - Saturation value between `0.0` and `1.0`.\n   * @param {number} l - Lightness value between `0.0` and `1.0`.\n   * @return {Color} A reference to this color.\n   */\n  offsetHSL(h, s, l) {\n    this.getHSL(_hslA);\n    return this.setHSL(_hslA.h + h, _hslA.s + s, _hslA.l + l);\n  }\n\n  /**\n   * Adds the RGB values of the given color to the RGB values of this color.\n   *\n   * @param {Color} color - The color to add.\n   * @return {Color} A reference to this color.\n   */\n  add(color) {\n    this.r += color.r;\n    this.g += color.g;\n    this.b += color.b;\n    return this;\n  }\n\n  /**\n   * Adds the RGB values of the given colors and stores the result in this instance.\n   *\n   * @param {Color} color1 - The first color.\n   * @param {Color} color2 - The second color.\n   * @return {Color} A reference to this color.\n   */\n  addColors(color1, color2) {\n    this.r = color1.r + color2.r;\n    this.g = color1.g + color2.g;\n    this.b = color1.b + color2.b;\n    return this;\n  }\n\n  /**\n   * Adds the given scalar value to the RGB values of this color.\n   *\n   * @param {number} s - The scalar to add.\n   * @return {Color} A reference to this color.\n   */\n  addScalar(s) {\n    this.r += s;\n    this.g += s;\n    this.b += s;\n    return this;\n  }\n\n  /**\n   * Subtracts the RGB values of the given color from the RGB values of this color.\n   *\n   * @param {Color} color - The color to subtract.\n   * @return {Color} A reference to this color.\n   */\n  sub(color) {\n    this.r = Math.max(0, this.r - color.r);\n    this.g = Math.max(0, this.g - color.g);\n    this.b = Math.max(0, this.b - color.b);\n    return this;\n  }\n\n  /**\n   * Multiplies the RGB values of the given color with the RGB values of this color.\n   *\n   * @param {Color} color - The color to multiply.\n   * @return {Color} A reference to this color.\n   */\n  multiply(color) {\n    this.r *= color.r;\n    this.g *= color.g;\n    this.b *= color.b;\n    return this;\n  }\n\n  /**\n   * Multiplies the given scalar value with the RGB values of this color.\n   *\n   * @param {number} s - The scalar to multiply.\n   * @return {Color} A reference to this color.\n   */\n  multiplyScalar(s) {\n    this.r *= s;\n    this.g *= s;\n    this.b *= s;\n    return this;\n  }\n\n  /**\n   * Linearly interpolates this color's RGB values toward the RGB values of the\n   * given color. The alpha argument can be thought of as the ratio between\n   * the two colors, where `0.0` is this color and `1.0` is the first argument.\n   *\n   * @param {Color} color - The color to converge on.\n   * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.\n   * @return {Color} A reference to this color.\n   */\n  lerp(color, alpha) {\n    this.r += (color.r - this.r) * alpha;\n    this.g += (color.g - this.g) * alpha;\n    this.b += (color.b - this.b) * alpha;\n    return this;\n  }\n\n  /**\n   * Linearly interpolates between the given colors and stores the result in this instance.\n   * The alpha argument can be thought of as the ratio between the two colors, where `0.0`\n   * is the first and `1.0` is the second color.\n   *\n   * @param {Color} color1 - The first color.\n   * @param {Color} color2 - The second color.\n   * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.\n   * @return {Color} A reference to this color.\n   */\n  lerpColors(color1, color2, alpha) {\n    this.r = color1.r + (color2.r - color1.r) * alpha;\n    this.g = color1.g + (color2.g - color1.g) * alpha;\n    this.b = color1.b + (color2.b - color1.b) * alpha;\n    return this;\n  }\n\n  /**\n   * Linearly interpolates this color's HSL values toward the HSL values of the\n   * given color. It differs from {@link Color#lerp} by not interpolating straight\n   * from one color to the other, but instead going through all the hues in between\n   * those two colors. The alpha argument can be thought of as the ratio between\n   * the two colors, where 0.0 is this color and 1.0 is the first argument.\n   *\n   * @param {Color} color - The color to converge on.\n   * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.\n   * @return {Color} A reference to this color.\n   */\n  lerpHSL(color, alpha) {\n    this.getHSL(_hslA);\n    color.getHSL(_hslB);\n    const h = lerp(_hslA.h, _hslB.h, alpha);\n    const s = lerp(_hslA.s, _hslB.s, alpha);\n    const l = lerp(_hslA.l, _hslB.l, alpha);\n    this.setHSL(h, s, l);\n    return this;\n  }\n\n  /**\n   * Sets the color's RGB components from the given 3D vector.\n   *\n   * @param {Vector3} v - The vector to set.\n   * @return {Color} A reference to this color.\n   */\n  setFromVector3(v) {\n    this.r = v.x;\n    this.g = v.y;\n    this.b = v.z;\n    return this;\n  }\n\n  /**\n   * Transforms this color with the given 3x3 matrix.\n   *\n   * @param {Matrix3} m - The matrix.\n   * @return {Color} A reference to this color.\n   */\n  applyMatrix3(m) {\n    const r = this.r,\n      g = this.g,\n      b = this.b;\n    const e = m.elements;\n    this.r = e[0] * r + e[3] * g + e[6] * b;\n    this.g = e[1] * r + e[4] * g + e[7] * b;\n    this.b = e[2] * r + e[5] * g + e[8] * b;\n    return this;\n  }\n\n  /**\n   * Returns `true` if this color is equal with the given one.\n   *\n   * @param {Color} c - The color to test for equality.\n   * @return {boolean} Whether this bounding color is equal with the given one.\n   */\n  equals(c) {\n    return c.r === this.r && c.g === this.g && c.b === this.b;\n  }\n\n  /**\n   * Sets this color's RGB components from the given array.\n   *\n   * @param {Array<number>} array - An array holding the RGB values.\n   * @param {number} [offset=0] - The offset into the array.\n   * @return {Color} A reference to this color.\n   */\n  fromArray(array) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.r = array[offset];\n    this.g = array[offset + 1];\n    this.b = array[offset + 2];\n    return this;\n  }\n\n  /**\n   * Writes the RGB components of this color to the given array. If no array is provided,\n   * the method returns a new instance.\n   *\n   * @param {Array<number>} [array=[]] - The target array holding the color components.\n   * @param {number} [offset=0] - Index of the first element in the array.\n   * @return {Array<number>} The color components.\n   */\n  toArray() {\n    let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    array[offset] = this.r;\n    array[offset + 1] = this.g;\n    array[offset + 2] = this.b;\n    return array;\n  }\n\n  /**\n   * Sets the components of this color from the given buffer attribute.\n   *\n   * @param {BufferAttribute} attribute - The buffer attribute holding color data.\n   * @param {number} index - The index into the attribute.\n   * @return {Color} A reference to this color.\n   */\n  fromBufferAttribute(attribute, index) {\n    this.r = attribute.getX(index);\n    this.g = attribute.getY(index);\n    this.b = attribute.getZ(index);\n    return this;\n  }\n\n  /**\n   * This methods defines the serialization result of this class. Returns the color\n   * as a hexadecimal value.\n   *\n   * @return {number} The hexadecimal value.\n   */\n  toJSON() {\n    return this.getHex();\n  }\n  *[Symbol.iterator]() {\n    yield this.r;\n    yield this.g;\n    yield this.b;\n  }\n}\nconst _color = /*@__PURE__*/new Color();\n\n/**\n * A dictionary with X11 color names.\n *\n * Note that multiple words such as Dark Orange become the string 'darkorange'.\n *\n * @static\n * @type {Object}\n */\nColor.NAMES = _colorKeywords;\nlet _materialId = 0;\n\n/**\n * Abstract base class for materials.\n *\n * Materials define the appearance of renderable 3D objects.\n *\n * @abstract\n * @augments EventDispatcher\n */\nclass Material extends EventDispatcher {\n  /**\n   * Constructs a new material.\n   */\n  constructor() {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isMaterial = true;\n\n    /**\n     * The ID of the material.\n     *\n     * @name Material#id\n     * @type {number}\n     * @readonly\n     */\n    Object.defineProperty(this, 'id', {\n      value: _materialId++\n    });\n\n    /**\n     * The UUID of the material.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.uuid = generateUUID();\n\n    /**\n     * The name of the material.\n     *\n     * @type {string}\n     */\n    this.name = '';\n\n    /**\n     * The type property is used for detecting the object type\n     * in context of serialization/deserialization.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.type = 'Material';\n\n    /**\n     * Defines the blending type of the material.\n     *\n     * It must be set to `CustomBlending` if custom blending properties like\n     * {@link Material#blendSrc}, {@link Material#blendDst} or {@link Material#blendEquation}\n     * should have any effect.\n     *\n     * @type {(NoBlending|NormalBlending|AdditiveBlending|SubtractiveBlending|MultiplyBlending|CustomBlending)}\n     * @default NormalBlending\n     */\n    this.blending = NormalBlending;\n\n    /**\n     * Defines which side of faces will be rendered - front, back or both.\n     *\n     * @type {(FrontSide|BackSide|DoubleSide)}\n     * @default FrontSide\n     */\n    this.side = FrontSide;\n\n    /**\n     * If set to `true`, vertex colors should be used.\n     *\n     * The engine supports RGB and RGBA vertex colors depending on whether a three (RGB) or\n     * four (RGBA) component color buffer attribute is used.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.vertexColors = false;\n\n    /**\n     * Defines how transparent the material is.\n     * A value of `0.0` indicates fully transparent, `1.0` is fully opaque.\n     *\n     * If the {@link Material#transparent} is not set to `true`,\n     * the material will remain fully opaque and this value will only affect its color.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.opacity = 1;\n\n    /**\n     * Defines whether this material is transparent. This has an effect on\n     * rendering as transparent objects need special treatment and are rendered\n     * after non-transparent objects.\n     *\n     * When set to true, the extent to which the material is transparent is\n     * controlled by {@link Material#opacity}.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.transparent = false;\n\n    /**\n     * Enables alpha hashed transparency, an alternative to {@link Material#transparent} or\n     * {@link Material#alphaTest}. The material will not be rendered if opacity is lower than\n     * a random threshold. Randomization introduces some grain or noise, but approximates alpha\n     * blending without the associated problems of sorting. Using TAA can reduce the resulting noise.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.alphaHash = false;\n\n    /**\n     * Defines the blending source factor.\n     *\n     * @type {(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}\n     * @default SrcAlphaFactor\n     */\n    this.blendSrc = SrcAlphaFactor;\n\n    /**\n     * Defines the blending destination factor.\n     *\n     * @type {(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}\n     * @default OneMinusSrcAlphaFactor\n     */\n    this.blendDst = OneMinusSrcAlphaFactor;\n\n    /**\n     * Defines the blending equation.\n     *\n     * @type {(AddEquation|SubtractEquation|ReverseSubtractEquation|MinEquation|MaxEquation)}\n     * @default AddEquation\n     */\n    this.blendEquation = AddEquation;\n\n    /**\n     * Defines the blending source alpha factor.\n     *\n     * @type {?(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}\n     * @default null\n     */\n    this.blendSrcAlpha = null;\n\n    /**\n     * Defines the blending destination alpha factor.\n     *\n     * @type {?(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}\n     * @default null\n     */\n    this.blendDstAlpha = null;\n\n    /**\n     * Defines the blending equation of the alpha channel.\n     *\n     * @type {?(AddEquation|SubtractEquation|ReverseSubtractEquation|MinEquation|MaxEquation)}\n     * @default null\n     */\n    this.blendEquationAlpha = null;\n\n    /**\n     * Represents the RGB values of the constant blend color.\n     *\n     * This property has only an effect when using custom blending with `ConstantColor` or `OneMinusConstantColor`.\n     *\n     * @type {Color}\n     * @default (0,0,0)\n     */\n    this.blendColor = new Color(0, 0, 0);\n\n    /**\n     * Represents the alpha value of the constant blend color.\n     *\n     * This property has only an effect when using custom blending with `ConstantAlpha` or `OneMinusConstantAlpha`.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.blendAlpha = 0;\n\n    /**\n     * Defines the depth function.\n     *\n     * @type {(NeverDepth|AlwaysDepth|LessDepth|LessEqualDepth|EqualDepth|GreaterEqualDepth|GreaterDepth|NotEqualDepth)}\n     * @default LessEqualDepth\n     */\n    this.depthFunc = LessEqualDepth;\n\n    /**\n     * Whether to have depth test enabled when rendering this material.\n     * When the depth test is disabled, the depth write will also be implicitly disabled.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.depthTest = true;\n\n    /**\n     * Whether rendering this material has any effect on the depth buffer.\n     *\n     * When drawing 2D overlays it can be useful to disable the depth writing in\n     * order to layer several things together without creating z-index artifacts.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.depthWrite = true;\n\n    /**\n     * The bit mask to use when writing to the stencil buffer.\n     *\n     * @type {number}\n     * @default 0xff\n     */\n    this.stencilWriteMask = 0xff;\n\n    /**\n     * The stencil comparison function to use.\n     *\n     * @type {NeverStencilFunc|LessStencilFunc|EqualStencilFunc|LessEqualStencilFunc|GreaterStencilFunc|NotEqualStencilFunc|GreaterEqualStencilFunc|AlwaysStencilFunc}\n     * @default AlwaysStencilFunc\n     */\n    this.stencilFunc = AlwaysStencilFunc;\n\n    /**\n     * The value to use when performing stencil comparisons or stencil operations.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.stencilRef = 0;\n\n    /**\n     * The bit mask to use when comparing against the stencil buffer.\n     *\n     * @type {number}\n     * @default 0xff\n     */\n    this.stencilFuncMask = 0xff;\n\n    /**\n     * Which stencil operation to perform when the comparison function returns `false`.\n     *\n     * @type {ZeroStencilOp|KeepStencilOp|ReplaceStencilOp|IncrementStencilOp|DecrementStencilOp|IncrementWrapStencilOp|DecrementWrapStencilOp|InvertStencilOp}\n     * @default KeepStencilOp\n     */\n    this.stencilFail = KeepStencilOp;\n\n    /**\n     * Which stencil operation to perform when the comparison function returns\n     * `true` but the depth test fails.\n     *\n     * @type {ZeroStencilOp|KeepStencilOp|ReplaceStencilOp|IncrementStencilOp|DecrementStencilOp|IncrementWrapStencilOp|DecrementWrapStencilOp|InvertStencilOp}\n     * @default KeepStencilOp\n     */\n    this.stencilZFail = KeepStencilOp;\n\n    /**\n     * Which stencil operation to perform when the comparison function returns\n     * `true` and the depth test passes.\n     *\n     * @type {ZeroStencilOp|KeepStencilOp|ReplaceStencilOp|IncrementStencilOp|DecrementStencilOp|IncrementWrapStencilOp|DecrementWrapStencilOp|InvertStencilOp}\n     * @default KeepStencilOp\n     */\n    this.stencilZPass = KeepStencilOp;\n\n    /**\n     * Whether stencil operations are performed against the stencil buffer. In\n     * order to perform writes or comparisons against the stencil buffer this\n     * value must be `true`.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.stencilWrite = false;\n\n    /**\n     * User-defined clipping planes specified as THREE.Plane objects in world\n     * space. These planes apply to the objects this material is attached to.\n     * Points in space whose signed distance to the plane is negative are clipped\n     * (not rendered). This requires {@link WebGLRenderer#localClippingEnabled} to\n     * be `true`.\n     *\n     * @type {?Array<Plane>}\n     * @default null\n     */\n    this.clippingPlanes = null;\n\n    /**\n     * Changes the behavior of clipping planes so that only their intersection is\n     * clipped, rather than their union.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.clipIntersection = false;\n\n    /**\n     * Defines whether to clip shadows according to the clipping planes specified\n     * on this material.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.clipShadows = false;\n\n    /**\n     * Defines which side of faces cast shadows. If `null`, the side casting shadows\n     * is determined as follows:\n     *\n     * - When {@link Material#side} is set to `FrontSide`, the back side cast shadows.\n     * - When {@link Material#side} is set to `BackSide`, the front side cast shadows.\n     * - When {@link Material#side} is set to `DoubleSide`, both sides cast shadows.\n     *\n     * @type {?(FrontSide|BackSide|DoubleSide)}\n     * @default null\n     */\n    this.shadowSide = null;\n\n    /**\n     * Whether to render the material's color.\n     *\n     * This can be used in conjunction with {@link Object3D#renderOder} to create invisible\n     * objects that occlude other objects.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.colorWrite = true;\n\n    /**\n     * Override the renderer's default precision for this material.\n     *\n     * @type {?('highp'|'mediump'|'lowp')}\n     * @default null\n     */\n    this.precision = null;\n\n    /**\n     * Whether to use polygon offset or not. When enabled, each fragment's depth value will\n     * be offset after it is interpolated from the depth values of the appropriate vertices.\n     * The offset is added before the depth test is performed and before the value is written\n     * into the depth buffer.\n     *\n     * Can be useful for rendering hidden-line images, for applying decals to surfaces, and for\n     * rendering solids with highlighted edges.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.polygonOffset = false;\n\n    /**\n     * Specifies a scale factor that is used to create a variable depth offset for each polygon.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.polygonOffsetFactor = 0;\n\n    /**\n     * Is multiplied by an implementation-specific value to create a constant depth offset.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.polygonOffsetUnits = 0;\n\n    /**\n     * Whether to apply dithering to the color to remove the appearance of banding.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.dithering = false;\n\n    /**\n     * Whether alpha to coverage should be enabled or not. Can only be used with MSAA-enabled contexts\n     * (meaning when the renderer was created with *antialias* parameter set to `true`). Enabling this\n     * will smooth aliasing on clip plane edges and alphaTest-clipped edges.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.alphaToCoverage = false;\n\n    /**\n     * Whether to premultiply the alpha (transparency) value.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.premultipliedAlpha = false;\n\n    /**\n     * Whether double-sided, transparent objects should be rendered with a single pass or not.\n     *\n     * The engine renders double-sided, transparent objects with two draw calls (back faces first,\n     * then front faces) to mitigate transparency artifacts. There are scenarios however where this\n     * approach produces no quality gains but still doubles draw calls e.g. when rendering flat\n     * vegetation like grass sprites. In these cases, set the `forceSinglePass` flag to `true` to\n     * disable the two pass rendering to avoid performance issues.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.forceSinglePass = false;\n\n    /**\n     * Whether it's possible to override the material with {@link Scene#overrideMaterial} or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.allowOverride = true;\n\n    /**\n     * Defines whether 3D objects using this material are visible.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.visible = true;\n\n    /**\n     * Defines whether this material is tone mapped according to the renderer's tone mapping setting.\n     *\n     * It is ignored when rendering to a render target or using post processing or when using\n     * `WebGPURenderer`. In all these cases, all materials are honored by tone mapping.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.toneMapped = true;\n\n    /**\n     * An object that can be used to store custom data about the Material. It\n     * should not hold references to functions as these will not be cloned.\n     *\n     * @type {Object}\n     */\n    this.userData = {};\n\n    /**\n     * This starts at `0` and counts how many times {@link Material#needsUpdate} is set to `true`.\n     *\n     * @type {number}\n     * @readonly\n     * @default 0\n     */\n    this.version = 0;\n    this._alphaTest = 0;\n  }\n\n  /**\n   * Sets the alpha value to be used when running an alpha test. The material\n   * will not be rendered if the opacity is lower than this value.\n   *\n   * @type {number}\n   * @readonly\n   * @default 0\n   */\n  get alphaTest() {\n    return this._alphaTest;\n  }\n  set alphaTest(value) {\n    if (this._alphaTest > 0 !== value > 0) {\n      this.version++;\n    }\n    this._alphaTest = value;\n  }\n\n  /**\n   * An optional callback that is executed immediately before the material is used to render a 3D object.\n   *\n   * This method can only be used when rendering with {@link WebGLRenderer}.\n   *\n   * @param {WebGLRenderer} renderer - The renderer.\n   * @param {Scene} scene - The scene.\n   * @param {Camera} camera - The camera that is used to render the scene.\n   * @param {BufferGeometry} geometry - The 3D object's geometry.\n   * @param {Object3D} object - The 3D object.\n   * @param {Object} group - The geometry group data.\n   */\n  onBeforeRender(/* renderer, scene, camera, geometry, object, group */) {}\n\n  /**\n   * An optional callback that is executed immediately before the shader\n   * program is compiled. This function is called with the shader source code\n   * as a parameter. Useful for the modification of built-in materials.\n   *\n   * This method can only be used when rendering with {@link WebGLRenderer}. The\n   * recommended approach when customizing materials is to use `WebGPURenderer` with the new\n   * Node Material system and [TSL]{@link https://github.com/mrdoob/three.js/wiki/Three.js-Shading-Language}.\n   *\n   * @param {{vertexShader:string,fragmentShader:string,uniforms:Object}} shaderobject - The object holds the uniforms and the vertex and fragment shader source.\n   * @param {WebGLRenderer} renderer - A reference to the renderer.\n   */\n  onBeforeCompile(/* shaderobject, renderer */) {}\n\n  /**\n   * In case {@link Material#onBeforeCompile} is used, this callback can be used to identify\n   * values of settings used in `onBeforeCompile()`, so three.js can reuse a cached\n   * shader or recompile the shader for this material as needed.\n   *\n   * This method can only be used when rendering with {@link WebGLRenderer}.\n   *\n   * @return {string} The custom program cache key.\n   */\n  customProgramCacheKey() {\n    return this.onBeforeCompile.toString();\n  }\n\n  /**\n   * This method can be used to set default values from parameter objects.\n   * It is a generic implementation so it can be used with different types\n   * of materials.\n   *\n   * @param {Object} [values] - The material values to set.\n   */\n  setValues(values) {\n    if (values === undefined) return;\n    for (const key in values) {\n      const newValue = values[key];\n      if (newValue === undefined) {\n        console.warn(`THREE.Material: parameter '${key}' has value of undefined.`);\n        continue;\n      }\n      const currentValue = this[key];\n      if (currentValue === undefined) {\n        console.warn(`THREE.Material: '${key}' is not a property of THREE.${this.type}.`);\n        continue;\n      }\n      if (currentValue && currentValue.isColor) {\n        currentValue.set(newValue);\n      } else if (currentValue && currentValue.isVector3 && newValue && newValue.isVector3) {\n        currentValue.copy(newValue);\n      } else {\n        this[key] = newValue;\n      }\n    }\n  }\n\n  /**\n   * Serializes the material into JSON.\n   *\n   * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n   * @return {Object} A JSON object representing the serialized material.\n   * @see {@link ObjectLoader#parse}\n   */\n  toJSON(meta) {\n    const isRootObject = meta === undefined || typeof meta === 'string';\n    if (isRootObject) {\n      meta = {\n        textures: {},\n        images: {}\n      };\n    }\n    const data = {\n      metadata: {\n        version: 4.6,\n        type: 'Material',\n        generator: 'Material.toJSON'\n      }\n    };\n\n    // standard Material serialization\n    data.uuid = this.uuid;\n    data.type = this.type;\n    if (this.name !== '') data.name = this.name;\n    if (this.color && this.color.isColor) data.color = this.color.getHex();\n    if (this.roughness !== undefined) data.roughness = this.roughness;\n    if (this.metalness !== undefined) data.metalness = this.metalness;\n    if (this.sheen !== undefined) data.sheen = this.sheen;\n    if (this.sheenColor && this.sheenColor.isColor) data.sheenColor = this.sheenColor.getHex();\n    if (this.sheenRoughness !== undefined) data.sheenRoughness = this.sheenRoughness;\n    if (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();\n    if (this.emissiveIntensity !== undefined && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;\n    if (this.specular && this.specular.isColor) data.specular = this.specular.getHex();\n    if (this.specularIntensity !== undefined) data.specularIntensity = this.specularIntensity;\n    if (this.specularColor && this.specularColor.isColor) data.specularColor = this.specularColor.getHex();\n    if (this.shininess !== undefined) data.shininess = this.shininess;\n    if (this.clearcoat !== undefined) data.clearcoat = this.clearcoat;\n    if (this.clearcoatRoughness !== undefined) data.clearcoatRoughness = this.clearcoatRoughness;\n    if (this.clearcoatMap && this.clearcoatMap.isTexture) {\n      data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;\n    }\n    if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {\n      data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;\n    }\n    if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {\n      data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;\n      data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n    }\n    if (this.dispersion !== undefined) data.dispersion = this.dispersion;\n    if (this.iridescence !== undefined) data.iridescence = this.iridescence;\n    if (this.iridescenceIOR !== undefined) data.iridescenceIOR = this.iridescenceIOR;\n    if (this.iridescenceThicknessRange !== undefined) data.iridescenceThicknessRange = this.iridescenceThicknessRange;\n    if (this.iridescenceMap && this.iridescenceMap.isTexture) {\n      data.iridescenceMap = this.iridescenceMap.toJSON(meta).uuid;\n    }\n    if (this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture) {\n      data.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(meta).uuid;\n    }\n    if (this.anisotropy !== undefined) data.anisotropy = this.anisotropy;\n    if (this.anisotropyRotation !== undefined) data.anisotropyRotation = this.anisotropyRotation;\n    if (this.anisotropyMap && this.anisotropyMap.isTexture) {\n      data.anisotropyMap = this.anisotropyMap.toJSON(meta).uuid;\n    }\n    if (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;\n    if (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;\n    if (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;\n    if (this.lightMap && this.lightMap.isTexture) {\n      data.lightMap = this.lightMap.toJSON(meta).uuid;\n      data.lightMapIntensity = this.lightMapIntensity;\n    }\n    if (this.aoMap && this.aoMap.isTexture) {\n      data.aoMap = this.aoMap.toJSON(meta).uuid;\n      data.aoMapIntensity = this.aoMapIntensity;\n    }\n    if (this.bumpMap && this.bumpMap.isTexture) {\n      data.bumpMap = this.bumpMap.toJSON(meta).uuid;\n      data.bumpScale = this.bumpScale;\n    }\n    if (this.normalMap && this.normalMap.isTexture) {\n      data.normalMap = this.normalMap.toJSON(meta).uuid;\n      data.normalMapType = this.normalMapType;\n      data.normalScale = this.normalScale.toArray();\n    }\n    if (this.displacementMap && this.displacementMap.isTexture) {\n      data.displacementMap = this.displacementMap.toJSON(meta).uuid;\n      data.displacementScale = this.displacementScale;\n      data.displacementBias = this.displacementBias;\n    }\n    if (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;\n    if (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;\n    if (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;\n    if (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;\n    if (this.specularIntensityMap && this.specularIntensityMap.isTexture) data.specularIntensityMap = this.specularIntensityMap.toJSON(meta).uuid;\n    if (this.specularColorMap && this.specularColorMap.isTexture) data.specularColorMap = this.specularColorMap.toJSON(meta).uuid;\n    if (this.envMap && this.envMap.isTexture) {\n      data.envMap = this.envMap.toJSON(meta).uuid;\n      if (this.combine !== undefined) data.combine = this.combine;\n    }\n    if (this.envMapRotation !== undefined) data.envMapRotation = this.envMapRotation.toArray();\n    if (this.envMapIntensity !== undefined) data.envMapIntensity = this.envMapIntensity;\n    if (this.reflectivity !== undefined) data.reflectivity = this.reflectivity;\n    if (this.refractionRatio !== undefined) data.refractionRatio = this.refractionRatio;\n    if (this.gradientMap && this.gradientMap.isTexture) {\n      data.gradientMap = this.gradientMap.toJSON(meta).uuid;\n    }\n    if (this.transmission !== undefined) data.transmission = this.transmission;\n    if (this.transmissionMap && this.transmissionMap.isTexture) data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;\n    if (this.thickness !== undefined) data.thickness = this.thickness;\n    if (this.thicknessMap && this.thicknessMap.isTexture) data.thicknessMap = this.thicknessMap.toJSON(meta).uuid;\n    if (this.attenuationDistance !== undefined && this.attenuationDistance !== Infinity) data.attenuationDistance = this.attenuationDistance;\n    if (this.attenuationColor !== undefined) data.attenuationColor = this.attenuationColor.getHex();\n    if (this.size !== undefined) data.size = this.size;\n    if (this.shadowSide !== null) data.shadowSide = this.shadowSide;\n    if (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;\n    if (this.blending !== NormalBlending) data.blending = this.blending;\n    if (this.side !== FrontSide) data.side = this.side;\n    if (this.vertexColors === true) data.vertexColors = true;\n    if (this.opacity < 1) data.opacity = this.opacity;\n    if (this.transparent === true) data.transparent = true;\n    if (this.blendSrc !== SrcAlphaFactor) data.blendSrc = this.blendSrc;\n    if (this.blendDst !== OneMinusSrcAlphaFactor) data.blendDst = this.blendDst;\n    if (this.blendEquation !== AddEquation) data.blendEquation = this.blendEquation;\n    if (this.blendSrcAlpha !== null) data.blendSrcAlpha = this.blendSrcAlpha;\n    if (this.blendDstAlpha !== null) data.blendDstAlpha = this.blendDstAlpha;\n    if (this.blendEquationAlpha !== null) data.blendEquationAlpha = this.blendEquationAlpha;\n    if (this.blendColor && this.blendColor.isColor) data.blendColor = this.blendColor.getHex();\n    if (this.blendAlpha !== 0) data.blendAlpha = this.blendAlpha;\n    if (this.depthFunc !== LessEqualDepth) data.depthFunc = this.depthFunc;\n    if (this.depthTest === false) data.depthTest = this.depthTest;\n    if (this.depthWrite === false) data.depthWrite = this.depthWrite;\n    if (this.colorWrite === false) data.colorWrite = this.colorWrite;\n    if (this.stencilWriteMask !== 0xff) data.stencilWriteMask = this.stencilWriteMask;\n    if (this.stencilFunc !== AlwaysStencilFunc) data.stencilFunc = this.stencilFunc;\n    if (this.stencilRef !== 0) data.stencilRef = this.stencilRef;\n    if (this.stencilFuncMask !== 0xff) data.stencilFuncMask = this.stencilFuncMask;\n    if (this.stencilFail !== KeepStencilOp) data.stencilFail = this.stencilFail;\n    if (this.stencilZFail !== KeepStencilOp) data.stencilZFail = this.stencilZFail;\n    if (this.stencilZPass !== KeepStencilOp) data.stencilZPass = this.stencilZPass;\n    if (this.stencilWrite === true) data.stencilWrite = this.stencilWrite;\n\n    // rotation (SpriteMaterial)\n    if (this.rotation !== undefined && this.rotation !== 0) data.rotation = this.rotation;\n    if (this.polygonOffset === true) data.polygonOffset = true;\n    if (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;\n    if (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;\n    if (this.linewidth !== undefined && this.linewidth !== 1) data.linewidth = this.linewidth;\n    if (this.dashSize !== undefined) data.dashSize = this.dashSize;\n    if (this.gapSize !== undefined) data.gapSize = this.gapSize;\n    if (this.scale !== undefined) data.scale = this.scale;\n    if (this.dithering === true) data.dithering = true;\n    if (this.alphaTest > 0) data.alphaTest = this.alphaTest;\n    if (this.alphaHash === true) data.alphaHash = true;\n    if (this.alphaToCoverage === true) data.alphaToCoverage = true;\n    if (this.premultipliedAlpha === true) data.premultipliedAlpha = true;\n    if (this.forceSinglePass === true) data.forceSinglePass = true;\n    if (this.wireframe === true) data.wireframe = true;\n    if (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;\n    if (this.wireframeLinecap !== 'round') data.wireframeLinecap = this.wireframeLinecap;\n    if (this.wireframeLinejoin !== 'round') data.wireframeLinejoin = this.wireframeLinejoin;\n    if (this.flatShading === true) data.flatShading = true;\n    if (this.visible === false) data.visible = false;\n    if (this.toneMapped === false) data.toneMapped = false;\n    if (this.fog === false) data.fog = false;\n    if (Object.keys(this.userData).length > 0) data.userData = this.userData;\n\n    // TODO: Copied from Object3D.toJSON\n\n    function extractFromCache(cache) {\n      const values = [];\n      for (const key in cache) {\n        const data = cache[key];\n        delete data.metadata;\n        values.push(data);\n      }\n      return values;\n    }\n    if (isRootObject) {\n      const textures = extractFromCache(meta.textures);\n      const images = extractFromCache(meta.images);\n      if (textures.length > 0) data.textures = textures;\n      if (images.length > 0) data.images = images;\n    }\n    return data;\n  }\n\n  /**\n   * Returns a new material with copied values from this instance.\n   *\n   * @return {Material} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  /**\n   * Copies the values of the given material to this instance.\n   *\n   * @param {Material} source - The material to copy.\n   * @return {Material} A reference to this instance.\n   */\n  copy(source) {\n    this.name = source.name;\n    this.blending = source.blending;\n    this.side = source.side;\n    this.vertexColors = source.vertexColors;\n    this.opacity = source.opacity;\n    this.transparent = source.transparent;\n    this.blendSrc = source.blendSrc;\n    this.blendDst = source.blendDst;\n    this.blendEquation = source.blendEquation;\n    this.blendSrcAlpha = source.blendSrcAlpha;\n    this.blendDstAlpha = source.blendDstAlpha;\n    this.blendEquationAlpha = source.blendEquationAlpha;\n    this.blendColor.copy(source.blendColor);\n    this.blendAlpha = source.blendAlpha;\n    this.depthFunc = source.depthFunc;\n    this.depthTest = source.depthTest;\n    this.depthWrite = source.depthWrite;\n    this.stencilWriteMask = source.stencilWriteMask;\n    this.stencilFunc = source.stencilFunc;\n    this.stencilRef = source.stencilRef;\n    this.stencilFuncMask = source.stencilFuncMask;\n    this.stencilFail = source.stencilFail;\n    this.stencilZFail = source.stencilZFail;\n    this.stencilZPass = source.stencilZPass;\n    this.stencilWrite = source.stencilWrite;\n    const srcPlanes = source.clippingPlanes;\n    let dstPlanes = null;\n    if (srcPlanes !== null) {\n      const n = srcPlanes.length;\n      dstPlanes = new Array(n);\n      for (let i = 0; i !== n; ++i) {\n        dstPlanes[i] = srcPlanes[i].clone();\n      }\n    }\n    this.clippingPlanes = dstPlanes;\n    this.clipIntersection = source.clipIntersection;\n    this.clipShadows = source.clipShadows;\n    this.shadowSide = source.shadowSide;\n    this.colorWrite = source.colorWrite;\n    this.precision = source.precision;\n    this.polygonOffset = source.polygonOffset;\n    this.polygonOffsetFactor = source.polygonOffsetFactor;\n    this.polygonOffsetUnits = source.polygonOffsetUnits;\n    this.dithering = source.dithering;\n    this.alphaTest = source.alphaTest;\n    this.alphaHash = source.alphaHash;\n    this.alphaToCoverage = source.alphaToCoverage;\n    this.premultipliedAlpha = source.premultipliedAlpha;\n    this.forceSinglePass = source.forceSinglePass;\n    this.visible = source.visible;\n    this.toneMapped = source.toneMapped;\n    this.userData = JSON.parse(JSON.stringify(source.userData));\n    return this;\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   *\n   * @fires Material#dispose\n   */\n  dispose() {\n    /**\n     * Fires when the material has been disposed of.\n     *\n     * @event Material#dispose\n     * @type {Object}\n     */\n    this.dispatchEvent({\n      type: 'dispose'\n    });\n  }\n\n  /**\n   * Setting this property to `true` indicates the engine the material\n   * needs to be recompiled.\n   *\n   * @type {boolean}\n   * @default false\n   * @param {boolean} value\n   */\n  set needsUpdate(value) {\n    if (value === true) this.version++;\n  }\n}\n\n/**\n * A material for drawing geometries in a simple shaded (flat or wireframe) way.\n *\n * This material is not affected by lights.\n *\n * @augments Material\n */\nclass MeshBasicMaterial extends Material {\n  /**\n   * Constructs a new mesh basic material.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isMeshBasicMaterial = true;\n    this.type = 'MeshBasicMaterial';\n\n    /**\n     * Color of the material.\n     *\n     * @type {Color}\n     * @default (1,1,1)\n     */\n    this.color = new Color(0xffffff); // emissive\n\n    /**\n     * The color map. May optionally include an alpha channel, typically combined\n     * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n     * color is modulated by the diffuse `color`.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.map = null;\n\n    /**\n     * The light map. Requires a second set of UVs.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.lightMap = null;\n\n    /**\n     * Intensity of the baked light.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.lightMapIntensity = 1.0;\n\n    /**\n     * The red channel of this texture is used as the ambient occlusion map.\n     * Requires a second set of UVs.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.aoMap = null;\n\n    /**\n     * Intensity of the ambient occlusion effect. Range is `[0,1]`, where `0`\n     * disables ambient occlusion. Where intensity is `1` and the AO map's\n     * red channel is also `1`, ambient light is fully occluded on a surface.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.aoMapIntensity = 1.0;\n\n    /**\n     * Specular map used by the material.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.specularMap = null;\n\n    /**\n     * The alpha map is a grayscale texture that controls the opacity across the\n     * surface (black: fully transparent; white: fully opaque).\n     *\n     * Only the color of the texture is used, ignoring the alpha channel if one\n     * exists. For RGB and RGBA textures, the renderer will use the green channel\n     * when sampling this texture due to the extra bit of precision provided for\n     * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n     * luminance/alpha textures will also still work as expected.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.alphaMap = null;\n\n    /**\n     * The environment map.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.envMap = null;\n\n    /**\n     * The rotation of the environment map in radians.\n     *\n     * @type {Euler}\n     * @default (0,0,0)\n     */\n    this.envMapRotation = new Euler();\n\n    /**\n     * How to combine the result of the surface's color with the environment map, if any.\n     *\n     * When set to `MixOperation`, the {@link MeshBasicMaterial#reflectivity} is used to\n     * blend between the two colors.\n     *\n     * @type {(MultiplyOperation|MixOperation|AddOperation)}\n     * @default MultiplyOperation\n     */\n    this.combine = MultiplyOperation;\n\n    /**\n     * How much the environment map affects the surface.\n     * The valid range is between `0` (no reflections) and `1` (full reflections).\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.reflectivity = 1;\n\n    /**\n     * The index of refraction (IOR) of air (approximately 1) divided by the\n     * index of refraction of the material. It is used with environment mapping\n     * modes {@link CubeRefractionMapping} and {@link EquirectangularRefractionMapping}.\n     * The refraction ratio should not exceed `1`.\n     *\n     * @type {number}\n     * @default 0.98\n     */\n    this.refractionRatio = 0.98;\n\n    /**\n     * Renders the geometry as a wireframe.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.wireframe = false;\n\n    /**\n     * Controls the thickness of the wireframe.\n     *\n     * Can only be used with {@link SVGRenderer}.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.wireframeLinewidth = 1;\n\n    /**\n     * Defines appearance of wireframe ends.\n     *\n     * Can only be used with {@link SVGRenderer}.\n     *\n     * @type {('round'|'bevel'|'miter')}\n     * @default 'round'\n     */\n    this.wireframeLinecap = 'round';\n\n    /**\n     * Defines appearance of wireframe joints.\n     *\n     * Can only be used with {@link SVGRenderer}.\n     *\n     * @type {('round'|'bevel'|'miter')}\n     * @default 'round'\n     */\n    this.wireframeLinejoin = 'round';\n\n    /**\n     * Whether the material is affected by fog or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.fog = true;\n    this.setValues(parameters);\n  }\n  copy(source) {\n    super.copy(source);\n    this.color.copy(source.color);\n    this.map = source.map;\n    this.lightMap = source.lightMap;\n    this.lightMapIntensity = source.lightMapIntensity;\n    this.aoMap = source.aoMap;\n    this.aoMapIntensity = source.aoMapIntensity;\n    this.specularMap = source.specularMap;\n    this.alphaMap = source.alphaMap;\n    this.envMap = source.envMap;\n    this.envMapRotation.copy(source.envMapRotation);\n    this.combine = source.combine;\n    this.reflectivity = source.reflectivity;\n    this.refractionRatio = source.refractionRatio;\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    this.wireframeLinecap = source.wireframeLinecap;\n    this.wireframeLinejoin = source.wireframeLinejoin;\n    this.fog = source.fog;\n    return this;\n  }\n}\n\n// Fast Half Float Conversions, http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n\nconst _tables = /*@__PURE__*/_generateTables();\nfunction _generateTables() {\n  // float32 to float16 helpers\n\n  const buffer = new ArrayBuffer(4);\n  const floatView = new Float32Array(buffer);\n  const uint32View = new Uint32Array(buffer);\n  const baseTable = new Uint32Array(512);\n  const shiftTable = new Uint32Array(512);\n  for (let i = 0; i < 256; ++i) {\n    const e = i - 127;\n\n    // very small number (0, -0)\n\n    if (e < -27) {\n      baseTable[i] = 0x0000;\n      baseTable[i | 0x100] = 0x8000;\n      shiftTable[i] = 24;\n      shiftTable[i | 0x100] = 24;\n\n      // small number (denorm)\n    } else if (e < -14) {\n      baseTable[i] = 0x0400 >> -e - 14;\n      baseTable[i | 0x100] = 0x0400 >> -e - 14 | 0x8000;\n      shiftTable[i] = -e - 1;\n      shiftTable[i | 0x100] = -e - 1;\n\n      // normal number\n    } else if (e <= 15) {\n      baseTable[i] = e + 15 << 10;\n      baseTable[i | 0x100] = e + 15 << 10 | 0x8000;\n      shiftTable[i] = 13;\n      shiftTable[i | 0x100] = 13;\n\n      // large number (Infinity, -Infinity)\n    } else if (e < 128) {\n      baseTable[i] = 0x7c00;\n      baseTable[i | 0x100] = 0xfc00;\n      shiftTable[i] = 24;\n      shiftTable[i | 0x100] = 24;\n\n      // stay (NaN, Infinity, -Infinity)\n    } else {\n      baseTable[i] = 0x7c00;\n      baseTable[i | 0x100] = 0xfc00;\n      shiftTable[i] = 13;\n      shiftTable[i | 0x100] = 13;\n    }\n  }\n\n  // float16 to float32 helpers\n\n  const mantissaTable = new Uint32Array(2048);\n  const exponentTable = new Uint32Array(64);\n  const offsetTable = new Uint32Array(64);\n  for (let i = 1; i < 1024; ++i) {\n    let m = i << 13; // zero pad mantissa bits\n    let e = 0; // zero exponent\n\n    // normalized\n    while ((m & 0x00800000) === 0) {\n      m <<= 1;\n      e -= 0x00800000; // decrement exponent\n    }\n    m &= -8388609; // clear leading 1 bit\n    e += 0x38800000; // adjust bias\n\n    mantissaTable[i] = m | e;\n  }\n  for (let i = 1024; i < 2048; ++i) {\n    mantissaTable[i] = 0x38000000 + (i - 1024 << 13);\n  }\n  for (let i = 1; i < 31; ++i) {\n    exponentTable[i] = i << 23;\n  }\n  exponentTable[31] = 0x47800000;\n  exponentTable[32] = 0x80000000;\n  for (let i = 33; i < 63; ++i) {\n    exponentTable[i] = 0x80000000 + (i - 32 << 23);\n  }\n  exponentTable[63] = 0xc7800000;\n  for (let i = 1; i < 64; ++i) {\n    if (i !== 32) {\n      offsetTable[i] = 1024;\n    }\n  }\n  return {\n    floatView: floatView,\n    uint32View: uint32View,\n    baseTable: baseTable,\n    shiftTable: shiftTable,\n    mantissaTable: mantissaTable,\n    exponentTable: exponentTable,\n    offsetTable: offsetTable\n  };\n}\n\n/**\n * Returns a half precision floating point value (FP16) from the given single\n * precision floating point value (FP32).\n *\n * @param {number} val - A single precision floating point value.\n * @return {number} The FP16 value.\n */\nfunction toHalfFloat(val) {\n  if (Math.abs(val) > 65504) console.warn('THREE.DataUtils.toHalfFloat(): Value out of range.');\n  val = clamp(val, -65504, 65504);\n  _tables.floatView[0] = val;\n  const f = _tables.uint32View[0];\n  const e = f >> 23 & 0x1ff;\n  return _tables.baseTable[e] + ((f & 0x007fffff) >> _tables.shiftTable[e]);\n}\n\n/**\n * Returns a single precision floating point value (FP32) from the given half\n * precision floating point value (FP16).\n *\n * @param {number} val - A half precision floating point value.\n * @return {number} The FP32 value.\n */\nfunction fromHalfFloat(val) {\n  const m = val >> 10;\n  _tables.uint32View[0] = _tables.mantissaTable[_tables.offsetTable[m] + (val & 0x3ff)] + _tables.exponentTable[m];\n  return _tables.floatView[0];\n}\n\n/**\n * A class containing utility functions for data.\n *\n * @hideconstructor\n */\nclass DataUtils {\n  /**\n   * Returns a half precision floating point value (FP16) from the given single\n   * precision floating point value (FP32).\n   *\n   * @param {number} val - A single precision floating point value.\n   * @return {number} The FP16 value.\n   */\n  static toHalfFloat(val) {\n    return toHalfFloat(val);\n  }\n\n  /**\n   * Returns a single precision floating point value (FP32) from the given half\n   * precision floating point value (FP16).\n   *\n   * @param {number} val - A half precision floating point value.\n   * @return {number} The FP32 value.\n   */\n  static fromHalfFloat(val) {\n    return fromHalfFloat(val);\n  }\n}\nconst _vector$9 = /*@__PURE__*/new Vector3();\nconst _vector2$1 = /*@__PURE__*/new Vector2();\nlet _id$2 = 0;\n\n/**\n * This class stores data for an attribute (such as vertex positions, face\n * indices, normals, colors, UVs, and any custom attributes ) associated with\n * a geometry, which allows for more efficient passing of data to the GPU.\n *\n * When working with vector-like data, the `fromBufferAttribute( attribute, index )`\n * helper methods on vector and color class might be helpful. E.g. {@link Vector3#fromBufferAttribute}.\n */\nclass BufferAttribute {\n  /**\n   * Constructs a new buffer attribute.\n   *\n   * @param {TypedArray} array - The array holding the attribute data.\n   * @param {number} itemSize - The item size.\n   * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n   */\n  constructor(array, itemSize) {\n    let normalized = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (Array.isArray(array)) {\n      throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.');\n    }\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isBufferAttribute = true;\n\n    /**\n     * The ID of the buffer attribute.\n     *\n     * @name BufferAttribute#id\n     * @type {number}\n     * @readonly\n     */\n    Object.defineProperty(this, 'id', {\n      value: _id$2++\n    });\n\n    /**\n     * The name of the buffer attribute.\n     *\n     * @type {string}\n     */\n    this.name = '';\n\n    /**\n     * The array holding the attribute data. It should have `itemSize * numVertices`\n     * elements, where `numVertices` is the number of vertices in the associated geometry.\n     *\n     * @type {TypedArray}\n     */\n    this.array = array;\n\n    /**\n     * The number of values of the array that should be associated with a particular vertex.\n     * For instance, if this attribute is storing a 3-component vector (such as a position,\n     * normal, or color), then the value should be `3`.\n     *\n     * @type {number}\n     */\n    this.itemSize = itemSize;\n\n    /**\n     * Represents the number of items this buffer attribute stores. It is internally computed\n     * by dividing the `array` length by the `itemSize`.\n     *\n     * @type {number}\n     * @readonly\n     */\n    this.count = array !== undefined ? array.length / itemSize : 0;\n\n    /**\n     * Applies to integer data only. Indicates how the underlying data in the buffer maps to\n     * the values in the GLSL code. For instance, if `array` is an instance of `UInt16Array`,\n     * and `normalized` is `true`, the values `0 -+65535` in the array data will be mapped to\n     * `0.0f - +1.0f` in the GLSL attribute. If `normalized` is `false`, the values will be converted\n     * to floats unmodified, i.e. `65535` becomes `65535.0f`.\n     *\n     * @type {boolean}\n     */\n    this.normalized = normalized;\n\n    /**\n     * Defines the intended usage pattern of the data store for optimization purposes.\n     *\n     * Note: After the initial use of a buffer, its usage cannot be changed. Instead,\n     * instantiate a new one and set the desired usage before the next render.\n     *\n     * @type {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)}\n     * @default StaticDrawUsage\n     */\n    this.usage = StaticDrawUsage;\n\n    /**\n     * This can be used to only update some components of stored vectors (for example, just the\n     * component related to color). Use the `addUpdateRange()` function to add ranges to this array.\n     *\n     * @type {Array<Object>}\n     */\n    this.updateRanges = [];\n\n    /**\n     * Configures the bound GPU type for use in shaders.\n     *\n     * Note: this only has an effect for integer arrays and is not configurable for float arrays.\n     * For lower precision float types, use `Float16BufferAttribute`.\n     *\n     * @type {(FloatType|IntType)}\n     * @default FloatType\n     */\n    this.gpuType = FloatType;\n\n    /**\n     * A version number, incremented every time the `needsUpdate` is set to `true`.\n     *\n     * @type {number}\n     */\n    this.version = 0;\n  }\n\n  /**\n   * A callback function that is executed after the renderer has transferred the attribute\n   * array data to the GPU.\n   */\n  onUploadCallback() {}\n\n  /**\n   * Flag to indicate that this attribute has changed and should be re-sent to\n   * the GPU. Set this to `true` when you modify the value of the array.\n   *\n   * @type {number}\n   * @default false\n   * @param {boolean} value\n   */\n  set needsUpdate(value) {\n    if (value === true) this.version++;\n  }\n\n  /**\n   * Sets the usage of this buffer attribute.\n   *\n   * @param {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)} value - The usage to set.\n   * @return {BufferAttribute} A reference to this buffer attribute.\n   */\n  setUsage(value) {\n    this.usage = value;\n    return this;\n  }\n\n  /**\n   * Adds a range of data in the data array to be updated on the GPU.\n   *\n   * @param {number} start - Position at which to start update.\n   * @param {number} count - The number of components to update.\n   */\n  addUpdateRange(start, count) {\n    this.updateRanges.push({\n      start,\n      count\n    });\n  }\n\n  /**\n   * Clears the update ranges.\n   */\n  clearUpdateRanges() {\n    this.updateRanges.length = 0;\n  }\n\n  /**\n   * Copies the values of the given buffer attribute to this instance.\n   *\n   * @param {BufferAttribute} source - The buffer attribute to copy.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  copy(source) {\n    this.name = source.name;\n    this.array = new source.array.constructor(source.array);\n    this.itemSize = source.itemSize;\n    this.count = source.count;\n    this.normalized = source.normalized;\n    this.usage = source.usage;\n    this.gpuType = source.gpuType;\n    return this;\n  }\n\n  /**\n   * Copies a vector from the given buffer attribute to this one. The start\n   * and destination position in the attribute buffers are represented by the\n   * given indices.\n   *\n   * @param {number} index1 - The destination index into this buffer attribute.\n   * @param {BufferAttribute} attribute - The buffer attribute to copy from.\n   * @param {number} index2 - The source index into the given buffer attribute.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  copyAt(index1, attribute, index2) {\n    index1 *= this.itemSize;\n    index2 *= attribute.itemSize;\n    for (let i = 0, l = this.itemSize; i < l; i++) {\n      this.array[index1 + i] = attribute.array[index2 + i];\n    }\n    return this;\n  }\n\n  /**\n   * Copies the given array data into this buffer attribute.\n   *\n   * @param {(TypedArray|Array)} array - The array to copy.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  copyArray(array) {\n    this.array.set(array);\n    return this;\n  }\n\n  /**\n   * Applies the given 3x3 matrix to the given attribute. Works with\n   * item size `2` and `3`.\n   *\n   * @param {Matrix3} m - The matrix to apply.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  applyMatrix3(m) {\n    if (this.itemSize === 2) {\n      for (let i = 0, l = this.count; i < l; i++) {\n        _vector2$1.fromBufferAttribute(this, i);\n        _vector2$1.applyMatrix3(m);\n        this.setXY(i, _vector2$1.x, _vector2$1.y);\n      }\n    } else if (this.itemSize === 3) {\n      for (let i = 0, l = this.count; i < l; i++) {\n        _vector$9.fromBufferAttribute(this, i);\n        _vector$9.applyMatrix3(m);\n        this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Applies the given 4x4 matrix to the given attribute. Only works with\n   * item size `3`.\n   *\n   * @param {Matrix4} m - The matrix to apply.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  applyMatrix4(m) {\n    for (let i = 0, l = this.count; i < l; i++) {\n      _vector$9.fromBufferAttribute(this, i);\n      _vector$9.applyMatrix4(m);\n      this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n    }\n    return this;\n  }\n\n  /**\n   * Applies the given 3x3 normal matrix to the given attribute. Only works with\n   * item size `3`.\n   *\n   * @param {Matrix3} m - The normal matrix to apply.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  applyNormalMatrix(m) {\n    for (let i = 0, l = this.count; i < l; i++) {\n      _vector$9.fromBufferAttribute(this, i);\n      _vector$9.applyNormalMatrix(m);\n      this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n    }\n    return this;\n  }\n\n  /**\n   * Applies the given 4x4 matrix to the given attribute. Only works with\n   * item size `3` and with direction vectors.\n   *\n   * @param {Matrix4} m - The matrix to apply.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  transformDirection(m) {\n    for (let i = 0, l = this.count; i < l; i++) {\n      _vector$9.fromBufferAttribute(this, i);\n      _vector$9.transformDirection(m);\n      this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n    }\n    return this;\n  }\n\n  /**\n   * Sets the given array data in the buffer attribute.\n   *\n   * @param {(TypedArray|Array)} value - The array data to set.\n   * @param {number} [offset=0] - The offset in this buffer attribute's array.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  set(value) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    // Matching BufferAttribute constructor, do not normalize the array.\n    this.array.set(value, offset);\n    return this;\n  }\n\n  /**\n   * Returns the given component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} component - The component index.\n   * @return {number} The returned value.\n   */\n  getComponent(index, component) {\n    let value = this.array[index * this.itemSize + component];\n    if (this.normalized) value = denormalize(value, this.array);\n    return value;\n  }\n\n  /**\n   * Sets the given value to the given component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} component - The component index.\n   * @param {number} value - The value to set.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  setComponent(index, component, value) {\n    if (this.normalized) value = normalize(value, this.array);\n    this.array[index * this.itemSize + component] = value;\n    return this;\n  }\n\n  /**\n   * Returns the x component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @return {number} The x component.\n   */\n  getX(index) {\n    let x = this.array[index * this.itemSize];\n    if (this.normalized) x = denormalize(x, this.array);\n    return x;\n  }\n\n  /**\n   * Sets the x component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} x - The value to set.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  setX(index, x) {\n    if (this.normalized) x = normalize(x, this.array);\n    this.array[index * this.itemSize] = x;\n    return this;\n  }\n\n  /**\n   * Returns the y component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @return {number} The y component.\n   */\n  getY(index) {\n    let y = this.array[index * this.itemSize + 1];\n    if (this.normalized) y = denormalize(y, this.array);\n    return y;\n  }\n\n  /**\n   * Sets the y component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} y - The value to set.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  setY(index, y) {\n    if (this.normalized) y = normalize(y, this.array);\n    this.array[index * this.itemSize + 1] = y;\n    return this;\n  }\n\n  /**\n   * Returns the z component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @return {number} The z component.\n   */\n  getZ(index) {\n    let z = this.array[index * this.itemSize + 2];\n    if (this.normalized) z = denormalize(z, this.array);\n    return z;\n  }\n\n  /**\n   * Sets the z component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} z - The value to set.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  setZ(index, z) {\n    if (this.normalized) z = normalize(z, this.array);\n    this.array[index * this.itemSize + 2] = z;\n    return this;\n  }\n\n  /**\n   * Returns the w component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @return {number} The w component.\n   */\n  getW(index) {\n    let w = this.array[index * this.itemSize + 3];\n    if (this.normalized) w = denormalize(w, this.array);\n    return w;\n  }\n\n  /**\n   * Sets the w component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} w - The value to set.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  setW(index, w) {\n    if (this.normalized) w = normalize(w, this.array);\n    this.array[index * this.itemSize + 3] = w;\n    return this;\n  }\n\n  /**\n   * Sets the x and y component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} x - The value for the x component to set.\n   * @param {number} y - The value for the y component to set.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  setXY(index, x, y) {\n    index *= this.itemSize;\n    if (this.normalized) {\n      x = normalize(x, this.array);\n      y = normalize(y, this.array);\n    }\n    this.array[index + 0] = x;\n    this.array[index + 1] = y;\n    return this;\n  }\n\n  /**\n   * Sets the x, y and z component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} x - The value for the x component to set.\n   * @param {number} y - The value for the y component to set.\n   * @param {number} z - The value for the z component to set.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  setXYZ(index, x, y, z) {\n    index *= this.itemSize;\n    if (this.normalized) {\n      x = normalize(x, this.array);\n      y = normalize(y, this.array);\n      z = normalize(z, this.array);\n    }\n    this.array[index + 0] = x;\n    this.array[index + 1] = y;\n    this.array[index + 2] = z;\n    return this;\n  }\n\n  /**\n   * Sets the x, y, z and w component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} x - The value for the x component to set.\n   * @param {number} y - The value for the y component to set.\n   * @param {number} z - The value for the z component to set.\n   * @param {number} w - The value for the w component to set.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  setXYZW(index, x, y, z, w) {\n    index *= this.itemSize;\n    if (this.normalized) {\n      x = normalize(x, this.array);\n      y = normalize(y, this.array);\n      z = normalize(z, this.array);\n      w = normalize(w, this.array);\n    }\n    this.array[index + 0] = x;\n    this.array[index + 1] = y;\n    this.array[index + 2] = z;\n    this.array[index + 3] = w;\n    return this;\n  }\n\n  /**\n   * Sets the given callback function that is executed after the Renderer has transferred\n   * the attribute array data to the GPU. Can be used to perform clean-up operations after\n   * the upload when attribute data are not needed anymore on the CPU side.\n   *\n   * @param {Function} callback - The `onUpload()` callback.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  onUpload(callback) {\n    this.onUploadCallback = callback;\n    return this;\n  }\n\n  /**\n   * Returns a new buffer attribute with copied values from this instance.\n   *\n   * @return {BufferAttribute} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor(this.array, this.itemSize).copy(this);\n  }\n\n  /**\n   * Serializes the buffer attribute into JSON.\n   *\n   * @return {Object} A JSON object representing the serialized buffer attribute.\n   */\n  toJSON() {\n    const data = {\n      itemSize: this.itemSize,\n      type: this.array.constructor.name,\n      array: Array.from(this.array),\n      normalized: this.normalized\n    };\n    if (this.name !== '') data.name = this.name;\n    if (this.usage !== StaticDrawUsage) data.usage = this.usage;\n    return data;\n  }\n}\n\n/**\n * Convenient class that can be used when creating a `Int8` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Int8BufferAttribute extends BufferAttribute {\n  /**\n   * Constructs a new buffer attribute.\n   *\n   * @param {(Array<number>|Int8Array)} array - The array holding the attribute data.\n   * @param {number} itemSize - The item size.\n   * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n   */\n  constructor(array, itemSize, normalized) {\n    super(new Int8Array(array), itemSize, normalized);\n  }\n}\n\n/**\n * Convenient class that can be used when creating a `UInt8` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Uint8BufferAttribute extends BufferAttribute {\n  /**\n   * Constructs a new buffer attribute.\n   *\n   * @param {(Array<number>|Uint8Array)} array - The array holding the attribute data.\n   * @param {number} itemSize - The item size.\n   * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n   */\n  constructor(array, itemSize, normalized) {\n    super(new Uint8Array(array), itemSize, normalized);\n  }\n}\n\n/**\n * Convenient class that can be used when creating a `UInt8Clamped` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Uint8ClampedBufferAttribute extends BufferAttribute {\n  /**\n   * Constructs a new buffer attribute.\n   *\n   * @param {(Array<number>|Uint8ClampedArray)} array - The array holding the attribute data.\n   * @param {number} itemSize - The item size.\n   * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n   */\n  constructor(array, itemSize, normalized) {\n    super(new Uint8ClampedArray(array), itemSize, normalized);\n  }\n}\n\n/**\n * Convenient class that can be used when creating a `Int16` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Int16BufferAttribute extends BufferAttribute {\n  /**\n   * Constructs a new buffer attribute.\n   *\n   * @param {(Array<number>|Int16Array)} array - The array holding the attribute data.\n   * @param {number} itemSize - The item size.\n   * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n   */\n  constructor(array, itemSize, normalized) {\n    super(new Int16Array(array), itemSize, normalized);\n  }\n}\n\n/**\n * Convenient class that can be used when creating a `UInt16` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Uint16BufferAttribute extends BufferAttribute {\n  /**\n   * Constructs a new buffer attribute.\n   *\n   * @param {(Array<number>|Uint16Array)} array - The array holding the attribute data.\n   * @param {number} itemSize - The item size.\n   * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n   */\n  constructor(array, itemSize, normalized) {\n    super(new Uint16Array(array), itemSize, normalized);\n  }\n}\n\n/**\n * Convenient class that can be used when creating a `Int32` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Int32BufferAttribute extends BufferAttribute {\n  /**\n   * Constructs a new buffer attribute.\n   *\n   * @param {(Array<number>|Int32Array)} array - The array holding the attribute data.\n   * @param {number} itemSize - The item size.\n   * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n   */\n  constructor(array, itemSize, normalized) {\n    super(new Int32Array(array), itemSize, normalized);\n  }\n}\n\n/**\n * Convenient class that can be used when creating a `UInt32` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Uint32BufferAttribute extends BufferAttribute {\n  /**\n   * Constructs a new buffer attribute.\n   *\n   * @param {(Array<number>|Uint32Array)} array - The array holding the attribute data.\n   * @param {number} itemSize - The item size.\n   * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n   */\n  constructor(array, itemSize, normalized) {\n    super(new Uint32Array(array), itemSize, normalized);\n  }\n}\n\n/**\n * Convenient class that can be used when creating a `Float16` buffer attribute with\n * a plain `Array` instance.\n *\n * This class automatically converts to and from FP16 since `Float16Array` is not\n * natively supported in JavaScript.\n *\n * @augments BufferAttribute\n */\nclass Float16BufferAttribute extends BufferAttribute {\n  /**\n   * Constructs a new buffer attribute.\n   *\n   * @param {(Array<number>|Uint16Array)} array - The array holding the attribute data.\n   * @param {number} itemSize - The item size.\n   * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n   */\n  constructor(array, itemSize, normalized) {\n    super(new Uint16Array(array), itemSize, normalized);\n    this.isFloat16BufferAttribute = true;\n  }\n  getX(index) {\n    let x = fromHalfFloat(this.array[index * this.itemSize]);\n    if (this.normalized) x = denormalize(x, this.array);\n    return x;\n  }\n  setX(index, x) {\n    if (this.normalized) x = normalize(x, this.array);\n    this.array[index * this.itemSize] = toHalfFloat(x);\n    return this;\n  }\n  getY(index) {\n    let y = fromHalfFloat(this.array[index * this.itemSize + 1]);\n    if (this.normalized) y = denormalize(y, this.array);\n    return y;\n  }\n  setY(index, y) {\n    if (this.normalized) y = normalize(y, this.array);\n    this.array[index * this.itemSize + 1] = toHalfFloat(y);\n    return this;\n  }\n  getZ(index) {\n    let z = fromHalfFloat(this.array[index * this.itemSize + 2]);\n    if (this.normalized) z = denormalize(z, this.array);\n    return z;\n  }\n  setZ(index, z) {\n    if (this.normalized) z = normalize(z, this.array);\n    this.array[index * this.itemSize + 2] = toHalfFloat(z);\n    return this;\n  }\n  getW(index) {\n    let w = fromHalfFloat(this.array[index * this.itemSize + 3]);\n    if (this.normalized) w = denormalize(w, this.array);\n    return w;\n  }\n  setW(index, w) {\n    if (this.normalized) w = normalize(w, this.array);\n    this.array[index * this.itemSize + 3] = toHalfFloat(w);\n    return this;\n  }\n  setXY(index, x, y) {\n    index *= this.itemSize;\n    if (this.normalized) {\n      x = normalize(x, this.array);\n      y = normalize(y, this.array);\n    }\n    this.array[index + 0] = toHalfFloat(x);\n    this.array[index + 1] = toHalfFloat(y);\n    return this;\n  }\n  setXYZ(index, x, y, z) {\n    index *= this.itemSize;\n    if (this.normalized) {\n      x = normalize(x, this.array);\n      y = normalize(y, this.array);\n      z = normalize(z, this.array);\n    }\n    this.array[index + 0] = toHalfFloat(x);\n    this.array[index + 1] = toHalfFloat(y);\n    this.array[index + 2] = toHalfFloat(z);\n    return this;\n  }\n  setXYZW(index, x, y, z, w) {\n    index *= this.itemSize;\n    if (this.normalized) {\n      x = normalize(x, this.array);\n      y = normalize(y, this.array);\n      z = normalize(z, this.array);\n      w = normalize(w, this.array);\n    }\n    this.array[index + 0] = toHalfFloat(x);\n    this.array[index + 1] = toHalfFloat(y);\n    this.array[index + 2] = toHalfFloat(z);\n    this.array[index + 3] = toHalfFloat(w);\n    return this;\n  }\n}\n\n/**\n * Convenient class that can be used when creating a `Float32` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Float32BufferAttribute extends BufferAttribute {\n  /**\n   * Constructs a new buffer attribute.\n   *\n   * @param {(Array<number>|Float32Array)} array - The array holding the attribute data.\n   * @param {number} itemSize - The item size.\n   * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n   */\n  constructor(array, itemSize, normalized) {\n    super(new Float32Array(array), itemSize, normalized);\n  }\n}\nlet _id$1 = 0;\nconst _m1 = /*@__PURE__*/new Matrix4();\nconst _obj = /*@__PURE__*/new Object3D();\nconst _offset = /*@__PURE__*/new Vector3();\nconst _box$2 = /*@__PURE__*/new Box3();\nconst _boxMorphTargets = /*@__PURE__*/new Box3();\nconst _vector$8 = /*@__PURE__*/new Vector3();\n\n/**\n * A representation of mesh, line, or point geometry. Includes vertex\n * positions, face indices, normals, colors, UVs, and custom attributes\n * within buffers, reducing the cost of passing all this data to the GPU.\n *\n * ```js\n * const geometry = new THREE.BufferGeometry();\n * // create a simple square shape. We duplicate the top left and bottom right\n * // vertices because each vertex needs to appear once per triangle.\n * const vertices = new Float32Array( [\n * \t-1.0, -1.0,  1.0, // v0\n * \t 1.0, -1.0,  1.0, // v1\n * \t 1.0,  1.0,  1.0, // v2\n *\n * \t 1.0,  1.0,  1.0, // v3\n * \t-1.0,  1.0,  1.0, // v4\n * \t-1.0, -1.0,  1.0  // v5\n * ] );\n * // itemSize = 3 because there are 3 values (components) per vertex\n * geometry.setAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n * const material = new THREE.MeshBasicMaterial( { color: 0xff0000 } );\n * const mesh = new THREE.Mesh( geometry, material );\n * ```\n *\n * @augments EventDispatcher\n */\nclass BufferGeometry extends EventDispatcher {\n  /**\n   * Constructs a new geometry.\n   */\n  constructor() {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isBufferGeometry = true;\n\n    /**\n     * The ID of the geometry.\n     *\n     * @name BufferGeometry#id\n     * @type {number}\n     * @readonly\n     */\n    Object.defineProperty(this, 'id', {\n      value: _id$1++\n    });\n\n    /**\n     * The UUID of the geometry.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.uuid = generateUUID();\n\n    /**\n     * The name of the geometry.\n     *\n     * @type {string}\n     */\n    this.name = '';\n    this.type = 'BufferGeometry';\n\n    /**\n     * Allows for vertices to be re-used across multiple triangles; this is\n     * called using \"indexed triangles\". Each triangle is associated with the\n     * indices of three vertices. This attribute therefore stores the index of\n     * each vertex for each triangular face. If this attribute is not set, the\n     * renderer assumes that each three contiguous positions represent a single triangle.\n     *\n     * @type {?BufferAttribute}\n     * @default null\n     */\n    this.index = null;\n\n    /**\n     * A (storage) buffer attribute which was generated with a compute shader and\n     * now defines indirect draw calls.\n     *\n     * Can only be used with {@link WebGPURenderer} and a WebGPU backend.\n     *\n     * @type {?BufferAttribute}\n     * @default null\n     */\n    this.indirect = null;\n\n    /**\n     * This dictionary has as id the name of the attribute to be set and as value\n     * the buffer attribute to set it to. Rather than accessing this property directly,\n     * use `setAttribute()` and `getAttribute()` to access attributes of this geometry.\n     *\n     * @type {Object<string,(BufferAttribute|InterleavedBufferAttribute)>}\n     */\n    this.attributes = {};\n\n    /**\n     * This dictionary holds the morph targets of the geometry.\n     *\n     * Note: Once the geometry has been rendered, the morph attribute data cannot\n     * be changed. You will have to call `dispose()?, and create a new geometry instance.\n     *\n     * @type {Object}\n     */\n    this.morphAttributes = {};\n\n    /**\n     * Used to control the morph target behavior; when set to `true`, the morph\n     * target data is treated as relative offsets, rather than as absolute\n     * positions/normals.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.morphTargetsRelative = false;\n\n    /**\n     * Split the geometry into groups, each of which will be rendered in a\n     * separate draw call. This allows an array of materials to be used with the geometry.\n     *\n     * Use `addGroup()` and `clearGroups()` to edit groups, rather than modifying this array directly.\n     *\n     * Every vertex and index must belong to exactly one group — groups must not share vertices or\n     * indices, and must not leave vertices or indices unused.\n     *\n     * @type {Array<Object>}\n     */\n    this.groups = [];\n\n    /**\n     * Bounding box for the geometry which can be calculated with `computeBoundingBox()`.\n     *\n     * @type {Box3}\n     * @default null\n     */\n    this.boundingBox = null;\n\n    /**\n     * Bounding sphere for the geometry which can be calculated with `computeBoundingSphere()`.\n     *\n     * @type {Sphere}\n     * @default null\n     */\n    this.boundingSphere = null;\n\n    /**\n     * Determines the part of the geometry to render. This should not be set directly,\n     * instead use `setDrawRange()`.\n     *\n     * @type {{start:number,count:number}}\n     */\n    this.drawRange = {\n      start: 0,\n      count: Infinity\n    };\n\n    /**\n     * An object that can be used to store custom data about the geometry.\n     * It should not hold references to functions as these will not be cloned.\n     *\n     * @type {Object}\n     */\n    this.userData = {};\n  }\n\n  /**\n   * Returns the index of this geometry.\n   *\n   * @return {?BufferAttribute} The index. Returns `null` if no index is defined.\n   */\n  getIndex() {\n    return this.index;\n  }\n\n  /**\n   * Sets the given index to this geometry.\n   *\n   * @param {Array<number>|BufferAttribute} index - The index to set.\n   * @return {BufferGeometry} A reference to this instance.\n   */\n  setIndex(index) {\n    if (Array.isArray(index)) {\n      this.index = new (arrayNeedsUint32(index) ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);\n    } else {\n      this.index = index;\n    }\n    return this;\n  }\n\n  /**\n   * Sets the given indirect attribute to this geometry.\n   *\n   * @param {BufferAttribute} indirect - The attribute holding indirect draw calls.\n   * @return {BufferGeometry} A reference to this instance.\n   */\n  setIndirect(indirect) {\n    this.indirect = indirect;\n    return this;\n  }\n\n  /**\n   * Returns the indirect attribute of this geometry.\n   *\n   * @return {?BufferAttribute} The indirect attribute. Returns `null` if no indirect attribute is defined.\n   */\n  getIndirect() {\n    return this.indirect;\n  }\n\n  /**\n   * Returns the buffer attribute for the given name.\n   *\n   * @param {string} name - The attribute name.\n   * @return {BufferAttribute|InterleavedBufferAttribute|undefined} The buffer attribute.\n   * Returns `undefined` if not attribute has been found.\n   */\n  getAttribute(name) {\n    return this.attributes[name];\n  }\n\n  /**\n   * Sets the given attribute for the given name.\n   *\n   * @param {string} name - The attribute name.\n   * @param {BufferAttribute|InterleavedBufferAttribute} attribute - The attribute to set.\n   * @return {BufferGeometry} A reference to this instance.\n   */\n  setAttribute(name, attribute) {\n    this.attributes[name] = attribute;\n    return this;\n  }\n\n  /**\n   * Deletes the attribute for the given name.\n   *\n   * @param {string} name - The attribute name to delete.\n   * @return {BufferGeometry} A reference to this instance.\n   */\n  deleteAttribute(name) {\n    delete this.attributes[name];\n    return this;\n  }\n\n  /**\n   * Returns `true` if this geometry has an attribute for the given name.\n   *\n   * @param {string} name - The attribute name.\n   * @return {boolean} Whether this geometry has an attribute for the given name or not.\n   */\n  hasAttribute(name) {\n    return this.attributes[name] !== undefined;\n  }\n\n  /**\n   * Adds a group to this geometry.\n   *\n   * @param {number} start - The first element in this draw call. That is the first\n   * vertex for non-indexed geometry, otherwise the first triangle index.\n   * @param {number} count - Specifies how many vertices (or indices) are part of this group.\n   * @param {number} [materialIndex=0] - The material array index to use.\n   */\n  addGroup(start, count) {\n    let materialIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    this.groups.push({\n      start: start,\n      count: count,\n      materialIndex: materialIndex\n    });\n  }\n\n  /**\n   * Clears all groups.\n   */\n  clearGroups() {\n    this.groups = [];\n  }\n\n  /**\n   * Sets the draw range for this geometry.\n   *\n   * @param {number} start - The first vertex for non-indexed geometry, otherwise the first triangle index.\n   * @param {number} count - For non-indexed BufferGeometry, `count` is the number of vertices to render.\n   * For indexed BufferGeometry, `count` is the number of indices to render.\n   */\n  setDrawRange(start, count) {\n    this.drawRange.start = start;\n    this.drawRange.count = count;\n  }\n\n  /**\n   * Applies the given 4x4 transformation matrix to the geometry.\n   *\n   * @param {Matrix4} matrix - The matrix to apply.\n   * @return {BufferGeometry} A reference to this instance.\n   */\n  applyMatrix4(matrix) {\n    const position = this.attributes.position;\n    if (position !== undefined) {\n      position.applyMatrix4(matrix);\n      position.needsUpdate = true;\n    }\n    const normal = this.attributes.normal;\n    if (normal !== undefined) {\n      const normalMatrix = new Matrix3().getNormalMatrix(matrix);\n      normal.applyNormalMatrix(normalMatrix);\n      normal.needsUpdate = true;\n    }\n    const tangent = this.attributes.tangent;\n    if (tangent !== undefined) {\n      tangent.transformDirection(matrix);\n      tangent.needsUpdate = true;\n    }\n    if (this.boundingBox !== null) {\n      this.computeBoundingBox();\n    }\n    if (this.boundingSphere !== null) {\n      this.computeBoundingSphere();\n    }\n    return this;\n  }\n\n  /**\n   * Applies the rotation represented by the Quaternion to the geometry.\n   *\n   * @param {Quaternion} q - The Quaternion to apply.\n   * @return {BufferGeometry} A reference to this instance.\n   */\n  applyQuaternion(q) {\n    _m1.makeRotationFromQuaternion(q);\n    this.applyMatrix4(_m1);\n    return this;\n  }\n\n  /**\n   * Rotates the geometry about the X axis. This is typically done as a one time\n   * operation, and not during a loop. Use {@link Object3D#rotation} for typical\n   * real-time mesh rotation.\n   *\n   * @param {number} angle - The angle in radians.\n   * @return {BufferGeometry} A reference to this instance.\n   */\n  rotateX(angle) {\n    // rotate geometry around world x-axis\n\n    _m1.makeRotationX(angle);\n    this.applyMatrix4(_m1);\n    return this;\n  }\n\n  /**\n   * Rotates the geometry about the Y axis. This is typically done as a one time\n   * operation, and not during a loop. Use {@link Object3D#rotation} for typical\n   * real-time mesh rotation.\n   *\n   * @param {number} angle - The angle in radians.\n   * @return {BufferGeometry} A reference to this instance.\n   */\n  rotateY(angle) {\n    // rotate geometry around world y-axis\n\n    _m1.makeRotationY(angle);\n    this.applyMatrix4(_m1);\n    return this;\n  }\n\n  /**\n   * Rotates the geometry about the Z axis. This is typically done as a one time\n   * operation, and not during a loop. Use {@link Object3D#rotation} for typical\n   * real-time mesh rotation.\n   *\n   * @param {number} angle - The angle in radians.\n   * @return {BufferGeometry} A reference to this instance.\n   */\n  rotateZ(angle) {\n    // rotate geometry around world z-axis\n\n    _m1.makeRotationZ(angle);\n    this.applyMatrix4(_m1);\n    return this;\n  }\n\n  /**\n   * Translates the geometry. This is typically done as a one time\n   * operation, and not during a loop. Use {@link Object3D#position} for typical\n   * real-time mesh rotation.\n   *\n   * @param {number} x - The x offset.\n   * @param {number} y - The y offset.\n   * @param {number} z - The z offset.\n   * @return {BufferGeometry} A reference to this instance.\n   */\n  translate(x, y, z) {\n    // translate geometry\n\n    _m1.makeTranslation(x, y, z);\n    this.applyMatrix4(_m1);\n    return this;\n  }\n\n  /**\n   * Scales the geometry. This is typically done as a one time\n   * operation, and not during a loop. Use {@link Object3D#scale} for typical\n   * real-time mesh rotation.\n   *\n   * @param {number} x - The x scale.\n   * @param {number} y - The y scale.\n   * @param {number} z - The z scale.\n   * @return {BufferGeometry} A reference to this instance.\n   */\n  scale(x, y, z) {\n    // scale geometry\n\n    _m1.makeScale(x, y, z);\n    this.applyMatrix4(_m1);\n    return this;\n  }\n\n  /**\n   * Rotates the geometry to face a point in 3D space. This is typically done as a one time\n   * operation, and not during a loop. Use {@link Object3D#lookAt} for typical\n   * real-time mesh rotation.\n   *\n   * @param {Vector3} vector - The target point.\n   * @return {BufferGeometry} A reference to this instance.\n   */\n  lookAt(vector) {\n    _obj.lookAt(vector);\n    _obj.updateMatrix();\n    this.applyMatrix4(_obj.matrix);\n    return this;\n  }\n\n  /**\n   * Center the geometry based on its bounding box.\n   *\n   * @return {BufferGeometry} A reference to this instance.\n   */\n  center() {\n    this.computeBoundingBox();\n    this.boundingBox.getCenter(_offset).negate();\n    this.translate(_offset.x, _offset.y, _offset.z);\n    return this;\n  }\n\n  /**\n   * Defines a geometry by creating a `position` attribute based on the given array of points. The array\n   * can hold 2D or 3D vectors. When using two-dimensional data, the `z` coordinate for all vertices is\n   * set to `0`.\n   *\n   * If the method is used with an existing `position` attribute, the vertex data are overwritten with the\n   * data from the array. The length of the array must match the vertex count.\n   *\n   * @param {Array<Vector2>|Array<Vector3>} points - The points.\n   * @return {BufferGeometry} A reference to this instance.\n   */\n  setFromPoints(points) {\n    const positionAttribute = this.getAttribute('position');\n    if (positionAttribute === undefined) {\n      const position = [];\n      for (let i = 0, l = points.length; i < l; i++) {\n        const point = points[i];\n        position.push(point.x, point.y, point.z || 0);\n      }\n      this.setAttribute('position', new Float32BufferAttribute(position, 3));\n    } else {\n      const l = Math.min(points.length, positionAttribute.count); // make sure data do not exceed buffer size\n\n      for (let i = 0; i < l; i++) {\n        const point = points[i];\n        positionAttribute.setXYZ(i, point.x, point.y, point.z || 0);\n      }\n      if (points.length > positionAttribute.count) {\n        console.warn('THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry.');\n      }\n      positionAttribute.needsUpdate = true;\n    }\n    return this;\n  }\n\n  /**\n   * Computes the bounding box of the geometry, and updates the `boundingBox` member.\n   * The bounding box is not computed by the engine; it must be computed by your app.\n   * You may need to recompute the bounding box if the geometry vertices are modified.\n   */\n  computeBoundingBox() {\n    if (this.boundingBox === null) {\n      this.boundingBox = new Box3();\n    }\n    const position = this.attributes.position;\n    const morphAttributesPosition = this.morphAttributes.position;\n    if (position && position.isGLBufferAttribute) {\n      console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.', this);\n      this.boundingBox.set(new Vector3(-Infinity, -Infinity, -Infinity), new Vector3(+Infinity, +Infinity, +Infinity));\n      return;\n    }\n    if (position !== undefined) {\n      this.boundingBox.setFromBufferAttribute(position);\n\n      // process morph attributes if present\n\n      if (morphAttributesPosition) {\n        for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\n          const morphAttribute = morphAttributesPosition[i];\n          _box$2.setFromBufferAttribute(morphAttribute);\n          if (this.morphTargetsRelative) {\n            _vector$8.addVectors(this.boundingBox.min, _box$2.min);\n            this.boundingBox.expandByPoint(_vector$8);\n            _vector$8.addVectors(this.boundingBox.max, _box$2.max);\n            this.boundingBox.expandByPoint(_vector$8);\n          } else {\n            this.boundingBox.expandByPoint(_box$2.min);\n            this.boundingBox.expandByPoint(_box$2.max);\n          }\n        }\n      }\n    } else {\n      this.boundingBox.makeEmpty();\n    }\n    if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {\n      console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this);\n    }\n  }\n\n  /**\n   * Computes the bounding sphere of the geometry, and updates the `boundingSphere` member.\n   * The engine automatically computes the bounding sphere when it is needed, e.g., for ray casting or view frustum culling.\n   * You may need to recompute the bounding sphere if the geometry vertices are modified.\n   */\n  computeBoundingSphere() {\n    if (this.boundingSphere === null) {\n      this.boundingSphere = new Sphere();\n    }\n    const position = this.attributes.position;\n    const morphAttributesPosition = this.morphAttributes.position;\n    if (position && position.isGLBufferAttribute) {\n      console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.', this);\n      this.boundingSphere.set(new Vector3(), Infinity);\n      return;\n    }\n    if (position) {\n      // first, find the center of the bounding sphere\n\n      const center = this.boundingSphere.center;\n      _box$2.setFromBufferAttribute(position);\n\n      // process morph attributes if present\n\n      if (morphAttributesPosition) {\n        for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\n          const morphAttribute = morphAttributesPosition[i];\n          _boxMorphTargets.setFromBufferAttribute(morphAttribute);\n          if (this.morphTargetsRelative) {\n            _vector$8.addVectors(_box$2.min, _boxMorphTargets.min);\n            _box$2.expandByPoint(_vector$8);\n            _vector$8.addVectors(_box$2.max, _boxMorphTargets.max);\n            _box$2.expandByPoint(_vector$8);\n          } else {\n            _box$2.expandByPoint(_boxMorphTargets.min);\n            _box$2.expandByPoint(_boxMorphTargets.max);\n          }\n        }\n      }\n      _box$2.getCenter(center);\n\n      // second, try to find a boundingSphere with a radius smaller than the\n      // boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n      let maxRadiusSq = 0;\n      for (let i = 0, il = position.count; i < il; i++) {\n        _vector$8.fromBufferAttribute(position, i);\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));\n      }\n\n      // process morph attributes if present\n\n      if (morphAttributesPosition) {\n        for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\n          const morphAttribute = morphAttributesPosition[i];\n          const morphTargetsRelative = this.morphTargetsRelative;\n          for (let j = 0, jl = morphAttribute.count; j < jl; j++) {\n            _vector$8.fromBufferAttribute(morphAttribute, j);\n            if (morphTargetsRelative) {\n              _offset.fromBufferAttribute(position, j);\n              _vector$8.add(_offset);\n            }\n            maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));\n          }\n        }\n      }\n      this.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n      if (isNaN(this.boundingSphere.radius)) {\n        console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this);\n      }\n    }\n  }\n\n  /**\n   * Calculates and adds a tangent attribute to this geometry.\n   *\n   * The computation is only supported for indexed geometries and if position, normal, and uv attributes\n   * are defined. When using a tangent space normal map, prefer the MikkTSpace algorithm provided by\n   * {@link BufferGeometryUtils#computeMikkTSpaceTangents} instead.\n   */\n  computeTangents() {\n    const index = this.index;\n    const attributes = this.attributes;\n\n    // based on http://www.terathon.com/code/tangent.html\n    // (per vertex tangents)\n\n    if (index === null || attributes.position === undefined || attributes.normal === undefined || attributes.uv === undefined) {\n      console.error('THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)');\n      return;\n    }\n    const positionAttribute = attributes.position;\n    const normalAttribute = attributes.normal;\n    const uvAttribute = attributes.uv;\n    if (this.hasAttribute('tangent') === false) {\n      this.setAttribute('tangent', new BufferAttribute(new Float32Array(4 * positionAttribute.count), 4));\n    }\n    const tangentAttribute = this.getAttribute('tangent');\n    const tan1 = [],\n      tan2 = [];\n    for (let i = 0; i < positionAttribute.count; i++) {\n      tan1[i] = new Vector3();\n      tan2[i] = new Vector3();\n    }\n    const vA = new Vector3(),\n      vB = new Vector3(),\n      vC = new Vector3(),\n      uvA = new Vector2(),\n      uvB = new Vector2(),\n      uvC = new Vector2(),\n      sdir = new Vector3(),\n      tdir = new Vector3();\n    function handleTriangle(a, b, c) {\n      vA.fromBufferAttribute(positionAttribute, a);\n      vB.fromBufferAttribute(positionAttribute, b);\n      vC.fromBufferAttribute(positionAttribute, c);\n      uvA.fromBufferAttribute(uvAttribute, a);\n      uvB.fromBufferAttribute(uvAttribute, b);\n      uvC.fromBufferAttribute(uvAttribute, c);\n      vB.sub(vA);\n      vC.sub(vA);\n      uvB.sub(uvA);\n      uvC.sub(uvA);\n      const r = 1.0 / (uvB.x * uvC.y - uvC.x * uvB.y);\n\n      // silently ignore degenerate uv triangles having coincident or colinear vertices\n\n      if (!isFinite(r)) return;\n      sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);\n      tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);\n      tan1[a].add(sdir);\n      tan1[b].add(sdir);\n      tan1[c].add(sdir);\n      tan2[a].add(tdir);\n      tan2[b].add(tdir);\n      tan2[c].add(tdir);\n    }\n    let groups = this.groups;\n    if (groups.length === 0) {\n      groups = [{\n        start: 0,\n        count: index.count\n      }];\n    }\n    for (let i = 0, il = groups.length; i < il; ++i) {\n      const group = groups[i];\n      const start = group.start;\n      const count = group.count;\n      for (let j = start, jl = start + count; j < jl; j += 3) {\n        handleTriangle(index.getX(j + 0), index.getX(j + 1), index.getX(j + 2));\n      }\n    }\n    const tmp = new Vector3(),\n      tmp2 = new Vector3();\n    const n = new Vector3(),\n      n2 = new Vector3();\n    function handleVertex(v) {\n      n.fromBufferAttribute(normalAttribute, v);\n      n2.copy(n);\n      const t = tan1[v];\n\n      // Gram-Schmidt orthogonalize\n\n      tmp.copy(t);\n      tmp.sub(n.multiplyScalar(n.dot(t))).normalize();\n\n      // Calculate handedness\n\n      tmp2.crossVectors(n2, t);\n      const test = tmp2.dot(tan2[v]);\n      const w = test < 0.0 ? -1 : 1.0;\n      tangentAttribute.setXYZW(v, tmp.x, tmp.y, tmp.z, w);\n    }\n    for (let i = 0, il = groups.length; i < il; ++i) {\n      const group = groups[i];\n      const start = group.start;\n      const count = group.count;\n      for (let j = start, jl = start + count; j < jl; j += 3) {\n        handleVertex(index.getX(j + 0));\n        handleVertex(index.getX(j + 1));\n        handleVertex(index.getX(j + 2));\n      }\n    }\n  }\n\n  /**\n   * Computes vertex normals for the given vertex data. For indexed geometries, the method sets\n   * each vertex normal to be the average of the face normals of the faces that share that vertex.\n   * For non-indexed geometries, vertices are not shared, and the method sets each vertex normal\n   * to be the same as the face normal.\n   */\n  computeVertexNormals() {\n    const index = this.index;\n    const positionAttribute = this.getAttribute('position');\n    if (positionAttribute !== undefined) {\n      let normalAttribute = this.getAttribute('normal');\n      if (normalAttribute === undefined) {\n        normalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);\n        this.setAttribute('normal', normalAttribute);\n      } else {\n        // reset existing normals to zero\n\n        for (let i = 0, il = normalAttribute.count; i < il; i++) {\n          normalAttribute.setXYZ(i, 0, 0, 0);\n        }\n      }\n      const pA = new Vector3(),\n        pB = new Vector3(),\n        pC = new Vector3();\n      const nA = new Vector3(),\n        nB = new Vector3(),\n        nC = new Vector3();\n      const cb = new Vector3(),\n        ab = new Vector3();\n\n      // indexed elements\n\n      if (index) {\n        for (let i = 0, il = index.count; i < il; i += 3) {\n          const vA = index.getX(i + 0);\n          const vB = index.getX(i + 1);\n          const vC = index.getX(i + 2);\n          pA.fromBufferAttribute(positionAttribute, vA);\n          pB.fromBufferAttribute(positionAttribute, vB);\n          pC.fromBufferAttribute(positionAttribute, vC);\n          cb.subVectors(pC, pB);\n          ab.subVectors(pA, pB);\n          cb.cross(ab);\n          nA.fromBufferAttribute(normalAttribute, vA);\n          nB.fromBufferAttribute(normalAttribute, vB);\n          nC.fromBufferAttribute(normalAttribute, vC);\n          nA.add(cb);\n          nB.add(cb);\n          nC.add(cb);\n          normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);\n          normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);\n          normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);\n        }\n      } else {\n        // non-indexed elements (unconnected triangle soup)\n\n        for (let i = 0, il = positionAttribute.count; i < il; i += 3) {\n          pA.fromBufferAttribute(positionAttribute, i + 0);\n          pB.fromBufferAttribute(positionAttribute, i + 1);\n          pC.fromBufferAttribute(positionAttribute, i + 2);\n          cb.subVectors(pC, pB);\n          ab.subVectors(pA, pB);\n          cb.cross(ab);\n          normalAttribute.setXYZ(i + 0, cb.x, cb.y, cb.z);\n          normalAttribute.setXYZ(i + 1, cb.x, cb.y, cb.z);\n          normalAttribute.setXYZ(i + 2, cb.x, cb.y, cb.z);\n        }\n      }\n      this.normalizeNormals();\n      normalAttribute.needsUpdate = true;\n    }\n  }\n\n  /**\n   * Ensures every normal vector in a geometry will have a magnitude of `1`. This will\n   * correct lighting on the geometry surfaces.\n   */\n  normalizeNormals() {\n    const normals = this.attributes.normal;\n    for (let i = 0, il = normals.count; i < il; i++) {\n      _vector$8.fromBufferAttribute(normals, i);\n      _vector$8.normalize();\n      normals.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);\n    }\n  }\n\n  /**\n   * Return a new non-index version of this indexed geometry. If the geometry\n   * is already non-indexed, the method is a NOOP.\n   *\n   * @return {BufferGeometry} The non-indexed version of this indexed geometry.\n   */\n  toNonIndexed() {\n    function convertBufferAttribute(attribute, indices) {\n      const array = attribute.array;\n      const itemSize = attribute.itemSize;\n      const normalized = attribute.normalized;\n      const array2 = new array.constructor(indices.length * itemSize);\n      let index = 0,\n        index2 = 0;\n      for (let i = 0, l = indices.length; i < l; i++) {\n        if (attribute.isInterleavedBufferAttribute) {\n          index = indices[i] * attribute.data.stride + attribute.offset;\n        } else {\n          index = indices[i] * itemSize;\n        }\n        for (let j = 0; j < itemSize; j++) {\n          array2[index2++] = array[index++];\n        }\n      }\n      return new BufferAttribute(array2, itemSize, normalized);\n    }\n\n    //\n\n    if (this.index === null) {\n      console.warn('THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.');\n      return this;\n    }\n    const geometry2 = new BufferGeometry();\n    const indices = this.index.array;\n    const attributes = this.attributes;\n\n    // attributes\n\n    for (const name in attributes) {\n      const attribute = attributes[name];\n      const newAttribute = convertBufferAttribute(attribute, indices);\n      geometry2.setAttribute(name, newAttribute);\n    }\n\n    // morph attributes\n\n    const morphAttributes = this.morphAttributes;\n    for (const name in morphAttributes) {\n      const morphArray = [];\n      const morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes\n\n      for (let i = 0, il = morphAttribute.length; i < il; i++) {\n        const attribute = morphAttribute[i];\n        const newAttribute = convertBufferAttribute(attribute, indices);\n        morphArray.push(newAttribute);\n      }\n      geometry2.morphAttributes[name] = morphArray;\n    }\n    geometry2.morphTargetsRelative = this.morphTargetsRelative;\n\n    // groups\n\n    const groups = this.groups;\n    for (let i = 0, l = groups.length; i < l; i++) {\n      const group = groups[i];\n      geometry2.addGroup(group.start, group.count, group.materialIndex);\n    }\n    return geometry2;\n  }\n\n  /**\n   * Serializes the geometry into JSON.\n   *\n   * @return {Object} A JSON object representing the serialized geometry.\n   */\n  toJSON() {\n    const data = {\n      metadata: {\n        version: 4.6,\n        type: 'BufferGeometry',\n        generator: 'BufferGeometry.toJSON'\n      }\n    };\n\n    // standard BufferGeometry serialization\n\n    data.uuid = this.uuid;\n    data.type = this.type;\n    if (this.name !== '') data.name = this.name;\n    if (Object.keys(this.userData).length > 0) data.userData = this.userData;\n    if (this.parameters !== undefined) {\n      const parameters = this.parameters;\n      for (const key in parameters) {\n        if (parameters[key] !== undefined) data[key] = parameters[key];\n      }\n      return data;\n    }\n\n    // for simplicity the code assumes attributes are not shared across geometries, see #15811\n\n    data.data = {\n      attributes: {}\n    };\n    const index = this.index;\n    if (index !== null) {\n      data.data.index = {\n        type: index.array.constructor.name,\n        array: Array.prototype.slice.call(index.array)\n      };\n    }\n    const attributes = this.attributes;\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      data.data.attributes[key] = attribute.toJSON(data.data);\n    }\n    const morphAttributes = {};\n    let hasMorphAttributes = false;\n    for (const key in this.morphAttributes) {\n      const attributeArray = this.morphAttributes[key];\n      const array = [];\n      for (let i = 0, il = attributeArray.length; i < il; i++) {\n        const attribute = attributeArray[i];\n        array.push(attribute.toJSON(data.data));\n      }\n      if (array.length > 0) {\n        morphAttributes[key] = array;\n        hasMorphAttributes = true;\n      }\n    }\n    if (hasMorphAttributes) {\n      data.data.morphAttributes = morphAttributes;\n      data.data.morphTargetsRelative = this.morphTargetsRelative;\n    }\n    const groups = this.groups;\n    if (groups.length > 0) {\n      data.data.groups = JSON.parse(JSON.stringify(groups));\n    }\n    const boundingSphere = this.boundingSphere;\n    if (boundingSphere !== null) {\n      data.data.boundingSphere = {\n        center: boundingSphere.center.toArray(),\n        radius: boundingSphere.radius\n      };\n    }\n    return data;\n  }\n\n  /**\n   * Returns a new geometry with copied values from this instance.\n   *\n   * @return {BufferGeometry} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  /**\n   * Copies the values of the given geometry to this instance.\n   *\n   * @param {BufferGeometry} source - The geometry to copy.\n   * @return {BufferGeometry} A reference to this instance.\n   */\n  copy(source) {\n    // reset\n\n    this.index = null;\n    this.attributes = {};\n    this.morphAttributes = {};\n    this.groups = [];\n    this.boundingBox = null;\n    this.boundingSphere = null;\n\n    // used for storing cloned, shared data\n\n    const data = {};\n\n    // name\n\n    this.name = source.name;\n\n    // index\n\n    const index = source.index;\n    if (index !== null) {\n      this.setIndex(index.clone());\n    }\n\n    // attributes\n\n    const attributes = source.attributes;\n    for (const name in attributes) {\n      const attribute = attributes[name];\n      this.setAttribute(name, attribute.clone(data));\n    }\n\n    // morph attributes\n\n    const morphAttributes = source.morphAttributes;\n    for (const name in morphAttributes) {\n      const array = [];\n      const morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes\n\n      for (let i = 0, l = morphAttribute.length; i < l; i++) {\n        array.push(morphAttribute[i].clone(data));\n      }\n      this.morphAttributes[name] = array;\n    }\n    this.morphTargetsRelative = source.morphTargetsRelative;\n\n    // groups\n\n    const groups = source.groups;\n    for (let i = 0, l = groups.length; i < l; i++) {\n      const group = groups[i];\n      this.addGroup(group.start, group.count, group.materialIndex);\n    }\n\n    // bounding box\n\n    const boundingBox = source.boundingBox;\n    if (boundingBox !== null) {\n      this.boundingBox = boundingBox.clone();\n    }\n\n    // bounding sphere\n\n    const boundingSphere = source.boundingSphere;\n    if (boundingSphere !== null) {\n      this.boundingSphere = boundingSphere.clone();\n    }\n\n    // draw range\n\n    this.drawRange.start = source.drawRange.start;\n    this.drawRange.count = source.drawRange.count;\n\n    // user data\n\n    this.userData = source.userData;\n    return this;\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   *\n   * @fires BufferGeometry#dispose\n   */\n  dispose() {\n    this.dispatchEvent({\n      type: 'dispose'\n    });\n  }\n}\nconst _inverseMatrix$3 = /*@__PURE__*/new Matrix4();\nconst _ray$3 = /*@__PURE__*/new Ray();\nconst _sphere$6 = /*@__PURE__*/new Sphere();\nconst _sphereHitAt = /*@__PURE__*/new Vector3();\nconst _vA$1 = /*@__PURE__*/new Vector3();\nconst _vB$1 = /*@__PURE__*/new Vector3();\nconst _vC$1 = /*@__PURE__*/new Vector3();\nconst _tempA = /*@__PURE__*/new Vector3();\nconst _morphA = /*@__PURE__*/new Vector3();\nconst _intersectionPoint = /*@__PURE__*/new Vector3();\nconst _intersectionPointWorld = /*@__PURE__*/new Vector3();\n\n/**\n * Class representing triangular polygon mesh based objects.\n *\n * ```js\n * const geometry = new THREE.BoxGeometry( 1, 1, 1 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const mesh = new THREE.Mesh( geometry, material );\n * scene.add( mesh );\n * ```\n *\n * @augments Object3D\n */\nclass Mesh extends Object3D {\n  /**\n   * Constructs a new mesh.\n   *\n   * @param {BufferGeometry} [geometry] - The mesh geometry.\n   * @param {Material|Array<Material>} [material] - The mesh material.\n   */\n  constructor() {\n    let geometry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new BufferGeometry();\n    let material = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new MeshBasicMaterial();\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isMesh = true;\n    this.type = 'Mesh';\n\n    /**\n     * The mesh geometry.\n     *\n     * @type {BufferGeometry}\n     */\n    this.geometry = geometry;\n\n    /**\n     * The mesh material.\n     *\n     * @type {Material|Array<Material>}\n     * @default MeshBasicMaterial\n     */\n    this.material = material;\n\n    /**\n     * A dictionary representing the morph targets in the geometry. The key is the\n     * morph targets name, the value its attribute index. This member is `undefined`\n     * by default and only set when morph targets are detected in the geometry.\n     *\n     * @type {Object<String,number>|undefined}\n     * @default undefined\n     */\n    this.morphTargetDictionary = undefined;\n\n    /**\n     * An array of weights typically in the range `[0,1]` that specify how much of the morph\n     * is applied. This member is `undefined` by default and only set when morph targets are\n     * detected in the geometry.\n     *\n     * @type {Array<number>|undefined}\n     * @default undefined\n     */\n    this.morphTargetInfluences = undefined;\n    this.updateMorphTargets();\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    if (source.morphTargetInfluences !== undefined) {\n      this.morphTargetInfluences = source.morphTargetInfluences.slice();\n    }\n    if (source.morphTargetDictionary !== undefined) {\n      this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);\n    }\n    this.material = Array.isArray(source.material) ? source.material.slice() : source.material;\n    this.geometry = source.geometry;\n    return this;\n  }\n\n  /**\n   * Sets the values of {@link Mesh#morphTargetDictionary} and {@link Mesh#morphTargetInfluences}\n   * to make sure existing morph targets can influence this 3D object.\n   */\n  updateMorphTargets() {\n    const geometry = this.geometry;\n    const morphAttributes = geometry.morphAttributes;\n    const keys = Object.keys(morphAttributes);\n    if (keys.length > 0) {\n      const morphAttribute = morphAttributes[keys[0]];\n      if (morphAttribute !== undefined) {\n        this.morphTargetInfluences = [];\n        this.morphTargetDictionary = {};\n        for (let m = 0, ml = morphAttribute.length; m < ml; m++) {\n          const name = morphAttribute[m].name || String(m);\n          this.morphTargetInfluences.push(0);\n          this.morphTargetDictionary[name] = m;\n        }\n      }\n    }\n  }\n\n  /**\n   * Returns the local-space position of the vertex at the given index, taking into\n   * account the current animation state of both morph targets and skinning.\n   *\n   * @param {number} index - The vertex index.\n   * @param {Vector3} target - The target object that is used to store the method's result.\n   * @return {Vector3} The vertex position in local space.\n   */\n  getVertexPosition(index, target) {\n    const geometry = this.geometry;\n    const position = geometry.attributes.position;\n    const morphPosition = geometry.morphAttributes.position;\n    const morphTargetsRelative = geometry.morphTargetsRelative;\n    target.fromBufferAttribute(position, index);\n    const morphInfluences = this.morphTargetInfluences;\n    if (morphPosition && morphInfluences) {\n      _morphA.set(0, 0, 0);\n      for (let i = 0, il = morphPosition.length; i < il; i++) {\n        const influence = morphInfluences[i];\n        const morphAttribute = morphPosition[i];\n        if (influence === 0) continue;\n        _tempA.fromBufferAttribute(morphAttribute, index);\n        if (morphTargetsRelative) {\n          _morphA.addScaledVector(_tempA, influence);\n        } else {\n          _morphA.addScaledVector(_tempA.sub(target), influence);\n        }\n      }\n      target.add(_morphA);\n    }\n    return target;\n  }\n\n  /**\n   * Computes intersection points between a casted ray and this line.\n   *\n   * @param {Raycaster} raycaster - The raycaster.\n   * @param {Array<Object>} intersects - The target array that holds the intersection points.\n   */\n  raycast(raycaster, intersects) {\n    const geometry = this.geometry;\n    const material = this.material;\n    const matrixWorld = this.matrixWorld;\n    if (material === undefined) return;\n\n    // test with bounding sphere in world space\n\n    if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n    _sphere$6.copy(geometry.boundingSphere);\n    _sphere$6.applyMatrix4(matrixWorld);\n\n    // check distance from ray origin to bounding sphere\n\n    _ray$3.copy(raycaster.ray).recast(raycaster.near);\n    if (_sphere$6.containsPoint(_ray$3.origin) === false) {\n      if (_ray$3.intersectSphere(_sphere$6, _sphereHitAt) === null) return;\n      if (_ray$3.origin.distanceToSquared(_sphereHitAt) > (raycaster.far - raycaster.near) ** 2) return;\n    }\n\n    // convert ray to local space of mesh\n\n    _inverseMatrix$3.copy(matrixWorld).invert();\n    _ray$3.copy(raycaster.ray).applyMatrix4(_inverseMatrix$3);\n\n    // test with bounding box in local space\n\n    if (geometry.boundingBox !== null) {\n      if (_ray$3.intersectsBox(geometry.boundingBox) === false) return;\n    }\n\n    // test for intersections with geometry\n\n    this._computeIntersections(raycaster, intersects, _ray$3);\n  }\n  _computeIntersections(raycaster, intersects, rayLocalSpace) {\n    let intersection;\n    const geometry = this.geometry;\n    const material = this.material;\n    const index = geometry.index;\n    const position = geometry.attributes.position;\n    const uv = geometry.attributes.uv;\n    const uv1 = geometry.attributes.uv1;\n    const normal = geometry.attributes.normal;\n    const groups = geometry.groups;\n    const drawRange = geometry.drawRange;\n    if (index !== null) {\n      // indexed buffer geometry\n\n      if (Array.isArray(material)) {\n        for (let i = 0, il = groups.length; i < il; i++) {\n          const group = groups[i];\n          const groupMaterial = material[group.materialIndex];\n          const start = Math.max(group.start, drawRange.start);\n          const end = Math.min(index.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));\n          for (let j = start, jl = end; j < jl; j += 3) {\n            const a = index.getX(j);\n            const b = index.getX(j + 1);\n            const c = index.getX(j + 2);\n            intersection = checkGeometryIntersection(this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);\n            if (intersection) {\n              intersection.faceIndex = Math.floor(j / 3); // triangle number in indexed buffer semantics\n              intersection.face.materialIndex = group.materialIndex;\n              intersects.push(intersection);\n            }\n          }\n        }\n      } else {\n        const start = Math.max(0, drawRange.start);\n        const end = Math.min(index.count, drawRange.start + drawRange.count);\n        for (let i = start, il = end; i < il; i += 3) {\n          const a = index.getX(i);\n          const b = index.getX(i + 1);\n          const c = index.getX(i + 2);\n          intersection = checkGeometryIntersection(this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);\n          if (intersection) {\n            intersection.faceIndex = Math.floor(i / 3); // triangle number in indexed buffer semantics\n            intersects.push(intersection);\n          }\n        }\n      }\n    } else if (position !== undefined) {\n      // non-indexed buffer geometry\n\n      if (Array.isArray(material)) {\n        for (let i = 0, il = groups.length; i < il; i++) {\n          const group = groups[i];\n          const groupMaterial = material[group.materialIndex];\n          const start = Math.max(group.start, drawRange.start);\n          const end = Math.min(position.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));\n          for (let j = start, jl = end; j < jl; j += 3) {\n            const a = j;\n            const b = j + 1;\n            const c = j + 2;\n            intersection = checkGeometryIntersection(this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);\n            if (intersection) {\n              intersection.faceIndex = Math.floor(j / 3); // triangle number in non-indexed buffer semantics\n              intersection.face.materialIndex = group.materialIndex;\n              intersects.push(intersection);\n            }\n          }\n        }\n      } else {\n        const start = Math.max(0, drawRange.start);\n        const end = Math.min(position.count, drawRange.start + drawRange.count);\n        for (let i = start, il = end; i < il; i += 3) {\n          const a = i;\n          const b = i + 1;\n          const c = i + 2;\n          intersection = checkGeometryIntersection(this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);\n          if (intersection) {\n            intersection.faceIndex = Math.floor(i / 3); // triangle number in non-indexed buffer semantics\n            intersects.push(intersection);\n          }\n        }\n      }\n    }\n  }\n}\nfunction checkIntersection$1(object, material, raycaster, ray, pA, pB, pC, point) {\n  let intersect;\n  if (material.side === BackSide) {\n    intersect = ray.intersectTriangle(pC, pB, pA, true, point);\n  } else {\n    intersect = ray.intersectTriangle(pA, pB, pC, material.side === FrontSide, point);\n  }\n  if (intersect === null) return null;\n  _intersectionPointWorld.copy(point);\n  _intersectionPointWorld.applyMatrix4(object.matrixWorld);\n  const distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);\n  if (distance < raycaster.near || distance > raycaster.far) return null;\n  return {\n    distance: distance,\n    point: _intersectionPointWorld.clone(),\n    object: object\n  };\n}\nfunction checkGeometryIntersection(object, material, raycaster, ray, uv, uv1, normal, a, b, c) {\n  object.getVertexPosition(a, _vA$1);\n  object.getVertexPosition(b, _vB$1);\n  object.getVertexPosition(c, _vC$1);\n  const intersection = checkIntersection$1(object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint);\n  if (intersection) {\n    const barycoord = new Vector3();\n    Triangle.getBarycoord(_intersectionPoint, _vA$1, _vB$1, _vC$1, barycoord);\n    if (uv) {\n      intersection.uv = Triangle.getInterpolatedAttribute(uv, a, b, c, barycoord, new Vector2());\n    }\n    if (uv1) {\n      intersection.uv1 = Triangle.getInterpolatedAttribute(uv1, a, b, c, barycoord, new Vector2());\n    }\n    if (normal) {\n      intersection.normal = Triangle.getInterpolatedAttribute(normal, a, b, c, barycoord, new Vector3());\n      if (intersection.normal.dot(ray.direction) > 0) {\n        intersection.normal.multiplyScalar(-1);\n      }\n    }\n    const face = {\n      a: a,\n      b: b,\n      c: c,\n      normal: new Vector3(),\n      materialIndex: 0\n    };\n    Triangle.getNormal(_vA$1, _vB$1, _vC$1, face.normal);\n    intersection.face = face;\n    intersection.barycoord = barycoord;\n  }\n  return intersection;\n}\n\n/**\n * A geometry class for a rectangular cuboid with a given width, height, and depth.\n * On creation, the cuboid is centred on the origin, with each edge parallel to one\n * of the axes.\n *\n * ```js\n * const geometry = new THREE.BoxGeometry( 1, 1, 1 );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n * const cube = new THREE.Mesh( geometry, material );\n * scene.add( cube );\n * ```\n *\n * @augments BufferGeometry\n */\nclass BoxGeometry extends BufferGeometry {\n  /**\n   * Constructs a new box geometry.\n   *\n   * @param {number} [width=1] - The width. That is, the length of the edges parallel to the X axis.\n   * @param {number} [height=1] - The height. That is, the length of the edges parallel to the Y axis.\n   * @param {number} [depth=1] - The depth. That is, the length of the edges parallel to the Z axis.\n   * @param {number} [widthSegments=1] - Number of segmented rectangular faces along the width of the sides.\n   * @param {number} [heightSegments=1] - Number of segmented rectangular faces along the height of the sides.\n   * @param {number} [depthSegments=1] - Number of segmented rectangular faces along the depth of the sides.\n   */\n  constructor() {\n    let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let widthSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    let heightSegments = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n    let depthSegments = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n    super();\n    this.type = 'BoxGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      width: width,\n      height: height,\n      depth: depth,\n      widthSegments: widthSegments,\n      heightSegments: heightSegments,\n      depthSegments: depthSegments\n    };\n    const scope = this;\n\n    // segments\n\n    widthSegments = Math.floor(widthSegments);\n    heightSegments = Math.floor(heightSegments);\n    depthSegments = Math.floor(depthSegments);\n\n    // buffers\n\n    const indices = [];\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n\n    // helper variables\n\n    let numberOfVertices = 0;\n    let groupStart = 0;\n\n    // build each side of the box geometry\n\n    buildPlane('z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px\n    buildPlane('z', 'y', 'x', 1, -1, depth, height, -width, depthSegments, heightSegments, 1); // nx\n    buildPlane('x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py\n    buildPlane('x', 'z', 'y', 1, -1, width, depth, -height, widthSegments, depthSegments, 3); // ny\n    buildPlane('x', 'y', 'z', 1, -1, width, height, depth, widthSegments, heightSegments, 4); // pz\n    buildPlane('x', 'y', 'z', -1, -1, width, height, -depth, widthSegments, heightSegments, 5); // nz\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n    function buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {\n      const segmentWidth = width / gridX;\n      const segmentHeight = height / gridY;\n      const widthHalf = width / 2;\n      const heightHalf = height / 2;\n      const depthHalf = depth / 2;\n      const gridX1 = gridX + 1;\n      const gridY1 = gridY + 1;\n      let vertexCounter = 0;\n      let groupCount = 0;\n      const vector = new Vector3();\n\n      // generate vertices, normals and uvs\n\n      for (let iy = 0; iy < gridY1; iy++) {\n        const y = iy * segmentHeight - heightHalf;\n        for (let ix = 0; ix < gridX1; ix++) {\n          const x = ix * segmentWidth - widthHalf;\n\n          // set values to correct vector component\n\n          vector[u] = x * udir;\n          vector[v] = y * vdir;\n          vector[w] = depthHalf;\n\n          // now apply vector to vertex buffer\n\n          vertices.push(vector.x, vector.y, vector.z);\n\n          // set values to correct vector component\n\n          vector[u] = 0;\n          vector[v] = 0;\n          vector[w] = depth > 0 ? 1 : -1;\n\n          // now apply vector to normal buffer\n\n          normals.push(vector.x, vector.y, vector.z);\n\n          // uvs\n\n          uvs.push(ix / gridX);\n          uvs.push(1 - iy / gridY);\n\n          // counters\n\n          vertexCounter += 1;\n        }\n      }\n\n      // indices\n\n      // 1. you need three indices to draw a single face\n      // 2. a single segment consists of two faces\n      // 3. so we need to generate six (2*3) indices per segment\n\n      for (let iy = 0; iy < gridY; iy++) {\n        for (let ix = 0; ix < gridX; ix++) {\n          const a = numberOfVertices + ix + gridX1 * iy;\n          const b = numberOfVertices + ix + gridX1 * (iy + 1);\n          const c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);\n          const d = numberOfVertices + (ix + 1) + gridX1 * iy;\n\n          // faces\n\n          indices.push(a, b, d);\n          indices.push(b, c, d);\n\n          // increase counter\n\n          groupCount += 6;\n        }\n      }\n\n      // add a group to the geometry. this will ensure multi material support\n\n      scope.addGroup(groupStart, groupCount, materialIndex);\n\n      // calculate new start value for groups\n\n      groupStart += groupCount;\n\n      // update total number of vertices\n\n      numberOfVertices += vertexCounter;\n    }\n  }\n  copy(source) {\n    super.copy(source);\n    this.parameters = Object.assign({}, source.parameters);\n    return this;\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @return {BoxGeometry} A new instance.\n   */\n  static fromJSON(data) {\n    return new BoxGeometry(data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);\n  }\n}\n\n// Uniform Utilities\n\nfunction cloneUniforms(src) {\n  const dst = {};\n  for (const u in src) {\n    dst[u] = {};\n    for (const p in src[u]) {\n      const property = src[u][p];\n      if (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) {\n        if (property.isRenderTargetTexture) {\n          console.warn('UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().');\n          dst[u][p] = null;\n        } else {\n          dst[u][p] = property.clone();\n        }\n      } else if (Array.isArray(property)) {\n        dst[u][p] = property.slice();\n      } else {\n        dst[u][p] = property;\n      }\n    }\n  }\n  return dst;\n}\nfunction mergeUniforms(uniforms) {\n  const merged = {};\n  for (let u = 0; u < uniforms.length; u++) {\n    const tmp = cloneUniforms(uniforms[u]);\n    for (const p in tmp) {\n      merged[p] = tmp[p];\n    }\n  }\n  return merged;\n}\nfunction cloneUniformsGroups(src) {\n  const dst = [];\n  for (let u = 0; u < src.length; u++) {\n    dst.push(src[u].clone());\n  }\n  return dst;\n}\nfunction getUnlitUniformColorSpace(renderer) {\n  const currentRenderTarget = renderer.getRenderTarget();\n  if (currentRenderTarget === null) {\n    // https://github.com/mrdoob/three.js/pull/23937#issuecomment-1111067398\n    return renderer.outputColorSpace;\n  }\n\n  // https://github.com/mrdoob/three.js/issues/27868\n  if (currentRenderTarget.isXRRenderTarget === true) {\n    return currentRenderTarget.texture.colorSpace;\n  }\n  return ColorManagement.workingColorSpace;\n}\n\n// Legacy\n\nconst UniformsUtils = {\n  clone: cloneUniforms,\n  merge: mergeUniforms\n};\nvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\nvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\n/**\n * A material rendered with custom shaders. A shader is a small program written in GLSL.\n * that runs on the GPU. You may want to use a custom shader if you need to implement an\n * effect not included with any of the built-in materials.\n *\n * There are the following notes to bear in mind when using a `ShaderMaterial`:\n *\n * - `ShaderMaterial` can only be used with {@link WebGLRenderer}.\n * - Built in attributes and uniforms are passed to the shaders along with your code. If\n * you don't want that, use {@link RawShaderMaterial} instead.\n * - You can use the directive `#pragma unroll_loop_start` and `#pragma unroll_loop_end`\n * in order to unroll a `for` loop in GLSL by the shader preprocessor. The directive has\n * to be placed right above the loop. The loop formatting has to correspond to a defined standard.\n *   - The loop has to be [normalized]{@link https://en.wikipedia.org/wiki/Normalized_loop}.\n *   - The loop variable has to be *i*.\n *   - The value `UNROLLED_LOOP_INDEX` will be replaced with the explicitly\n * value of *i* for the given iteration and can be used in preprocessor\n * statements.\n *\n * ```js\n * const material = new THREE.ShaderMaterial( {\n * \tuniforms: {\n * \t\ttime: { value: 1.0 },\n * \t\tresolution: { value: new THREE.Vector2() }\n * \t},\n * \tvertexShader: document.getElementById( 'vertexShader' ).textContent,\n * \tfragmentShader: document.getElementById( 'fragmentShader' ).textContent\n * } );\n * ```\n *\n * @augments Material\n */\nclass ShaderMaterial extends Material {\n  /**\n   * Constructs a new shader material.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isShaderMaterial = true;\n    this.type = 'ShaderMaterial';\n\n    /**\n     * Defines custom constants using `#define` directives within the GLSL code\n     * for both the vertex shader and the fragment shader; each key/value pair\n     * yields another directive.\n     * ```js\n     * defines: {\n     * \tFOO: 15,\n     * \tBAR: true\n     * }\n     * ```\n     * Yields the lines:\n     * ```\n     * #define FOO 15\n     * #define BAR true\n     * ```\n     *\n     * @type {Object}\n     */\n    this.defines = {};\n\n    /**\n     * An object of the form:\n     * ```js\n     * {\n     * \t\"uniform1\": { value: 1.0 },\n     * \t\"uniform2\": { value: 2 }\n     * }\n     * ```\n     * specifying the uniforms to be passed to the shader code; keys are uniform\n     * names, values are definitions of the form\n     * ```\n     * {\n     * \tvalue: 1.0\n     * }\n     * ```\n     * where `value` is the value of the uniform. Names must match the name of\n     * the uniform, as defined in the GLSL code. Note that uniforms are refreshed\n     * on every frame, so updating the value of the uniform will immediately\n     * update the value available to the GLSL code.\n     *\n     * @type {Object}\n     */\n    this.uniforms = {};\n\n    /**\n     * An array holding uniforms groups for configuring UBOs.\n     *\n     * @type {Array<UniformsGroup>}\n     */\n    this.uniformsGroups = [];\n\n    /**\n     * Vertex shader GLSL code. This is the actual code for the shader.\n     *\n     * @type {string}\n     */\n    this.vertexShader = default_vertex;\n\n    /**\n     * Fragment shader GLSL code. This is the actual code for the shader.\n     *\n     * @type {string}\n     */\n    this.fragmentShader = default_fragment;\n\n    /**\n     * Controls line thickness or lines.\n     *\n     * WebGL and WebGPU ignore this setting and always render line primitives with a\n     * width of one pixel.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.linewidth = 1;\n\n    /**\n     * Renders the geometry as a wireframe.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.wireframe = false;\n\n    /**\n     * Controls the thickness of the wireframe.\n     *\n     * WebGL and WebGPU ignore this property and always render\n     * 1 pixel wide lines.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.wireframeLinewidth = 1;\n\n    /**\n     * Define whether the material color is affected by global fog settings; `true`\n     * to pass fog uniforms to the shader.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.fog = false;\n\n    /**\n     * Defines whether this material uses lighting; `true` to pass uniform data\n     * related to lighting to this shader.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.lights = false;\n\n    /**\n     * Defines whether this material supports clipping; `true` to let the renderer\n     * pass the clippingPlanes uniform.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.clipping = false;\n\n    /**\n     * Overwritten and set to `true` by default.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.forceSinglePass = true;\n\n    /**\n     * This object allows to enable certain WebGL 2 extensions.\n     *\n     * - clipCullDistance: set to `true` to use vertex shader clipping\n     * - multiDraw: set to `true` to use vertex shader multi_draw / enable gl_DrawID\n     *\n     * @type {{clipCullDistance:false,multiDraw:false}}\n     */\n    this.extensions = {\n      clipCullDistance: false,\n      // set to use vertex shader clipping\n      multiDraw: false // set to use vertex shader multi_draw / enable gl_DrawID\n    };\n\n    /**\n     * When the rendered geometry doesn't include these attributes but the\n     * material does, these default values will be passed to the shaders. This\n     * avoids errors when buffer data is missing.\n     *\n     * - color: [ 1, 1, 1 ]\n     * - uv: [ 0, 0 ]\n     * - uv1: [ 0, 0 ]\n     *\n     * @type {Object}\n     */\n    this.defaultAttributeValues = {\n      'color': [1, 1, 1],\n      'uv': [0, 0],\n      'uv1': [0, 0]\n    };\n\n    /**\n     * If set, this calls [gl.bindAttribLocation]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindAttribLocation}\n     * to bind a generic vertex index to an attribute variable.\n     *\n     * @type {string|undefined}\n     * @default undefined\n     */\n    this.index0AttributeName = undefined;\n\n    /**\n     * Can be used to force a uniform update while changing uniforms in\n     * {@link Object3D#onBeforeRender}.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.uniformsNeedUpdate = false;\n\n    /**\n     * Defines the GLSL version of custom shader code.\n     *\n     * @type {?(GLSL1|GLSL3)}\n     * @default null\n     */\n    this.glslVersion = null;\n    if (parameters !== undefined) {\n      this.setValues(parameters);\n    }\n  }\n  copy(source) {\n    super.copy(source);\n    this.fragmentShader = source.fragmentShader;\n    this.vertexShader = source.vertexShader;\n    this.uniforms = cloneUniforms(source.uniforms);\n    this.uniformsGroups = cloneUniformsGroups(source.uniformsGroups);\n    this.defines = Object.assign({}, source.defines);\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    this.fog = source.fog;\n    this.lights = source.lights;\n    this.clipping = source.clipping;\n    this.extensions = Object.assign({}, source.extensions);\n    this.glslVersion = source.glslVersion;\n    return this;\n  }\n  toJSON(meta) {\n    const data = super.toJSON(meta);\n    data.glslVersion = this.glslVersion;\n    data.uniforms = {};\n    for (const name in this.uniforms) {\n      const uniform = this.uniforms[name];\n      const value = uniform.value;\n      if (value && value.isTexture) {\n        data.uniforms[name] = {\n          type: 't',\n          value: value.toJSON(meta).uuid\n        };\n      } else if (value && value.isColor) {\n        data.uniforms[name] = {\n          type: 'c',\n          value: value.getHex()\n        };\n      } else if (value && value.isVector2) {\n        data.uniforms[name] = {\n          type: 'v2',\n          value: value.toArray()\n        };\n      } else if (value && value.isVector3) {\n        data.uniforms[name] = {\n          type: 'v3',\n          value: value.toArray()\n        };\n      } else if (value && value.isVector4) {\n        data.uniforms[name] = {\n          type: 'v4',\n          value: value.toArray()\n        };\n      } else if (value && value.isMatrix3) {\n        data.uniforms[name] = {\n          type: 'm3',\n          value: value.toArray()\n        };\n      } else if (value && value.isMatrix4) {\n        data.uniforms[name] = {\n          type: 'm4',\n          value: value.toArray()\n        };\n      } else {\n        data.uniforms[name] = {\n          value: value\n        };\n\n        // note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n      }\n    }\n    if (Object.keys(this.defines).length > 0) data.defines = this.defines;\n    data.vertexShader = this.vertexShader;\n    data.fragmentShader = this.fragmentShader;\n    data.lights = this.lights;\n    data.clipping = this.clipping;\n    const extensions = {};\n    for (const key in this.extensions) {\n      if (this.extensions[key] === true) extensions[key] = true;\n    }\n    if (Object.keys(extensions).length > 0) data.extensions = extensions;\n    return data;\n  }\n}\n\n/**\n * Abstract base class for cameras. This class should always be inherited\n * when you build a new camera.\n *\n * @abstract\n * @augments Object3D\n */\nclass Camera extends Object3D {\n  /**\n   * Constructs a new camera.\n   */\n  constructor() {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isCamera = true;\n    this.type = 'Camera';\n\n    /**\n     * The inverse of the camera's world matrix.\n     *\n     * @type {Matrix4}\n     */\n    this.matrixWorldInverse = new Matrix4();\n\n    /**\n     * The camera's projection matrix.\n     *\n     * @type {Matrix4}\n     */\n    this.projectionMatrix = new Matrix4();\n\n    /**\n     * The inverse of the camera's projection matrix.\n     *\n     * @type {Matrix4}\n     */\n    this.projectionMatrixInverse = new Matrix4();\n\n    /**\n     * The coordinate system in which the camera is used.\n     *\n     * @type {(WebGLCoordinateSystem|WebGPUCoordinateSystem)}\n     */\n    this.coordinateSystem = WebGLCoordinateSystem;\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.matrixWorldInverse.copy(source.matrixWorldInverse);\n    this.projectionMatrix.copy(source.projectionMatrix);\n    this.projectionMatrixInverse.copy(source.projectionMatrixInverse);\n    this.coordinateSystem = source.coordinateSystem;\n    return this;\n  }\n\n  /**\n   * Returns a vector representing the (\"look\") direction of the 3D object in world space.\n   *\n   * This method is overwritten since cameras have a different forward vector compared to other\n   * 3D objects. A camera looks down its local, negative z-axis by default.\n   *\n   * @param {Vector3} target - The target vector the result is stored to.\n   * @return {Vector3} The 3D object's direction in world space.\n   */\n  getWorldDirection(target) {\n    return super.getWorldDirection(target).negate();\n  }\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    this.matrixWorldInverse.copy(this.matrixWorld).invert();\n  }\n  updateWorldMatrix(updateParents, updateChildren) {\n    super.updateWorldMatrix(updateParents, updateChildren);\n    this.matrixWorldInverse.copy(this.matrixWorld).invert();\n  }\n  clone() {\n    return new this.constructor().copy(this);\n  }\n}\nconst _v3$1 = /*@__PURE__*/new Vector3();\nconst _minTarget = /*@__PURE__*/new Vector2();\nconst _maxTarget = /*@__PURE__*/new Vector2();\n\n/**\n * Camera that uses [perspective projection]{@link https://en.wikipedia.org/wiki/Perspective_(graphical)}.\n *\n * This projection mode is designed to mimic the way the human eye sees. It\n * is the most common projection mode used for rendering a 3D scene.\n *\n * ```js\n * const camera = new THREE.PerspectiveCamera( 45, width / height, 1, 1000 );\n * scene.add( camera );\n * ```\n *\n * @augments Camera\n */\nclass PerspectiveCamera extends Camera {\n  /**\n   * Constructs a new perspective camera.\n   *\n   * @param {number} [fov=50] - The vertical field of view.\n   * @param {number} [aspect=1] - The aspect ratio.\n   * @param {number} [near=0.1] - The camera's near plane.\n   * @param {number} [far=2000] - The camera's far plane.\n   */\n  constructor() {\n    let fov = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n    let aspect = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let near = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.1;\n    let far = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2000;\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isPerspectiveCamera = true;\n    this.type = 'PerspectiveCamera';\n\n    /**\n     * The vertical field of view, from bottom to top of view,\n     * in degrees.\n     *\n     * @type {number}\n     * @default 50\n     */\n    this.fov = fov;\n\n    /**\n     * The zoom factor of the camera.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.zoom = 1;\n\n    /**\n     * The camera's near plane. The valid range is greater than `0`\n     * and less than the current value of {@link PerspectiveCamera#far}.\n     *\n     * Note that, unlike for the {@link OrthographicCamera}, `0` is <em>not</em> a\n     * valid value for a perspective camera's near plane.\n     *\n     * @type {number}\n     * @default 0.1\n     */\n    this.near = near;\n\n    /**\n     * The camera's far plane. Must be greater than the\n     * current value of {@link PerspectiveCamera#near}.\n     *\n     * @type {number}\n     * @default 2000\n     */\n    this.far = far;\n\n    /**\n     * Object distance used for stereoscopy and depth-of-field effects. This\n     * parameter does not influence the projection matrix unless a\n     * {@link StereoCamera} is being used.\n     *\n     * @type {number}\n     * @default 10\n     */\n    this.focus = 10;\n\n    /**\n     * The aspect ratio, usually the canvas width / canvas height.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.aspect = aspect;\n\n    /**\n     * Represents the frustum window specification. This property should not be edited\n     * directly but via {@link PerspectiveCamera#setViewOffset} and {@link PerspectiveCamera#clearViewOffset}.\n     *\n     * @type {?Object}\n     * @default null\n     */\n    this.view = null;\n\n    /**\n     * Film size used for the larger axis. Default is `35` (millimeters). This\n     * parameter does not influence the projection matrix unless {@link PerspectiveCamera#filmOffset}\n     * is set to a nonzero value.\n     *\n     * @type {number}\n     * @default 35\n     */\n    this.filmGauge = 35;\n\n    /**\n     * Horizontal off-center offset in the same unit as {@link PerspectiveCamera#filmGauge}.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.filmOffset = 0;\n    this.updateProjectionMatrix();\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.fov = source.fov;\n    this.zoom = source.zoom;\n    this.near = source.near;\n    this.far = source.far;\n    this.focus = source.focus;\n    this.aspect = source.aspect;\n    this.view = source.view === null ? null : Object.assign({}, source.view);\n    this.filmGauge = source.filmGauge;\n    this.filmOffset = source.filmOffset;\n    return this;\n  }\n\n  /**\n   * Sets the FOV by focal length in respect to the current {@link PerspectiveCamera#filmGauge}.\n   *\n   * The default film gauge is 35, so that the focal length can be specified for\n   * a 35mm (full frame) camera.\n   *\n   * @param {number} focalLength - Values for focal length and film gauge must have the same unit.\n   */\n  setFocalLength(focalLength) {\n    /** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */\n    const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n    this.fov = RAD2DEG * 2 * Math.atan(vExtentSlope);\n    this.updateProjectionMatrix();\n  }\n\n  /**\n   * Returns the focal length from the current {@link PerspectiveCamera#fov} and\n   * {@link PerspectiveCamera#filmGauge}.\n   *\n   * @return {number} The computed focal length.\n   */\n  getFocalLength() {\n    const vExtentSlope = Math.tan(DEG2RAD * 0.5 * this.fov);\n    return 0.5 * this.getFilmHeight() / vExtentSlope;\n  }\n\n  /**\n   * Returns the current vertical field of view angle in degrees considering {@link PerspectiveCamera#zoom}.\n   *\n   * @return {number} The effective FOV.\n   */\n  getEffectiveFOV() {\n    return RAD2DEG * 2 * Math.atan(Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom);\n  }\n\n  /**\n   * Returns the width of the image on the film. If {@link PerspectiveCamera#aspect} is greater than or\n   * equal to one (landscape format), the result equals {@link PerspectiveCamera#filmGauge}.\n   *\n   * @return {number} The film width.\n   */\n  getFilmWidth() {\n    // film not completely covered in portrait format (aspect < 1)\n    return this.filmGauge * Math.min(this.aspect, 1);\n  }\n\n  /**\n   * Returns the height of the image on the film. If {@link PerspectiveCamera#aspect} is greater than or\n   * equal to one (landscape format), the result equals {@link PerspectiveCamera#filmGauge}.\n   *\n   * @return {number} The film width.\n   */\n  getFilmHeight() {\n    // film not completely covered in landscape format (aspect > 1)\n    return this.filmGauge / Math.max(this.aspect, 1);\n  }\n\n  /**\n   * Computes the 2D bounds of the camera's viewable rectangle at a given distance along the viewing direction.\n   * Sets `minTarget` and `maxTarget` to the coordinates of the lower-left and upper-right corners of the view rectangle.\n   *\n   * @param {number} distance - The viewing distance.\n   * @param {Vector2} minTarget - The lower-left corner of the view rectangle is written into this vector.\n   * @param {Vector2} maxTarget - The upper-right corner of the view rectangle is written into this vector.\n   */\n  getViewBounds(distance, minTarget, maxTarget) {\n    _v3$1.set(-1, -1, 0.5).applyMatrix4(this.projectionMatrixInverse);\n    minTarget.set(_v3$1.x, _v3$1.y).multiplyScalar(-distance / _v3$1.z);\n    _v3$1.set(1, 1, 0.5).applyMatrix4(this.projectionMatrixInverse);\n    maxTarget.set(_v3$1.x, _v3$1.y).multiplyScalar(-distance / _v3$1.z);\n  }\n\n  /**\n   * Computes the width and height of the camera's viewable rectangle at a given distance along the viewing direction.\n   *\n   * @param {number} distance - The viewing distance.\n   * @param {Vector2} target - The target vector that is used to store result where x is width and y is height.\n   * @returns {Vector2} The view size.\n   */\n  getViewSize(distance, target) {\n    this.getViewBounds(distance, _minTarget, _maxTarget);\n    return target.subVectors(_maxTarget, _minTarget);\n  }\n\n  /**\n   * Sets an offset in a larger frustum. This is useful for multi-window or\n   * multi-monitor/multi-machine setups.\n   *\n   * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n   * the monitors are in grid like this\n   *```\n   *   +---+---+---+\n   *   | A | B | C |\n   *   +---+---+---+\n   *   | D | E | F |\n   *   +---+---+---+\n   *```\n   * then for each monitor you would call it like this:\n   *```js\n   * const w = 1920;\n   * const h = 1080;\n   * const fullWidth = w * 3;\n   * const fullHeight = h * 2;\n   *\n   * // --A--\n   * camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n   * // --B--\n   * camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n   * // --C--\n   * camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n   * // --D--\n   * camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n   * // --E--\n   * camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n   * // --F--\n   * camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n   * ```\n   *\n   * Note there is no reason monitors have to be the same size or in a grid.\n   *\n   * @param {number} fullWidth - The full width of multiview setup.\n   * @param {number} fullHeight - The full height of multiview setup.\n   * @param {number} x - The horizontal offset of the subcamera.\n   * @param {number} y - The vertical offset of the subcamera.\n   * @param {number} width - The width of subcamera.\n   * @param {number} height - The height of subcamera.\n   */\n  setViewOffset(fullWidth, fullHeight, x, y, width, height) {\n    this.aspect = fullWidth / fullHeight;\n    if (this.view === null) {\n      this.view = {\n        enabled: true,\n        fullWidth: 1,\n        fullHeight: 1,\n        offsetX: 0,\n        offsetY: 0,\n        width: 1,\n        height: 1\n      };\n    }\n    this.view.enabled = true;\n    this.view.fullWidth = fullWidth;\n    this.view.fullHeight = fullHeight;\n    this.view.offsetX = x;\n    this.view.offsetY = y;\n    this.view.width = width;\n    this.view.height = height;\n    this.updateProjectionMatrix();\n  }\n\n  /**\n   * Removes the view offset from the projection matrix.\n   */\n  clearViewOffset() {\n    if (this.view !== null) {\n      this.view.enabled = false;\n    }\n    this.updateProjectionMatrix();\n  }\n\n  /**\n   * Updates the camera's projection matrix. Must be called after any change of\n   * camera properties.\n   */\n  updateProjectionMatrix() {\n    const near = this.near;\n    let top = near * Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom;\n    let height = 2 * top;\n    let width = this.aspect * height;\n    let left = -0.5 * width;\n    const view = this.view;\n    if (this.view !== null && this.view.enabled) {\n      const fullWidth = view.fullWidth,\n        fullHeight = view.fullHeight;\n      left += view.offsetX * width / fullWidth;\n      top -= view.offsetY * height / fullHeight;\n      width *= view.width / fullWidth;\n      height *= view.height / fullHeight;\n    }\n    const skew = this.filmOffset;\n    if (skew !== 0) left += near * skew / this.getFilmWidth();\n    this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far, this.coordinateSystem);\n    this.projectionMatrixInverse.copy(this.projectionMatrix).invert();\n  }\n  toJSON(meta) {\n    const data = super.toJSON(meta);\n    data.object.fov = this.fov;\n    data.object.zoom = this.zoom;\n    data.object.near = this.near;\n    data.object.far = this.far;\n    data.object.focus = this.focus;\n    data.object.aspect = this.aspect;\n    if (this.view !== null) data.object.view = Object.assign({}, this.view);\n    data.object.filmGauge = this.filmGauge;\n    data.object.filmOffset = this.filmOffset;\n    return data;\n  }\n}\nconst fov = -90; // negative fov is not an error\nconst aspect = 1;\n\n/**\n * A special type of camera that is positioned in 3D space to render its surroundings into a\n * cube render target. The render target can then be used as an environment map for rendering\n * realtime reflections in your scene.\n *\n * ```js\n * // Create cube render target\n * const cubeRenderTarget = new THREE.WebGLCubeRenderTarget( 256, { generateMipmaps: true, minFilter: THREE.LinearMipmapLinearFilter } );\n *\n * // Create cube camera\n * const cubeCamera = new THREE.CubeCamera( 1, 100000, cubeRenderTarget );\n * scene.add( cubeCamera );\n *\n * // Create car\n * const chromeMaterial = new THREE.MeshLambertMaterial( { color: 0xffffff, envMap: cubeRenderTarget.texture } );\n * const car = new THREE.Mesh( carGeometry, chromeMaterial );\n * scene.add( car );\n *\n * // Update the render target cube\n * car.visible = false;\n * cubeCamera.position.copy( car.position );\n * cubeCamera.update( renderer, scene );\n *\n * // Render the scene\n * car.visible = true;\n * renderer.render( scene, camera );\n * ```\n *\n * @augments Object3D\n */\nclass CubeCamera extends Object3D {\n  /**\n   * Constructs a new cube camera.\n   *\n   * @param {number} near - The camera's near plane.\n   * @param {number} far - The camera's far plane.\n   * @param {WebGLCubeRenderTarget} renderTarget - The cube render target.\n   */\n  constructor(near, far, renderTarget) {\n    super();\n    this.type = 'CubeCamera';\n\n    /**\n     * A reference to the cube render target.\n     *\n     * @type {WebGLCubeRenderTarget}\n     */\n    this.renderTarget = renderTarget;\n\n    /**\n     * The current active coordinate system.\n     *\n     * @type {?(WebGLCoordinateSystem|WebGPUCoordinateSystem)}\n     * @default null\n     */\n    this.coordinateSystem = null;\n\n    /**\n     * The current active mipmap level\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.activeMipmapLevel = 0;\n    const cameraPX = new PerspectiveCamera(fov, aspect, near, far);\n    cameraPX.layers = this.layers;\n    this.add(cameraPX);\n    const cameraNX = new PerspectiveCamera(fov, aspect, near, far);\n    cameraNX.layers = this.layers;\n    this.add(cameraNX);\n    const cameraPY = new PerspectiveCamera(fov, aspect, near, far);\n    cameraPY.layers = this.layers;\n    this.add(cameraPY);\n    const cameraNY = new PerspectiveCamera(fov, aspect, near, far);\n    cameraNY.layers = this.layers;\n    this.add(cameraNY);\n    const cameraPZ = new PerspectiveCamera(fov, aspect, near, far);\n    cameraPZ.layers = this.layers;\n    this.add(cameraPZ);\n    const cameraNZ = new PerspectiveCamera(fov, aspect, near, far);\n    cameraNZ.layers = this.layers;\n    this.add(cameraNZ);\n  }\n\n  /**\n   * Must be called when the coordinate system of the cube camera is changed.\n   */\n  updateCoordinateSystem() {\n    const coordinateSystem = this.coordinateSystem;\n    const cameras = this.children.concat();\n    const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = cameras;\n    for (const camera of cameras) this.remove(camera);\n    if (coordinateSystem === WebGLCoordinateSystem) {\n      cameraPX.up.set(0, 1, 0);\n      cameraPX.lookAt(1, 0, 0);\n      cameraNX.up.set(0, 1, 0);\n      cameraNX.lookAt(-1, 0, 0);\n      cameraPY.up.set(0, 0, -1);\n      cameraPY.lookAt(0, 1, 0);\n      cameraNY.up.set(0, 0, 1);\n      cameraNY.lookAt(0, -1, 0);\n      cameraPZ.up.set(0, 1, 0);\n      cameraPZ.lookAt(0, 0, 1);\n      cameraNZ.up.set(0, 1, 0);\n      cameraNZ.lookAt(0, 0, -1);\n    } else if (coordinateSystem === WebGPUCoordinateSystem) {\n      cameraPX.up.set(0, -1, 0);\n      cameraPX.lookAt(-1, 0, 0);\n      cameraNX.up.set(0, -1, 0);\n      cameraNX.lookAt(1, 0, 0);\n      cameraPY.up.set(0, 0, 1);\n      cameraPY.lookAt(0, 1, 0);\n      cameraNY.up.set(0, 0, -1);\n      cameraNY.lookAt(0, -1, 0);\n      cameraPZ.up.set(0, -1, 0);\n      cameraPZ.lookAt(0, 0, 1);\n      cameraNZ.up.set(0, -1, 0);\n      cameraNZ.lookAt(0, 0, -1);\n    } else {\n      throw new Error('THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: ' + coordinateSystem);\n    }\n    for (const camera of cameras) {\n      this.add(camera);\n      camera.updateMatrixWorld();\n    }\n  }\n\n  /**\n   * Calling this method will render the given scene with the given renderer\n   * into the cube render target of the camera.\n   *\n   * @param {(Renderer|WebGLRenderer)} renderer - The renderer.\n   * @param {Scene} scene - The scene to render.\n   */\n  update(renderer, scene) {\n    if (this.parent === null) this.updateMatrixWorld();\n    const {\n      renderTarget,\n      activeMipmapLevel\n    } = this;\n    if (this.coordinateSystem !== renderer.coordinateSystem) {\n      this.coordinateSystem = renderer.coordinateSystem;\n      this.updateCoordinateSystem();\n    }\n    const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = this.children;\n    const currentRenderTarget = renderer.getRenderTarget();\n    const currentActiveCubeFace = renderer.getActiveCubeFace();\n    const currentActiveMipmapLevel = renderer.getActiveMipmapLevel();\n    const currentXrEnabled = renderer.xr.enabled;\n    renderer.xr.enabled = false;\n    const generateMipmaps = renderTarget.texture.generateMipmaps;\n    renderTarget.texture.generateMipmaps = false;\n    renderer.setRenderTarget(renderTarget, 0, activeMipmapLevel);\n    renderer.render(scene, cameraPX);\n    renderer.setRenderTarget(renderTarget, 1, activeMipmapLevel);\n    renderer.render(scene, cameraNX);\n    renderer.setRenderTarget(renderTarget, 2, activeMipmapLevel);\n    renderer.render(scene, cameraPY);\n    renderer.setRenderTarget(renderTarget, 3, activeMipmapLevel);\n    renderer.render(scene, cameraNY);\n    renderer.setRenderTarget(renderTarget, 4, activeMipmapLevel);\n    renderer.render(scene, cameraPZ);\n\n    // mipmaps are generated during the last call of render()\n    // at this point, all sides of the cube render target are defined\n\n    renderTarget.texture.generateMipmaps = generateMipmaps;\n    renderer.setRenderTarget(renderTarget, 5, activeMipmapLevel);\n    renderer.render(scene, cameraNZ);\n    renderer.setRenderTarget(currentRenderTarget, currentActiveCubeFace, currentActiveMipmapLevel);\n    renderer.xr.enabled = currentXrEnabled;\n    renderTarget.texture.needsPMREMUpdate = true;\n  }\n}\n\n/**\n * Creates a cube texture made up of six images.\n *\n * ```js\n * const loader = new THREE.CubeTextureLoader();\n * loader.setPath( 'textures/cube/pisa/' );\n *\n * const textureCube = loader.load( [\n * \t'px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png'\n * ] );\n *\n * const material = new THREE.MeshBasicMaterial( { color: 0xffffff, envMap: textureCube } );\n * ```\n *\n * @augments Texture\n */\nclass CubeTexture extends Texture {\n  /**\n   * Constructs a new cube texture.\n   *\n   * @param {Array<Image>} [images=[]] - An array holding a image for each side of a cube.\n   * @param {number} [mapping=CubeReflectionMapping] - The texture mapping.\n   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n   * @param {number} [magFilter=LinearFilter] - The mag filter value.\n   * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.\n   * @param {number} [format=RGBAFormat] - The texture format.\n   * @param {number} [type=UnsignedByteType] - The texture type.\n   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n   * @param {string} [colorSpace=NoColorSpace] - The color space value.\n   */\n  constructor() {\n    let images = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let mapping = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CubeReflectionMapping;\n    let wrapS = arguments.length > 2 ? arguments[2] : undefined;\n    let wrapT = arguments.length > 3 ? arguments[3] : undefined;\n    let magFilter = arguments.length > 4 ? arguments[4] : undefined;\n    let minFilter = arguments.length > 5 ? arguments[5] : undefined;\n    let format = arguments.length > 6 ? arguments[6] : undefined;\n    let type = arguments.length > 7 ? arguments[7] : undefined;\n    let anisotropy = arguments.length > 8 ? arguments[8] : undefined;\n    let colorSpace = arguments.length > 9 ? arguments[9] : undefined;\n    super(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isCubeTexture = true;\n\n    /**\n     * If set to `true`, the texture is flipped along the vertical axis when\n     * uploaded to the GPU.\n     *\n     * Overwritten and set to `false` by default.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.flipY = false;\n  }\n\n  /**\n   * Alias for {@link CubeTexture#image}.\n   *\n   * @type {Array<Image>}\n   */\n  get images() {\n    return this.image;\n  }\n  set images(value) {\n    this.image = value;\n  }\n}\n\n/**\n * A cube render target used in context of {@link WebGLRenderer}.\n *\n * @augments WebGLRenderTarget\n */\nclass WebGLCubeRenderTarget extends WebGLRenderTarget {\n  /**\n   * Constructs a new cube render target.\n   *\n   * @param {number} [size=1] - The size of the render target.\n   * @param {RenderTarget~Options} [options] - The configuration object.\n   */\n  constructor() {\n    let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(size, size, options);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isWebGLCubeRenderTarget = true;\n    const image = {\n      width: size,\n      height: size,\n      depth: 1\n    };\n    const images = [image, image, image, image, image, image];\n\n    /**\n     * Overwritten with a different texture type.\n     *\n     * @type {DataArrayTexture}\n     */\n    this.texture = new CubeTexture(images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace);\n\n    // By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)\n    // in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,\n    // in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.\n\n    // three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped\n    // and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture\n    // as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).\n\n    this.texture.isRenderTargetTexture = true;\n    this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n    this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n  }\n\n  /**\n   * Converts the given equirectangular texture to a cube map.\n   *\n   * @param {WebGLRenderer} renderer - The renderer.\n   * @param {Texture} texture - The equirectangular texture.\n   * @return {WebGLCubeRenderTarget} A reference to this cube render target.\n   */\n  fromEquirectangularTexture(renderer, texture) {\n    this.texture.type = texture.type;\n    this.texture.colorSpace = texture.colorSpace;\n    this.texture.generateMipmaps = texture.generateMipmaps;\n    this.texture.minFilter = texture.minFilter;\n    this.texture.magFilter = texture.magFilter;\n    const shader = {\n      uniforms: {\n        tEquirect: {\n          value: null\n        }\n      },\n      vertexShader: /* glsl */`\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t`,\n      fragmentShader: /* glsl */`\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t`\n    };\n    const geometry = new BoxGeometry(5, 5, 5);\n    const material = new ShaderMaterial({\n      name: 'CubemapFromEquirect',\n      uniforms: cloneUniforms(shader.uniforms),\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader,\n      side: BackSide,\n      blending: NoBlending\n    });\n    material.uniforms.tEquirect.value = texture;\n    const mesh = new Mesh(geometry, material);\n    const currentMinFilter = texture.minFilter;\n\n    // Avoid blurred poles\n    if (texture.minFilter === LinearMipmapLinearFilter) texture.minFilter = LinearFilter;\n    const camera = new CubeCamera(1, 10, this);\n    camera.update(renderer, mesh);\n    texture.minFilter = currentMinFilter;\n    mesh.geometry.dispose();\n    mesh.material.dispose();\n    return this;\n  }\n\n  /**\n   * Clears this cube render target.\n   *\n   * @param {WebGLRenderer} renderer - The renderer.\n   * @param {boolean} [color=true] - Whether the color buffer should be cleared or not.\n   * @param {boolean} [depth=true] - Whether the depth buffer should be cleared or not.\n   * @param {boolean} [stencil=true] - Whether the stencil buffer should be cleared or not.\n   */\n  clear(renderer) {\n    let color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    let stencil = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    const currentRenderTarget = renderer.getRenderTarget();\n    for (let i = 0; i < 6; i++) {\n      renderer.setRenderTarget(this, i);\n      renderer.clear(color, depth, stencil);\n    }\n    renderer.setRenderTarget(currentRenderTarget);\n  }\n}\n\n/**\n * This is almost identical to an {@link Object3D}. Its purpose is to\n * make working with groups of objects syntactically clearer.\n *\n * ```js\n * // Create a group and add the two cubes.\n * // These cubes can now be rotated / scaled etc as a group.\n * const group = new THREE.Group();\n *\n * group.add( meshA );\n * group.add( meshB );\n *\n * scene.add( group );\n * ```\n *\n * @augments Object3D\n */\nclass Group extends Object3D {\n  constructor() {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isGroup = true;\n    this.type = 'Group';\n  }\n}\nconst _moveEvent = {\n  type: 'move'\n};\n\n/**\n * Class for representing a XR controller with its\n * different coordinate systems.\n *\n * @private\n */\nclass WebXRController {\n  /**\n   * Constructs a new XR controller.\n   */\n  constructor() {\n    /**\n     * A group representing the target ray space\n     * of the XR controller.\n     *\n     * @private\n     * @type {?Group}\n     * @default null\n     */\n    this._targetRay = null;\n\n    /**\n     * A group representing the grip space\n     * of the XR controller.\n     *\n     * @private\n     * @type {?Group}\n     * @default null\n     */\n    this._grip = null;\n\n    /**\n     * A group representing the hand space\n     * of the XR controller.\n     *\n     * @private\n     * @type {?Group}\n     * @default null\n     */\n    this._hand = null;\n  }\n\n  /**\n   * Returns a group representing the hand space of the XR controller.\n   *\n   * @return {Group} A group representing the hand space of the XR controller.\n   */\n  getHandSpace() {\n    if (this._hand === null) {\n      this._hand = new Group();\n      this._hand.matrixAutoUpdate = false;\n      this._hand.visible = false;\n      this._hand.joints = {};\n      this._hand.inputState = {\n        pinching: false\n      };\n    }\n    return this._hand;\n  }\n\n  /**\n   * Returns a group representing the target ray space of the XR controller.\n   *\n   * @return {Group} A group representing the target ray space of the XR controller.\n   */\n  getTargetRaySpace() {\n    if (this._targetRay === null) {\n      this._targetRay = new Group();\n      this._targetRay.matrixAutoUpdate = false;\n      this._targetRay.visible = false;\n      this._targetRay.hasLinearVelocity = false;\n      this._targetRay.linearVelocity = new Vector3();\n      this._targetRay.hasAngularVelocity = false;\n      this._targetRay.angularVelocity = new Vector3();\n    }\n    return this._targetRay;\n  }\n\n  /**\n   * Returns a group representing the grip space of the XR controller.\n   *\n   * @return {Group} A group representing the grip space of the XR controller.\n   */\n  getGripSpace() {\n    if (this._grip === null) {\n      this._grip = new Group();\n      this._grip.matrixAutoUpdate = false;\n      this._grip.visible = false;\n      this._grip.hasLinearVelocity = false;\n      this._grip.linearVelocity = new Vector3();\n      this._grip.hasAngularVelocity = false;\n      this._grip.angularVelocity = new Vector3();\n    }\n    return this._grip;\n  }\n\n  /**\n   * Dispatches the given event to the groups representing\n   * the different coordinate spaces of the XR controller.\n   *\n   * @param {Object} event - The event to dispatch.\n   * @return {WebXRController} A reference to this instance.\n   */\n  dispatchEvent(event) {\n    if (this._targetRay !== null) {\n      this._targetRay.dispatchEvent(event);\n    }\n    if (this._grip !== null) {\n      this._grip.dispatchEvent(event);\n    }\n    if (this._hand !== null) {\n      this._hand.dispatchEvent(event);\n    }\n    return this;\n  }\n\n  /**\n   * Connects the controller with the given XR input source.\n   *\n   * @param {XRInputSource} inputSource - The input source.\n   * @return {WebXRController} A reference to this instance.\n   */\n  connect(inputSource) {\n    if (inputSource && inputSource.hand) {\n      const hand = this._hand;\n      if (hand) {\n        for (const inputjoint of inputSource.hand.values()) {\n          // Initialize hand with joints when connected\n          this._getHandJoint(hand, inputjoint);\n        }\n      }\n    }\n    this.dispatchEvent({\n      type: 'connected',\n      data: inputSource\n    });\n    return this;\n  }\n\n  /**\n   * Disconnects the controller from the given XR input source.\n   *\n   * @param {XRInputSource} inputSource - The input source.\n   * @return {WebXRController} A reference to this instance.\n   */\n  disconnect(inputSource) {\n    this.dispatchEvent({\n      type: 'disconnected',\n      data: inputSource\n    });\n    if (this._targetRay !== null) {\n      this._targetRay.visible = false;\n    }\n    if (this._grip !== null) {\n      this._grip.visible = false;\n    }\n    if (this._hand !== null) {\n      this._hand.visible = false;\n    }\n    return this;\n  }\n\n  /**\n   * Updates the controller with the given input source, XR frame and reference space.\n   * This updates the transformations of the groups that represent the different\n   * coordinate systems of the controller.\n   *\n   * @param {XRInputSource} inputSource - The input source.\n   * @param {XRFrame} frame - The XR frame.\n   * @param {XRReferenceSpace} referenceSpace - The reference space.\n   * @return {WebXRController} A reference to this instance.\n   */\n  update(inputSource, frame, referenceSpace) {\n    let inputPose = null;\n    let gripPose = null;\n    let handPose = null;\n    const targetRay = this._targetRay;\n    const grip = this._grip;\n    const hand = this._hand;\n    if (inputSource && frame.session.visibilityState !== 'visible-blurred') {\n      if (hand && inputSource.hand) {\n        handPose = true;\n        for (const inputjoint of inputSource.hand.values()) {\n          // Update the joints groups with the XRJoint poses\n          const jointPose = frame.getJointPose(inputjoint, referenceSpace);\n\n          // The transform of this joint will be updated with the joint pose on each frame\n          const joint = this._getHandJoint(hand, inputjoint);\n          if (jointPose !== null) {\n            joint.matrix.fromArray(jointPose.transform.matrix);\n            joint.matrix.decompose(joint.position, joint.rotation, joint.scale);\n            joint.matrixWorldNeedsUpdate = true;\n            joint.jointRadius = jointPose.radius;\n          }\n          joint.visible = jointPose !== null;\n        }\n\n        // Custom events\n\n        // Check pinchz\n        const indexTip = hand.joints['index-finger-tip'];\n        const thumbTip = hand.joints['thumb-tip'];\n        const distance = indexTip.position.distanceTo(thumbTip.position);\n        const distanceToPinch = 0.02;\n        const threshold = 0.005;\n        if (hand.inputState.pinching && distance > distanceToPinch + threshold) {\n          hand.inputState.pinching = false;\n          this.dispatchEvent({\n            type: 'pinchend',\n            handedness: inputSource.handedness,\n            target: this\n          });\n        } else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {\n          hand.inputState.pinching = true;\n          this.dispatchEvent({\n            type: 'pinchstart',\n            handedness: inputSource.handedness,\n            target: this\n          });\n        }\n      } else {\n        if (grip !== null && inputSource.gripSpace) {\n          gripPose = frame.getPose(inputSource.gripSpace, referenceSpace);\n          if (gripPose !== null) {\n            grip.matrix.fromArray(gripPose.transform.matrix);\n            grip.matrix.decompose(grip.position, grip.rotation, grip.scale);\n            grip.matrixWorldNeedsUpdate = true;\n            if (gripPose.linearVelocity) {\n              grip.hasLinearVelocity = true;\n              grip.linearVelocity.copy(gripPose.linearVelocity);\n            } else {\n              grip.hasLinearVelocity = false;\n            }\n            if (gripPose.angularVelocity) {\n              grip.hasAngularVelocity = true;\n              grip.angularVelocity.copy(gripPose.angularVelocity);\n            } else {\n              grip.hasAngularVelocity = false;\n            }\n          }\n        }\n      }\n      if (targetRay !== null) {\n        inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);\n\n        // Some runtimes (namely Vive Cosmos with Vive OpenXR Runtime) have only grip space and ray space is equal to it\n        if (inputPose === null && gripPose !== null) {\n          inputPose = gripPose;\n        }\n        if (inputPose !== null) {\n          targetRay.matrix.fromArray(inputPose.transform.matrix);\n          targetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);\n          targetRay.matrixWorldNeedsUpdate = true;\n          if (inputPose.linearVelocity) {\n            targetRay.hasLinearVelocity = true;\n            targetRay.linearVelocity.copy(inputPose.linearVelocity);\n          } else {\n            targetRay.hasLinearVelocity = false;\n          }\n          if (inputPose.angularVelocity) {\n            targetRay.hasAngularVelocity = true;\n            targetRay.angularVelocity.copy(inputPose.angularVelocity);\n          } else {\n            targetRay.hasAngularVelocity = false;\n          }\n          this.dispatchEvent(_moveEvent);\n        }\n      }\n    }\n    if (targetRay !== null) {\n      targetRay.visible = inputPose !== null;\n    }\n    if (grip !== null) {\n      grip.visible = gripPose !== null;\n    }\n    if (hand !== null) {\n      hand.visible = handPose !== null;\n    }\n    return this;\n  }\n\n  /**\n   * Returns a group representing the hand joint for the given input joint.\n   *\n   * @private\n   * @param {Group} hand - The group representing the hand space.\n   * @param {XRJointSpace} inputjoint - The hand joint data.\n   * @return {Group} A group representing the hand joint for the given input joint.\n   */\n  _getHandJoint(hand, inputjoint) {\n    if (hand.joints[inputjoint.jointName] === undefined) {\n      const joint = new Group();\n      joint.matrixAutoUpdate = false;\n      joint.visible = false;\n      hand.joints[inputjoint.jointName] = joint;\n      hand.add(joint);\n    }\n    return hand.joints[inputjoint.jointName];\n  }\n}\n\n/**\n * This class can be used to define an exponential squared fog,\n * which gives a clear view near the camera and a faster than exponentially\n * densening fog farther from the camera.\n *\n * ```js\n * const scene = new THREE.Scene();\n * scene.fog = new THREE.FogExp2( 0xcccccc, 0.002 );\n * ```\n */\nclass FogExp2 {\n  /**\n   * Constructs a new fog.\n   *\n   * @param {number|Color} color - The fog's color.\n   * @param {number} [density=0.00025] - Defines how fast the fog will grow dense.\n   */\n  constructor(color) {\n    let density = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.00025;\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isFogExp2 = true;\n\n    /**\n     * The name of the fog.\n     *\n     * @type {string}\n     */\n    this.name = '';\n\n    /**\n     * The fog's color.\n     *\n     * @type {Color}\n     */\n    this.color = new Color(color);\n\n    /**\n     *  Defines how fast the fog will grow dense.\n     *\n     * @type {number}\n     * @default 0.00025\n     */\n    this.density = density;\n  }\n\n  /**\n   * Returns a new fog with copied values from this instance.\n   *\n   * @return {FogExp2} A clone of this instance.\n   */\n  clone() {\n    return new FogExp2(this.color, this.density);\n  }\n\n  /**\n   * Serializes the fog into JSON.\n   *\n   * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n   * @return {Object} A JSON object representing the serialized fog\n   */\n  toJSON(/* meta */\n  ) {\n    return {\n      type: 'FogExp2',\n      name: this.name,\n      color: this.color.getHex(),\n      density: this.density\n    };\n  }\n}\n\n/**\n * This class can be used to define a linear fog that grows linearly denser\n * with the distance.\n *\n * ```js\n * const scene = new THREE.Scene();\n * scene.fog = new THREE.Fog( 0xcccccc, 10, 15 );\n * ```\n */\nclass Fog {\n  /**\n   * Constructs a new fog.\n   *\n   * @param {number|Color} color - The fog's color.\n   * @param {number} [near=1] - The minimum distance to start applying fog.\n   * @param {number} [far=1000] - The maximum distance at which fog stops being calculated and applied.\n   */\n  constructor(color) {\n    let near = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let far = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1000;\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isFog = true;\n\n    /**\n     * The name of the fog.\n     *\n     * @type {string}\n     */\n    this.name = '';\n\n    /**\n     * The fog's color.\n     *\n     * @type {Color}\n     */\n    this.color = new Color(color);\n\n    /**\n     * The minimum distance to start applying fog. Objects that are less than\n     * `near` units from the active camera won't be affected by fog.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.near = near;\n\n    /**\n     * The maximum distance at which fog stops being calculated and applied.\n     * Objects that are more than `far` units away from the active camera won't\n     * be affected by fog.\n     *\n     * @type {number}\n     * @default 1000\n     */\n    this.far = far;\n  }\n\n  /**\n   * Returns a new fog with copied values from this instance.\n   *\n   * @return {Fog} A clone of this instance.\n   */\n  clone() {\n    return new Fog(this.color, this.near, this.far);\n  }\n\n  /**\n   * Serializes the fog into JSON.\n   *\n   * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n   * @return {Object} A JSON object representing the serialized fog\n   */\n  toJSON(/* meta */\n  ) {\n    return {\n      type: 'Fog',\n      name: this.name,\n      color: this.color.getHex(),\n      near: this.near,\n      far: this.far\n    };\n  }\n}\n\n/**\n * Scenes allow you to set up what is to be rendered and where by three.js.\n * This is where you place 3D objects like meshes, lines or lights.\n *\n * @augments Object3D\n */\nclass Scene extends Object3D {\n  /**\n   * Constructs a new scene.\n   */\n  constructor() {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isScene = true;\n    this.type = 'Scene';\n\n    /**\n     * Defines the background of the scene. Valid inputs are:\n     *\n     * - A color for defining a uniform colored background.\n     * - A texture for defining a (flat) textured background.\n     * - Cube textures or equirectangular textures for defining a skybox.\n     *\n     * @type {?(Color|Texture)}\n     * @default null\n     */\n    this.background = null;\n\n    /**\n     * Sets the environment map for all physical materials in the scene. However,\n     * it's not possible to overwrite an existing texture assigned to the `envMap`\n     * material property.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.environment = null;\n\n    /**\n     * A fog instance defining the type of fog that affects everything\n     * rendered in the scene.\n     *\n     * @type {?(Fog|FogExp2)}\n     * @default null\n     */\n    this.fog = null;\n\n    /**\n     * Sets the blurriness of the background. Only influences environment maps\n     * assigned to {@link Scene#background}. Valid input is a float between `0`\n     * and `1`.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.backgroundBlurriness = 0;\n\n    /**\n     * Attenuates the color of the background. Only applies to background textures.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.backgroundIntensity = 1;\n\n    /**\n     * The rotation of the background in radians. Only influences environment maps\n     * assigned to {@link Scene#background}.\n     *\n     * @type {Euler}\n     * @default (0,0,0)\n     */\n    this.backgroundRotation = new Euler();\n\n    /**\n     * Attenuates the color of the environment. Only influences environment maps\n     * assigned to {@link Scene#environment}.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.environmentIntensity = 1;\n\n    /**\n     * The rotation of the environment map in radians. Only influences physical materials\n     * in the scene when {@link Scene#environment} is used.\n     *\n     * @type {Euler}\n     * @default (0,0,0)\n     */\n    this.environmentRotation = new Euler();\n\n    /**\n     * Forces everything in the scene to be rendered with the defined material. It is possible\n     * to exclude materials from override by setting {@link Material#allowOverride} to `false`.\n     *\n     * @type {?Material}\n     * @default null\n     */\n    this.overrideMaterial = null;\n    if (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n      __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {\n        detail: this\n      }));\n    }\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    if (source.background !== null) this.background = source.background.clone();\n    if (source.environment !== null) this.environment = source.environment.clone();\n    if (source.fog !== null) this.fog = source.fog.clone();\n    this.backgroundBlurriness = source.backgroundBlurriness;\n    this.backgroundIntensity = source.backgroundIntensity;\n    this.backgroundRotation.copy(source.backgroundRotation);\n    this.environmentIntensity = source.environmentIntensity;\n    this.environmentRotation.copy(source.environmentRotation);\n    if (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();\n    this.matrixAutoUpdate = source.matrixAutoUpdate;\n    return this;\n  }\n  toJSON(meta) {\n    const data = super.toJSON(meta);\n    if (this.fog !== null) data.object.fog = this.fog.toJSON();\n    if (this.backgroundBlurriness > 0) data.object.backgroundBlurriness = this.backgroundBlurriness;\n    if (this.backgroundIntensity !== 1) data.object.backgroundIntensity = this.backgroundIntensity;\n    data.object.backgroundRotation = this.backgroundRotation.toArray();\n    if (this.environmentIntensity !== 1) data.object.environmentIntensity = this.environmentIntensity;\n    data.object.environmentRotation = this.environmentRotation.toArray();\n    return data;\n  }\n}\n\n/**\n * \"Interleaved\" means that multiple attributes, possibly of different types,\n * (e.g., position, normal, uv, color) are packed into a single array buffer.\n *\n * An introduction into interleaved arrays can be found here: [Interleaved array basics]{@link https://blog.tojicode.com/2011/05/interleaved-array-basics.html}\n */\nclass InterleavedBuffer {\n  /**\n   * Constructs a new interleaved buffer.\n   *\n   * @param {TypedArray} array - A typed array with a shared buffer storing attribute data.\n   * @param {number} stride - The number of typed-array elements per vertex.\n   */\n  constructor(array, stride) {\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isInterleavedBuffer = true;\n\n    /**\n     * A typed array with a shared buffer storing attribute data.\n     *\n     * @type {TypedArray}\n     */\n    this.array = array;\n\n    /**\n     * The number of typed-array elements per vertex.\n     *\n     * @type {number}\n     */\n    this.stride = stride;\n\n    /**\n     * The total number of elements in the array\n     *\n     * @type {number}\n     * @readonly\n     */\n    this.count = array !== undefined ? array.length / stride : 0;\n\n    /**\n     * Defines the intended usage pattern of the data store for optimization purposes.\n     *\n     * Note: After the initial use of a buffer, its usage cannot be changed. Instead,\n     * instantiate a new one and set the desired usage before the next render.\n     *\n     * @type {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)}\n     * @default StaticDrawUsage\n     */\n    this.usage = StaticDrawUsage;\n\n    /**\n     * This can be used to only update some components of stored vectors (for example, just the\n     * component related to color). Use the `addUpdateRange()` function to add ranges to this array.\n     *\n     * @type {Array<Object>}\n     */\n    this.updateRanges = [];\n\n    /**\n     * A version number, incremented every time the `needsUpdate` is set to `true`.\n     *\n     * @type {number}\n     */\n    this.version = 0;\n\n    /**\n     * The UUID of the interleaved buffer.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.uuid = generateUUID();\n  }\n\n  /**\n   * A callback function that is executed after the renderer has transferred the attribute array\n   * data to the GPU.\n   */\n  onUploadCallback() {}\n\n  /**\n   * Flag to indicate that this attribute has changed and should be re-sent to\n   * the GPU. Set this to `true` when you modify the value of the array.\n   *\n   * @type {number}\n   * @default false\n   * @param {boolean} value\n   */\n  set needsUpdate(value) {\n    if (value === true) this.version++;\n  }\n\n  /**\n   * Sets the usage of this interleaved buffer.\n   *\n   * @param {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)} value - The usage to set.\n   * @return {InterleavedBuffer} A reference to this interleaved buffer.\n   */\n  setUsage(value) {\n    this.usage = value;\n    return this;\n  }\n\n  /**\n   * Adds a range of data in the data array to be updated on the GPU.\n   *\n   * @param {number} start - Position at which to start update.\n   * @param {number} count - The number of components to update.\n   */\n  addUpdateRange(start, count) {\n    this.updateRanges.push({\n      start,\n      count\n    });\n  }\n\n  /**\n   * Clears the update ranges.\n   */\n  clearUpdateRanges() {\n    this.updateRanges.length = 0;\n  }\n\n  /**\n   * Copies the values of the given interleaved buffer to this instance.\n   *\n   * @param {InterleavedBuffer} source - The interleaved buffer to copy.\n   * @return {InterleavedBuffer} A reference to this instance.\n   */\n  copy(source) {\n    this.array = new source.array.constructor(source.array);\n    this.count = source.count;\n    this.stride = source.stride;\n    this.usage = source.usage;\n    return this;\n  }\n\n  /**\n   * Copies a vector from the given interleaved buffer to this one. The start\n   * and destination position in the attribute buffers are represented by the\n   * given indices.\n   *\n   * @param {number} index1 - The destination index into this interleaved buffer.\n   * @param {InterleavedBuffer} interleavedBuffer - The interleaved buffer to copy from.\n   * @param {number} index2 - The source index into the given interleaved buffer.\n   * @return {InterleavedBuffer} A reference to this instance.\n   */\n  copyAt(index1, interleavedBuffer, index2) {\n    index1 *= this.stride;\n    index2 *= interleavedBuffer.stride;\n    for (let i = 0, l = this.stride; i < l; i++) {\n      this.array[index1 + i] = interleavedBuffer.array[index2 + i];\n    }\n    return this;\n  }\n\n  /**\n   * Sets the given array data in the interleaved buffer.\n   *\n   * @param {(TypedArray|Array)} value - The array data to set.\n   * @param {number} [offset=0] - The offset in this interleaved buffer's array.\n   * @return {InterleavedBuffer} A reference to this instance.\n   */\n  set(value) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.array.set(value, offset);\n    return this;\n  }\n\n  /**\n   * Returns a new interleaved buffer with copied values from this instance.\n   *\n   * @param {Object} [data] - An object with shared array buffers that allows to retain shared structures.\n   * @return {InterleavedBuffer} A clone of this instance.\n   */\n  clone(data) {\n    if (data.arrayBuffers === undefined) {\n      data.arrayBuffers = {};\n    }\n    if (this.array.buffer._uuid === undefined) {\n      this.array.buffer._uuid = generateUUID();\n    }\n    if (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n      data.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;\n    }\n    const array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);\n    const ib = new this.constructor(array, this.stride);\n    ib.setUsage(this.usage);\n    return ib;\n  }\n\n  /**\n   * Sets the given callback function that is executed after the Renderer has transferred\n   * the array data to the GPU. Can be used to perform clean-up operations after\n   * the upload when data are not needed anymore on the CPU side.\n   *\n   * @param {Function} callback - The `onUpload()` callback.\n   * @return {InterleavedBuffer} A reference to this instance.\n   */\n  onUpload(callback) {\n    this.onUploadCallback = callback;\n    return this;\n  }\n\n  /**\n   * Serializes the interleaved buffer into JSON.\n   *\n   * @param {Object} [data] - An optional value holding meta information about the serialization.\n   * @return {Object} A JSON object representing the serialized interleaved buffer.\n   */\n  toJSON(data) {\n    if (data.arrayBuffers === undefined) {\n      data.arrayBuffers = {};\n    }\n\n    // generate UUID for array buffer if necessary\n\n    if (this.array.buffer._uuid === undefined) {\n      this.array.buffer._uuid = generateUUID();\n    }\n    if (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n      data.arrayBuffers[this.array.buffer._uuid] = Array.from(new Uint32Array(this.array.buffer));\n    }\n\n    //\n\n    return {\n      uuid: this.uuid,\n      buffer: this.array.buffer._uuid,\n      type: this.array.constructor.name,\n      stride: this.stride\n    };\n  }\n}\nconst _vector$7 = /*@__PURE__*/new Vector3();\n\n/**\n * An alternative version of a buffer attribute with interleaved data. Interleaved\n * attributes share a common interleaved data storage ({@link InterleavedBuffer}) and refer with\n * different offsets into the buffer.\n */\nclass InterleavedBufferAttribute {\n  /**\n   * Constructs a new interleaved buffer attribute.\n   *\n   * @param {InterleavedBuffer} interleavedBuffer - The buffer holding the interleaved data.\n   * @param {number} itemSize - The item size.\n   * @param {number} offset - The attribute offset into the buffer.\n   * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n   */\n  constructor(interleavedBuffer, itemSize, offset) {\n    let normalized = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isInterleavedBufferAttribute = true;\n\n    /**\n     * The name of the buffer attribute.\n     *\n     * @type {string}\n     */\n    this.name = '';\n\n    /**\n     * The buffer holding the interleaved data.\n     *\n     * @type {InterleavedBuffer}\n     */\n    this.data = interleavedBuffer;\n\n    /**\n     * The item size, see {@link BufferAttribute#itemSize}.\n     *\n     * @type {number}\n     */\n    this.itemSize = itemSize;\n\n    /**\n     * The attribute offset into the buffer.\n     *\n     * @type {number}\n     */\n    this.offset = offset;\n\n    /**\n     * Whether the data are normalized or not, see {@link BufferAttribute#normalized}\n     *\n     * @type {InterleavedBuffer}\n     */\n    this.normalized = normalized;\n  }\n\n  /**\n   * The item count of this buffer attribute.\n   *\n   * @type {number}\n   * @readonly\n   */\n  get count() {\n    return this.data.count;\n  }\n\n  /**\n   * The array holding the interleaved buffer attribute data.\n   *\n   * @type {TypedArray}\n   */\n  get array() {\n    return this.data.array;\n  }\n\n  /**\n   * Flag to indicate that this attribute has changed and should be re-sent to\n   * the GPU. Set this to `true` when you modify the value of the array.\n   *\n   * @type {number}\n   * @default false\n   * @param {boolean} value\n   */\n  set needsUpdate(value) {\n    this.data.needsUpdate = value;\n  }\n\n  /**\n   * Applies the given 4x4 matrix to the given attribute. Only works with\n   * item size `3`.\n   *\n   * @param {Matrix4} m - The matrix to apply.\n   * @return {InterleavedBufferAttribute} A reference to this instance.\n   */\n  applyMatrix4(m) {\n    for (let i = 0, l = this.data.count; i < l; i++) {\n      _vector$7.fromBufferAttribute(this, i);\n      _vector$7.applyMatrix4(m);\n      this.setXYZ(i, _vector$7.x, _vector$7.y, _vector$7.z);\n    }\n    return this;\n  }\n\n  /**\n   * Applies the given 3x3 normal matrix to the given attribute. Only works with\n   * item size `3`.\n   *\n   * @param {Matrix3} m - The normal matrix to apply.\n   * @return {InterleavedBufferAttribute} A reference to this instance.\n   */\n  applyNormalMatrix(m) {\n    for (let i = 0, l = this.count; i < l; i++) {\n      _vector$7.fromBufferAttribute(this, i);\n      _vector$7.applyNormalMatrix(m);\n      this.setXYZ(i, _vector$7.x, _vector$7.y, _vector$7.z);\n    }\n    return this;\n  }\n\n  /**\n   * Applies the given 4x4 matrix to the given attribute. Only works with\n   * item size `3` and with direction vectors.\n   *\n   * @param {Matrix4} m - The matrix to apply.\n   * @return {InterleavedBufferAttribute} A reference to this instance.\n   */\n  transformDirection(m) {\n    for (let i = 0, l = this.count; i < l; i++) {\n      _vector$7.fromBufferAttribute(this, i);\n      _vector$7.transformDirection(m);\n      this.setXYZ(i, _vector$7.x, _vector$7.y, _vector$7.z);\n    }\n    return this;\n  }\n\n  /**\n   * Returns the given component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} component - The component index.\n   * @return {number} The returned value.\n   */\n  getComponent(index, component) {\n    let value = this.array[index * this.data.stride + this.offset + component];\n    if (this.normalized) value = denormalize(value, this.array);\n    return value;\n  }\n\n  /**\n   * Sets the given value to the given component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} component - The component index.\n   * @param {number} value - The value to set.\n   * @return {InterleavedBufferAttribute} A reference to this instance.\n   */\n  setComponent(index, component, value) {\n    if (this.normalized) value = normalize(value, this.array);\n    this.data.array[index * this.data.stride + this.offset + component] = value;\n    return this;\n  }\n\n  /**\n   * Sets the x component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} x - The value to set.\n   * @return {InterleavedBufferAttribute} A reference to this instance.\n   */\n  setX(index, x) {\n    if (this.normalized) x = normalize(x, this.array);\n    this.data.array[index * this.data.stride + this.offset] = x;\n    return this;\n  }\n\n  /**\n   * Sets the y component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} y - The value to set.\n   * @return {InterleavedBufferAttribute} A reference to this instance.\n   */\n  setY(index, y) {\n    if (this.normalized) y = normalize(y, this.array);\n    this.data.array[index * this.data.stride + this.offset + 1] = y;\n    return this;\n  }\n\n  /**\n   * Sets the z component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} z - The value to set.\n   * @return {InterleavedBufferAttribute} A reference to this instance.\n   */\n  setZ(index, z) {\n    if (this.normalized) z = normalize(z, this.array);\n    this.data.array[index * this.data.stride + this.offset + 2] = z;\n    return this;\n  }\n\n  /**\n   * Sets the w component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} w - The value to set.\n   * @return {InterleavedBufferAttribute} A reference to this instance.\n   */\n  setW(index, w) {\n    if (this.normalized) w = normalize(w, this.array);\n    this.data.array[index * this.data.stride + this.offset + 3] = w;\n    return this;\n  }\n\n  /**\n   * Returns the x component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @return {number} The x component.\n   */\n  getX(index) {\n    let x = this.data.array[index * this.data.stride + this.offset];\n    if (this.normalized) x = denormalize(x, this.array);\n    return x;\n  }\n\n  /**\n   * Returns the y component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @return {number} The y component.\n   */\n  getY(index) {\n    let y = this.data.array[index * this.data.stride + this.offset + 1];\n    if (this.normalized) y = denormalize(y, this.array);\n    return y;\n  }\n\n  /**\n   * Returns the z component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @return {number} The z component.\n   */\n  getZ(index) {\n    let z = this.data.array[index * this.data.stride + this.offset + 2];\n    if (this.normalized) z = denormalize(z, this.array);\n    return z;\n  }\n\n  /**\n   * Returns the w component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @return {number} The w component.\n   */\n  getW(index) {\n    let w = this.data.array[index * this.data.stride + this.offset + 3];\n    if (this.normalized) w = denormalize(w, this.array);\n    return w;\n  }\n\n  /**\n   * Sets the x and y component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} x - The value for the x component to set.\n   * @param {number} y - The value for the y component to set.\n   * @return {InterleavedBufferAttribute} A reference to this instance.\n   */\n  setXY(index, x, y) {\n    index = index * this.data.stride + this.offset;\n    if (this.normalized) {\n      x = normalize(x, this.array);\n      y = normalize(y, this.array);\n    }\n    this.data.array[index + 0] = x;\n    this.data.array[index + 1] = y;\n    return this;\n  }\n\n  /**\n   * Sets the x, y and z component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} x - The value for the x component to set.\n   * @param {number} y - The value for the y component to set.\n   * @param {number} z - The value for the z component to set.\n   * @return {InterleavedBufferAttribute} A reference to this instance.\n   */\n  setXYZ(index, x, y, z) {\n    index = index * this.data.stride + this.offset;\n    if (this.normalized) {\n      x = normalize(x, this.array);\n      y = normalize(y, this.array);\n      z = normalize(z, this.array);\n    }\n    this.data.array[index + 0] = x;\n    this.data.array[index + 1] = y;\n    this.data.array[index + 2] = z;\n    return this;\n  }\n\n  /**\n   * Sets the x, y, z and w component of the vector at the given index.\n   *\n   * @param {number} index - The index into the buffer attribute.\n   * @param {number} x - The value for the x component to set.\n   * @param {number} y - The value for the y component to set.\n   * @param {number} z - The value for the z component to set.\n   * @param {number} w - The value for the w component to set.\n   * @return {InterleavedBufferAttribute} A reference to this instance.\n   */\n  setXYZW(index, x, y, z, w) {\n    index = index * this.data.stride + this.offset;\n    if (this.normalized) {\n      x = normalize(x, this.array);\n      y = normalize(y, this.array);\n      z = normalize(z, this.array);\n      w = normalize(w, this.array);\n    }\n    this.data.array[index + 0] = x;\n    this.data.array[index + 1] = y;\n    this.data.array[index + 2] = z;\n    this.data.array[index + 3] = w;\n    return this;\n  }\n\n  /**\n   * Returns a new buffer attribute with copied values from this instance.\n   *\n   * If no parameter is provided, cloning an interleaved buffer attribute will de-interleave buffer data.\n   *\n   * @param {Object} [data] - An object with interleaved buffers that allows to retain the interleaved property.\n   * @return {BufferAttribute|InterleavedBufferAttribute} A clone of this instance.\n   */\n  clone(data) {\n    if (data === undefined) {\n      console.log('THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.');\n      const array = [];\n      for (let i = 0; i < this.count; i++) {\n        const index = i * this.data.stride + this.offset;\n        for (let j = 0; j < this.itemSize; j++) {\n          array.push(this.data.array[index + j]);\n        }\n      }\n      return new BufferAttribute(new this.array.constructor(array), this.itemSize, this.normalized);\n    } else {\n      if (data.interleavedBuffers === undefined) {\n        data.interleavedBuffers = {};\n      }\n      if (data.interleavedBuffers[this.data.uuid] === undefined) {\n        data.interleavedBuffers[this.data.uuid] = this.data.clone(data);\n      }\n      return new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);\n    }\n  }\n\n  /**\n   * Serializes the buffer attribute into JSON.\n   *\n   * If no parameter is provided, cloning an interleaved buffer attribute will de-interleave buffer data.\n   *\n   * @param {Object} [data] - An optional value holding meta information about the serialization.\n   * @return {Object} A JSON object representing the serialized buffer attribute.\n   */\n  toJSON(data) {\n    if (data === undefined) {\n      console.log('THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.');\n      const array = [];\n      for (let i = 0; i < this.count; i++) {\n        const index = i * this.data.stride + this.offset;\n        for (let j = 0; j < this.itemSize; j++) {\n          array.push(this.data.array[index + j]);\n        }\n      }\n\n      // de-interleave data and save it as an ordinary buffer attribute for now\n\n      return {\n        itemSize: this.itemSize,\n        type: this.array.constructor.name,\n        array: array,\n        normalized: this.normalized\n      };\n    } else {\n      // save as true interleaved attribute\n\n      if (data.interleavedBuffers === undefined) {\n        data.interleavedBuffers = {};\n      }\n      if (data.interleavedBuffers[this.data.uuid] === undefined) {\n        data.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);\n      }\n      return {\n        isInterleavedBufferAttribute: true,\n        itemSize: this.itemSize,\n        data: this.data.uuid,\n        offset: this.offset,\n        normalized: this.normalized\n      };\n    }\n  }\n}\n\n/**\n * A material for rendering instances of {@link Sprite}.\n *\n * ```js\n * const map = new THREE.TextureLoader().load( 'textures/sprite.png' );\n * const material = new THREE.SpriteMaterial( { map: map, color: 0xffffff } );\n *\n * const sprite = new THREE.Sprite( material );\n * sprite.scale.set(200, 200, 1)\n * scene.add( sprite );\n * ```\n *\n * @augments Material\n */\nclass SpriteMaterial extends Material {\n  /**\n   * Constructs a new sprite material.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isSpriteMaterial = true;\n    this.type = 'SpriteMaterial';\n\n    /**\n     * Color of the material.\n     *\n     * @type {Color}\n     * @default (1,1,1)\n     */\n    this.color = new Color(0xffffff);\n\n    /**\n     * The color map. May optionally include an alpha channel, typically combined\n     * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n     * color is modulated by the diffuse `color`.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.map = null;\n\n    /**\n     * The alpha map is a grayscale texture that controls the opacity across the\n     * surface (black: fully transparent; white: fully opaque).\n     *\n     * Only the color of the texture is used, ignoring the alpha channel if one\n     * exists. For RGB and RGBA textures, the renderer will use the green channel\n     * when sampling this texture due to the extra bit of precision provided for\n     * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n     * luminance/alpha textures will also still work as expected.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.alphaMap = null;\n\n    /**\n     * The rotation of the sprite in radians.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.rotation = 0;\n\n    /**\n     * Specifies whether size of the sprite is attenuated by the camera depth (perspective camera only).\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.sizeAttenuation = true;\n\n    /**\n     * Overwritten since sprite materials are transparent\n     * by default.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.transparent = true;\n\n    /**\n     * Whether the material is affected by fog or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.fog = true;\n    this.setValues(parameters);\n  }\n  copy(source) {\n    super.copy(source);\n    this.color.copy(source.color);\n    this.map = source.map;\n    this.alphaMap = source.alphaMap;\n    this.rotation = source.rotation;\n    this.sizeAttenuation = source.sizeAttenuation;\n    this.fog = source.fog;\n    return this;\n  }\n}\nlet _geometry;\nconst _intersectPoint = /*@__PURE__*/new Vector3();\nconst _worldScale = /*@__PURE__*/new Vector3();\nconst _mvPosition = /*@__PURE__*/new Vector3();\nconst _alignedPosition = /*@__PURE__*/new Vector2();\nconst _rotatedPosition = /*@__PURE__*/new Vector2();\nconst _viewWorldMatrix = /*@__PURE__*/new Matrix4();\nconst _vA = /*@__PURE__*/new Vector3();\nconst _vB = /*@__PURE__*/new Vector3();\nconst _vC = /*@__PURE__*/new Vector3();\nconst _uvA = /*@__PURE__*/new Vector2();\nconst _uvB = /*@__PURE__*/new Vector2();\nconst _uvC = /*@__PURE__*/new Vector2();\n\n/**\n * A sprite is a plane that always faces towards the camera, generally with a\n * partially transparent texture applied.\n *\n * Sprites do not cast shadows, setting {@link Object3D#castShadow} to `true` will\n * have no effect.\n *\n * ```js\n * const map = new THREE.TextureLoader().load( 'sprite.png' );\n * const material = new THREE.SpriteMaterial( { map: map } );\n *\n * const sprite = new THREE.Sprite( material );\n * scene.add( sprite );\n * ```\n *\n * @augments Object3D\n */\nclass Sprite extends Object3D {\n  /**\n   * Constructs a new sprite.\n   *\n   * @param {SpriteMaterial} [material] - The sprite material.\n   */\n  constructor() {\n    let material = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new SpriteMaterial();\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isSprite = true;\n    this.type = 'Sprite';\n    if (_geometry === undefined) {\n      _geometry = new BufferGeometry();\n      const float32Array = new Float32Array([-0.5, -0.5, 0, 0, 0, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, -0.5, 0.5, 0, 0, 1]);\n      const interleavedBuffer = new InterleavedBuffer(float32Array, 5);\n      _geometry.setIndex([0, 1, 2, 0, 2, 3]);\n      _geometry.setAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\n      _geometry.setAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\n    }\n\n    /**\n     * The sprite geometry.\n     *\n     * @type {BufferGeometry}\n     */\n    this.geometry = _geometry;\n\n    /**\n     * The sprite material.\n     *\n     * @type {SpriteMaterial}\n     */\n    this.material = material;\n\n    /**\n     * The sprite's anchor point, and the point around which the sprite rotates.\n     * A value of `(0.5, 0.5)` corresponds to the midpoint of the sprite. A value\n     * of `(0, 0)` corresponds to the lower left corner of the sprite.\n     *\n     * @type {Vector2}\n     * @default (0.5,0.5)\n     */\n    this.center = new Vector2(0.5, 0.5);\n  }\n\n  /**\n   * Computes intersection points between a casted ray and this sprite.\n   *\n   * @param {Raycaster} raycaster - The raycaster.\n   * @param {Array<Object>} intersects - The target array that holds the intersection points.\n   */\n  raycast(raycaster, intersects) {\n    if (raycaster.camera === null) {\n      console.error('THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.');\n    }\n    _worldScale.setFromMatrixScale(this.matrixWorld);\n    _viewWorldMatrix.copy(raycaster.camera.matrixWorld);\n    this.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);\n    _mvPosition.setFromMatrixPosition(this.modelViewMatrix);\n    if (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {\n      _worldScale.multiplyScalar(-_mvPosition.z);\n    }\n    const rotation = this.material.rotation;\n    let sin, cos;\n    if (rotation !== 0) {\n      cos = Math.cos(rotation);\n      sin = Math.sin(rotation);\n    }\n    const center = this.center;\n    transformVertex(_vA.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n    transformVertex(_vB.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n    transformVertex(_vC.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n    _uvA.set(0, 0);\n    _uvB.set(1, 0);\n    _uvC.set(1, 1);\n\n    // check first triangle\n    let intersect = raycaster.ray.intersectTriangle(_vA, _vB, _vC, false, _intersectPoint);\n    if (intersect === null) {\n      // check second triangle\n      transformVertex(_vB.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n      _uvB.set(0, 1);\n      intersect = raycaster.ray.intersectTriangle(_vA, _vC, _vB, false, _intersectPoint);\n      if (intersect === null) {\n        return;\n      }\n    }\n    const distance = raycaster.ray.origin.distanceTo(_intersectPoint);\n    if (distance < raycaster.near || distance > raycaster.far) return;\n    intersects.push({\n      distance: distance,\n      point: _intersectPoint.clone(),\n      uv: Triangle.getInterpolation(_intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2()),\n      face: null,\n      object: this\n    });\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    if (source.center !== undefined) this.center.copy(source.center);\n    this.material = source.material;\n    return this;\n  }\n}\nfunction transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {\n  // compute position in camera space\n  _alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale);\n\n  // to check if rotation is not zero\n  if (sin !== undefined) {\n    _rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;\n    _rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;\n  } else {\n    _rotatedPosition.copy(_alignedPosition);\n  }\n  vertexPosition.copy(mvPosition);\n  vertexPosition.x += _rotatedPosition.x;\n  vertexPosition.y += _rotatedPosition.y;\n\n  // transform to world space\n  vertexPosition.applyMatrix4(_viewWorldMatrix);\n}\nconst _v1$2 = /*@__PURE__*/new Vector3();\nconst _v2$1 = /*@__PURE__*/new Vector3();\n\n/**\n * A component for providing a basic Level of Detail (LOD) mechanism.\n *\n * Every LOD level is associated with an object, and rendering can be switched\n * between them at the distances specified. Typically you would create, say,\n * three meshes, one for far away (low detail), one for mid range (medium\n * detail) and one for close up (high detail).\n *\n * ```js\n * const lod = new THREE.LOD();\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n *\n * //Create spheres with 3 levels of detail and create new LOD levels for them\n * for( let i = 0; i < 3; i++ ) {\n *\n * \tconst geometry = new THREE.IcosahedronGeometry( 10, 3 - i );\n * \tconst mesh = new THREE.Mesh( geometry, material );\n * \tlod.addLevel( mesh, i * 75 );\n *\n * }\n *\n * scene.add( lod );\n * ```\n *\n * @augments Object3D\n */\nclass LOD extends Object3D {\n  /**\n   * Constructs a new LOD.\n   */\n  constructor() {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isLOD = true;\n\n    /**\n     * The current LOD index.\n     *\n     * @private\n     * @type {number}\n     * @default 0\n     */\n    this._currentLevel = 0;\n    this.type = 'LOD';\n    Object.defineProperties(this, {\n      /**\n       * This array holds the LOD levels.\n       *\n       * @name LOD#levels\n       * @type {Array<{object:Object3D,distance:number,hysteresis:number}>}\n       */\n      levels: {\n        enumerable: true,\n        value: []\n      }\n    });\n\n    /**\n     * Whether the LOD object is updated automatically by the renderer per frame\n     * or not. If set to `false`, you have to call {@link LOD#update} in the\n     * render loop by yourself.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.autoUpdate = true;\n  }\n  copy(source) {\n    super.copy(source, false);\n    const levels = source.levels;\n    for (let i = 0, l = levels.length; i < l; i++) {\n      const level = levels[i];\n      this.addLevel(level.object.clone(), level.distance, level.hysteresis);\n    }\n    this.autoUpdate = source.autoUpdate;\n    return this;\n  }\n\n  /**\n   * Adds a mesh that will display at a certain distance and greater. Typically\n   * the further away the distance, the lower the detail on the mesh.\n   *\n   * @param {Object3D} object - The 3D object to display at this level.\n   * @param {number} [distance=0] - The distance at which to display this level of detail.\n   * @param {number} [hysteresis=0] - Threshold used to avoid flickering at LOD boundaries, as a fraction of distance.\n   * @return {LOD} A reference to this instance.\n   */\n  addLevel(object) {\n    let distance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let hysteresis = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    distance = Math.abs(distance);\n    const levels = this.levels;\n    let l;\n    for (l = 0; l < levels.length; l++) {\n      if (distance < levels[l].distance) {\n        break;\n      }\n    }\n    levels.splice(l, 0, {\n      distance: distance,\n      hysteresis: hysteresis,\n      object: object\n    });\n    this.add(object);\n    return this;\n  }\n\n  /**\n   * Removes an existing level, based on the distance from the camera.\n   * Returns `true` when the level has been removed. Otherwise `false`.\n   *\n   * @param {number} distance - Distance of the level to remove.\n   * @return {boolean} Whether the level has been removed or not.\n   */\n  removeLevel(distance) {\n    const levels = this.levels;\n    for (let i = 0; i < levels.length; i++) {\n      if (levels[i].distance === distance) {\n        const removedElements = levels.splice(i, 1);\n        this.remove(removedElements[0].object);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Returns the currently active LOD level index.\n   *\n   * @return {number} The current active LOD level index.\n   */\n  getCurrentLevel() {\n    return this._currentLevel;\n  }\n\n  /**\n   * Returns a reference to the first 3D object that is greater than\n   * the given distance.\n   *\n   * @param {number} distance - The LOD distance.\n   * @return {Object3D|null} The found 3D object. `null` if no 3D object has been found.\n   */\n  getObjectForDistance(distance) {\n    const levels = this.levels;\n    if (levels.length > 0) {\n      let i, l;\n      for (i = 1, l = levels.length; i < l; i++) {\n        let levelDistance = levels[i].distance;\n        if (levels[i].object.visible) {\n          levelDistance -= levelDistance * levels[i].hysteresis;\n        }\n        if (distance < levelDistance) {\n          break;\n        }\n      }\n      return levels[i - 1].object;\n    }\n    return null;\n  }\n\n  /**\n   * Computes intersection points between a casted ray and this LOD.\n   *\n   * @param {Raycaster} raycaster - The raycaster.\n   * @param {Array<Object>} intersects - The target array that holds the intersection points.\n   */\n  raycast(raycaster, intersects) {\n    const levels = this.levels;\n    if (levels.length > 0) {\n      _v1$2.setFromMatrixPosition(this.matrixWorld);\n      const distance = raycaster.ray.origin.distanceTo(_v1$2);\n      this.getObjectForDistance(distance).raycast(raycaster, intersects);\n    }\n  }\n\n  /**\n   * Updates the LOD by computing which LOD level should be visible according\n   * to the current distance of the given camera.\n   *\n   * @param {Camera} camera - The camera the scene is rendered with.\n   */\n  update(camera) {\n    const levels = this.levels;\n    if (levels.length > 1) {\n      _v1$2.setFromMatrixPosition(camera.matrixWorld);\n      _v2$1.setFromMatrixPosition(this.matrixWorld);\n      const distance = _v1$2.distanceTo(_v2$1) / camera.zoom;\n      levels[0].object.visible = true;\n      let i, l;\n      for (i = 1, l = levels.length; i < l; i++) {\n        let levelDistance = levels[i].distance;\n        if (levels[i].object.visible) {\n          levelDistance -= levelDistance * levels[i].hysteresis;\n        }\n        if (distance >= levelDistance) {\n          levels[i - 1].object.visible = false;\n          levels[i].object.visible = true;\n        } else {\n          break;\n        }\n      }\n      this._currentLevel = i - 1;\n      for (; i < l; i++) {\n        levels[i].object.visible = false;\n      }\n    }\n  }\n  toJSON(meta) {\n    const data = super.toJSON(meta);\n    if (this.autoUpdate === false) data.object.autoUpdate = false;\n    data.object.levels = [];\n    const levels = this.levels;\n    for (let i = 0, l = levels.length; i < l; i++) {\n      const level = levels[i];\n      data.object.levels.push({\n        object: level.object.uuid,\n        distance: level.distance,\n        hysteresis: level.hysteresis\n      });\n    }\n    return data;\n  }\n}\nconst _basePosition = /*@__PURE__*/new Vector3();\nconst _skinIndex = /*@__PURE__*/new Vector4();\nconst _skinWeight = /*@__PURE__*/new Vector4();\nconst _vector3 = /*@__PURE__*/new Vector3();\nconst _matrix4 = /*@__PURE__*/new Matrix4();\nconst _vertex = /*@__PURE__*/new Vector3();\nconst _sphere$5 = /*@__PURE__*/new Sphere();\nconst _inverseMatrix$2 = /*@__PURE__*/new Matrix4();\nconst _ray$2 = /*@__PURE__*/new Ray();\n\n/**\n * A mesh that has a {@link Skeleton} that can then be used to animate the\n * vertices of the geometry with skinning/skeleton animation.\n *\n * Next to a valid skeleton, the skinned mesh requires skin indices and weights\n * as buffer attributes in its geometry. These attribute define which bones affect a single\n * vertex to a certain extend.\n *\n * Typically skinned meshes are not created manually but loaders like {@link GLTFLoader}\n * or {@link FBXLoader } import respective models.\n *\n * @augments Mesh\n */\nclass SkinnedMesh extends Mesh {\n  /**\n   * Constructs a new skinned mesh.\n   *\n   * @param {BufferGeometry} [geometry] - The mesh geometry.\n   * @param {Material|Array<Material>} [material] - The mesh material.\n   */\n  constructor(geometry, material) {\n    super(geometry, material);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isSkinnedMesh = true;\n    this.type = 'SkinnedMesh';\n\n    /**\n     * `AttachedBindMode` means the skinned mesh shares the same world space as the skeleton.\n     * This is not true when using `DetachedBindMode` which is useful when sharing a skeleton\n     * across multiple skinned meshes.\n     *\n     * @type {(AttachedBindMode|DetachedBindMode)}\n     * @default AttachedBindMode\n     */\n    this.bindMode = AttachedBindMode;\n\n    /**\n     * The base matrix that is used for the bound bone transforms.\n     *\n     * @type {Matrix4}\n     */\n    this.bindMatrix = new Matrix4();\n\n    /**\n     * The base matrix that is used for resetting the bound bone transforms.\n     *\n     * @type {Matrix4}\n     */\n    this.bindMatrixInverse = new Matrix4();\n\n    /**\n     * The bounding box of the skinned mesh. Can be computed via {@link SkinnedMesh#computeBoundingBox}.\n     *\n     * @type {?Box3}\n     * @default null\n     */\n    this.boundingBox = null;\n\n    /**\n     * The bounding sphere of the skinned mesh. Can be computed via {@link SkinnedMesh#computeBoundingSphere}.\n     *\n     * @type {?Sphere}\n     * @default null\n     */\n    this.boundingSphere = null;\n  }\n\n  /**\n   * Computes the bounding box of the skinned mesh, and updates {@link SkinnedMesh#boundingBox}.\n   * The bounding box is not automatically computed by the engine; this method must be called by your app.\n   * If the skinned mesh is animated, the bounding box should be recomputed per frame in order to reflect\n   * the current animation state.\n   */\n  computeBoundingBox() {\n    const geometry = this.geometry;\n    if (this.boundingBox === null) {\n      this.boundingBox = new Box3();\n    }\n    this.boundingBox.makeEmpty();\n    const positionAttribute = geometry.getAttribute('position');\n    for (let i = 0; i < positionAttribute.count; i++) {\n      this.getVertexPosition(i, _vertex);\n      this.boundingBox.expandByPoint(_vertex);\n    }\n  }\n\n  /**\n   * Computes the bounding sphere of the skinned mesh, and updates {@link SkinnedMesh#boundingSphere}.\n   * The bounding sphere is automatically computed by the engine once when it is needed, e.g., for ray casting\n   * and view frustum culling. If the skinned mesh is animated, the bounding sphere should be recomputed\n   * per frame in order to reflect the current animation state.\n   */\n  computeBoundingSphere() {\n    const geometry = this.geometry;\n    if (this.boundingSphere === null) {\n      this.boundingSphere = new Sphere();\n    }\n    this.boundingSphere.makeEmpty();\n    const positionAttribute = geometry.getAttribute('position');\n    for (let i = 0; i < positionAttribute.count; i++) {\n      this.getVertexPosition(i, _vertex);\n      this.boundingSphere.expandByPoint(_vertex);\n    }\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.bindMode = source.bindMode;\n    this.bindMatrix.copy(source.bindMatrix);\n    this.bindMatrixInverse.copy(source.bindMatrixInverse);\n    this.skeleton = source.skeleton;\n    if (source.boundingBox !== null) this.boundingBox = source.boundingBox.clone();\n    if (source.boundingSphere !== null) this.boundingSphere = source.boundingSphere.clone();\n    return this;\n  }\n  raycast(raycaster, intersects) {\n    const material = this.material;\n    const matrixWorld = this.matrixWorld;\n    if (material === undefined) return;\n\n    // test with bounding sphere in world space\n\n    if (this.boundingSphere === null) this.computeBoundingSphere();\n    _sphere$5.copy(this.boundingSphere);\n    _sphere$5.applyMatrix4(matrixWorld);\n    if (raycaster.ray.intersectsSphere(_sphere$5) === false) return;\n\n    // convert ray to local space of skinned mesh\n\n    _inverseMatrix$2.copy(matrixWorld).invert();\n    _ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2);\n\n    // test with bounding box in local space\n\n    if (this.boundingBox !== null) {\n      if (_ray$2.intersectsBox(this.boundingBox) === false) return;\n    }\n\n    // test for intersections with geometry\n\n    this._computeIntersections(raycaster, intersects, _ray$2);\n  }\n  getVertexPosition(index, target) {\n    super.getVertexPosition(index, target);\n    this.applyBoneTransform(index, target);\n    return target;\n  }\n\n  /**\n   * Binds the given skeleton to the skinned mesh.\n   *\n   * @param {Skeleton} skeleton - The skeleton to bind.\n   * @param {Matrix4} [bindMatrix] - The bind matrix. If no bind matrix is provided,\n   * the skinned mesh's world matrix will be used instead.\n   */\n  bind(skeleton, bindMatrix) {\n    this.skeleton = skeleton;\n    if (bindMatrix === undefined) {\n      this.updateMatrixWorld(true);\n      this.skeleton.calculateInverses();\n      bindMatrix = this.matrixWorld;\n    }\n    this.bindMatrix.copy(bindMatrix);\n    this.bindMatrixInverse.copy(bindMatrix).invert();\n  }\n\n  /**\n   * This method sets the skinned mesh in the rest pose).\n   */\n  pose() {\n    this.skeleton.pose();\n  }\n\n  /**\n   * Normalizes the skin weights which are defined as a buffer attribute\n   * in the skinned mesh's geometry.\n   */\n  normalizeSkinWeights() {\n    const vector = new Vector4();\n    const skinWeight = this.geometry.attributes.skinWeight;\n    for (let i = 0, l = skinWeight.count; i < l; i++) {\n      vector.fromBufferAttribute(skinWeight, i);\n      const scale = 1.0 / vector.manhattanLength();\n      if (scale !== Infinity) {\n        vector.multiplyScalar(scale);\n      } else {\n        vector.set(1, 0, 0, 0); // do something reasonable\n      }\n      skinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);\n    }\n  }\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (this.bindMode === AttachedBindMode) {\n      this.bindMatrixInverse.copy(this.matrixWorld).invert();\n    } else if (this.bindMode === DetachedBindMode) {\n      this.bindMatrixInverse.copy(this.bindMatrix).invert();\n    } else {\n      console.warn('THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode);\n    }\n  }\n\n  /**\n   * Applies the bone transform associated with the given index to the given\n   * vertex position. Returns the updated vector.\n   *\n   * @param {number} index - The vertex index.\n   * @param {Vector3} target - The target object that is used to store the method's result.\n   * the skinned mesh's world matrix will be used instead.\n   * @return {Vector3} The updated vertex position.\n   */\n  applyBoneTransform(index, target) {\n    const skeleton = this.skeleton;\n    const geometry = this.geometry;\n    _skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);\n    _skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);\n    _basePosition.copy(target).applyMatrix4(this.bindMatrix);\n    target.set(0, 0, 0);\n    for (let i = 0; i < 4; i++) {\n      const weight = _skinWeight.getComponent(i);\n      if (weight !== 0) {\n        const boneIndex = _skinIndex.getComponent(i);\n        _matrix4.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);\n        target.addScaledVector(_vector3.copy(_basePosition).applyMatrix4(_matrix4), weight);\n      }\n    }\n    return target.applyMatrix4(this.bindMatrixInverse);\n  }\n}\n\n/**\n * A bone which is part of a {@link Skeleton}. The skeleton in turn is used by\n * the {@link SkinnedMesh}.\n *\n * ```js\n * const root = new THREE.Bone();\n * const child = new THREE.Bone();\n *\n * root.add( child );\n * child.position.y = 5;\n * ```\n *\n * @augments Object3D\n */\nclass Bone extends Object3D {\n  /**\n   * Constructs a new bone.\n   */\n  constructor() {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isBone = true;\n    this.type = 'Bone';\n  }\n}\n\n/**\n * Creates a texture directly from raw buffer data.\n *\n * The interpretation of the data depends on type and format: If the type is\n * `UnsignedByteType`, a `Uint8Array` will be useful for addressing the\n * texel data. If the format is `RGBAFormat`, data needs four values for\n * one texel; Red, Green, Blue and Alpha (typically the opacity).\n *\n * @augments Texture\n */\nclass DataTexture extends Texture {\n  /**\n   * Constructs a new data texture.\n   *\n   * @param {?TypedArray} [data=null] - The buffer data.\n   * @param {number} [width=1] - The width of the texture.\n   * @param {number} [height=1] - The height of the texture.\n   * @param {number} [format=RGBAFormat] - The texture format.\n   * @param {number} [type=UnsignedByteType] - The texture type.\n   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n   * @param {number} [magFilter=NearestFilter] - The mag filter value.\n   * @param {number} [minFilter=NearestFilter] - The min filter value.\n   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n   * @param {string} [colorSpace=NoColorSpace] - The color space.\n   */\n  constructor() {\n    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let format = arguments.length > 3 ? arguments[3] : undefined;\n    let type = arguments.length > 4 ? arguments[4] : undefined;\n    let mapping = arguments.length > 5 ? arguments[5] : undefined;\n    let wrapS = arguments.length > 6 ? arguments[6] : undefined;\n    let wrapT = arguments.length > 7 ? arguments[7] : undefined;\n    let magFilter = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : NearestFilter;\n    let minFilter = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : NearestFilter;\n    let anisotropy = arguments.length > 10 ? arguments[10] : undefined;\n    let colorSpace = arguments.length > 11 ? arguments[11] : undefined;\n    super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isDataTexture = true;\n\n    /**\n     * The image definition of a data texture.\n     *\n     * @type {{data:TypedArray,width:number,height:number}}\n     */\n    this.image = {\n      data: data,\n      width: width,\n      height: height\n    };\n\n    /**\n     * Whether to generate mipmaps (if possible) for a texture.\n     *\n     * Overwritten and set to `false` by default.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.generateMipmaps = false;\n\n    /**\n     * If set to `true`, the texture is flipped along the vertical axis when\n     * uploaded to the GPU.\n     *\n     * Overwritten and set to `false` by default.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.flipY = false;\n\n    /**\n     * Specifies the alignment requirements for the start of each pixel row in memory.\n     *\n     * Overwritten and set to `1` by default.\n     *\n     * @type {boolean}\n     * @default 1\n     */\n    this.unpackAlignment = 1;\n  }\n}\nconst _offsetMatrix = /*@__PURE__*/new Matrix4();\nconst _identityMatrix = /*@__PURE__*/new Matrix4();\n\n/**\n * Class for representing the armatures in `three.js`. The skeleton\n * is defined by a hierarchy of bones.\n *\n * ```js\n * const bones = [];\n *\n * const shoulder = new THREE.Bone();\n * const elbow = new THREE.Bone();\n * const hand = new THREE.Bone();\n *\n * shoulder.add( elbow );\n * elbow.add( hand );\n *\n * bones.push( shoulder , elbow, hand);\n *\n * shoulder.position.y = -5;\n * elbow.position.y = 0;\n * hand.position.y = 5;\n *\n * const armSkeleton = new THREE.Skeleton( bones );\n * ```\n */\nclass Skeleton {\n  /**\n   * Constructs a new skeleton.\n   *\n   * @param {Array<Bone>} [bones] - An array of bones.\n   * @param {Array<Matrix4>} [boneInverses] - An array of bone inverse matrices.\n   * If not provided, these matrices will be computed automatically via {@link Skeleton#calculateInverses}.\n   */\n  constructor() {\n    let bones = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let boneInverses = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    this.uuid = generateUUID();\n\n    /**\n     * An array of bones defining the skeleton.\n     *\n     * @type {Array<Bone>}\n     */\n    this.bones = bones.slice(0);\n\n    /**\n     * An array of bone inverse matrices.\n     *\n     * @type {Array<Matrix4>}\n     */\n    this.boneInverses = boneInverses;\n\n    /**\n     * An array buffer holding the bone data.\n     * Input data for {@link Skeleton#boneTexture}.\n     *\n     * @type {?Float32Array}\n     * @default null\n     */\n    this.boneMatrices = null;\n\n    /**\n     * A texture holding the bone data for use\n     * in the vertex shader.\n     *\n     * @type {?DataTexture}\n     * @default null\n     */\n    this.boneTexture = null;\n    this.init();\n  }\n\n  /**\n   * Initializes the skeleton. This method gets automatically called by the constructor\n   * but depending on how the skeleton is created it might be necessary to call this method\n   * manually.\n   */\n  init() {\n    const bones = this.bones;\n    const boneInverses = this.boneInverses;\n    this.boneMatrices = new Float32Array(bones.length * 16);\n\n    // calculate inverse bone matrices if necessary\n\n    if (boneInverses.length === 0) {\n      this.calculateInverses();\n    } else {\n      // handle special case\n\n      if (bones.length !== boneInverses.length) {\n        console.warn('THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.');\n        this.boneInverses = [];\n        for (let i = 0, il = this.bones.length; i < il; i++) {\n          this.boneInverses.push(new Matrix4());\n        }\n      }\n    }\n  }\n\n  /**\n   * Computes the bone inverse matrices. This method resets {@link Skeleton#boneInverses}\n   * and fills it with new matrices.\n   */\n  calculateInverses() {\n    this.boneInverses.length = 0;\n    for (let i = 0, il = this.bones.length; i < il; i++) {\n      const inverse = new Matrix4();\n      if (this.bones[i]) {\n        inverse.copy(this.bones[i].matrixWorld).invert();\n      }\n      this.boneInverses.push(inverse);\n    }\n  }\n\n  /**\n   * Resets the skeleton to the base pose.\n   */\n  pose() {\n    // recover the bind-time world matrices\n\n    for (let i = 0, il = this.bones.length; i < il; i++) {\n      const bone = this.bones[i];\n      if (bone) {\n        bone.matrixWorld.copy(this.boneInverses[i]).invert();\n      }\n    }\n\n    // compute the local matrices, positions, rotations and scales\n\n    for (let i = 0, il = this.bones.length; i < il; i++) {\n      const bone = this.bones[i];\n      if (bone) {\n        if (bone.parent && bone.parent.isBone) {\n          bone.matrix.copy(bone.parent.matrixWorld).invert();\n          bone.matrix.multiply(bone.matrixWorld);\n        } else {\n          bone.matrix.copy(bone.matrixWorld);\n        }\n        bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);\n      }\n    }\n  }\n\n  /**\n   * Resets the skeleton to the base pose.\n   */\n  update() {\n    const bones = this.bones;\n    const boneInverses = this.boneInverses;\n    const boneMatrices = this.boneMatrices;\n    const boneTexture = this.boneTexture;\n\n    // flatten bone matrices to array\n\n    for (let i = 0, il = bones.length; i < il; i++) {\n      // compute the offset between the current and the original transform\n\n      const matrix = bones[i] ? bones[i].matrixWorld : _identityMatrix;\n      _offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);\n      _offsetMatrix.toArray(boneMatrices, i * 16);\n    }\n    if (boneTexture !== null) {\n      boneTexture.needsUpdate = true;\n    }\n  }\n\n  /**\n   * Returns a new skeleton with copied values from this instance.\n   *\n   * @return {Skeleton} A clone of this instance.\n   */\n  clone() {\n    return new Skeleton(this.bones, this.boneInverses);\n  }\n\n  /**\n   * Computes a data texture for passing bone data to the vertex shader.\n   *\n   * @return {Skeleton} A reference of this instance.\n   */\n  computeBoneTexture() {\n    // layout (1 matrix = 4 pixels)\n    //      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n    //  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n    //       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n    //       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n    //       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n    let size = Math.sqrt(this.bones.length * 4); // 4 pixels needed for 1 matrix\n    size = Math.ceil(size / 4) * 4;\n    size = Math.max(size, 4);\n    const boneMatrices = new Float32Array(size * size * 4); // 4 floats per RGBA pixel\n    boneMatrices.set(this.boneMatrices); // copy current values\n\n    const boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);\n    boneTexture.needsUpdate = true;\n    this.boneMatrices = boneMatrices;\n    this.boneTexture = boneTexture;\n    return this;\n  }\n\n  /**\n   * Searches through the skeleton's bone array and returns the first with a\n   * matching name.\n   *\n   * @param {string} name - The name of the bone.\n   * @return {Bone|undefined} The found bone. `undefined` if no bone has been found.\n   */\n  getBoneByName(name) {\n    for (let i = 0, il = this.bones.length; i < il; i++) {\n      const bone = this.bones[i];\n      if (bone.name === name) {\n        return bone;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    if (this.boneTexture !== null) {\n      this.boneTexture.dispose();\n      this.boneTexture = null;\n    }\n  }\n\n  /**\n   * Setups the skeleton by the given JSON and bones.\n   *\n   * @param {Object} json - The skeleton as serialized JSON.\n   * @param {Object<string, Bone>} bones - An array of bones.\n   * @return {Skeleton} A reference of this instance.\n   */\n  fromJSON(json, bones) {\n    this.uuid = json.uuid;\n    for (let i = 0, l = json.bones.length; i < l; i++) {\n      const uuid = json.bones[i];\n      let bone = bones[uuid];\n      if (bone === undefined) {\n        console.warn('THREE.Skeleton: No bone found with UUID:', uuid);\n        bone = new Bone();\n      }\n      this.bones.push(bone);\n      this.boneInverses.push(new Matrix4().fromArray(json.boneInverses[i]));\n    }\n    this.init();\n    return this;\n  }\n\n  /**\n   * Serializes the skeleton into JSON.\n   *\n   * @return {Object} A JSON object representing the serialized skeleton.\n   * @see {@link ObjectLoader#parse}\n   */\n  toJSON() {\n    const data = {\n      metadata: {\n        version: 4.6,\n        type: 'Skeleton',\n        generator: 'Skeleton.toJSON'\n      },\n      bones: [],\n      boneInverses: []\n    };\n    data.uuid = this.uuid;\n    const bones = this.bones;\n    const boneInverses = this.boneInverses;\n    for (let i = 0, l = bones.length; i < l; i++) {\n      const bone = bones[i];\n      data.bones.push(bone.uuid);\n      const boneInverse = boneInverses[i];\n      data.boneInverses.push(boneInverse.toArray());\n    }\n    return data;\n  }\n}\n\n/**\n * An instanced version of a buffer attribute.\n *\n * @augments BufferAttribute\n */\nclass InstancedBufferAttribute extends BufferAttribute {\n  /**\n   * Constructs a new instanced buffer attribute.\n   *\n   * @param {TypedArray} array - The array holding the attribute data.\n   * @param {number} itemSize - The item size.\n   * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n   * @param {number} [meshPerAttribute=1] - How often a value of this buffer attribute should be repeated.\n   */\n  constructor(array, itemSize, normalized) {\n    let meshPerAttribute = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    super(array, itemSize, normalized);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isInstancedBufferAttribute = true;\n\n    /**\n     * Defines how often a value of this buffer attribute should be repeated. A\n     * value of one means that each value of the instanced attribute is used for\n     * a single instance. A value of two means that each value is used for two\n     * consecutive instances (and so on).\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.meshPerAttribute = meshPerAttribute;\n  }\n  copy(source) {\n    super.copy(source);\n    this.meshPerAttribute = source.meshPerAttribute;\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    data.meshPerAttribute = this.meshPerAttribute;\n    data.isInstancedBufferAttribute = true;\n    return data;\n  }\n}\nconst _instanceLocalMatrix = /*@__PURE__*/new Matrix4();\nconst _instanceWorldMatrix = /*@__PURE__*/new Matrix4();\nconst _instanceIntersects = [];\nconst _box3 = /*@__PURE__*/new Box3();\nconst _identity = /*@__PURE__*/new Matrix4();\nconst _mesh$1 = /*@__PURE__*/new Mesh();\nconst _sphere$4 = /*@__PURE__*/new Sphere();\n\n/**\n * A special version of a mesh with instanced rendering support. Use\n * this class if you have to render a large number of objects with the same\n * geometry and material(s) but with different world transformations. The usage\n * of 'InstancedMesh' will help you to reduce the number of draw calls and thus\n * improve the overall rendering performance in your application.\n *\n * @augments Mesh\n */\nclass InstancedMesh extends Mesh {\n  /**\n   * Constructs a new instanced mesh.\n   *\n   * @param {BufferGeometry} [geometry] - The mesh geometry.\n   * @param {Material|Array<Material>} [material] - The mesh material.\n   * @param {number} count - The number of instances.\n   */\n  constructor(geometry, material, count) {\n    super(geometry, material);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isInstancedMesh = true;\n\n    /**\n     * Represents the local transformation of all instances. You have to set its\n     * {@link BufferAttribute#needsUpdate} flag to true if you modify instanced data\n     * via {@link InstancedMesh#setMatrixAt}.\n     *\n     * @type {InstancedBufferAttribute}\n     */\n    this.instanceMatrix = new InstancedBufferAttribute(new Float32Array(count * 16), 16);\n\n    /**\n     * Represents the color of all instances. You have to set its\n     * {@link BufferAttribute#needsUpdate} flag to true if you modify instanced data\n     * via {@link InstancedMesh#setColorAt}.\n     *\n     * @type {?InstancedBufferAttribute}\n     * @default null\n     */\n    this.instanceColor = null;\n\n    /**\n     * Represents the morph target weights of all instances. You have to set its\n     * {@link Texture#needsUpdate} flag to true if you modify instanced data\n     * via {@link InstancedMesh#setMorphAt}.\n     *\n     * @type {?DataTexture}\n     * @default null\n     */\n    this.morphTexture = null;\n\n    /**\n     * The number of instances.\n     *\n     * @type {number}\n     */\n    this.count = count;\n\n    /**\n     * The bounding box of the instanced mesh. Can be computed via {@link InstancedMesh#computeBoundingBox}.\n     *\n     * @type {?Box3}\n     * @default null\n     */\n    this.boundingBox = null;\n\n    /**\n     * The bounding sphere of the instanced mesh. Can be computed via {@link InstancedMesh#computeBoundingSphere}.\n     *\n     * @type {?Sphere}\n     * @default null\n     */\n    this.boundingSphere = null;\n    for (let i = 0; i < count; i++) {\n      this.setMatrixAt(i, _identity);\n    }\n  }\n\n  /**\n   * Computes the bounding box of the instanced mesh, and updates {@link InstancedMesh#boundingBox}.\n   * The bounding box is not automatically computed by the engine; this method must be called by your app.\n   * You may need to recompute the bounding box if an instance is transformed via {@link InstancedMesh#setMatrixAt}.\n   */\n  computeBoundingBox() {\n    const geometry = this.geometry;\n    const count = this.count;\n    if (this.boundingBox === null) {\n      this.boundingBox = new Box3();\n    }\n    if (geometry.boundingBox === null) {\n      geometry.computeBoundingBox();\n    }\n    this.boundingBox.makeEmpty();\n    for (let i = 0; i < count; i++) {\n      this.getMatrixAt(i, _instanceLocalMatrix);\n      _box3.copy(geometry.boundingBox).applyMatrix4(_instanceLocalMatrix);\n      this.boundingBox.union(_box3);\n    }\n  }\n\n  /**\n   * Computes the bounding sphere of the instanced mesh, and updates {@link InstancedMesh#boundingSphere}\n   * The engine automatically computes the bounding sphere when it is needed, e.g., for ray casting or view frustum culling.\n   * You may need to recompute the bounding sphere if an instance is transformed via {@link InstancedMesh#setMatrixAt}.\n   */\n  computeBoundingSphere() {\n    const geometry = this.geometry;\n    const count = this.count;\n    if (this.boundingSphere === null) {\n      this.boundingSphere = new Sphere();\n    }\n    if (geometry.boundingSphere === null) {\n      geometry.computeBoundingSphere();\n    }\n    this.boundingSphere.makeEmpty();\n    for (let i = 0; i < count; i++) {\n      this.getMatrixAt(i, _instanceLocalMatrix);\n      _sphere$4.copy(geometry.boundingSphere).applyMatrix4(_instanceLocalMatrix);\n      this.boundingSphere.union(_sphere$4);\n    }\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.instanceMatrix.copy(source.instanceMatrix);\n    if (source.morphTexture !== null) this.morphTexture = source.morphTexture.clone();\n    if (source.instanceColor !== null) this.instanceColor = source.instanceColor.clone();\n    this.count = source.count;\n    if (source.boundingBox !== null) this.boundingBox = source.boundingBox.clone();\n    if (source.boundingSphere !== null) this.boundingSphere = source.boundingSphere.clone();\n    return this;\n  }\n\n  /**\n   * Gets the color of the defined instance.\n   *\n   * @param {number} index - The instance index.\n   * @param {Color} color - The target object that is used to store the method's result.\n   */\n  getColorAt(index, color) {\n    color.fromArray(this.instanceColor.array, index * 3);\n  }\n\n  /**\n   * Gets the local transformation matrix of the defined instance.\n   *\n   * @param {number} index - The instance index.\n   * @param {Matrix4} matrix - The target object that is used to store the method's result.\n   */\n  getMatrixAt(index, matrix) {\n    matrix.fromArray(this.instanceMatrix.array, index * 16);\n  }\n\n  /**\n   * Gets the morph target weights of the defined instance.\n   *\n   * @param {number} index - The instance index.\n   * @param {Mesh} object - The target object that is used to store the method's result.\n   */\n  getMorphAt(index, object) {\n    const objectInfluences = object.morphTargetInfluences;\n    const array = this.morphTexture.source.data.data;\n    const len = objectInfluences.length + 1; // All influences + the baseInfluenceSum\n\n    const dataIndex = index * len + 1; // Skip the baseInfluenceSum at the beginning\n\n    for (let i = 0; i < objectInfluences.length; i++) {\n      objectInfluences[i] = array[dataIndex + i];\n    }\n  }\n  raycast(raycaster, intersects) {\n    const matrixWorld = this.matrixWorld;\n    const raycastTimes = this.count;\n    _mesh$1.geometry = this.geometry;\n    _mesh$1.material = this.material;\n    if (_mesh$1.material === undefined) return;\n\n    // test with bounding sphere first\n\n    if (this.boundingSphere === null) this.computeBoundingSphere();\n    _sphere$4.copy(this.boundingSphere);\n    _sphere$4.applyMatrix4(matrixWorld);\n    if (raycaster.ray.intersectsSphere(_sphere$4) === false) return;\n\n    // now test each instance\n\n    for (let instanceId = 0; instanceId < raycastTimes; instanceId++) {\n      // calculate the world matrix for each instance\n\n      this.getMatrixAt(instanceId, _instanceLocalMatrix);\n      _instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix);\n\n      // the mesh represents this single instance\n\n      _mesh$1.matrixWorld = _instanceWorldMatrix;\n      _mesh$1.raycast(raycaster, _instanceIntersects);\n\n      // process the result of raycast\n\n      for (let i = 0, l = _instanceIntersects.length; i < l; i++) {\n        const intersect = _instanceIntersects[i];\n        intersect.instanceId = instanceId;\n        intersect.object = this;\n        intersects.push(intersect);\n      }\n      _instanceIntersects.length = 0;\n    }\n  }\n\n  /**\n   * Sets the given color to the defined instance. Make sure you set the `needsUpdate` flag of\n   * {@link InstancedMesh#instanceColor} to `true` after updating all the colors.\n   *\n   * @param {number} index - The instance index.\n   * @param {Color} color - The instance color.\n   */\n  setColorAt(index, color) {\n    if (this.instanceColor === null) {\n      this.instanceColor = new InstancedBufferAttribute(new Float32Array(this.instanceMatrix.count * 3).fill(1), 3);\n    }\n    color.toArray(this.instanceColor.array, index * 3);\n  }\n\n  /**\n   * Sets the given local transformation matrix to the defined instance. Make sure you set the `needsUpdate` flag of\n   * {@link InstancedMesh#instanceMatrix} to `true` after updating all the colors.\n   *\n   * @param {number} index - The instance index.\n   * @param {Matrix4} matrix - The local transformation.\n   */\n  setMatrixAt(index, matrix) {\n    matrix.toArray(this.instanceMatrix.array, index * 16);\n  }\n\n  /**\n   * Sets the morph target weights to the defined instance. Make sure you set the `needsUpdate` flag of\n   * {@link InstancedMesh#morphTexture} to `true` after updating all the influences.\n   *\n   * @param {number} index - The instance index.\n   * @param {Mesh} object -  A mesh which `morphTargetInfluences` property containing the morph target weights\n   * of a single instance.\n   */\n  setMorphAt(index, object) {\n    const objectInfluences = object.morphTargetInfluences;\n    const len = objectInfluences.length + 1; // morphBaseInfluence + all influences\n\n    if (this.morphTexture === null) {\n      this.morphTexture = new DataTexture(new Float32Array(len * this.count), len, this.count, RedFormat, FloatType);\n    }\n    const array = this.morphTexture.source.data.data;\n    let morphInfluencesSum = 0;\n    for (let i = 0; i < objectInfluences.length; i++) {\n      morphInfluencesSum += objectInfluences[i];\n    }\n    const morphBaseInfluence = this.geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n    const dataIndex = len * index;\n    array[dataIndex] = morphBaseInfluence;\n    array.set(objectInfluences, dataIndex + 1);\n  }\n  updateMorphTargets() {}\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    this.dispatchEvent({\n      type: 'dispose'\n    });\n    if (this.morphTexture !== null) {\n      this.morphTexture.dispose();\n      this.morphTexture = null;\n    }\n  }\n}\nconst _vector1 = /*@__PURE__*/new Vector3();\nconst _vector2 = /*@__PURE__*/new Vector3();\nconst _normalMatrix = /*@__PURE__*/new Matrix3();\n\n/**\n * A two dimensional surface that extends infinitely in 3D space, represented\n * in [Hessian normal form]{@link http://mathworld.wolfram.com/HessianNormalForm.html}\n * by a unit length normal vector and a constant.\n */\nclass Plane {\n  /**\n   * Constructs a new plane.\n   *\n   * @param {Vector3} [normal=(1,0,0)] - A unit length vector defining the normal of the plane.\n   * @param {number} [constant=0] - The signed distance from the origin to the plane.\n   */\n  constructor() {\n    let normal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3(1, 0, 0);\n    let constant = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isPlane = true;\n\n    /**\n     * A unit length vector defining the normal of the plane.\n     *\n     * @type {Vector3}\n     */\n    this.normal = normal;\n\n    /**\n     * The signed distance from the origin to the plane.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.constant = constant;\n  }\n\n  /**\n   * Sets the plane components by copying the given values.\n   *\n   * @param {Vector3} normal - The normal.\n   * @param {number} constant - The constant.\n   * @return {Plane} A reference to this plane.\n   */\n  set(normal, constant) {\n    this.normal.copy(normal);\n    this.constant = constant;\n    return this;\n  }\n\n  /**\n   * Sets the plane components by defining `x`, `y`, `z` as the\n   * plane normal and `w` as the constant.\n   *\n   * @param {number} x - The value for the normal's x component.\n   * @param {number} y - The value for the normal's y component.\n   * @param {number} z - The value for the normal's z component.\n   * @param {number} w - The constant value.\n   * @return {Plane} A reference to this plane.\n   */\n  setComponents(x, y, z, w) {\n    this.normal.set(x, y, z);\n    this.constant = w;\n    return this;\n  }\n\n  /**\n   * Sets the plane from the given normal and coplanar point (that is a point\n   * that lies onto the plane).\n   *\n   * @param {Vector3} normal - The normal.\n   * @param {Vector3} point - A coplanar point.\n   * @return {Plane} A reference to this plane.\n   */\n  setFromNormalAndCoplanarPoint(normal, point) {\n    this.normal.copy(normal);\n    this.constant = -point.dot(this.normal);\n    return this;\n  }\n\n  /**\n   * Sets the plane from three coplanar points. The winding order is\n   * assumed to be counter-clockwise, and determines the direction of\n   * the plane normal.\n   *\n   * @param {Vector3} a - The first coplanar point.\n   * @param {Vector3} b - The second coplanar point.\n   * @param {Vector3} c - The third coplanar point.\n   * @return {Plane} A reference to this plane.\n   */\n  setFromCoplanarPoints(a, b, c) {\n    const normal = _vector1.subVectors(c, b).cross(_vector2.subVectors(a, b)).normalize();\n\n    // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n    this.setFromNormalAndCoplanarPoint(normal, a);\n    return this;\n  }\n\n  /**\n   * Copies the values of the given plane to this instance.\n   *\n   * @param {Plane} plane - The plane to copy.\n   * @return {Plane} A reference to this plane.\n   */\n  copy(plane) {\n    this.normal.copy(plane.normal);\n    this.constant = plane.constant;\n    return this;\n  }\n\n  /**\n   * Normalizes the plane normal and adjusts the constant accordingly.\n   *\n   * @return {Plane} A reference to this plane.\n   */\n  normalize() {\n    // Note: will lead to a divide by zero if the plane is invalid.\n\n    const inverseNormalLength = 1.0 / this.normal.length();\n    this.normal.multiplyScalar(inverseNormalLength);\n    this.constant *= inverseNormalLength;\n    return this;\n  }\n\n  /**\n   * Negates both the plane normal and the constant.\n   *\n   * @return {Plane} A reference to this plane.\n   */\n  negate() {\n    this.constant *= -1;\n    this.normal.negate();\n    return this;\n  }\n\n  /**\n   * Returns the signed distance from the given point to this plane.\n   *\n   * @param {Vector3} point - The point to compute the distance for.\n   * @return {number} The signed distance.\n   */\n  distanceToPoint(point) {\n    return this.normal.dot(point) + this.constant;\n  }\n\n  /**\n   * Returns the signed distance from the given sphere to this plane.\n   *\n   * @param {Sphere} sphere - The sphere to compute the distance for.\n   * @return {number} The signed distance.\n   */\n  distanceToSphere(sphere) {\n    return this.distanceToPoint(sphere.center) - sphere.radius;\n  }\n\n  /**\n   * Projects a the given point onto the plane.\n   *\n   * @param {Vector3} point - The point to project.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} The projected point on the plane.\n   */\n  projectPoint(point, target) {\n    return target.copy(point).addScaledVector(this.normal, -this.distanceToPoint(point));\n  }\n\n  /**\n   * Returns the intersection point of the passed line and the plane. Returns\n   * `null` if the line does not intersect. Returns the line's starting point if\n   * the line is coplanar with the plane.\n   *\n   * @param {Line3} line - The line to compute the intersection for.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {?Vector3} The intersection point.\n   */\n  intersectLine(line, target) {\n    const direction = line.delta(_vector1);\n    const denominator = this.normal.dot(direction);\n    if (denominator === 0) {\n      // line is coplanar, return origin\n      if (this.distanceToPoint(line.start) === 0) {\n        return target.copy(line.start);\n      }\n\n      // Unsure if this is the correct method to handle this case.\n      return null;\n    }\n    const t = -(line.start.dot(this.normal) + this.constant) / denominator;\n    if (t < 0 || t > 1) {\n      return null;\n    }\n    return target.copy(line.start).addScaledVector(direction, t);\n  }\n\n  /**\n   * Returns `true` if the given line segment intersects with (passes through) the plane.\n   *\n   * @param {Line3} line - The line to test.\n   * @return {boolean} Whether the given line segment intersects with the plane or not.\n   */\n  intersectsLine(line) {\n    // Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n    const startSign = this.distanceToPoint(line.start);\n    const endSign = this.distanceToPoint(line.end);\n    return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;\n  }\n\n  /**\n   * Returns `true` if the given bounding box intersects with the plane.\n   *\n   * @param {Box3} box - The bounding box to test.\n   * @return {boolean} Whether the given bounding box intersects with the plane or not.\n   */\n  intersectsBox(box) {\n    return box.intersectsPlane(this);\n  }\n\n  /**\n   * Returns `true` if the given bounding sphere intersects with the plane.\n   *\n   * @param {Sphere} sphere - The bounding sphere to test.\n   * @return {boolean} Whether the given bounding sphere intersects with the plane or not.\n   */\n  intersectsSphere(sphere) {\n    return sphere.intersectsPlane(this);\n  }\n\n  /**\n   * Returns a coplanar vector to the plane, by calculating the\n   * projection of the normal at the origin onto the plane.\n   *\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} The coplanar point.\n   */\n  coplanarPoint(target) {\n    return target.copy(this.normal).multiplyScalar(-this.constant);\n  }\n\n  /**\n   * Apply a 4x4 matrix to the plane. The matrix must be an affine, homogeneous transform.\n   *\n   * The optional normal matrix can be pre-computed like so:\n   * ```js\n   * const optionalNormalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\n   * ```\n   *\n   * @param {Matrix4} matrix - The transformation matrix.\n   * @param {Matrix4} [optionalNormalMatrix] - A pre-computed normal matrix.\n   * @return {Plane} A reference to this plane.\n   */\n  applyMatrix4(matrix, optionalNormalMatrix) {\n    const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);\n    const referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);\n    const normal = this.normal.applyMatrix3(normalMatrix).normalize();\n    this.constant = -referencePoint.dot(normal);\n    return this;\n  }\n\n  /**\n   * Translates the plane by the distance defined by the given offset vector.\n   * Note that this only affects the plane constant and will not affect the normal vector.\n   *\n   * @param {Vector3} offset - The offset vector.\n   * @return {Plane} A reference to this plane.\n   */\n  translate(offset) {\n    this.constant -= offset.dot(this.normal);\n    return this;\n  }\n\n  /**\n   * Returns `true` if this plane is equal with the given one.\n   *\n   * @param {Plane} plane - The plane to test for equality.\n   * @return {boolean} Whether this plane is equal with the given one.\n   */\n  equals(plane) {\n    return plane.normal.equals(this.normal) && plane.constant === this.constant;\n  }\n\n  /**\n   * Returns a new plane with copied values from this instance.\n   *\n   * @return {Plane} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n}\nconst _sphere$3 = /*@__PURE__*/new Sphere();\nconst _vector$6 = /*@__PURE__*/new Vector3();\n\n/**\n * Frustums are used to determine what is inside the camera's field of view.\n * They help speed up the rendering process - objects which lie outside a camera's\n * frustum can safely be excluded from rendering.\n *\n * This class is mainly intended for use internally by a renderer.\n */\nclass Frustum {\n  /**\n   * Constructs a new frustum.\n   *\n   * @param {Plane} [p0] - The first plane that encloses the frustum.\n   * @param {Plane} [p1] - The second plane that encloses the frustum.\n   * @param {Plane} [p2] - The third plane that encloses the frustum.\n   * @param {Plane} [p3] - The fourth plane that encloses the frustum.\n   * @param {Plane} [p4] - The fifth plane that encloses the frustum.\n   * @param {Plane} [p5] - The sixth plane that encloses the frustum.\n   */\n  constructor() {\n    let p0 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Plane();\n    let p1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Plane();\n    let p2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Plane();\n    let p3 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Plane();\n    let p4 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new Plane();\n    let p5 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new Plane();\n    /**\n     * This array holds the planes that enclose the frustum.\n     *\n     * @type {Array<Plane>}\n     */\n    this.planes = [p0, p1, p2, p3, p4, p5];\n  }\n\n  /**\n   * Sets the frustum planes by copying the given planes.\n   *\n   * @param {Plane} [p0] - The first plane that encloses the frustum.\n   * @param {Plane} [p1] - The second plane that encloses the frustum.\n   * @param {Plane} [p2] - The third plane that encloses the frustum.\n   * @param {Plane} [p3] - The fourth plane that encloses the frustum.\n   * @param {Plane} [p4] - The fifth plane that encloses the frustum.\n   * @param {Plane} [p5] - The sixth plane that encloses the frustum.\n   * @return {Frustum} A reference to this frustum.\n   */\n  set(p0, p1, p2, p3, p4, p5) {\n    const planes = this.planes;\n    planes[0].copy(p0);\n    planes[1].copy(p1);\n    planes[2].copy(p2);\n    planes[3].copy(p3);\n    planes[4].copy(p4);\n    planes[5].copy(p5);\n    return this;\n  }\n\n  /**\n   * Copies the values of the given frustum to this instance.\n   *\n   * @param {Frustum} frustum - The frustum to copy.\n   * @return {Frustum} A reference to this frustum.\n   */\n  copy(frustum) {\n    const planes = this.planes;\n    for (let i = 0; i < 6; i++) {\n      planes[i].copy(frustum.planes[i]);\n    }\n    return this;\n  }\n\n  /**\n   * Sets the frustum planes from the given projection matrix.\n   *\n   * @param {Matrix4} m - The projection matrix.\n   * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} coordinateSystem - The coordinate system.\n   * @return {Frustum} A reference to this frustum.\n   */\n  setFromProjectionMatrix(m) {\n    let coordinateSystem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : WebGLCoordinateSystem;\n    const planes = this.planes;\n    const me = m.elements;\n    const me0 = me[0],\n      me1 = me[1],\n      me2 = me[2],\n      me3 = me[3];\n    const me4 = me[4],\n      me5 = me[5],\n      me6 = me[6],\n      me7 = me[7];\n    const me8 = me[8],\n      me9 = me[9],\n      me10 = me[10],\n      me11 = me[11];\n    const me12 = me[12],\n      me13 = me[13],\n      me14 = me[14],\n      me15 = me[15];\n    planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();\n    planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();\n    planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();\n    planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();\n    planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();\n    if (coordinateSystem === WebGLCoordinateSystem) {\n      planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();\n    } else if (coordinateSystem === WebGPUCoordinateSystem) {\n      planes[5].setComponents(me2, me6, me10, me14).normalize();\n    } else {\n      throw new Error('THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: ' + coordinateSystem);\n    }\n    return this;\n  }\n\n  /**\n   * Returns `true` if the 3D object's bounding sphere is intersecting this frustum.\n   *\n   * Note that the 3D object must have a geometry so that the bounding sphere can be calculated.\n   *\n   * @param {Object3D} object - The 3D object to test.\n   * @return {boolean} Whether the 3D object's bounding sphere is intersecting this frustum or not.\n   */\n  intersectsObject(object) {\n    if (object.boundingSphere !== undefined) {\n      if (object.boundingSphere === null) object.computeBoundingSphere();\n      _sphere$3.copy(object.boundingSphere).applyMatrix4(object.matrixWorld);\n    } else {\n      const geometry = object.geometry;\n      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n      _sphere$3.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);\n    }\n    return this.intersectsSphere(_sphere$3);\n  }\n\n  /**\n   * Returns `true` if the given sprite is intersecting this frustum.\n   *\n   * @param {Sprite} sprite - The sprite to test.\n   * @return {boolean} Whether the sprite is intersecting this frustum or not.\n   */\n  intersectsSprite(sprite) {\n    _sphere$3.center.set(0, 0, 0);\n    _sphere$3.radius = 0.7071067811865476;\n    _sphere$3.applyMatrix4(sprite.matrixWorld);\n    return this.intersectsSphere(_sphere$3);\n  }\n\n  /**\n   * Returns `true` if the given bounding sphere is intersecting this frustum.\n   *\n   * @param {Sphere} sphere - The bounding sphere to test.\n   * @return {boolean} Whether the bounding sphere is intersecting this frustum or not.\n   */\n  intersectsSphere(sphere) {\n    const planes = this.planes;\n    const center = sphere.center;\n    const negRadius = -sphere.radius;\n    for (let i = 0; i < 6; i++) {\n      const distance = planes[i].distanceToPoint(center);\n      if (distance < negRadius) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns `true` if the given bounding box is intersecting this frustum.\n   *\n   * @param {Box3} box - The bounding box to test.\n   * @return {boolean} Whether the bounding box is intersecting this frustum or not.\n   */\n  intersectsBox(box) {\n    const planes = this.planes;\n    for (let i = 0; i < 6; i++) {\n      const plane = planes[i];\n\n      // corner at max distance\n\n      _vector$6.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n      _vector$6.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n      _vector$6.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n      if (plane.distanceToPoint(_vector$6) < 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns `true` if the given point lies within the frustum.\n   *\n   * @param {Vector3} point - The point to test.\n   * @return {boolean} Whether the point lies within this frustum or not.\n   */\n  containsPoint(point) {\n    const planes = this.planes;\n    for (let i = 0; i < 6; i++) {\n      if (planes[i].distanceToPoint(point) < 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns a new frustum with copied values from this instance.\n   *\n   * @return {Frustum} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n}\nconst _projScreenMatrix$2 = /*@__PURE__*/new Matrix4();\nconst _frustum$1 = /*@__PURE__*/new Frustum();\n\n/**\n * FrustumArray is used to determine if an object is visible in at least one camera\n * from an array of cameras. This is particularly useful for multi-view renderers.\n*/\nclass FrustumArray {\n  /**\n   * Constructs a new frustum array.\n   *\n   */\n  constructor() {\n    /**\n     * The coordinate system to use.\n     *\n     * @type {WebGLCoordinateSystem|WebGPUCoordinateSystem}\n     * @default WebGLCoordinateSystem\n     */\n    this.coordinateSystem = WebGLCoordinateSystem;\n  }\n\n  /**\n   * Returns `true` if the 3D object's bounding sphere is intersecting any frustum\n   * from the camera array.\n   *\n   * @param {Object3D} object - The 3D object to test.\n   * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.\n   * @return {boolean} Whether the 3D object is visible in any camera.\n   */\n  intersectsObject(object, cameraArray) {\n    if (!cameraArray.isArrayCamera || cameraArray.cameras.length === 0) {\n      return false;\n    }\n    for (let i = 0; i < cameraArray.cameras.length; i++) {\n      const camera = cameraArray.cameras[i];\n      _projScreenMatrix$2.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n      _frustum$1.setFromProjectionMatrix(_projScreenMatrix$2, this.coordinateSystem);\n      if (_frustum$1.intersectsObject(object)) {\n        return true; // Object is visible in at least one camera\n      }\n    }\n    return false; // Not visible in any camera\n  }\n\n  /**\n   * Returns `true` if the given sprite is intersecting any frustum\n   * from the camera array.\n   *\n   * @param {Sprite} sprite - The sprite to test.\n   * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.\n   * @return {boolean} Whether the sprite is visible in any camera.\n   */\n  intersectsSprite(sprite, cameraArray) {\n    if (!cameraArray || !cameraArray.cameras || cameraArray.cameras.length === 0) {\n      return false;\n    }\n    for (let i = 0; i < cameraArray.cameras.length; i++) {\n      const camera = cameraArray.cameras[i];\n      _projScreenMatrix$2.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n      _frustum$1.setFromProjectionMatrix(_projScreenMatrix$2, this.coordinateSystem);\n      if (_frustum$1.intersectsSprite(sprite)) {\n        return true; // Sprite is visible in at least one camera\n      }\n    }\n    return false; // Not visible in any camera\n  }\n\n  /**\n   * Returns `true` if the given bounding sphere is intersecting any frustum\n   * from the camera array.\n   *\n   * @param {Sphere} sphere - The bounding sphere to test.\n   * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.\n   * @return {boolean} Whether the sphere is visible in any camera.\n   */\n  intersectsSphere(sphere, cameraArray) {\n    if (!cameraArray || !cameraArray.cameras || cameraArray.cameras.length === 0) {\n      return false;\n    }\n    for (let i = 0; i < cameraArray.cameras.length; i++) {\n      const camera = cameraArray.cameras[i];\n      _projScreenMatrix$2.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n      _frustum$1.setFromProjectionMatrix(_projScreenMatrix$2, this.coordinateSystem);\n      if (_frustum$1.intersectsSphere(sphere)) {\n        return true; // Sphere is visible in at least one camera\n      }\n    }\n    return false; // Not visible in any camera\n  }\n\n  /**\n   * Returns `true` if the given bounding box is intersecting any frustum\n   * from the camera array.\n   *\n   * @param {Box3} box - The bounding box to test.\n   * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.\n   * @return {boolean} Whether the box is visible in any camera.\n   */\n  intersectsBox(box, cameraArray) {\n    if (!cameraArray || !cameraArray.cameras || cameraArray.cameras.length === 0) {\n      return false;\n    }\n    for (let i = 0; i < cameraArray.cameras.length; i++) {\n      const camera = cameraArray.cameras[i];\n      _projScreenMatrix$2.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n      _frustum$1.setFromProjectionMatrix(_projScreenMatrix$2, this.coordinateSystem);\n      if (_frustum$1.intersectsBox(box)) {\n        return true; // Box is visible in at least one camera\n      }\n    }\n    return false; // Not visible in any camera\n  }\n\n  /**\n   * Returns `true` if the given point lies within any frustum\n   * from the camera array.\n   *\n   * @param {Vector3} point - The point to test.\n   * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.\n   * @return {boolean} Whether the point is visible in any camera.\n   */\n  containsPoint(point, cameraArray) {\n    if (!cameraArray || !cameraArray.cameras || cameraArray.cameras.length === 0) {\n      return false;\n    }\n    for (let i = 0; i < cameraArray.cameras.length; i++) {\n      const camera = cameraArray.cameras[i];\n      _projScreenMatrix$2.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n      _frustum$1.setFromProjectionMatrix(_projScreenMatrix$2, this.coordinateSystem);\n      if (_frustum$1.containsPoint(point)) {\n        return true; // Point is visible in at least one camera\n      }\n    }\n    return false; // Not visible in any camera\n  }\n\n  /**\n   * Returns a new frustum array with copied values from this instance.\n   *\n   * @return {FrustumArray} A clone of this instance.\n   */\n  clone() {\n    return new FrustumArray();\n  }\n}\nfunction ascIdSort(a, b) {\n  return a - b;\n}\nfunction sortOpaque(a, b) {\n  return a.z - b.z;\n}\nfunction sortTransparent(a, b) {\n  return b.z - a.z;\n}\nclass MultiDrawRenderList {\n  constructor() {\n    this.index = 0;\n    this.pool = [];\n    this.list = [];\n  }\n  push(start, count, z, index) {\n    const pool = this.pool;\n    const list = this.list;\n    if (this.index >= pool.length) {\n      pool.push({\n        start: -1,\n        count: -1,\n        z: -1,\n        index: -1\n      });\n    }\n    const item = pool[this.index];\n    list.push(item);\n    this.index++;\n    item.start = start;\n    item.count = count;\n    item.z = z;\n    item.index = index;\n  }\n  reset() {\n    this.list.length = 0;\n    this.index = 0;\n  }\n}\nconst _matrix$1 = /*@__PURE__*/new Matrix4();\nconst _whiteColor = /*@__PURE__*/new Color(1, 1, 1);\nconst _frustum = /*@__PURE__*/new Frustum();\nconst _frustumArray = /*@__PURE__*/new FrustumArray();\nconst _box$1 = /*@__PURE__*/new Box3();\nconst _sphere$2 = /*@__PURE__*/new Sphere();\nconst _vector$5 = /*@__PURE__*/new Vector3();\nconst _forward = /*@__PURE__*/new Vector3();\nconst _temp = /*@__PURE__*/new Vector3();\nconst _renderList = /*@__PURE__*/new MultiDrawRenderList();\nconst _mesh = /*@__PURE__*/new Mesh();\nconst _batchIntersects = [];\n\n// copies data from attribute \"src\" into \"target\" starting at \"targetOffset\"\nfunction copyAttributeData(src, target) {\n  let targetOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  const itemSize = target.itemSize;\n  if (src.isInterleavedBufferAttribute || src.array.constructor !== target.array.constructor) {\n    // use the component getters and setters if the array data cannot\n    // be copied directly\n    const vertexCount = src.count;\n    for (let i = 0; i < vertexCount; i++) {\n      for (let c = 0; c < itemSize; c++) {\n        target.setComponent(i + targetOffset, c, src.getComponent(i, c));\n      }\n    }\n  } else {\n    // faster copy approach using typed array set function\n    target.array.set(src.array, targetOffset * itemSize);\n  }\n  target.needsUpdate = true;\n}\n\n// safely copies array contents to a potentially smaller array\nfunction copyArrayContents(src, target) {\n  if (src.constructor !== target.constructor) {\n    // if arrays are of a different type (eg due to index size increasing) then data must be per-element copied\n    const len = Math.min(src.length, target.length);\n    for (let i = 0; i < len; i++) {\n      target[i] = src[i];\n    }\n  } else {\n    // if the arrays use the same data layout we can use a fast block copy\n    const len = Math.min(src.length, target.length);\n    target.set(new src.constructor(src.buffer, 0, len));\n  }\n}\n\n/**\n * A special version of a mesh with multi draw batch rendering support. Use\n * this class if you have to render a large number of objects with the same\n * material but with different geometries or world transformations. The usage of\n * `BatchedMesh` will help you to reduce the number of draw calls and thus improve the overall\n * rendering performance in your application.\n *\n * ```js\n * const box = new THREE.BoxGeometry( 1, 1, 1 );\n * const sphere = new THREE.SphereGeometry( 1, 12, 12 );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n *\n * // initialize and add geometries into the batched mesh\n * const batchedMesh = new BatchedMesh( 10, 5000, 10000, material );\n * const boxGeometryId = batchedMesh.addGeometry( box );\n * const sphereGeometryId = batchedMesh.addGeometry( sphere );\n *\n * // create instances of those geometries\n * const boxInstancedId1 = batchedMesh.addInstance( boxGeometryId );\n * const boxInstancedId2 = batchedMesh.addInstance( boxGeometryId );\n *\n * const sphereInstancedId1 = batchedMesh.addInstance( sphereGeometryId );\n * const sphereInstancedId2 = batchedMesh.addInstance( sphereGeometryId );\n *\n * // position the geometries\n * batchedMesh.setMatrixAt( boxInstancedId1, boxMatrix1 );\n * batchedMesh.setMatrixAt( boxInstancedId2, boxMatrix2 );\n *\n * batchedMesh.setMatrixAt( sphereInstancedId1, sphereMatrix1 );\n * batchedMesh.setMatrixAt( sphereInstancedId2, sphereMatrix2 );\n *\n * scene.add( batchedMesh );\n * ```\n *\n * @augments Mesh\n */\nclass BatchedMesh extends Mesh {\n  /**\n   * Constructs a new batched mesh.\n   *\n   * @param {number} maxInstanceCount - The maximum number of individual instances planned to be added and rendered.\n   * @param {number} maxVertexCount - The maximum number of vertices to be used by all unique geometries.\n   * @param {number} [maxIndexCount=maxVertexCount*2] - The maximum number of indices to be used by all unique geometries\n   * @param {Material|Array<Material>} [material] - The mesh material.\n   */\n  constructor(maxInstanceCount, maxVertexCount) {\n    let maxIndexCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : maxVertexCount * 2;\n    let material = arguments.length > 3 ? arguments[3] : undefined;\n    super(new BufferGeometry(), material);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isBatchedMesh = true;\n\n    /**\n     * When set ot `true`, the individual objects of a batch are frustum culled.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.perObjectFrustumCulled = true;\n\n    /**\n     * When set to `true`, the individual objects of a batch are sorted to improve overdraw-related artifacts.\n     * If the material is marked as \"transparent\" objects are rendered back to front and if not then they are\n     * rendered front to back.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.sortObjects = true;\n\n    /**\n     * The bounding box of the batched mesh. Can be computed via {@link BatchedMesh#computeBoundingBox}.\n     *\n     * @type {?Box3}\n     * @default null\n     */\n    this.boundingBox = null;\n\n    /**\n     * The bounding sphere of the batched mesh. Can be computed via {@link BatchedMesh#computeBoundingSphere}.\n     *\n     * @type {?Sphere}\n     * @default null\n     */\n    this.boundingSphere = null;\n\n    /**\n     * Takes a sort a function that is run before render. The function takes a list of instances to\n     * sort and a camera. The objects in the list include a \"z\" field to perform a depth-ordered\n     * sort with.\n     *\n     * @type {?Function}\n     * @default null\n     */\n    this.customSort = null;\n\n    // stores visible, active, and geometry id per instance and reserved buffer ranges for geometries\n    this._instanceInfo = [];\n    this._geometryInfo = [];\n\n    // instance, geometry ids that have been set as inactive, and are available to be overwritten\n    this._availableInstanceIds = [];\n    this._availableGeometryIds = [];\n\n    // used to track where the next point is that geometry should be inserted\n    this._nextIndexStart = 0;\n    this._nextVertexStart = 0;\n    this._geometryCount = 0;\n\n    // flags\n    this._visibilityChanged = true;\n    this._geometryInitialized = false;\n\n    // cached user options\n    this._maxInstanceCount = maxInstanceCount;\n    this._maxVertexCount = maxVertexCount;\n    this._maxIndexCount = maxIndexCount;\n\n    // buffers for multi draw\n    this._multiDrawCounts = new Int32Array(maxInstanceCount);\n    this._multiDrawStarts = new Int32Array(maxInstanceCount);\n    this._multiDrawCount = 0;\n    this._multiDrawInstances = null;\n\n    // Local matrix per geometry by using data texture\n    this._matricesTexture = null;\n    this._indirectTexture = null;\n    this._colorsTexture = null;\n    this._initMatricesTexture();\n    this._initIndirectTexture();\n  }\n\n  /**\n   * The maximum number of individual instances that can be stored in the batch.\n   *\n   * @type {number}\n   * @readonly\n   */\n  get maxInstanceCount() {\n    return this._maxInstanceCount;\n  }\n\n  /**\n   * The instance count.\n   *\n   * @type {number}\n   * @readonly\n   */\n  get instanceCount() {\n    return this._instanceInfo.length - this._availableInstanceIds.length;\n  }\n\n  /**\n   * The number of unused vertices.\n   *\n   * @type {number}\n   * @readonly\n   */\n  get unusedVertexCount() {\n    return this._maxVertexCount - this._nextVertexStart;\n  }\n\n  /**\n   * The number of unused indices.\n   *\n   * @type {number}\n   * @readonly\n   */\n  get unusedIndexCount() {\n    return this._maxIndexCount - this._nextIndexStart;\n  }\n  _initMatricesTexture() {\n    // layout (1 matrix = 4 pixels)\n    //      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n    //  with  8x8  pixel texture max   16 matrices * 4 pixels =  (8 * 8)\n    //       16x16 pixel texture max   64 matrices * 4 pixels = (16 * 16)\n    //       32x32 pixel texture max  256 matrices * 4 pixels = (32 * 32)\n    //       64x64 pixel texture max 1024 matrices * 4 pixels = (64 * 64)\n\n    let size = Math.sqrt(this._maxInstanceCount * 4); // 4 pixels needed for 1 matrix\n    size = Math.ceil(size / 4) * 4;\n    size = Math.max(size, 4);\n    const matricesArray = new Float32Array(size * size * 4); // 4 floats per RGBA pixel\n    const matricesTexture = new DataTexture(matricesArray, size, size, RGBAFormat, FloatType);\n    this._matricesTexture = matricesTexture;\n  }\n  _initIndirectTexture() {\n    let size = Math.sqrt(this._maxInstanceCount);\n    size = Math.ceil(size);\n    const indirectArray = new Uint32Array(size * size);\n    const indirectTexture = new DataTexture(indirectArray, size, size, RedIntegerFormat, UnsignedIntType);\n    this._indirectTexture = indirectTexture;\n  }\n  _initColorsTexture() {\n    let size = Math.sqrt(this._maxInstanceCount);\n    size = Math.ceil(size);\n\n    // 4 floats per RGBA pixel initialized to white\n    const colorsArray = new Float32Array(size * size * 4).fill(1);\n    const colorsTexture = new DataTexture(colorsArray, size, size, RGBAFormat, FloatType);\n    colorsTexture.colorSpace = ColorManagement.workingColorSpace;\n    this._colorsTexture = colorsTexture;\n  }\n  _initializeGeometry(reference) {\n    const geometry = this.geometry;\n    const maxVertexCount = this._maxVertexCount;\n    const maxIndexCount = this._maxIndexCount;\n    if (this._geometryInitialized === false) {\n      for (const attributeName in reference.attributes) {\n        const srcAttribute = reference.getAttribute(attributeName);\n        const {\n          array,\n          itemSize,\n          normalized\n        } = srcAttribute;\n        const dstArray = new array.constructor(maxVertexCount * itemSize);\n        const dstAttribute = new BufferAttribute(dstArray, itemSize, normalized);\n        geometry.setAttribute(attributeName, dstAttribute);\n      }\n      if (reference.getIndex() !== null) {\n        // Reserve last u16 index for primitive restart.\n        const indexArray = maxVertexCount > 65535 ? new Uint32Array(maxIndexCount) : new Uint16Array(maxIndexCount);\n        geometry.setIndex(new BufferAttribute(indexArray, 1));\n      }\n      this._geometryInitialized = true;\n    }\n  }\n\n  // Make sure the geometry is compatible with the existing combined geometry attributes\n  _validateGeometry(geometry) {\n    // check to ensure the geometries are using consistent attributes and indices\n    const batchGeometry = this.geometry;\n    if (Boolean(geometry.getIndex()) !== Boolean(batchGeometry.getIndex())) {\n      throw new Error('THREE.BatchedMesh: All geometries must consistently have \"index\".');\n    }\n    for (const attributeName in batchGeometry.attributes) {\n      if (!geometry.hasAttribute(attributeName)) {\n        throw new Error(`THREE.BatchedMesh: Added geometry missing \"${attributeName}\". All geometries must have consistent attributes.`);\n      }\n      const srcAttribute = geometry.getAttribute(attributeName);\n      const dstAttribute = batchGeometry.getAttribute(attributeName);\n      if (srcAttribute.itemSize !== dstAttribute.itemSize || srcAttribute.normalized !== dstAttribute.normalized) {\n        throw new Error('THREE.BatchedMesh: All attributes must have a consistent itemSize and normalized value.');\n      }\n    }\n  }\n\n  /**\n   * Validates the instance defined by the given ID.\n   *\n   * @param {number} instanceId - The instance to validate.\n   */\n  validateInstanceId(instanceId) {\n    const instanceInfo = this._instanceInfo;\n    if (instanceId < 0 || instanceId >= instanceInfo.length || instanceInfo[instanceId].active === false) {\n      throw new Error(`THREE.BatchedMesh: Invalid instanceId ${instanceId}. Instance is either out of range or has been deleted.`);\n    }\n  }\n\n  /**\n   * Validates the geometry defined by the given ID.\n   *\n   * @param {number} geometryId - The geometry to validate.\n   */\n  validateGeometryId(geometryId) {\n    const geometryInfoList = this._geometryInfo;\n    if (geometryId < 0 || geometryId >= geometryInfoList.length || geometryInfoList[geometryId].active === false) {\n      throw new Error(`THREE.BatchedMesh: Invalid geometryId ${geometryId}. Geometry is either out of range or has been deleted.`);\n    }\n  }\n\n  /**\n   * Takes a sort a function that is run before render. The function takes a list of instances to\n   * sort and a camera. The objects in the list include a \"z\" field to perform a depth-ordered sort with.\n   *\n   * @param {Function} func - The custom sort function.\n   * @return {BatchedMesh} A reference to this batched mesh.\n   */\n  setCustomSort(func) {\n    this.customSort = func;\n    return this;\n  }\n\n  /**\n   * Computes the bounding box, updating {@link BatchedMesh#boundingBox}.\n   * Bounding boxes aren't computed by default. They need to be explicitly computed,\n   * otherwise they are `null`.\n   */\n  computeBoundingBox() {\n    if (this.boundingBox === null) {\n      this.boundingBox = new Box3();\n    }\n    const boundingBox = this.boundingBox;\n    const instanceInfo = this._instanceInfo;\n    boundingBox.makeEmpty();\n    for (let i = 0, l = instanceInfo.length; i < l; i++) {\n      if (instanceInfo[i].active === false) continue;\n      const geometryId = instanceInfo[i].geometryIndex;\n      this.getMatrixAt(i, _matrix$1);\n      this.getBoundingBoxAt(geometryId, _box$1).applyMatrix4(_matrix$1);\n      boundingBox.union(_box$1);\n    }\n  }\n\n  /**\n   * Computes the bounding sphere, updating {@link BatchedMesh#boundingSphere}.\n   * Bounding spheres aren't computed by default. They need to be explicitly computed,\n   * otherwise they are `null`.\n   */\n  computeBoundingSphere() {\n    if (this.boundingSphere === null) {\n      this.boundingSphere = new Sphere();\n    }\n    const boundingSphere = this.boundingSphere;\n    const instanceInfo = this._instanceInfo;\n    boundingSphere.makeEmpty();\n    for (let i = 0, l = instanceInfo.length; i < l; i++) {\n      if (instanceInfo[i].active === false) continue;\n      const geometryId = instanceInfo[i].geometryIndex;\n      this.getMatrixAt(i, _matrix$1);\n      this.getBoundingSphereAt(geometryId, _sphere$2).applyMatrix4(_matrix$1);\n      boundingSphere.union(_sphere$2);\n    }\n  }\n\n  /**\n   * Adds a new instance to the batch using the geometry of the given ID and returns\n   * a new id referring to the new instance to be used by other functions.\n   *\n   * @param {number} geometryId - The ID of a previously added geometry via {@link BatchedMesh#addGeometry}.\n   * @return {number} The instance ID.\n   */\n  addInstance(geometryId) {\n    const atCapacity = this._instanceInfo.length >= this.maxInstanceCount;\n\n    // ensure we're not over geometry\n    if (atCapacity && this._availableInstanceIds.length === 0) {\n      throw new Error('THREE.BatchedMesh: Maximum item count reached.');\n    }\n    const instanceInfo = {\n      visible: true,\n      active: true,\n      geometryIndex: geometryId\n    };\n    let drawId = null;\n\n    // Prioritize using previously freed instance ids\n    if (this._availableInstanceIds.length > 0) {\n      this._availableInstanceIds.sort(ascIdSort);\n      drawId = this._availableInstanceIds.shift();\n      this._instanceInfo[drawId] = instanceInfo;\n    } else {\n      drawId = this._instanceInfo.length;\n      this._instanceInfo.push(instanceInfo);\n    }\n    const matricesTexture = this._matricesTexture;\n    _matrix$1.identity().toArray(matricesTexture.image.data, drawId * 16);\n    matricesTexture.needsUpdate = true;\n    const colorsTexture = this._colorsTexture;\n    if (colorsTexture) {\n      _whiteColor.toArray(colorsTexture.image.data, drawId * 4);\n      colorsTexture.needsUpdate = true;\n    }\n    this._visibilityChanged = true;\n    return drawId;\n  }\n\n  /**\n   * Adds the given geometry to the batch and returns the associated\n   * geometry id referring to it to be used in other functions.\n   *\n   * @param {BufferGeometry} geometry - The geometry to add.\n   * @param {number} [reservedVertexCount=-1] - Optional parameter specifying the amount of\n   * vertex buffer space to reserve for the added geometry. This is necessary if it is planned\n   * to set a new geometry at this index at a later time that is larger than the original geometry.\n   * Defaults to the length of the given geometry vertex buffer.\n   * @param {number} [reservedIndexCount=-1] - Optional parameter specifying the amount of index\n   * buffer space to reserve for the added geometry. This is necessary if it is planned to set a\n   * new geometry at this index at a later time that is larger than the original geometry. Defaults to\n   * the length of the given geometry index buffer.\n   * @return {number} The geometry ID.\n   */\n  addGeometry(geometry) {\n    let reservedVertexCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    let reservedIndexCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n    this._initializeGeometry(geometry);\n    this._validateGeometry(geometry);\n    const geometryInfo = {\n      // geometry information\n      vertexStart: -1,\n      vertexCount: -1,\n      reservedVertexCount: -1,\n      indexStart: -1,\n      indexCount: -1,\n      reservedIndexCount: -1,\n      // draw range information\n      start: -1,\n      count: -1,\n      // state\n      boundingBox: null,\n      boundingSphere: null,\n      active: true\n    };\n    const geometryInfoList = this._geometryInfo;\n    geometryInfo.vertexStart = this._nextVertexStart;\n    geometryInfo.reservedVertexCount = reservedVertexCount === -1 ? geometry.getAttribute('position').count : reservedVertexCount;\n    const index = geometry.getIndex();\n    const hasIndex = index !== null;\n    if (hasIndex) {\n      geometryInfo.indexStart = this._nextIndexStart;\n      geometryInfo.reservedIndexCount = reservedIndexCount === -1 ? index.count : reservedIndexCount;\n    }\n    if (geometryInfo.indexStart !== -1 && geometryInfo.indexStart + geometryInfo.reservedIndexCount > this._maxIndexCount || geometryInfo.vertexStart + geometryInfo.reservedVertexCount > this._maxVertexCount) {\n      throw new Error('THREE.BatchedMesh: Reserved space request exceeds the maximum buffer size.');\n    }\n\n    // update id\n    let geometryId;\n    if (this._availableGeometryIds.length > 0) {\n      this._availableGeometryIds.sort(ascIdSort);\n      geometryId = this._availableGeometryIds.shift();\n      geometryInfoList[geometryId] = geometryInfo;\n    } else {\n      geometryId = this._geometryCount;\n      this._geometryCount++;\n      geometryInfoList.push(geometryInfo);\n    }\n\n    // update the geometry\n    this.setGeometryAt(geometryId, geometry);\n\n    // increment the next geometry position\n    this._nextIndexStart = geometryInfo.indexStart + geometryInfo.reservedIndexCount;\n    this._nextVertexStart = geometryInfo.vertexStart + geometryInfo.reservedVertexCount;\n    return geometryId;\n  }\n\n  /**\n   * Replaces the geometry at the given ID with the provided geometry. Throws an error if there\n   * is not enough space reserved for geometry. Calling this will change all instances that are\n   * rendering that geometry.\n   *\n   * @param {number} geometryId - The ID of the geometry that should be replaced with the given geometry.\n   * @param {BufferGeometry} geometry - The new geometry.\n   * @return {number} The geometry ID.\n   */\n  setGeometryAt(geometryId, geometry) {\n    if (geometryId >= this._geometryCount) {\n      throw new Error('THREE.BatchedMesh: Maximum geometry count reached.');\n    }\n    this._validateGeometry(geometry);\n    const batchGeometry = this.geometry;\n    const hasIndex = batchGeometry.getIndex() !== null;\n    const dstIndex = batchGeometry.getIndex();\n    const srcIndex = geometry.getIndex();\n    const geometryInfo = this._geometryInfo[geometryId];\n    if (hasIndex && srcIndex.count > geometryInfo.reservedIndexCount || geometry.attributes.position.count > geometryInfo.reservedVertexCount) {\n      throw new Error('THREE.BatchedMesh: Reserved space not large enough for provided geometry.');\n    }\n\n    // copy geometry buffer data over\n    const vertexStart = geometryInfo.vertexStart;\n    const reservedVertexCount = geometryInfo.reservedVertexCount;\n    geometryInfo.vertexCount = geometry.getAttribute('position').count;\n    for (const attributeName in batchGeometry.attributes) {\n      // copy attribute data\n      const srcAttribute = geometry.getAttribute(attributeName);\n      const dstAttribute = batchGeometry.getAttribute(attributeName);\n      copyAttributeData(srcAttribute, dstAttribute, vertexStart);\n\n      // fill the rest in with zeroes\n      const itemSize = srcAttribute.itemSize;\n      for (let i = srcAttribute.count, l = reservedVertexCount; i < l; i++) {\n        const index = vertexStart + i;\n        for (let c = 0; c < itemSize; c++) {\n          dstAttribute.setComponent(index, c, 0);\n        }\n      }\n      dstAttribute.needsUpdate = true;\n      dstAttribute.addUpdateRange(vertexStart * itemSize, reservedVertexCount * itemSize);\n    }\n\n    // copy index\n    if (hasIndex) {\n      const indexStart = geometryInfo.indexStart;\n      const reservedIndexCount = geometryInfo.reservedIndexCount;\n      geometryInfo.indexCount = geometry.getIndex().count;\n\n      // copy index data over\n      for (let i = 0; i < srcIndex.count; i++) {\n        dstIndex.setX(indexStart + i, vertexStart + srcIndex.getX(i));\n      }\n\n      // fill the rest in with zeroes\n      for (let i = srcIndex.count, l = reservedIndexCount; i < l; i++) {\n        dstIndex.setX(indexStart + i, vertexStart);\n      }\n      dstIndex.needsUpdate = true;\n      dstIndex.addUpdateRange(indexStart, geometryInfo.reservedIndexCount);\n    }\n\n    // update the draw range\n    geometryInfo.start = hasIndex ? geometryInfo.indexStart : geometryInfo.vertexStart;\n    geometryInfo.count = hasIndex ? geometryInfo.indexCount : geometryInfo.vertexCount;\n\n    // store the bounding boxes\n    geometryInfo.boundingBox = null;\n    if (geometry.boundingBox !== null) {\n      geometryInfo.boundingBox = geometry.boundingBox.clone();\n    }\n    geometryInfo.boundingSphere = null;\n    if (geometry.boundingSphere !== null) {\n      geometryInfo.boundingSphere = geometry.boundingSphere.clone();\n    }\n    this._visibilityChanged = true;\n    return geometryId;\n  }\n\n  /**\n   * Deletes the geometry defined by the given ID from this batch. Any instances referencing\n   * this geometry will also be removed as a side effect.\n   *\n   * @param {number} geometryId - The ID of the geometry to remove from the batch.\n   * @return {BatchedMesh} A reference to this batched mesh.\n   */\n  deleteGeometry(geometryId) {\n    const geometryInfoList = this._geometryInfo;\n    if (geometryId >= geometryInfoList.length || geometryInfoList[geometryId].active === false) {\n      return this;\n    }\n\n    // delete any instances associated with this geometry\n    const instanceInfo = this._instanceInfo;\n    for (let i = 0, l = instanceInfo.length; i < l; i++) {\n      if (instanceInfo[i].active && instanceInfo[i].geometryIndex === geometryId) {\n        this.deleteInstance(i);\n      }\n    }\n    geometryInfoList[geometryId].active = false;\n    this._availableGeometryIds.push(geometryId);\n    this._visibilityChanged = true;\n    return this;\n  }\n\n  /**\n   * Deletes an existing instance from the batch using the given ID.\n   *\n   * @param {number} instanceId - The ID of the instance to remove from the batch.\n   * @return {BatchedMesh} A reference to this batched mesh.\n   */\n  deleteInstance(instanceId) {\n    this.validateInstanceId(instanceId);\n    this._instanceInfo[instanceId].active = false;\n    this._availableInstanceIds.push(instanceId);\n    this._visibilityChanged = true;\n    return this;\n  }\n\n  /**\n   * Repacks the sub geometries in [name] to remove any unused space remaining from\n   * previously deleted geometry, freeing up space to add new geometry.\n   *\n   * @param {number} instanceId - The ID of the instance to remove from the batch.\n   * @return {BatchedMesh} A reference to this batched mesh.\n   */\n  optimize() {\n    // track the next indices to copy data to\n    let nextVertexStart = 0;\n    let nextIndexStart = 0;\n\n    // Iterate over all geometry ranges in order sorted from earliest in the geometry buffer to latest\n    // in the geometry buffer. Because draw range objects can be reused there is no guarantee of their order.\n    const geometryInfoList = this._geometryInfo;\n    const indices = geometryInfoList.map((e, i) => i).sort((a, b) => {\n      return geometryInfoList[a].vertexStart - geometryInfoList[b].vertexStart;\n    });\n    const geometry = this.geometry;\n    for (let i = 0, l = geometryInfoList.length; i < l; i++) {\n      // if a geometry range is inactive then don't copy anything\n      const index = indices[i];\n      const geometryInfo = geometryInfoList[index];\n      if (geometryInfo.active === false) {\n        continue;\n      }\n\n      // if a geometry contains an index buffer then shift it, as well\n      if (geometry.index !== null) {\n        if (geometryInfo.indexStart !== nextIndexStart) {\n          const {\n            indexStart,\n            vertexStart,\n            reservedIndexCount\n          } = geometryInfo;\n          const index = geometry.index;\n          const array = index.array;\n\n          // shift the index pointers based on how the vertex data will shift\n          // adjusting the index must happen first so the original vertex start value is available\n          const elementDelta = nextVertexStart - vertexStart;\n          for (let j = indexStart; j < indexStart + reservedIndexCount; j++) {\n            array[j] = array[j] + elementDelta;\n          }\n          index.array.copyWithin(nextIndexStart, indexStart, indexStart + reservedIndexCount);\n          index.addUpdateRange(nextIndexStart, reservedIndexCount);\n          geometryInfo.indexStart = nextIndexStart;\n        }\n        nextIndexStart += geometryInfo.reservedIndexCount;\n      }\n\n      // if a geometry needs to be moved then copy attribute data to overwrite unused space\n      if (geometryInfo.vertexStart !== nextVertexStart) {\n        const {\n          vertexStart,\n          reservedVertexCount\n        } = geometryInfo;\n        const attributes = geometry.attributes;\n        for (const key in attributes) {\n          const attribute = attributes[key];\n          const {\n            array,\n            itemSize\n          } = attribute;\n          array.copyWithin(nextVertexStart * itemSize, vertexStart * itemSize, (vertexStart + reservedVertexCount) * itemSize);\n          attribute.addUpdateRange(nextVertexStart * itemSize, reservedVertexCount * itemSize);\n        }\n        geometryInfo.vertexStart = nextVertexStart;\n      }\n      nextVertexStart += geometryInfo.reservedVertexCount;\n      geometryInfo.start = geometry.index ? geometryInfo.indexStart : geometryInfo.vertexStart;\n\n      // step the next geometry points to the shifted position\n      this._nextIndexStart = geometry.index ? geometryInfo.indexStart + geometryInfo.reservedIndexCount : 0;\n      this._nextVertexStart = geometryInfo.vertexStart + geometryInfo.reservedVertexCount;\n    }\n    return this;\n  }\n\n  /**\n   * Returns the bounding box for the given geometry.\n   *\n   * @param {number} geometryId - The ID of the geometry to return the bounding box for.\n   * @param {Box3} target - The target object that is used to store the method's result.\n   * @return {Box3|null} The geometry's bounding box. Returns `null` if no geometry has been found for the given ID.\n   */\n  getBoundingBoxAt(geometryId, target) {\n    if (geometryId >= this._geometryCount) {\n      return null;\n    }\n\n    // compute bounding box\n    const geometry = this.geometry;\n    const geometryInfo = this._geometryInfo[geometryId];\n    if (geometryInfo.boundingBox === null) {\n      const box = new Box3();\n      const index = geometry.index;\n      const position = geometry.attributes.position;\n      for (let i = geometryInfo.start, l = geometryInfo.start + geometryInfo.count; i < l; i++) {\n        let iv = i;\n        if (index) {\n          iv = index.getX(iv);\n        }\n        box.expandByPoint(_vector$5.fromBufferAttribute(position, iv));\n      }\n      geometryInfo.boundingBox = box;\n    }\n    target.copy(geometryInfo.boundingBox);\n    return target;\n  }\n\n  /**\n   * Returns the bounding sphere for the given geometry.\n   *\n   * @param {number} geometryId - The ID of the geometry to return the bounding sphere for.\n   * @param {Sphere} target - The target object that is used to store the method's result.\n   * @return {Sphere|null} The geometry's bounding sphere. Returns `null` if no geometry has been found for the given ID.\n   */\n  getBoundingSphereAt(geometryId, target) {\n    if (geometryId >= this._geometryCount) {\n      return null;\n    }\n\n    // compute bounding sphere\n    const geometry = this.geometry;\n    const geometryInfo = this._geometryInfo[geometryId];\n    if (geometryInfo.boundingSphere === null) {\n      const sphere = new Sphere();\n      this.getBoundingBoxAt(geometryId, _box$1);\n      _box$1.getCenter(sphere.center);\n      const index = geometry.index;\n      const position = geometry.attributes.position;\n      let maxRadiusSq = 0;\n      for (let i = geometryInfo.start, l = geometryInfo.start + geometryInfo.count; i < l; i++) {\n        let iv = i;\n        if (index) {\n          iv = index.getX(iv);\n        }\n        _vector$5.fromBufferAttribute(position, iv);\n        maxRadiusSq = Math.max(maxRadiusSq, sphere.center.distanceToSquared(_vector$5));\n      }\n      sphere.radius = Math.sqrt(maxRadiusSq);\n      geometryInfo.boundingSphere = sphere;\n    }\n    target.copy(geometryInfo.boundingSphere);\n    return target;\n  }\n\n  /**\n   * Sets the given local transformation matrix to the defined instance.\n   * Negatively scaled matrices are not supported.\n   *\n   * @param {number} instanceId - The ID of an instance to set the matrix of.\n   * @param {Matrix4} matrix - A 4x4 matrix representing the local transformation of a single instance.\n   * @return {BatchedMesh} A reference to this batched mesh.\n   */\n  setMatrixAt(instanceId, matrix) {\n    this.validateInstanceId(instanceId);\n    const matricesTexture = this._matricesTexture;\n    const matricesArray = this._matricesTexture.image.data;\n    matrix.toArray(matricesArray, instanceId * 16);\n    matricesTexture.needsUpdate = true;\n    return this;\n  }\n\n  /**\n   * Returns the local transformation matrix of the defined instance.\n   *\n   * @param {number} instanceId - The ID of an instance to get the matrix of.\n   * @param {Matrix4} matrix - The target object that is used to store the method's result.\n   * @return {Matrix4} The instance's local transformation matrix.\n   */\n  getMatrixAt(instanceId, matrix) {\n    this.validateInstanceId(instanceId);\n    return matrix.fromArray(this._matricesTexture.image.data, instanceId * 16);\n  }\n\n  /**\n   * Sets the given color to the defined instance.\n   *\n   * @param {number} instanceId - The ID of an instance to set the color of.\n   * @param {Color} color - The color to set the instance to.\n   * @return {BatchedMesh} A reference to this batched mesh.\n   */\n  setColorAt(instanceId, color) {\n    this.validateInstanceId(instanceId);\n    if (this._colorsTexture === null) {\n      this._initColorsTexture();\n    }\n    color.toArray(this._colorsTexture.image.data, instanceId * 4);\n    this._colorsTexture.needsUpdate = true;\n    return this;\n  }\n\n  /**\n   * Returns the color of the defined instance.\n   *\n   * @param {number} instanceId - The ID of an instance to get the color of.\n   * @param {Color} color - The target object that is used to store the method's result.\n   * @return {Color} The instance's color.\n   */\n  getColorAt(instanceId, color) {\n    this.validateInstanceId(instanceId);\n    return color.fromArray(this._colorsTexture.image.data, instanceId * 4);\n  }\n\n  /**\n   * Sets the visibility of the instance.\n   *\n   * @param {number} instanceId - The id of the instance to set the visibility of.\n   * @param {boolean} visible - Whether the instance is visible or not.\n   * @return {BatchedMesh} A reference to this batched mesh.\n   */\n  setVisibleAt(instanceId, visible) {\n    this.validateInstanceId(instanceId);\n    if (this._instanceInfo[instanceId].visible === visible) {\n      return this;\n    }\n    this._instanceInfo[instanceId].visible = visible;\n    this._visibilityChanged = true;\n    return this;\n  }\n\n  /**\n   * Returns the visibility state of the defined instance.\n   *\n   * @param {number} instanceId - The ID of an instance to get the visibility state of.\n   * @return {boolean} Whether the instance is visible or not.\n   */\n  getVisibleAt(instanceId) {\n    this.validateInstanceId(instanceId);\n    return this._instanceInfo[instanceId].visible;\n  }\n\n  /**\n   * Sets the geometry ID of the instance at the given index.\n   *\n   * @param {number} instanceId - The ID of the instance to set the geometry ID of.\n   * @param {number} geometryId - The geometry ID to be use by the instance.\n   * @return {BatchedMesh} A reference to this batched mesh.\n   */\n  setGeometryIdAt(instanceId, geometryId) {\n    this.validateInstanceId(instanceId);\n    this.validateGeometryId(geometryId);\n    this._instanceInfo[instanceId].geometryIndex = geometryId;\n    return this;\n  }\n\n  /**\n   * Returns the geometry ID of the defined instance.\n   *\n   * @param {number} instanceId - The ID of an instance to get the geometry ID of.\n   * @return {number} The instance's geometry ID.\n   */\n  getGeometryIdAt(instanceId) {\n    this.validateInstanceId(instanceId);\n    return this._instanceInfo[instanceId].geometryIndex;\n  }\n\n  /**\n   * Get the range representing the subset of triangles related to the attached geometry,\n   * indicating the starting offset and count, or `null` if invalid.\n   *\n   * @param {number} geometryId - The id of the geometry to get the range of.\n   * @param {Object} [target] - The target object that is used to store the method's result.\n   * @return {{\n   * \tvertexStart:number,vertexCount:number,reservedVertexCount:number,\n   * \tindexStart:number,indexCount:number,reservedIndexCount:number,\n   * \tstart:number,count:number\n   * }} The result object with range data.\n   */\n  getGeometryRangeAt(geometryId) {\n    let target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.validateGeometryId(geometryId);\n    const geometryInfo = this._geometryInfo[geometryId];\n    target.vertexStart = geometryInfo.vertexStart;\n    target.vertexCount = geometryInfo.vertexCount;\n    target.reservedVertexCount = geometryInfo.reservedVertexCount;\n    target.indexStart = geometryInfo.indexStart;\n    target.indexCount = geometryInfo.indexCount;\n    target.reservedIndexCount = geometryInfo.reservedIndexCount;\n    target.start = geometryInfo.start;\n    target.count = geometryInfo.count;\n    return target;\n  }\n\n  /**\n   * Resizes the necessary buffers to support the provided number of instances.\n   * If the provided arguments shrink the number of instances but there are not enough\n   * unused Ids at the end of the list then an error is thrown.\n   *\n   * @param {number} maxInstanceCount - The max number of individual instances that can be added and rendered by the batch.\n  */\n  setInstanceCount(maxInstanceCount) {\n    // shrink the available instances as much as possible\n    const availableInstanceIds = this._availableInstanceIds;\n    const instanceInfo = this._instanceInfo;\n    availableInstanceIds.sort(ascIdSort);\n    while (availableInstanceIds[availableInstanceIds.length - 1] === instanceInfo.length) {\n      instanceInfo.pop();\n      availableInstanceIds.pop();\n    }\n\n    // throw an error if it can't be shrunk to the desired size\n    if (maxInstanceCount < instanceInfo.length) {\n      throw new Error(`BatchedMesh: Instance ids outside the range ${maxInstanceCount} are being used. Cannot shrink instance count.`);\n    }\n\n    // copy the multi draw counts\n    const multiDrawCounts = new Int32Array(maxInstanceCount);\n    const multiDrawStarts = new Int32Array(maxInstanceCount);\n    copyArrayContents(this._multiDrawCounts, multiDrawCounts);\n    copyArrayContents(this._multiDrawStarts, multiDrawStarts);\n    this._multiDrawCounts = multiDrawCounts;\n    this._multiDrawStarts = multiDrawStarts;\n    this._maxInstanceCount = maxInstanceCount;\n\n    // update texture data for instance sampling\n    const indirectTexture = this._indirectTexture;\n    const matricesTexture = this._matricesTexture;\n    const colorsTexture = this._colorsTexture;\n    indirectTexture.dispose();\n    this._initIndirectTexture();\n    copyArrayContents(indirectTexture.image.data, this._indirectTexture.image.data);\n    matricesTexture.dispose();\n    this._initMatricesTexture();\n    copyArrayContents(matricesTexture.image.data, this._matricesTexture.image.data);\n    if (colorsTexture) {\n      colorsTexture.dispose();\n      this._initColorsTexture();\n      copyArrayContents(colorsTexture.image.data, this._colorsTexture.image.data);\n    }\n  }\n\n  /**\n   * Resizes the available space in the batch's vertex and index buffer attributes to the provided sizes.\n   * If the provided arguments shrink the geometry buffers but there is not enough unused space at the\n   * end of the geometry attributes then an error is thrown.\n   *\n   * @param {number} maxVertexCount - The maximum number of vertices to be used by all unique geometries to resize to.\n   * @param {number} maxIndexCount - The maximum number of indices to be used by all unique geometries to resize to.\n  */\n  setGeometrySize(maxVertexCount, maxIndexCount) {\n    // Check if we can shrink to the requested vertex attribute size\n    const validRanges = [...this._geometryInfo].filter(info => info.active);\n    const requiredVertexLength = Math.max(...validRanges.map(range => range.vertexStart + range.reservedVertexCount));\n    if (requiredVertexLength > maxVertexCount) {\n      throw new Error(`BatchedMesh: Geometry vertex values are being used outside the range ${maxIndexCount}. Cannot shrink further.`);\n    }\n\n    // Check if we can shrink to the requested index attribute size\n    if (this.geometry.index) {\n      const requiredIndexLength = Math.max(...validRanges.map(range => range.indexStart + range.reservedIndexCount));\n      if (requiredIndexLength > maxIndexCount) {\n        throw new Error(`BatchedMesh: Geometry index values are being used outside the range ${maxIndexCount}. Cannot shrink further.`);\n      }\n    }\n\n    //\n\n    // dispose of the previous geometry\n    const oldGeometry = this.geometry;\n    oldGeometry.dispose();\n\n    // recreate the geometry needed based on the previous variant\n    this._maxVertexCount = maxVertexCount;\n    this._maxIndexCount = maxIndexCount;\n    if (this._geometryInitialized) {\n      this._geometryInitialized = false;\n      this.geometry = new BufferGeometry();\n      this._initializeGeometry(oldGeometry);\n    }\n\n    // copy data from the previous geometry\n    const geometry = this.geometry;\n    if (oldGeometry.index) {\n      copyArrayContents(oldGeometry.index.array, geometry.index.array);\n    }\n    for (const key in oldGeometry.attributes) {\n      copyArrayContents(oldGeometry.attributes[key].array, geometry.attributes[key].array);\n    }\n  }\n  raycast(raycaster, intersects) {\n    const instanceInfo = this._instanceInfo;\n    const geometryInfoList = this._geometryInfo;\n    const matrixWorld = this.matrixWorld;\n    const batchGeometry = this.geometry;\n\n    // iterate over each geometry\n    _mesh.material = this.material;\n    _mesh.geometry.index = batchGeometry.index;\n    _mesh.geometry.attributes = batchGeometry.attributes;\n    if (_mesh.geometry.boundingBox === null) {\n      _mesh.geometry.boundingBox = new Box3();\n    }\n    if (_mesh.geometry.boundingSphere === null) {\n      _mesh.geometry.boundingSphere = new Sphere();\n    }\n    for (let i = 0, l = instanceInfo.length; i < l; i++) {\n      if (!instanceInfo[i].visible || !instanceInfo[i].active) {\n        continue;\n      }\n      const geometryId = instanceInfo[i].geometryIndex;\n      const geometryInfo = geometryInfoList[geometryId];\n      _mesh.geometry.setDrawRange(geometryInfo.start, geometryInfo.count);\n\n      // get the intersects\n      this.getMatrixAt(i, _mesh.matrixWorld).premultiply(matrixWorld);\n      this.getBoundingBoxAt(geometryId, _mesh.geometry.boundingBox);\n      this.getBoundingSphereAt(geometryId, _mesh.geometry.boundingSphere);\n      _mesh.raycast(raycaster, _batchIntersects);\n\n      // add batch id to the intersects\n      for (let j = 0, l = _batchIntersects.length; j < l; j++) {\n        const intersect = _batchIntersects[j];\n        intersect.object = this;\n        intersect.batchId = i;\n        intersects.push(intersect);\n      }\n      _batchIntersects.length = 0;\n    }\n    _mesh.material = null;\n    _mesh.geometry.index = null;\n    _mesh.geometry.attributes = {};\n    _mesh.geometry.setDrawRange(0, Infinity);\n  }\n  copy(source) {\n    super.copy(source);\n    this.geometry = source.geometry.clone();\n    this.perObjectFrustumCulled = source.perObjectFrustumCulled;\n    this.sortObjects = source.sortObjects;\n    this.boundingBox = source.boundingBox !== null ? source.boundingBox.clone() : null;\n    this.boundingSphere = source.boundingSphere !== null ? source.boundingSphere.clone() : null;\n    this._geometryInfo = source._geometryInfo.map(info => ({\n      ...info,\n      boundingBox: info.boundingBox !== null ? info.boundingBox.clone() : null,\n      boundingSphere: info.boundingSphere !== null ? info.boundingSphere.clone() : null\n    }));\n    this._instanceInfo = source._instanceInfo.map(info => ({\n      ...info\n    }));\n    this._availableInstanceIds = source._availableInstanceIds.slice();\n    this._availableGeometryIds = source._availableGeometryIds.slice();\n    this._nextIndexStart = source._nextIndexStart;\n    this._nextVertexStart = source._nextVertexStart;\n    this._geometryCount = source._geometryCount;\n    this._maxInstanceCount = source._maxInstanceCount;\n    this._maxVertexCount = source._maxVertexCount;\n    this._maxIndexCount = source._maxIndexCount;\n    this._geometryInitialized = source._geometryInitialized;\n    this._multiDrawCounts = source._multiDrawCounts.slice();\n    this._multiDrawStarts = source._multiDrawStarts.slice();\n    this._indirectTexture = source._indirectTexture.clone();\n    this._indirectTexture.image.data = this._indirectTexture.image.data.slice();\n    this._matricesTexture = source._matricesTexture.clone();\n    this._matricesTexture.image.data = this._matricesTexture.image.data.slice();\n    if (this._colorsTexture !== null) {\n      this._colorsTexture = source._colorsTexture.clone();\n      this._colorsTexture.image.data = this._colorsTexture.image.data.slice();\n    }\n    return this;\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    // Assuming the geometry is not shared with other meshes\n    this.geometry.dispose();\n    this._matricesTexture.dispose();\n    this._matricesTexture = null;\n    this._indirectTexture.dispose();\n    this._indirectTexture = null;\n    if (this._colorsTexture !== null) {\n      this._colorsTexture.dispose();\n      this._colorsTexture = null;\n    }\n  }\n  onBeforeRender(renderer, scene, camera, geometry, material /*, _group*/) {\n    // if visibility has not changed and frustum culling and object sorting is not required\n    // then skip iterating over all items\n    if (!this._visibilityChanged && !this.perObjectFrustumCulled && !this.sortObjects) {\n      return;\n    }\n\n    // the indexed version of the multi draw function requires specifying the start\n    // offset in bytes.\n    const index = geometry.getIndex();\n    const bytesPerElement = index === null ? 1 : index.array.BYTES_PER_ELEMENT;\n    const instanceInfo = this._instanceInfo;\n    const multiDrawStarts = this._multiDrawStarts;\n    const multiDrawCounts = this._multiDrawCounts;\n    const geometryInfoList = this._geometryInfo;\n    const perObjectFrustumCulled = this.perObjectFrustumCulled;\n    const indirectTexture = this._indirectTexture;\n    const indirectArray = indirectTexture.image.data;\n    const frustum = camera.isArrayCamera ? _frustumArray : _frustum;\n    // prepare the frustum in the local frame\n    if (perObjectFrustumCulled && !camera.isArrayCamera) {\n      _matrix$1.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse).multiply(this.matrixWorld);\n      _frustum.setFromProjectionMatrix(_matrix$1, renderer.coordinateSystem);\n    }\n    let multiDrawCount = 0;\n    if (this.sortObjects) {\n      // get the camera position in the local frame\n      _matrix$1.copy(this.matrixWorld).invert();\n      _vector$5.setFromMatrixPosition(camera.matrixWorld).applyMatrix4(_matrix$1);\n      _forward.set(0, 0, -1).transformDirection(camera.matrixWorld).transformDirection(_matrix$1);\n      for (let i = 0, l = instanceInfo.length; i < l; i++) {\n        if (instanceInfo[i].visible && instanceInfo[i].active) {\n          const geometryId = instanceInfo[i].geometryIndex;\n\n          // get the bounds in world space\n          this.getMatrixAt(i, _matrix$1);\n          this.getBoundingSphereAt(geometryId, _sphere$2).applyMatrix4(_matrix$1);\n\n          // determine whether the batched geometry is within the frustum\n          let culled = false;\n          if (perObjectFrustumCulled) {\n            culled = !frustum.intersectsSphere(_sphere$2, camera);\n          }\n          if (!culled) {\n            // get the distance from camera used for sorting\n            const geometryInfo = geometryInfoList[geometryId];\n            const z = _temp.subVectors(_sphere$2.center, _vector$5).dot(_forward);\n            _renderList.push(geometryInfo.start, geometryInfo.count, z, i);\n          }\n        }\n      }\n\n      // Sort the draw ranges and prep for rendering\n      const list = _renderList.list;\n      const customSort = this.customSort;\n      if (customSort === null) {\n        list.sort(material.transparent ? sortTransparent : sortOpaque);\n      } else {\n        customSort.call(this, list, camera);\n      }\n      for (let i = 0, l = list.length; i < l; i++) {\n        const item = list[i];\n        multiDrawStarts[multiDrawCount] = item.start * bytesPerElement;\n        multiDrawCounts[multiDrawCount] = item.count;\n        indirectArray[multiDrawCount] = item.index;\n        multiDrawCount++;\n      }\n      _renderList.reset();\n    } else {\n      for (let i = 0, l = instanceInfo.length; i < l; i++) {\n        if (instanceInfo[i].visible && instanceInfo[i].active) {\n          const geometryId = instanceInfo[i].geometryIndex;\n\n          // determine whether the batched geometry is within the frustum\n          let culled = false;\n          if (perObjectFrustumCulled) {\n            // get the bounds in world space\n            this.getMatrixAt(i, _matrix$1);\n            this.getBoundingSphereAt(geometryId, _sphere$2).applyMatrix4(_matrix$1);\n            culled = !frustum.intersectsSphere(_sphere$2, camera);\n          }\n          if (!culled) {\n            const geometryInfo = geometryInfoList[geometryId];\n            multiDrawStarts[multiDrawCount] = geometryInfo.start * bytesPerElement;\n            multiDrawCounts[multiDrawCount] = geometryInfo.count;\n            indirectArray[multiDrawCount] = i;\n            multiDrawCount++;\n          }\n        }\n      }\n    }\n    indirectTexture.needsUpdate = true;\n    this._multiDrawCount = multiDrawCount;\n    this._visibilityChanged = false;\n  }\n  onBeforeShadow(renderer, object, camera, shadowCamera, geometry, depthMaterial /* , group */) {\n    this.onBeforeRender(renderer, null, shadowCamera, geometry, depthMaterial);\n  }\n}\n\n/**\n * A material for rendering line primitives.\n *\n * Materials define the appearance of renderable 3D objects.\n *\n * ```js\n * const material = new THREE.LineBasicMaterial( { color: 0xffffff } );\n * ```\n *\n * @augments Material\n */\nclass LineBasicMaterial extends Material {\n  /**\n   * Constructs a new line basic material.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isLineBasicMaterial = true;\n    this.type = 'LineBasicMaterial';\n\n    /**\n     * Color of the material.\n     *\n     * @type {Color}\n     * @default (1,1,1)\n     */\n    this.color = new Color(0xffffff);\n\n    /**\n     * Sets the color of the lines using data from a texture. The texture map\n     * color is modulated by the diffuse `color`.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.map = null;\n\n    /**\n     * Controls line thickness or lines.\n     *\n     * Can only be used with {@link SVGRenderer}. WebGL and WebGPU\n     * ignore this setting and always render line primitives with a\n     * width of one pixel.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.linewidth = 1;\n\n    /**\n     * Defines appearance of line ends.\n     *\n     * Can only be used with {@link SVGRenderer}.\n     *\n     * @type {('butt'|'round'|'square')}\n     * @default 'round'\n     */\n    this.linecap = 'round';\n\n    /**\n     * Defines appearance of line joints.\n     *\n     * Can only be used with {@link SVGRenderer}.\n     *\n     * @type {('round'|'bevel'|'miter')}\n     * @default 'round'\n     */\n    this.linejoin = 'round';\n\n    /**\n     * Whether the material is affected by fog or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.fog = true;\n    this.setValues(parameters);\n  }\n  copy(source) {\n    super.copy(source);\n    this.color.copy(source.color);\n    this.map = source.map;\n    this.linewidth = source.linewidth;\n    this.linecap = source.linecap;\n    this.linejoin = source.linejoin;\n    this.fog = source.fog;\n    return this;\n  }\n}\nconst _vStart = /*@__PURE__*/new Vector3();\nconst _vEnd = /*@__PURE__*/new Vector3();\nconst _inverseMatrix$1 = /*@__PURE__*/new Matrix4();\nconst _ray$1 = /*@__PURE__*/new Ray();\nconst _sphere$1 = /*@__PURE__*/new Sphere();\nconst _intersectPointOnRay = /*@__PURE__*/new Vector3();\nconst _intersectPointOnSegment = /*@__PURE__*/new Vector3();\n\n/**\n * A continuous line. The line are rendered by connecting consecutive\n * vertices with straight lines.\n *\n * ```js\n * const material = new THREE.LineBasicMaterial( { color: 0x0000ff } );\n *\n * const points = [];\n * points.push( new THREE.Vector3( - 10, 0, 0 ) );\n * points.push( new THREE.Vector3( 0, 10, 0 ) );\n * points.push( new THREE.Vector3( 10, 0, 0 ) );\n *\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const line = new THREE.Line( geometry, material );\n * scene.add( line );\n * ```\n *\n * @augments Object3D\n */\nclass Line extends Object3D {\n  /**\n   * Constructs a new line.\n   *\n   * @param {BufferGeometry} [geometry] - The line geometry.\n   * @param {Material|Array<Material>} [material] - The line material.\n   */\n  constructor() {\n    let geometry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new BufferGeometry();\n    let material = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new LineBasicMaterial();\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isLine = true;\n    this.type = 'Line';\n\n    /**\n     * The line geometry.\n     *\n     * @type {BufferGeometry}\n     */\n    this.geometry = geometry;\n\n    /**\n     * The line material.\n     *\n     * @type {Material|Array<Material>}\n     * @default LineBasicMaterial\n     */\n    this.material = material;\n\n    /**\n     * A dictionary representing the morph targets in the geometry. The key is the\n     * morph targets name, the value its attribute index. This member is `undefined`\n     * by default and only set when morph targets are detected in the geometry.\n     *\n     * @type {Object<String,number>|undefined}\n     * @default undefined\n     */\n    this.morphTargetDictionary = undefined;\n\n    /**\n     * An array of weights typically in the range `[0,1]` that specify how much of the morph\n     * is applied. This member is `undefined` by default and only set when morph targets are\n     * detected in the geometry.\n     *\n     * @type {Array<number>|undefined}\n     * @default undefined\n     */\n    this.morphTargetInfluences = undefined;\n    this.updateMorphTargets();\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.material = Array.isArray(source.material) ? source.material.slice() : source.material;\n    this.geometry = source.geometry;\n    return this;\n  }\n\n  /**\n   * Computes an array of distance values which are necessary for rendering dashed lines.\n   * For each vertex in the geometry, the method calculates the cumulative length from the\n   * current point to the very beginning of the line.\n   *\n   * @return {Line} A reference to this line.\n   */\n  computeLineDistances() {\n    const geometry = this.geometry;\n\n    // we assume non-indexed geometry\n\n    if (geometry.index === null) {\n      const positionAttribute = geometry.attributes.position;\n      const lineDistances = [0];\n      for (let i = 1, l = positionAttribute.count; i < l; i++) {\n        _vStart.fromBufferAttribute(positionAttribute, i - 1);\n        _vEnd.fromBufferAttribute(positionAttribute, i);\n        lineDistances[i] = lineDistances[i - 1];\n        lineDistances[i] += _vStart.distanceTo(_vEnd);\n      }\n      geometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n    } else {\n      console.warn('THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n    }\n    return this;\n  }\n\n  /**\n   * Computes intersection points between a casted ray and this line.\n   *\n   * @param {Raycaster} raycaster - The raycaster.\n   * @param {Array<Object>} intersects - The target array that holds the intersection points.\n   */\n  raycast(raycaster, intersects) {\n    const geometry = this.geometry;\n    const matrixWorld = this.matrixWorld;\n    const threshold = raycaster.params.Line.threshold;\n    const drawRange = geometry.drawRange;\n\n    // Checking boundingSphere distance to ray\n\n    if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n    _sphere$1.copy(geometry.boundingSphere);\n    _sphere$1.applyMatrix4(matrixWorld);\n    _sphere$1.radius += threshold;\n    if (raycaster.ray.intersectsSphere(_sphere$1) === false) return;\n\n    //\n\n    _inverseMatrix$1.copy(matrixWorld).invert();\n    _ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);\n    const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n    const localThresholdSq = localThreshold * localThreshold;\n    const step = this.isLineSegments ? 2 : 1;\n    const index = geometry.index;\n    const attributes = geometry.attributes;\n    const positionAttribute = attributes.position;\n    if (index !== null) {\n      const start = Math.max(0, drawRange.start);\n      const end = Math.min(index.count, drawRange.start + drawRange.count);\n      for (let i = start, l = end - 1; i < l; i += step) {\n        const a = index.getX(i);\n        const b = index.getX(i + 1);\n        const intersect = checkIntersection(this, raycaster, _ray$1, localThresholdSq, a, b, i);\n        if (intersect) {\n          intersects.push(intersect);\n        }\n      }\n      if (this.isLineLoop) {\n        const a = index.getX(end - 1);\n        const b = index.getX(start);\n        const intersect = checkIntersection(this, raycaster, _ray$1, localThresholdSq, a, b, end - 1);\n        if (intersect) {\n          intersects.push(intersect);\n        }\n      }\n    } else {\n      const start = Math.max(0, drawRange.start);\n      const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);\n      for (let i = start, l = end - 1; i < l; i += step) {\n        const intersect = checkIntersection(this, raycaster, _ray$1, localThresholdSq, i, i + 1, i);\n        if (intersect) {\n          intersects.push(intersect);\n        }\n      }\n      if (this.isLineLoop) {\n        const intersect = checkIntersection(this, raycaster, _ray$1, localThresholdSq, end - 1, start, end - 1);\n        if (intersect) {\n          intersects.push(intersect);\n        }\n      }\n    }\n  }\n\n  /**\n   * Sets the values of {@link Line#morphTargetDictionary} and {@link Line#morphTargetInfluences}\n   * to make sure existing morph targets can influence this 3D object.\n   */\n  updateMorphTargets() {\n    const geometry = this.geometry;\n    const morphAttributes = geometry.morphAttributes;\n    const keys = Object.keys(morphAttributes);\n    if (keys.length > 0) {\n      const morphAttribute = morphAttributes[keys[0]];\n      if (morphAttribute !== undefined) {\n        this.morphTargetInfluences = [];\n        this.morphTargetDictionary = {};\n        for (let m = 0, ml = morphAttribute.length; m < ml; m++) {\n          const name = morphAttribute[m].name || String(m);\n          this.morphTargetInfluences.push(0);\n          this.morphTargetDictionary[name] = m;\n        }\n      }\n    }\n  }\n}\nfunction checkIntersection(object, raycaster, ray, thresholdSq, a, b, i) {\n  const positionAttribute = object.geometry.attributes.position;\n  _vStart.fromBufferAttribute(positionAttribute, a);\n  _vEnd.fromBufferAttribute(positionAttribute, b);\n  const distSq = ray.distanceSqToSegment(_vStart, _vEnd, _intersectPointOnRay, _intersectPointOnSegment);\n  if (distSq > thresholdSq) return;\n  _intersectPointOnRay.applyMatrix4(object.matrixWorld); // Move back to world space for distance calculation\n\n  const distance = raycaster.ray.origin.distanceTo(_intersectPointOnRay);\n  if (distance < raycaster.near || distance > raycaster.far) return;\n  return {\n    distance: distance,\n    // What do we want? intersection point on the ray or on the segment??\n    // point: raycaster.ray.at( distance ),\n    point: _intersectPointOnSegment.clone().applyMatrix4(object.matrixWorld),\n    index: i,\n    face: null,\n    faceIndex: null,\n    barycoord: null,\n    object: object\n  };\n}\nconst _start = /*@__PURE__*/new Vector3();\nconst _end = /*@__PURE__*/new Vector3();\n\n/**\n * A series of lines drawn between pairs of vertices.\n *\n * @augments Line\n */\nclass LineSegments extends Line {\n  /**\n   * Constructs a new line segments.\n   *\n   * @param {BufferGeometry} [geometry] - The line geometry.\n   * @param {Material|Array<Material>} [material] - The line material.\n   */\n  constructor(geometry, material) {\n    super(geometry, material);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isLineSegments = true;\n    this.type = 'LineSegments';\n  }\n  computeLineDistances() {\n    const geometry = this.geometry;\n\n    // we assume non-indexed geometry\n\n    if (geometry.index === null) {\n      const positionAttribute = geometry.attributes.position;\n      const lineDistances = [];\n      for (let i = 0, l = positionAttribute.count; i < l; i += 2) {\n        _start.fromBufferAttribute(positionAttribute, i);\n        _end.fromBufferAttribute(positionAttribute, i + 1);\n        lineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];\n        lineDistances[i + 1] = lineDistances[i] + _start.distanceTo(_end);\n      }\n      geometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n    } else {\n      console.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n    }\n    return this;\n  }\n}\n\n/**\n * A continuous line. This is nearly the same as {@link Line} the only difference\n * is that the last vertex is connected with the first vertex in order to close\n * the line to form a loop.\n *\n * @augments Line\n */\nclass LineLoop extends Line {\n  /**\n   * Constructs a new line loop.\n   *\n   * @param {BufferGeometry} [geometry] - The line geometry.\n   * @param {Material|Array<Material>} [material] - The line material.\n   */\n  constructor(geometry, material) {\n    super(geometry, material);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isLineLoop = true;\n    this.type = 'LineLoop';\n  }\n}\n\n/**\n * A material for rendering point primitives.\n *\n * Materials define the appearance of renderable 3D objects.\n *\n * ```js\n * const vertices = [];\n *\n * for ( let i = 0; i < 10000; i ++ ) {\n * \tconst x = THREE.MathUtils.randFloatSpread( 2000 );\n * \tconst y = THREE.MathUtils.randFloatSpread( 2000 );\n * \tconst z = THREE.MathUtils.randFloatSpread( 2000 );\n *\n * \tvertices.push( x, y, z );\n * }\n *\n * const geometry = new THREE.BufferGeometry();\n * geometry.setAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );\n * const material = new THREE.PointsMaterial( { color: 0x888888 } );\n * const points = new THREE.Points( geometry, material );\n * scene.add( points );\n * ```\n *\n * @augments Material\n */\nclass PointsMaterial extends Material {\n  /**\n   * Constructs a new points material.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isPointsMaterial = true;\n    this.type = 'PointsMaterial';\n\n    /**\n     * Color of the material.\n     *\n     * @type {Color}\n     * @default (1,1,1)\n     */\n    this.color = new Color(0xffffff);\n\n    /**\n     * The color map. May optionally include an alpha channel, typically combined\n     * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n     * color is modulated by the diffuse `color`.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.map = null;\n\n    /**\n     * The alpha map is a grayscale texture that controls the opacity across the\n     * surface (black: fully transparent; white: fully opaque).\n     *\n     * Only the color of the texture is used, ignoring the alpha channel if one\n     * exists. For RGB and RGBA textures, the renderer will use the green channel\n     * when sampling this texture due to the extra bit of precision provided for\n     * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n     * luminance/alpha textures will also still work as expected.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.alphaMap = null;\n\n    /**\n     * Defines the size of the points in pixels.\n     *\n     * Might be capped if the value exceeds hardware dependent parameters like [gl.ALIASED_POINT_SIZE_RANGE]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getParamete}.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.size = 1;\n\n    /**\n     * Specifies whether size of individual points is attenuated by the camera depth (perspective camera only).\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.sizeAttenuation = true;\n\n    /**\n     * Whether the material is affected by fog or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.fog = true;\n    this.setValues(parameters);\n  }\n  copy(source) {\n    super.copy(source);\n    this.color.copy(source.color);\n    this.map = source.map;\n    this.alphaMap = source.alphaMap;\n    this.size = source.size;\n    this.sizeAttenuation = source.sizeAttenuation;\n    this.fog = source.fog;\n    return this;\n  }\n}\nconst _inverseMatrix = /*@__PURE__*/new Matrix4();\nconst _ray = /*@__PURE__*/new Ray();\nconst _sphere = /*@__PURE__*/new Sphere();\nconst _position$2 = /*@__PURE__*/new Vector3();\n\n/**\n * A class for displaying points or point clouds.\n *\n * @augments Object3D\n */\nclass Points extends Object3D {\n  /**\n   * Constructs a new point cloud.\n   *\n   * @param {BufferGeometry} [geometry] - The points geometry.\n   * @param {Material|Array<Material>} [material] - The points material.\n   */\n  constructor() {\n    let geometry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new BufferGeometry();\n    let material = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new PointsMaterial();\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isPoints = true;\n    this.type = 'Points';\n\n    /**\n     * The points geometry.\n     *\n     * @type {BufferGeometry}\n     */\n    this.geometry = geometry;\n\n    /**\n     * The line material.\n     *\n     * @type {Material|Array<Material>}\n     * @default PointsMaterial\n     */\n    this.material = material;\n\n    /**\n     * A dictionary representing the morph targets in the geometry. The key is the\n     * morph targets name, the value its attribute index. This member is `undefined`\n     * by default and only set when morph targets are detected in the geometry.\n     *\n     * @type {Object<String,number>|undefined}\n     * @default undefined\n     */\n    this.morphTargetDictionary = undefined;\n\n    /**\n     * An array of weights typically in the range `[0,1]` that specify how much of the morph\n     * is applied. This member is `undefined` by default and only set when morph targets are\n     * detected in the geometry.\n     *\n     * @type {Array<number>|undefined}\n     * @default undefined\n     */\n    this.morphTargetInfluences = undefined;\n    this.updateMorphTargets();\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.material = Array.isArray(source.material) ? source.material.slice() : source.material;\n    this.geometry = source.geometry;\n    return this;\n  }\n\n  /**\n   * Computes intersection points between a casted ray and this point cloud.\n   *\n   * @param {Raycaster} raycaster - The raycaster.\n   * @param {Array<Object>} intersects - The target array that holds the intersection points.\n   */\n  raycast(raycaster, intersects) {\n    const geometry = this.geometry;\n    const matrixWorld = this.matrixWorld;\n    const threshold = raycaster.params.Points.threshold;\n    const drawRange = geometry.drawRange;\n\n    // Checking boundingSphere distance to ray\n\n    if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n    _sphere.copy(geometry.boundingSphere);\n    _sphere.applyMatrix4(matrixWorld);\n    _sphere.radius += threshold;\n    if (raycaster.ray.intersectsSphere(_sphere) === false) return;\n\n    //\n\n    _inverseMatrix.copy(matrixWorld).invert();\n    _ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);\n    const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n    const localThresholdSq = localThreshold * localThreshold;\n    const index = geometry.index;\n    const attributes = geometry.attributes;\n    const positionAttribute = attributes.position;\n    if (index !== null) {\n      const start = Math.max(0, drawRange.start);\n      const end = Math.min(index.count, drawRange.start + drawRange.count);\n      for (let i = start, il = end; i < il; i++) {\n        const a = index.getX(i);\n        _position$2.fromBufferAttribute(positionAttribute, a);\n        testPoint(_position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this);\n      }\n    } else {\n      const start = Math.max(0, drawRange.start);\n      const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);\n      for (let i = start, l = end; i < l; i++) {\n        _position$2.fromBufferAttribute(positionAttribute, i);\n        testPoint(_position$2, i, localThresholdSq, matrixWorld, raycaster, intersects, this);\n      }\n    }\n  }\n\n  /**\n   * Sets the values of {@link Points#morphTargetDictionary} and {@link Points#morphTargetInfluences}\n   * to make sure existing morph targets can influence this 3D object.\n   */\n  updateMorphTargets() {\n    const geometry = this.geometry;\n    const morphAttributes = geometry.morphAttributes;\n    const keys = Object.keys(morphAttributes);\n    if (keys.length > 0) {\n      const morphAttribute = morphAttributes[keys[0]];\n      if (morphAttribute !== undefined) {\n        this.morphTargetInfluences = [];\n        this.morphTargetDictionary = {};\n        for (let m = 0, ml = morphAttribute.length; m < ml; m++) {\n          const name = morphAttribute[m].name || String(m);\n          this.morphTargetInfluences.push(0);\n          this.morphTargetDictionary[name] = m;\n        }\n      }\n    }\n  }\n}\nfunction testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects, object) {\n  const rayPointDistanceSq = _ray.distanceSqToPoint(point);\n  if (rayPointDistanceSq < localThresholdSq) {\n    const intersectPoint = new Vector3();\n    _ray.closestPointToPoint(point, intersectPoint);\n    intersectPoint.applyMatrix4(matrixWorld);\n    const distance = raycaster.ray.origin.distanceTo(intersectPoint);\n    if (distance < raycaster.near || distance > raycaster.far) return;\n    intersects.push({\n      distance: distance,\n      distanceToRay: Math.sqrt(rayPointDistanceSq),\n      point: intersectPoint,\n      index: index,\n      face: null,\n      faceIndex: null,\n      barycoord: null,\n      object: object\n    });\n  }\n}\n\n/**\n * A texture for use with a video.\n *\n * ```js\n * // assuming you have created a HTML video element with id=\"video\"\n * const video = document.getElementById( 'video' );\n * const texture = new THREE.VideoTexture( video );\n * ```\n *\n * Note: After the initial use of a texture, its dimensions, format, and type\n * cannot be changed. Instead, call {@link Texture#dispose} on the texture and instantiate a new one.\n *\n * @augments Texture\n */\nclass VideoTexture extends Texture {\n  /**\n   * Constructs a new video texture.\n   *\n   * @param {HTMLVideoElement} video - The video element to use as a data source for the texture.\n   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n   * @param {number} [magFilter=LinearFilter] - The mag filter value.\n   * @param {number} [minFilter=LinearFilter] - The min filter value.\n   * @param {number} [format=RGBAFormat] - The texture format.\n   * @param {number} [type=UnsignedByteType] - The texture type.\n   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n   */\n  constructor(video, mapping, wrapS, wrapT) {\n    let magFilter = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : LinearFilter;\n    let minFilter = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : LinearFilter;\n    let format = arguments.length > 6 ? arguments[6] : undefined;\n    let type = arguments.length > 7 ? arguments[7] : undefined;\n    let anisotropy = arguments.length > 8 ? arguments[8] : undefined;\n    super(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isVideoTexture = true;\n\n    /**\n     * Whether to generate mipmaps (if possible) for a texture.\n     *\n     * Overwritten and set to `false` by default.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.generateMipmaps = false;\n    const scope = this;\n    function updateVideo() {\n      scope.needsUpdate = true;\n      video.requestVideoFrameCallback(updateVideo);\n    }\n    if ('requestVideoFrameCallback' in video) {\n      video.requestVideoFrameCallback(updateVideo);\n    }\n  }\n  clone() {\n    return new this.constructor(this.image).copy(this);\n  }\n\n  /**\n   * This method is called automatically by the renderer and sets {@link Texture#needsUpdate}\n   * to `true` every time a new frame is available.\n   *\n   * Only relevant if `requestVideoFrameCallback` is not supported in the browser.\n   */\n  update() {\n    const video = this.image;\n    const hasVideoFrameCallback = 'requestVideoFrameCallback' in video;\n    if (hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA) {\n      this.needsUpdate = true;\n    }\n  }\n}\n\n/**\n * This class can be used as an alternative way to define video data. Instead of using\n * an instance of `HTMLVideoElement` like with `VideoTexture`, `VideoFrameTexture` expects each frame is\n * defined manually via {@link VideoFrameTexture#setFrame}. A typical use case for this module is when\n * video frames are decoded with the WebCodecs API.\n *\n * ```js\n * const texture = new THREE.VideoFrameTexture();\n * texture.setFrame( frame );\n * ```\n *\n * @augments VideoTexture\n */\nclass VideoFrameTexture extends VideoTexture {\n  /**\n   * Constructs a new video frame texture.\n   *\n   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n   * @param {number} [magFilter=LinearFilter] - The mag filter value.\n   * @param {number} [minFilter=LinearFilter] - The min filter value.\n   * @param {number} [format=RGBAFormat] - The texture format.\n   * @param {number} [type=UnsignedByteType] - The texture type.\n   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n   */\n  constructor(mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n    super({}, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isVideoFrameTexture = true;\n  }\n\n  /**\n   * This method overwritten with an empty implementation since\n   * this type of texture is updated via `setFrame()`.\n   */\n  update() {}\n  clone() {\n    return new this.constructor().copy(this); // restoring Texture.clone()\n  }\n\n  /**\n   * Sets the current frame of the video. This will automatically update the texture\n   * so the data can be used for rendering.\n   *\n   * @param {VideoFrame} frame - The video frame.\n   */\n  setFrame(frame) {\n    this.image = frame;\n    this.needsUpdate = true;\n  }\n}\n\n/**\n * This class can only be used in combination with `copyFramebufferToTexture()` methods\n * of renderers. It extracts the contents of the current bound framebuffer and provides it\n * as a texture for further usage.\n *\n * ```js\n * const pixelRatio = window.devicePixelRatio;\n * const textureSize = 128 * pixelRatio;\n *\n * const frameTexture = new FramebufferTexture( textureSize, textureSize );\n *\n * // calculate start position for copying part of the frame data\n * const vector = new Vector2();\n * vector.x = ( window.innerWidth * pixelRatio / 2 ) - ( textureSize / 2 );\n * vector.y = ( window.innerHeight * pixelRatio / 2 ) - ( textureSize / 2 );\n *\n * renderer.render( scene, camera );\n *\n * // copy part of the rendered frame into the framebuffer texture\n * renderer.copyFramebufferToTexture( frameTexture, vector );\n * ```\n *\n * @augments Texture\n */\nclass FramebufferTexture extends Texture {\n  /**\n   * Constructs a new framebuffer texture.\n   *\n   * @param {number} width - The width of the texture.\n   * @param {number} height - The height of the texture.\n   */\n  constructor(width, height) {\n    super({\n      width,\n      height\n    });\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isFramebufferTexture = true;\n\n    /**\n     * How the texture is sampled when a texel covers more than one pixel.\n     *\n     * Overwritten and set to `NearestFilter` by default to disable filtering.\n     *\n     * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n     * @default NearestFilter\n     */\n    this.magFilter = NearestFilter;\n\n    /**\n     * How the texture is sampled when a texel covers less than one pixel.\n     *\n     * Overwritten and set to `NearestFilter` by default to disable filtering.\n     *\n     * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n     * @default NearestFilter\n     */\n    this.minFilter = NearestFilter;\n\n    /**\n     * Whether to generate mipmaps (if possible) for a texture.\n     *\n     * Overwritten and set to `false` by default.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.generateMipmaps = false;\n    this.needsUpdate = true;\n  }\n}\n\n/**\n * Creates a texture based on data in compressed form.\n *\n * These texture are usually loaded with {@link CompressedTextureLoader}.\n *\n * @augments Texture\n */\nclass CompressedTexture extends Texture {\n  /**\n   * Constructs a new compressed texture.\n   *\n   * @param {Array<Object>} mipmaps - This array holds for all mipmaps (including the bases mip)\n   * the data and dimensions.\n   * @param {number} width - The width of the texture.\n   * @param {number} height - The height of the texture.\n   * @param {number} [format=RGBAFormat] - The texture format.\n   * @param {number} [type=UnsignedByteType] - The texture type.\n   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n   * @param {number} [magFilter=LinearFilter] - The mag filter value.\n   * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.\n   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n   * @param {string} [colorSpace=NoColorSpace] - The color space.\n   */\n  constructor(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, colorSpace) {\n    super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isCompressedTexture = true;\n\n    /**\n     * The image property of a compressed texture just defines its dimensions.\n     *\n     * @type {{width:number,height:number}}\n     */\n    this.image = {\n      width: width,\n      height: height\n    };\n\n    /**\n     * This array holds for all mipmaps (including the bases mip) the data and dimensions.\n     *\n     * @type {Array<Object>}\n     */\n    this.mipmaps = mipmaps;\n\n    /**\n     * If set to `true`, the texture is flipped along the vertical axis when\n     * uploaded to the GPU.\n     *\n     * Overwritten and set to `false` by default since it is not possible to\n     * flip compressed textures.\n     *\n     * @type {boolean}\n     * @default false\n     * @readonly\n     */\n    this.flipY = false;\n\n    /**\n     * Whether to generate mipmaps (if possible) for a texture.\n     *\n     * Overwritten and set to `false` by default since it is not\n     * possible to generate mipmaps for compressed data. Mipmaps\n     * must be embedded in the compressed texture file.\n     *\n     * @type {boolean}\n     * @default false\n     * @readonly\n     */\n    this.generateMipmaps = false;\n  }\n}\n\n/**\n * Creates a texture 2D array based on data in compressed form.\n *\n * These texture are usually loaded with {@link CompressedTextureLoader}.\n *\n * @augments CompressedTexture\n */\nclass CompressedArrayTexture extends CompressedTexture {\n  /**\n   * Constructs a new compressed array texture.\n   *\n   * @param {Array<Object>} mipmaps - This array holds for all mipmaps (including the bases mip)\n   * the data and dimensions.\n   * @param {number} width - The width of the texture.\n   * @param {number} height - The height of the texture.\n   * @param {number} depth - The depth of the texture.\n   * @param {number} [format=RGBAFormat] - The min filter value.\n   * @param {number} [type=UnsignedByteType] - The min filter value.\n   */\n  constructor(mipmaps, width, height, depth, format, type) {\n    super(mipmaps, width, height, format, type);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isCompressedArrayTexture = true;\n\n    /**\n     * The image property of a compressed texture just defines its dimensions.\n     *\n     * @name CompressedArrayTexture#image\n     * @type {{width:number,height:number,depth:number}}\n     */\n    this.image.depth = depth;\n\n    /**\n     * This defines how the texture is wrapped in the depth and corresponds to\n     * *W* in UVW mapping.\n     *\n     * @type {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)}\n     * @default ClampToEdgeWrapping\n     */\n    this.wrapR = ClampToEdgeWrapping;\n\n    /**\n     * A set of all layers which need to be updated in the texture.\n     *\n     * @type {Set<number>}\n     */\n    this.layerUpdates = new Set();\n  }\n\n  /**\n   * Describes that a specific layer of the texture needs to be updated.\n   * Normally when {@link Texture#needsUpdate} is set to `true`, the\n   * entire compressed texture array is sent to the GPU. Marking specific\n   * layers will only transmit subsets of all mipmaps associated with a\n   * specific depth in the array which is often much more performant.\n   *\n   * @param {number} layerIndex - The layer index that should be updated.\n   */\n  addLayerUpdate(layerIndex) {\n    this.layerUpdates.add(layerIndex);\n  }\n\n  /**\n   * Resets the layer updates registry.\n   */\n  clearLayerUpdates() {\n    this.layerUpdates.clear();\n  }\n}\n\n/**\n * Creates a cube texture based on data in compressed form.\n *\n * These texture are usually loaded with {@link CompressedTextureLoader}.\n *\n * @augments CompressedTexture\n */\nclass CompressedCubeTexture extends CompressedTexture {\n  /**\n   * Constructs a new compressed texture.\n   *\n   * @param {Array<CompressedTexture>} images - An array of compressed textures.\n   * @param {number} [format=RGBAFormat] - The texture format.\n   * @param {number} [type=UnsignedByteType] - The texture type.\n   */\n  constructor(images, format, type) {\n    super(undefined, images[0].width, images[0].height, format, type, CubeReflectionMapping);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isCompressedCubeTexture = true;\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isCubeTexture = true;\n    this.image = images;\n  }\n}\n\n/**\n * Creates a texture from a canvas element.\n *\n * This is almost the same as the base texture class, except that it sets {@link Texture#needsUpdate}\n * to `true` immediately since a canvas can directly be used for rendering.\n *\n * @augments Texture\n */\nclass CanvasTexture extends Texture {\n  /**\n   * Constructs a new texture.\n   *\n   * @param {HTMLCanvasElement} [canvas] - The HTML canvas element.\n   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n   * @param {number} [magFilter=LinearFilter] - The mag filter value.\n   * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.\n   * @param {number} [format=RGBAFormat] - The texture format.\n   * @param {number} [type=UnsignedByteType] - The texture type.\n   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n   */\n  constructor(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n    super(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isCanvasTexture = true;\n    this.needsUpdate = true;\n  }\n}\n\n/**\n * This class can be used to automatically save the depth information of a\n * rendering into a texture.\n *\n * @augments Texture\n */\nclass DepthTexture extends Texture {\n  /**\n   * Constructs a new depth texture.\n   *\n   * @param {number} width - The width of the texture.\n   * @param {number} height - The height of the texture.\n   * @param {number} [type=UnsignedIntType] - The texture type.\n   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n   * @param {number} [magFilter=LinearFilter] - The mag filter value.\n   * @param {number} [minFilter=LinearFilter] - The min filter value.\n   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n   * @param {number} [format=DepthFormat] - The texture format.\n   */\n  constructor(width, height) {\n    let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : UnsignedIntType;\n    let mapping = arguments.length > 3 ? arguments[3] : undefined;\n    let wrapS = arguments.length > 4 ? arguments[4] : undefined;\n    let wrapT = arguments.length > 5 ? arguments[5] : undefined;\n    let magFilter = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : NearestFilter;\n    let minFilter = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : NearestFilter;\n    let anisotropy = arguments.length > 8 ? arguments[8] : undefined;\n    let format = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : DepthFormat;\n    if (format !== DepthFormat && format !== DepthStencilFormat) {\n      throw new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');\n    }\n    super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isDepthTexture = true;\n\n    /**\n     * The image property of a depth texture just defines its dimensions.\n     *\n     * @type {{width:number,height:number}}\n     */\n    this.image = {\n      width: width,\n      height: height\n    };\n\n    /**\n     * If set to `true`, the texture is flipped along the vertical axis when\n     * uploaded to the GPU.\n     *\n     * Overwritten and set to `false` by default.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.flipY = false;\n\n    /**\n     * Whether to generate mipmaps (if possible) for a texture.\n     *\n     * Overwritten and set to `false` by default.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.generateMipmaps = false;\n\n    /**\n     * Code corresponding to the depth compare function.\n     *\n     * @type {?(NeverCompare|LessCompare|EqualCompare|LessEqualCompare|GreaterCompare|NotEqualCompare|GreaterEqualCompare|AlwaysCompare)}\n     * @default null\n     */\n    this.compareFunction = null;\n  }\n  copy(source) {\n    super.copy(source);\n    this.source = new Source(Object.assign({}, source.image)); // see #30540\n    this.compareFunction = source.compareFunction;\n    return this;\n  }\n  toJSON(meta) {\n    const data = super.toJSON(meta);\n    if (this.compareFunction !== null) data.compareFunction = this.compareFunction;\n    return data;\n  }\n}\n\n/**\n * Creates an array of depth textures.\n *\n * @augments DepthTexture\n */\nclass DepthArrayTexture extends DepthTexture {\n  /**\n   * Constructs a new depth array texture.\n   *\n   * @param {number} [width=1] - The width of the texture.\n   * @param {number} [height=1] - The height of the texture.\n   * @param {number} [depth=1] - The depth of the texture.\n   */\n  constructor() {\n    let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    super(width, height);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isDepthArrayTexture = true;\n\n    /**\n     * The image definition of a depth texture.\n     *\n     * @type {{width:number,height:number,depth:number}}\n     */\n    this.image = {\n      width: width,\n      height: height,\n      depth: depth\n    };\n\n    /**\n     * If set to `true`, the texture is flipped along the vertical axis when\n     * uploaded to the GPU.\n     *\n     * Overwritten and set to `false` by default.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.flipY = false;\n\n    /**\n     * Whether to generate mipmaps (if possible) for a texture.\n     *\n     * Overwritten and set to `false` by default.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.generateMipmaps = false;\n\n    /**\n     * Code corresponding to the depth compare function.\n     *\n     * @type {?(NeverCompare|LessCompare|EqualCompare|LessEqualCompare|GreaterCompare|NotEqualCompare|GreaterEqualCompare|AlwaysCompare)}\n     * @default null\n     */\n    this.compareFunction = null;\n\n    /**\n     * A set of all layers which need to be updated in the texture.\n     *\n     * @type {Set<number>}\n     */\n    this.layerUpdates = new Set();\n  }\n\n  /**\n   * Describes that a specific layer of the texture needs to be updated.\n   * Normally when {@link Texture#needsUpdate} is set to `true`, the\n   * entire slice is sent to the GPU. Marking specific\n   * layers will only transmit subsets of all mipmaps associated with a\n   * specific depth in the array which is often much more performant.\n   *\n   * @param {number} layerIndex - The layer index that should be updated.\n   */\n  addLayerUpdate(layerIndex) {\n    this.layerUpdates.add(layerIndex);\n  }\n\n  /**\n   * Resets the layer updates registry.\n   */\n  clearLayerUpdates() {\n    this.layerUpdates.clear();\n  }\n}\n\n/**\n * A geometry class for representing a capsule.\n *\n * ```js\n * const geometry = new THREE.CapsuleGeometry( 1, 1, 4, 8, 1 );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n * const capsule = new THREE.Mesh( geometry, material );\n * scene.add( capsule );\n * ```\n *\n * @augments BufferGeometry\n */\nclass CapsuleGeometry extends BufferGeometry {\n  /**\n   * Constructs a new capsule geometry.\n   *\n   * @param {number} [radius=1] - Radius of the capsule.\n   * @param {number} [height=1] - Height of the middle section.\n   * @param {number} [capSegments=4] - Number of curve segments used to build each cap.\n   * @param {number} [radialSegments=8] - Number of segmented faces around the circumference of the capsule. Must be an integer >= 3.\n   * @param {number} [heightSegments=1] - Number of rows of faces along the height of the middle section. Must be an integer >= 1.\n   */\n  constructor() {\n    let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let capSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n    let radialSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;\n    let heightSegments = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n    super();\n    this.type = 'CapsuleGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      radius: radius,\n      height: height,\n      capSegments: capSegments,\n      radialSegments: radialSegments,\n      heightSegments: heightSegments\n    };\n    height = Math.max(0, height);\n    capSegments = Math.max(1, Math.floor(capSegments));\n    radialSegments = Math.max(3, Math.floor(radialSegments));\n    heightSegments = Math.max(1, Math.floor(heightSegments));\n\n    // buffers\n\n    const indices = [];\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n\n    // helper variables\n\n    const halfHeight = height / 2;\n    const capArcLength = Math.PI / 2 * radius;\n    const cylinderPartLength = height;\n    const totalArcLength = 2 * capArcLength + cylinderPartLength;\n    const numVerticalSegments = capSegments * 2 + heightSegments;\n    const verticesPerRow = radialSegments + 1;\n    const normal = new Vector3();\n    const vertex = new Vector3();\n\n    // generate vertices, normals, and uvs\n\n    for (let iy = 0; iy <= numVerticalSegments; iy++) {\n      let currentArcLength = 0;\n      let profileY = 0;\n      let profileRadius = 0;\n      let normalYComponent = 0;\n      if (iy <= capSegments) {\n        // bottom cap\n        const segmentProgress = iy / capSegments;\n        const angle = segmentProgress * Math.PI / 2;\n        profileY = -halfHeight - radius * Math.cos(angle);\n        profileRadius = radius * Math.sin(angle);\n        normalYComponent = -radius * Math.cos(angle);\n        currentArcLength = segmentProgress * capArcLength;\n      } else if (iy <= capSegments + heightSegments) {\n        // middle section\n        const segmentProgress = (iy - capSegments) / heightSegments;\n        profileY = -halfHeight + segmentProgress * height;\n        profileRadius = radius;\n        normalYComponent = 0;\n        currentArcLength = capArcLength + segmentProgress * cylinderPartLength;\n      } else {\n        // top cap\n        const segmentProgress = (iy - capSegments - heightSegments) / capSegments;\n        const angle = segmentProgress * Math.PI / 2;\n        profileY = halfHeight + radius * Math.sin(angle);\n        profileRadius = radius * Math.cos(angle);\n        normalYComponent = radius * Math.sin(angle);\n        currentArcLength = capArcLength + cylinderPartLength + segmentProgress * capArcLength;\n      }\n      const v = Math.max(0, Math.min(1, currentArcLength / totalArcLength));\n\n      // special case for the poles\n\n      let uOffset = 0;\n      if (iy === 0) {\n        uOffset = 0.5 / radialSegments;\n      } else if (iy === numVerticalSegments) {\n        uOffset = -0.5 / radialSegments;\n      }\n      for (let ix = 0; ix <= radialSegments; ix++) {\n        const u = ix / radialSegments;\n        const theta = u * Math.PI * 2;\n        const sinTheta = Math.sin(theta);\n        const cosTheta = Math.cos(theta);\n\n        // vertex\n\n        vertex.x = -profileRadius * cosTheta;\n        vertex.y = profileY;\n        vertex.z = profileRadius * sinTheta;\n        vertices.push(vertex.x, vertex.y, vertex.z);\n\n        // normal\n\n        normal.set(-profileRadius * cosTheta, normalYComponent, profileRadius * sinTheta);\n        normal.normalize();\n        normals.push(normal.x, normal.y, normal.z);\n\n        // uv\n\n        uvs.push(u + uOffset, v);\n      }\n      if (iy > 0) {\n        const prevIndexRow = (iy - 1) * verticesPerRow;\n        for (let ix = 0; ix < radialSegments; ix++) {\n          const i1 = prevIndexRow + ix;\n          const i2 = prevIndexRow + ix + 1;\n          const i3 = iy * verticesPerRow + ix;\n          const i4 = iy * verticesPerRow + ix + 1;\n          indices.push(i1, i2, i3);\n          indices.push(i2, i4, i3);\n        }\n      }\n    }\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n  }\n  copy(source) {\n    super.copy(source);\n    this.parameters = Object.assign({}, source.parameters);\n    return this;\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @return {CapsuleGeometry} A new instance.\n   */\n  static fromJSON(data) {\n    return new CapsuleGeometry(data.radius, data.height, data.capSegments, data.radialSegments, data.heightSegments);\n  }\n}\n\n/**\n * A simple shape of Euclidean geometry. It is constructed from a\n * number of triangular segments that are oriented around a central point and\n * extend as far out as a given radius. It is built counter-clockwise from a\n * start angle and a given central angle. It can also be used to create\n * regular polygons, where the number of segments determines the number of\n * sides.\n *\n * ```js\n * const geometry = new THREE.CircleGeometry( 5, 32 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const circle = new THREE.Mesh( geometry, material );\n * scene.add( circle )\n * ```\n *\n * @augments BufferGeometry\n */\nclass CircleGeometry extends BufferGeometry {\n  /**\n   * Constructs a new circle geometry.\n   *\n   * @param {number} [radius=1] - Radius of the circle.\n   * @param {number} [segments=32] - Number of segments (triangles), minimum = `3`.\n   * @param {number} [thetaStart=0] - Start angle for first segment in radians.\n   * @param {number} [thetaLength=Math.PI*2] - The central angle, often called theta,\n   * of the circular sector in radians. The default value results in a complete circle.\n   */\n  constructor() {\n    let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let segments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 32;\n    let thetaStart = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let thetaLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Math.PI * 2;\n    super();\n    this.type = 'CircleGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      radius: radius,\n      segments: segments,\n      thetaStart: thetaStart,\n      thetaLength: thetaLength\n    };\n    segments = Math.max(3, segments);\n\n    // buffers\n\n    const indices = [];\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n\n    // helper variables\n\n    const vertex = new Vector3();\n    const uv = new Vector2();\n\n    // center point\n\n    vertices.push(0, 0, 0);\n    normals.push(0, 0, 1);\n    uvs.push(0.5, 0.5);\n    for (let s = 0, i = 3; s <= segments; s++, i += 3) {\n      const segment = thetaStart + s / segments * thetaLength;\n\n      // vertex\n\n      vertex.x = radius * Math.cos(segment);\n      vertex.y = radius * Math.sin(segment);\n      vertices.push(vertex.x, vertex.y, vertex.z);\n\n      // normal\n\n      normals.push(0, 0, 1);\n\n      // uvs\n\n      uv.x = (vertices[i] / radius + 1) / 2;\n      uv.y = (vertices[i + 1] / radius + 1) / 2;\n      uvs.push(uv.x, uv.y);\n    }\n\n    // indices\n\n    for (let i = 1; i <= segments; i++) {\n      indices.push(i, i + 1, 0);\n    }\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n  }\n  copy(source) {\n    super.copy(source);\n    this.parameters = Object.assign({}, source.parameters);\n    return this;\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @return {CircleGeometry} A new instance.\n   */\n  static fromJSON(data) {\n    return new CircleGeometry(data.radius, data.segments, data.thetaStart, data.thetaLength);\n  }\n}\n\n/**\n * A geometry class for representing a cylinder.\n *\n * ```js\n * const geometry = new THREE.CylinderGeometry( 5, 5, 20, 32 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const cylinder = new THREE.Mesh( geometry, material );\n * scene.add( cylinder );\n * ```\n *\n * @augments BufferGeometry\n */\nclass CylinderGeometry extends BufferGeometry {\n  /**\n   * Constructs a new cylinder geometry.\n   *\n   * @param {number} [radiusTop=1] - Radius of the cylinder at the top.\n   * @param {number} [radiusBottom=1] - Radius of the cylinder at the bottom.\n   * @param {number} [height=1] - Height of the cylinder.\n   * @param {number} [radialSegments=32] - Number of segmented faces around the circumference of the cylinder.\n   * @param {number} [heightSegments=1] - Number of rows of faces along the height of the cylinder.\n   * @param {boolean} [openEnded=false] - Whether the base of the cylinder is open or capped.\n   * @param {number} [thetaStart=0] - Start angle for first segment, in radians.\n   * @param {number} [thetaLength=Math.PI*2] - The central angle, often called theta, of the circular sector, in radians.\n   * The default value results in a complete cylinder.\n   */\n  constructor() {\n    let radiusTop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let radiusBottom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let radialSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 32;\n    let heightSegments = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n    let openEnded = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n    let thetaStart = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n    let thetaLength = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : Math.PI * 2;\n    super();\n    this.type = 'CylinderGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      radiusTop: radiusTop,\n      radiusBottom: radiusBottom,\n      height: height,\n      radialSegments: radialSegments,\n      heightSegments: heightSegments,\n      openEnded: openEnded,\n      thetaStart: thetaStart,\n      thetaLength: thetaLength\n    };\n    const scope = this;\n    radialSegments = Math.floor(radialSegments);\n    heightSegments = Math.floor(heightSegments);\n\n    // buffers\n\n    const indices = [];\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n\n    // helper variables\n\n    let index = 0;\n    const indexArray = [];\n    const halfHeight = height / 2;\n    let groupStart = 0;\n\n    // generate geometry\n\n    generateTorso();\n    if (openEnded === false) {\n      if (radiusTop > 0) generateCap(true);\n      if (radiusBottom > 0) generateCap(false);\n    }\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n    function generateTorso() {\n      const normal = new Vector3();\n      const vertex = new Vector3();\n      let groupCount = 0;\n\n      // this will be used to calculate the normal\n      const slope = (radiusBottom - radiusTop) / height;\n\n      // generate vertices, normals and uvs\n\n      for (let y = 0; y <= heightSegments; y++) {\n        const indexRow = [];\n        const v = y / heightSegments;\n\n        // calculate the radius of the current row\n\n        const radius = v * (radiusBottom - radiusTop) + radiusTop;\n        for (let x = 0; x <= radialSegments; x++) {\n          const u = x / radialSegments;\n          const theta = u * thetaLength + thetaStart;\n          const sinTheta = Math.sin(theta);\n          const cosTheta = Math.cos(theta);\n\n          // vertex\n\n          vertex.x = radius * sinTheta;\n          vertex.y = -v * height + halfHeight;\n          vertex.z = radius * cosTheta;\n          vertices.push(vertex.x, vertex.y, vertex.z);\n\n          // normal\n\n          normal.set(sinTheta, slope, cosTheta).normalize();\n          normals.push(normal.x, normal.y, normal.z);\n\n          // uv\n\n          uvs.push(u, 1 - v);\n\n          // save index of vertex in respective row\n\n          indexRow.push(index++);\n        }\n\n        // now save vertices of the row in our index array\n\n        indexArray.push(indexRow);\n      }\n\n      // generate indices\n\n      for (let x = 0; x < radialSegments; x++) {\n        for (let y = 0; y < heightSegments; y++) {\n          // we use the index array to access the correct indices\n\n          const a = indexArray[y][x];\n          const b = indexArray[y + 1][x];\n          const c = indexArray[y + 1][x + 1];\n          const d = indexArray[y][x + 1];\n\n          // faces\n\n          if (radiusTop > 0 || y !== 0) {\n            indices.push(a, b, d);\n            groupCount += 3;\n          }\n          if (radiusBottom > 0 || y !== heightSegments - 1) {\n            indices.push(b, c, d);\n            groupCount += 3;\n          }\n        }\n      }\n\n      // add a group to the geometry. this will ensure multi material support\n\n      scope.addGroup(groupStart, groupCount, 0);\n\n      // calculate new start value for groups\n\n      groupStart += groupCount;\n    }\n    function generateCap(top) {\n      // save the index of the first center vertex\n      const centerIndexStart = index;\n      const uv = new Vector2();\n      const vertex = new Vector3();\n      let groupCount = 0;\n      const radius = top === true ? radiusTop : radiusBottom;\n      const sign = top === true ? 1 : -1;\n\n      // first we generate the center vertex data of the cap.\n      // because the geometry needs one set of uvs per face,\n      // we must generate a center vertex per face/segment\n\n      for (let x = 1; x <= radialSegments; x++) {\n        // vertex\n\n        vertices.push(0, halfHeight * sign, 0);\n\n        // normal\n\n        normals.push(0, sign, 0);\n\n        // uv\n\n        uvs.push(0.5, 0.5);\n\n        // increase index\n\n        index++;\n      }\n\n      // save the index of the last center vertex\n      const centerIndexEnd = index;\n\n      // now we generate the surrounding vertices, normals and uvs\n\n      for (let x = 0; x <= radialSegments; x++) {\n        const u = x / radialSegments;\n        const theta = u * thetaLength + thetaStart;\n        const cosTheta = Math.cos(theta);\n        const sinTheta = Math.sin(theta);\n\n        // vertex\n\n        vertex.x = radius * sinTheta;\n        vertex.y = halfHeight * sign;\n        vertex.z = radius * cosTheta;\n        vertices.push(vertex.x, vertex.y, vertex.z);\n\n        // normal\n\n        normals.push(0, sign, 0);\n\n        // uv\n\n        uv.x = cosTheta * 0.5 + 0.5;\n        uv.y = sinTheta * 0.5 * sign + 0.5;\n        uvs.push(uv.x, uv.y);\n\n        // increase index\n\n        index++;\n      }\n\n      // generate indices\n\n      for (let x = 0; x < radialSegments; x++) {\n        const c = centerIndexStart + x;\n        const i = centerIndexEnd + x;\n        if (top === true) {\n          // face top\n\n          indices.push(i, i + 1, c);\n        } else {\n          // face bottom\n\n          indices.push(i + 1, i, c);\n        }\n        groupCount += 3;\n      }\n\n      // add a group to the geometry. this will ensure multi material support\n\n      scope.addGroup(groupStart, groupCount, top === true ? 1 : 2);\n\n      // calculate new start value for groups\n\n      groupStart += groupCount;\n    }\n  }\n  copy(source) {\n    super.copy(source);\n    this.parameters = Object.assign({}, source.parameters);\n    return this;\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @return {CylinderGeometry} A new instance.\n   */\n  static fromJSON(data) {\n    return new CylinderGeometry(data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n  }\n}\n\n/**\n * A geometry class for representing a cone.\n *\n * ```js\n * const geometry = new THREE.ConeGeometry( 5, 20, 32 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const cone = new THREE.Mesh(geometry, material );\n * scene.add( cone );\n * ```\n *\n * @augments CylinderGeometry\n */\nclass ConeGeometry extends CylinderGeometry {\n  /**\n   * Constructs a new cone geometry.\n   *\n   * @param {number} [radius=1] - Radius of the cone base.\n   * @param {number} [height=1] - Height of the cone.\n   * @param {number} [radialSegments=32] - Number of segmented faces around the circumference of the cone.\n   * @param {number} [heightSegments=1] - Number of rows of faces along the height of the cone.\n   * @param {boolean} [openEnded=false] - Whether the base of the cone is open or capped.\n   * @param {number} [thetaStart=0] - Start angle for first segment, in radians.\n   * @param {number} [thetaLength=Math.PI*2] - The central angle, often called theta, of the circular sector, in radians.\n   * The default value results in a complete cone.\n   */\n  constructor() {\n    let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let radialSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 32;\n    let heightSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    let openEnded = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    let thetaStart = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    let thetaLength = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : Math.PI * 2;\n    super(0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);\n    this.type = 'ConeGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      radius: radius,\n      height: height,\n      radialSegments: radialSegments,\n      heightSegments: heightSegments,\n      openEnded: openEnded,\n      thetaStart: thetaStart,\n      thetaLength: thetaLength\n    };\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @return {ConeGeometry} A new instance.\n   */\n  static fromJSON(data) {\n    return new ConeGeometry(data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n  }\n}\n\n/**\n * A polyhedron is a solid in three dimensions with flat faces. This class\n * will take an array of vertices, project them onto a sphere, and then\n * divide them up to the desired level of detail.\n *\n * @augments BufferGeometry\n */\nclass PolyhedronGeometry extends BufferGeometry {\n  /**\n   * Constructs a new polyhedron geometry.\n   *\n   * @param {Array<number>} [vertices] - A flat array of vertices describing the base shape.\n   * @param {Array<number>} [indices] - A flat array of indices describing the base shape.\n   * @param {number} [radius=1] - The radius of the shape.\n   * @param {number} [detail=0] - How many levels to subdivide the geometry. The more detail, the smoother the shape.\n   */\n  constructor() {\n    let vertices = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let indices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let radius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let detail = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    super();\n    this.type = 'PolyhedronGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      vertices: vertices,\n      indices: indices,\n      radius: radius,\n      detail: detail\n    };\n\n    // default buffer data\n\n    const vertexBuffer = [];\n    const uvBuffer = [];\n\n    // the subdivision creates the vertex buffer data\n\n    subdivide(detail);\n\n    // all vertices should lie on a conceptual sphere with a given radius\n\n    applyRadius(radius);\n\n    // finally, create the uv data\n\n    generateUVs();\n\n    // build non-indexed geometry\n\n    this.setAttribute('position', new Float32BufferAttribute(vertexBuffer, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(vertexBuffer.slice(), 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvBuffer, 2));\n    if (detail === 0) {\n      this.computeVertexNormals(); // flat normals\n    } else {\n      this.normalizeNormals(); // smooth normals\n    }\n\n    // helper functions\n\n    function subdivide(detail) {\n      const a = new Vector3();\n      const b = new Vector3();\n      const c = new Vector3();\n\n      // iterate over all faces and apply a subdivision with the given detail value\n\n      for (let i = 0; i < indices.length; i += 3) {\n        // get the vertices of the face\n\n        getVertexByIndex(indices[i + 0], a);\n        getVertexByIndex(indices[i + 1], b);\n        getVertexByIndex(indices[i + 2], c);\n\n        // perform subdivision\n\n        subdivideFace(a, b, c, detail);\n      }\n    }\n    function subdivideFace(a, b, c, detail) {\n      const cols = detail + 1;\n\n      // we use this multidimensional array as a data structure for creating the subdivision\n\n      const v = [];\n\n      // construct all of the vertices for this subdivision\n\n      for (let i = 0; i <= cols; i++) {\n        v[i] = [];\n        const aj = a.clone().lerp(c, i / cols);\n        const bj = b.clone().lerp(c, i / cols);\n        const rows = cols - i;\n        for (let j = 0; j <= rows; j++) {\n          if (j === 0 && i === cols) {\n            v[i][j] = aj;\n          } else {\n            v[i][j] = aj.clone().lerp(bj, j / rows);\n          }\n        }\n      }\n\n      // construct all of the faces\n\n      for (let i = 0; i < cols; i++) {\n        for (let j = 0; j < 2 * (cols - i) - 1; j++) {\n          const k = Math.floor(j / 2);\n          if (j % 2 === 0) {\n            pushVertex(v[i][k + 1]);\n            pushVertex(v[i + 1][k]);\n            pushVertex(v[i][k]);\n          } else {\n            pushVertex(v[i][k + 1]);\n            pushVertex(v[i + 1][k + 1]);\n            pushVertex(v[i + 1][k]);\n          }\n        }\n      }\n    }\n    function applyRadius(radius) {\n      const vertex = new Vector3();\n\n      // iterate over the entire buffer and apply the radius to each vertex\n\n      for (let i = 0; i < vertexBuffer.length; i += 3) {\n        vertex.x = vertexBuffer[i + 0];\n        vertex.y = vertexBuffer[i + 1];\n        vertex.z = vertexBuffer[i + 2];\n        vertex.normalize().multiplyScalar(radius);\n        vertexBuffer[i + 0] = vertex.x;\n        vertexBuffer[i + 1] = vertex.y;\n        vertexBuffer[i + 2] = vertex.z;\n      }\n    }\n    function generateUVs() {\n      const vertex = new Vector3();\n      for (let i = 0; i < vertexBuffer.length; i += 3) {\n        vertex.x = vertexBuffer[i + 0];\n        vertex.y = vertexBuffer[i + 1];\n        vertex.z = vertexBuffer[i + 2];\n        const u = azimuth(vertex) / 2 / Math.PI + 0.5;\n        const v = inclination(vertex) / Math.PI + 0.5;\n        uvBuffer.push(u, 1 - v);\n      }\n      correctUVs();\n      correctSeam();\n    }\n    function correctSeam() {\n      // handle case when face straddles the seam, see #3269\n\n      for (let i = 0; i < uvBuffer.length; i += 6) {\n        // uv data of a single face\n\n        const x0 = uvBuffer[i + 0];\n        const x1 = uvBuffer[i + 2];\n        const x2 = uvBuffer[i + 4];\n        const max = Math.max(x0, x1, x2);\n        const min = Math.min(x0, x1, x2);\n\n        // 0.9 is somewhat arbitrary\n\n        if (max > 0.9 && min < 0.1) {\n          if (x0 < 0.2) uvBuffer[i + 0] += 1;\n          if (x1 < 0.2) uvBuffer[i + 2] += 1;\n          if (x2 < 0.2) uvBuffer[i + 4] += 1;\n        }\n      }\n    }\n    function pushVertex(vertex) {\n      vertexBuffer.push(vertex.x, vertex.y, vertex.z);\n    }\n    function getVertexByIndex(index, vertex) {\n      const stride = index * 3;\n      vertex.x = vertices[stride + 0];\n      vertex.y = vertices[stride + 1];\n      vertex.z = vertices[stride + 2];\n    }\n    function correctUVs() {\n      const a = new Vector3();\n      const b = new Vector3();\n      const c = new Vector3();\n      const centroid = new Vector3();\n      const uvA = new Vector2();\n      const uvB = new Vector2();\n      const uvC = new Vector2();\n      for (let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6) {\n        a.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);\n        b.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);\n        c.set(vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);\n        uvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);\n        uvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);\n        uvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);\n        centroid.copy(a).add(b).add(c).divideScalar(3);\n        const azi = azimuth(centroid);\n        correctUV(uvA, j + 0, a, azi);\n        correctUV(uvB, j + 2, b, azi);\n        correctUV(uvC, j + 4, c, azi);\n      }\n    }\n    function correctUV(uv, stride, vector, azimuth) {\n      if (azimuth < 0 && uv.x === 1) {\n        uvBuffer[stride] = uv.x - 1;\n      }\n      if (vector.x === 0 && vector.z === 0) {\n        uvBuffer[stride] = azimuth / 2 / Math.PI + 0.5;\n      }\n    }\n\n    // Angle around the Y axis, counter-clockwise when looking from above.\n\n    function azimuth(vector) {\n      return Math.atan2(vector.z, -vector.x);\n    }\n\n    // Angle above the XZ plane.\n\n    function inclination(vector) {\n      return Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));\n    }\n  }\n  copy(source) {\n    super.copy(source);\n    this.parameters = Object.assign({}, source.parameters);\n    return this;\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @return {PolyhedronGeometry} A new instance.\n   */\n  static fromJSON(data) {\n    return new PolyhedronGeometry(data.vertices, data.indices, data.radius, data.details);\n  }\n}\n\n/**\n * A geometry class for representing a dodecahedron.\n *\n * ```js\n * const geometry = new THREE.DodecahedronGeometry();\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const dodecahedron = new THREE.Mesh( geometry, material );\n * scene.add( dodecahedron );\n * ```\n *\n * @augments PolyhedronGeometry\n */\nclass DodecahedronGeometry extends PolyhedronGeometry {\n  /**\n   * Constructs a new dodecahedron geometry.\n   *\n   * @param {number} [radius=1] - Radius of the dodecahedron.\n   * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a dodecahedron.\n   */\n  constructor() {\n    let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const t = (1 + Math.sqrt(5)) / 2;\n    const r = 1 / t;\n    const vertices = [\n    // (±1, ±1, ±1)\n    -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1,\n    // (0, ±1/φ, ±φ)\n    0, -r, -t, 0, -r, t, 0, r, -t, 0, r, t,\n    // (±1/φ, ±φ, 0)\n    -r, -t, 0, -r, t, 0, r, -t, 0, r, t, 0,\n    // (±φ, 0, ±1/φ)\n    -t, 0, -r, t, 0, -r, -t, 0, r, t, 0, r];\n    const indices = [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9];\n    super(vertices, indices, radius, detail);\n    this.type = 'DodecahedronGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      radius: radius,\n      detail: detail\n    };\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @return {DodecahedronGeometry} A new instance.\n   */\n  static fromJSON(data) {\n    return new DodecahedronGeometry(data.radius, data.detail);\n  }\n}\nconst _v0 = /*@__PURE__*/new Vector3();\nconst _v1$1 = /*@__PURE__*/new Vector3();\nconst _normal = /*@__PURE__*/new Vector3();\nconst _triangle = /*@__PURE__*/new Triangle();\n\n/**\n * Can be used as a helper object to view the edges of a geometry.\n *\n * ```js\n * const geometry = new THREE.BoxGeometry();\n * const edges = new THREE.EdgesGeometry( geometry );\n * const line = new THREE.LineSegments( edges );\n * scene.add( line );\n * ```\n *\n * Note: It is not yet possible to serialize/deserialize instances of this class.\n *\n * @augments BufferGeometry\n */\nclass EdgesGeometry extends BufferGeometry {\n  /**\n   * Constructs a new edges geometry.\n   *\n   * @param {?BufferGeometry} [geometry=null] - The geometry.\n   * @param {number} [thresholdAngle=1] - An edge is only rendered if the angle (in degrees)\n   * between the face normals of the adjoining faces exceeds this value.\n   */\n  constructor() {\n    let geometry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let thresholdAngle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    super();\n    this.type = 'EdgesGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      geometry: geometry,\n      thresholdAngle: thresholdAngle\n    };\n    if (geometry !== null) {\n      const precisionPoints = 4;\n      const precision = Math.pow(10, precisionPoints);\n      const thresholdDot = Math.cos(DEG2RAD * thresholdAngle);\n      const indexAttr = geometry.getIndex();\n      const positionAttr = geometry.getAttribute('position');\n      const indexCount = indexAttr ? indexAttr.count : positionAttr.count;\n      const indexArr = [0, 0, 0];\n      const vertKeys = ['a', 'b', 'c'];\n      const hashes = new Array(3);\n      const edgeData = {};\n      const vertices = [];\n      for (let i = 0; i < indexCount; i += 3) {\n        if (indexAttr) {\n          indexArr[0] = indexAttr.getX(i);\n          indexArr[1] = indexAttr.getX(i + 1);\n          indexArr[2] = indexAttr.getX(i + 2);\n        } else {\n          indexArr[0] = i;\n          indexArr[1] = i + 1;\n          indexArr[2] = i + 2;\n        }\n        const {\n          a,\n          b,\n          c\n        } = _triangle;\n        a.fromBufferAttribute(positionAttr, indexArr[0]);\n        b.fromBufferAttribute(positionAttr, indexArr[1]);\n        c.fromBufferAttribute(positionAttr, indexArr[2]);\n        _triangle.getNormal(_normal);\n\n        // create hashes for the edge from the vertices\n        hashes[0] = `${Math.round(a.x * precision)},${Math.round(a.y * precision)},${Math.round(a.z * precision)}`;\n        hashes[1] = `${Math.round(b.x * precision)},${Math.round(b.y * precision)},${Math.round(b.z * precision)}`;\n        hashes[2] = `${Math.round(c.x * precision)},${Math.round(c.y * precision)},${Math.round(c.z * precision)}`;\n\n        // skip degenerate triangles\n        if (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) {\n          continue;\n        }\n\n        // iterate over every edge\n        for (let j = 0; j < 3; j++) {\n          // get the first and next vertex making up the edge\n          const jNext = (j + 1) % 3;\n          const vecHash0 = hashes[j];\n          const vecHash1 = hashes[jNext];\n          const v0 = _triangle[vertKeys[j]];\n          const v1 = _triangle[vertKeys[jNext]];\n          const hash = `${vecHash0}_${vecHash1}`;\n          const reverseHash = `${vecHash1}_${vecHash0}`;\n          if (reverseHash in edgeData && edgeData[reverseHash]) {\n            // if we found a sibling edge add it into the vertex array if\n            // it meets the angle threshold and delete the edge from the map.\n            if (_normal.dot(edgeData[reverseHash].normal) <= thresholdDot) {\n              vertices.push(v0.x, v0.y, v0.z);\n              vertices.push(v1.x, v1.y, v1.z);\n            }\n            edgeData[reverseHash] = null;\n          } else if (!(hash in edgeData)) {\n            // if we've already got an edge here then skip adding a new one\n            edgeData[hash] = {\n              index0: indexArr[j],\n              index1: indexArr[jNext],\n              normal: _normal.clone()\n            };\n          }\n        }\n      }\n\n      // iterate over all remaining, unmatched edges and add them to the vertex array\n      for (const key in edgeData) {\n        if (edgeData[key]) {\n          const {\n            index0,\n            index1\n          } = edgeData[key];\n          _v0.fromBufferAttribute(positionAttr, index0);\n          _v1$1.fromBufferAttribute(positionAttr, index1);\n          vertices.push(_v0.x, _v0.y, _v0.z);\n          vertices.push(_v1$1.x, _v1$1.y, _v1$1.z);\n        }\n      }\n      this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    }\n  }\n  copy(source) {\n    super.copy(source);\n    this.parameters = Object.assign({}, source.parameters);\n    return this;\n  }\n}\n\n/**\n * An abstract base class for creating an analytic curve object that contains methods\n * for interpolation.\n *\n * @abstract\n */\nclass Curve {\n  /**\n   * Constructs a new curve.\n   */\n  constructor() {\n    /**\n     * The type property is used for detecting the object type\n     * in context of serialization/deserialization.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.type = 'Curve';\n\n    /**\n     * This value determines the amount of divisions when calculating the\n     * cumulative segment lengths of a curve via {@link Curve#getLengths}. To ensure\n     * precision when using methods like {@link Curve#getSpacedPoints}, it is\n     * recommended to increase the value of this property if the curve is very large.\n     *\n     * @type {number}\n     * @default 200\n     */\n    this.arcLengthDivisions = 200;\n\n    /**\n     * Must be set to `true` if the curve parameters have changed.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.needsUpdate = false;\n\n    /**\n     * An internal cache that holds precomputed curve length values.\n     *\n     * @private\n     * @type {?Array<number>}\n     * @default null\n     */\n    this.cacheArcLengths = null;\n  }\n\n  /**\n   * This method returns a vector in 2D or 3D space (depending on the curve definition)\n   * for the given interpolation factor.\n   *\n   * @abstract\n   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n   * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.\n   * @return {(Vector2|Vector3)} The position on the curve. It can be a 2D or 3D vector depending on the curve definition.\n   */\n  getPoint(/* t, optionalTarget */\n  ) {\n    console.warn('THREE.Curve: .getPoint() not implemented.');\n  }\n\n  /**\n   * This method returns a vector in 2D or 3D space (depending on the curve definition)\n   * for the given interpolation factor. Unlike {@link Curve#getPoint}, this method honors the length\n   * of the curve which equidistant samples.\n   *\n   * @param {number} u - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n   * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.\n   * @return {(Vector2|Vector3)} The position on the curve. It can be a 2D or 3D vector depending on the curve definition.\n   */\n  getPointAt(u, optionalTarget) {\n    const t = this.getUtoTmapping(u);\n    return this.getPoint(t, optionalTarget);\n  }\n\n  /**\n   * This method samples the curve via {@link Curve#getPoint} and returns an array of points representing\n   * the curve shape.\n   *\n   * @param {number} [divisions=5] - The number of divisions.\n   * @return {Array<(Vector2|Vector3)>} An array holding the sampled curve values. The number of points is `divisions + 1`.\n   */\n  getPoints() {\n    let divisions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n    const points = [];\n    for (let d = 0; d <= divisions; d++) {\n      points.push(this.getPoint(d / divisions));\n    }\n    return points;\n  }\n\n  // Get sequence of points using getPointAt( u )\n\n  /**\n   * This method samples the curve via {@link Curve#getPointAt} and returns an array of points representing\n   * the curve shape. Unlike {@link Curve#getPoints}, this method returns equi-spaced points across the entire\n   * curve.\n   *\n   * @param {number} [divisions=5] - The number of divisions.\n   * @return {Array<(Vector2|Vector3)>} An array holding the sampled curve values. The number of points is `divisions + 1`.\n   */\n  getSpacedPoints() {\n    let divisions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n    const points = [];\n    for (let d = 0; d <= divisions; d++) {\n      points.push(this.getPointAt(d / divisions));\n    }\n    return points;\n  }\n\n  /**\n   * Returns the total arc length of the curve.\n   *\n   * @return {number} The length of the curve.\n   */\n  getLength() {\n    const lengths = this.getLengths();\n    return lengths[lengths.length - 1];\n  }\n\n  /**\n   * Returns an array of cumulative segment lengths of the curve.\n   *\n   * @param {number} [divisions=this.arcLengthDivisions] - The number of divisions.\n   * @return {Array<number>} An array holding the cumulative segment lengths.\n   */\n  getLengths() {\n    let divisions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.arcLengthDivisions;\n    if (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {\n      return this.cacheArcLengths;\n    }\n    this.needsUpdate = false;\n    const cache = [];\n    let current,\n      last = this.getPoint(0);\n    let sum = 0;\n    cache.push(0);\n    for (let p = 1; p <= divisions; p++) {\n      current = this.getPoint(p / divisions);\n      sum += current.distanceTo(last);\n      cache.push(sum);\n      last = current;\n    }\n    this.cacheArcLengths = cache;\n    return cache; // { sums: cache, sum: sum }; Sum is in the last element.\n  }\n\n  /**\n   * Update the cumulative segment distance cache. The method must be called\n   * every time curve parameters are changed. If an updated curve is part of a\n   * composed curve like {@link CurvePath}, this method must be called on the\n   * composed curve, too.\n   */\n  updateArcLengths() {\n    this.needsUpdate = true;\n    this.getLengths();\n  }\n\n  /**\n   * Given an interpolation factor in the range `[0,1]`, this method returns an updated\n   * interpolation factor in the same range that can be ued to sample equidistant points\n   * from a curve.\n   *\n   * @param {number} u - The interpolation factor.\n   * @param {?number} distance - An optional distance on the curve.\n   * @return {number} The updated interpolation factor.\n   */\n  getUtoTmapping(u) {\n    let distance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const arcLengths = this.getLengths();\n    let i = 0;\n    const il = arcLengths.length;\n    let targetArcLength; // The targeted u distance value to get\n\n    if (distance) {\n      targetArcLength = distance;\n    } else {\n      targetArcLength = u * arcLengths[il - 1];\n    }\n\n    // binary search for the index with largest value smaller than target u distance\n\n    let low = 0,\n      high = il - 1,\n      comparison;\n    while (low <= high) {\n      i = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n      comparison = arcLengths[i] - targetArcLength;\n      if (comparison < 0) {\n        low = i + 1;\n      } else if (comparison > 0) {\n        high = i - 1;\n      } else {\n        high = i;\n        break;\n\n        // DONE\n      }\n    }\n    i = high;\n    if (arcLengths[i] === targetArcLength) {\n      return i / (il - 1);\n    }\n\n    // we could get finer grain at lengths, or use simple interpolation between two points\n\n    const lengthBefore = arcLengths[i];\n    const lengthAfter = arcLengths[i + 1];\n    const segmentLength = lengthAfter - lengthBefore;\n\n    // determine where we are between the 'before' and 'after' points\n\n    const segmentFraction = (targetArcLength - lengthBefore) / segmentLength;\n\n    // add that fractional amount to t\n\n    const t = (i + segmentFraction) / (il - 1);\n    return t;\n  }\n\n  /**\n   * Returns a unit vector tangent for the given interpolation factor.\n   * If the derived curve does not implement its tangent derivation,\n   * two points a small delta apart will be used to find its gradient\n   * which seems to give a reasonable approximation.\n   *\n   * @param {number} t - The interpolation factor.\n   * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.\n   * @return {(Vector2|Vector3)} The tangent vector.\n   */\n  getTangent(t, optionalTarget) {\n    const delta = 0.0001;\n    let t1 = t - delta;\n    let t2 = t + delta;\n\n    // Capping in case of danger\n\n    if (t1 < 0) t1 = 0;\n    if (t2 > 1) t2 = 1;\n    const pt1 = this.getPoint(t1);\n    const pt2 = this.getPoint(t2);\n    const tangent = optionalTarget || (pt1.isVector2 ? new Vector2() : new Vector3());\n    tangent.copy(pt2).sub(pt1).normalize();\n    return tangent;\n  }\n\n  /**\n   * Same as {@link Curve#getTangent} but with equidistant samples.\n   *\n   * @param {number} u - The interpolation factor.\n   * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.\n   * @return {(Vector2|Vector3)} The tangent vector.\n   * @see {@link Curve#getPointAt}\n   */\n  getTangentAt(u, optionalTarget) {\n    const t = this.getUtoTmapping(u);\n    return this.getTangent(t, optionalTarget);\n  }\n\n  /**\n   * Generates the Frenet Frames. Requires a curve definition in 3D space. Used\n   * in geometries like {@link TubeGeometry} or {@link ExtrudeGeometry}.\n   *\n   * @param {number} segments - The number of segments.\n   * @param {boolean} [closed=false] - Whether the curve is closed or not.\n   * @return {{tangents: Array<Vector3>, normals: Array<Vector3>, binormals: Array<Vector3>}} The Frenet Frames.\n   */\n  computeFrenetFrames(segments) {\n    let closed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    // see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n    const normal = new Vector3();\n    const tangents = [];\n    const normals = [];\n    const binormals = [];\n    const vec = new Vector3();\n    const mat = new Matrix4();\n\n    // compute the tangent vectors for each segment on the curve\n\n    for (let i = 0; i <= segments; i++) {\n      const u = i / segments;\n      tangents[i] = this.getTangentAt(u, new Vector3());\n    }\n\n    // select an initial normal vector perpendicular to the first tangent vector,\n    // and in the direction of the minimum tangent xyz component\n\n    normals[0] = new Vector3();\n    binormals[0] = new Vector3();\n    let min = Number.MAX_VALUE;\n    const tx = Math.abs(tangents[0].x);\n    const ty = Math.abs(tangents[0].y);\n    const tz = Math.abs(tangents[0].z);\n    if (tx <= min) {\n      min = tx;\n      normal.set(1, 0, 0);\n    }\n    if (ty <= min) {\n      min = ty;\n      normal.set(0, 1, 0);\n    }\n    if (tz <= min) {\n      normal.set(0, 0, 1);\n    }\n    vec.crossVectors(tangents[0], normal).normalize();\n    normals[0].crossVectors(tangents[0], vec);\n    binormals[0].crossVectors(tangents[0], normals[0]);\n\n    // compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n    for (let i = 1; i <= segments; i++) {\n      normals[i] = normals[i - 1].clone();\n      binormals[i] = binormals[i - 1].clone();\n      vec.crossVectors(tangents[i - 1], tangents[i]);\n      if (vec.length() > Number.EPSILON) {\n        vec.normalize();\n        const theta = Math.acos(clamp(tangents[i - 1].dot(tangents[i]), -1, 1)); // clamp for floating pt errors\n\n        normals[i].applyMatrix4(mat.makeRotationAxis(vec, theta));\n      }\n      binormals[i].crossVectors(tangents[i], normals[i]);\n    }\n\n    // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n    if (closed === true) {\n      let theta = Math.acos(clamp(normals[0].dot(normals[segments]), -1, 1));\n      theta /= segments;\n      if (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {\n        theta = -theta;\n      }\n      for (let i = 1; i <= segments; i++) {\n        // twist a little...\n        normals[i].applyMatrix4(mat.makeRotationAxis(tangents[i], theta * i));\n        binormals[i].crossVectors(tangents[i], normals[i]);\n      }\n    }\n    return {\n      tangents: tangents,\n      normals: normals,\n      binormals: binormals\n    };\n  }\n\n  /**\n   * Returns a new curve with copied values from this instance.\n   *\n   * @return {Curve} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  /**\n   * Copies the values of the given curve to this instance.\n   *\n   * @param {Curve} source - The curve to copy.\n   * @return {Curve} A reference to this curve.\n   */\n  copy(source) {\n    this.arcLengthDivisions = source.arcLengthDivisions;\n    return this;\n  }\n\n  /**\n   * Serializes the curve into JSON.\n   *\n   * @return {Object} A JSON object representing the serialized curve.\n   * @see {@link ObjectLoader#parse}\n   */\n  toJSON() {\n    const data = {\n      metadata: {\n        version: 4.6,\n        type: 'Curve',\n        generator: 'Curve.toJSON'\n      }\n    };\n    data.arcLengthDivisions = this.arcLengthDivisions;\n    data.type = this.type;\n    return data;\n  }\n\n  /**\n   * Deserializes the curve from the given JSON.\n   *\n   * @param {Object} json - The JSON holding the serialized curve.\n   * @return {Curve} A reference to this curve.\n   */\n  fromJSON(json) {\n    this.arcLengthDivisions = json.arcLengthDivisions;\n    return this;\n  }\n}\n\n/**\n * A curve representing an ellipse.\n *\n * ```js\n * const curve = new THREE.EllipseCurve(\n * \t0, 0,\n * \t10, 10,\n * \t0, 2 * Math.PI,\n * \tfalse,\n * \t0\n * );\n *\n * const points = curve.getPoints( 50 );\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const material = new THREE.LineBasicMaterial( { color: 0xff0000 } );\n *\n * // Create the final object to add to the scene\n * const ellipse = new THREE.Line( geometry, material );\n * ```\n *\n * @augments Curve\n */\nclass EllipseCurve extends Curve {\n  /**\n   * Constructs a new ellipse curve.\n   *\n   * @param {number} [aX=0] - The X center of the ellipse.\n   * @param {number} [aY=0] - The Y center of the ellipse.\n   * @param {number} [xRadius=1] - The radius of the ellipse in the x direction.\n   * @param {number} [yRadius=1] - The radius of the ellipse in the y direction.\n   * @param {number} [aStartAngle=0] - The start angle of the curve in radians starting from the positive X axis.\n   * @param {number} [aEndAngle=Math.PI*2] - The end angle of the curve in radians starting from the positive X axis.\n   * @param {boolean} [aClockwise=false] - Whether the ellipse is drawn clockwise or not.\n   * @param {number} [aRotation=0] - The rotation angle of the ellipse in radians, counterclockwise from the positive X axis.\n   */\n  constructor() {\n    let aX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let aY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let xRadius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let yRadius = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    let aStartAngle = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    let aEndAngle = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Math.PI * 2;\n    let aClockwise = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    let aRotation = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isEllipseCurve = true;\n    this.type = 'EllipseCurve';\n\n    /**\n     * The X center of the ellipse.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.aX = aX;\n\n    /**\n     * The Y center of the ellipse.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.aY = aY;\n\n    /**\n     * The radius of the ellipse in the x direction.\n     * Setting the this value equal to the {@link EllipseCurve#yRadius} will result in a circle.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.xRadius = xRadius;\n\n    /**\n     * The radius of the ellipse in the y direction.\n     * Setting the this value equal to the {@link EllipseCurve#xRadius} will result in a circle.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.yRadius = yRadius;\n\n    /**\n     * The start angle of the curve in radians starting from the positive X axis.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.aStartAngle = aStartAngle;\n\n    /**\n     * The end angle of the curve in radians starting from the positive X axis.\n     *\n     * @type {number}\n     * @default Math.PI*2\n     */\n    this.aEndAngle = aEndAngle;\n\n    /**\n     * Whether the ellipse is drawn clockwise or not.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.aClockwise = aClockwise;\n\n    /**\n     * The rotation angle of the ellipse in radians, counterclockwise from the positive X axis.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.aRotation = aRotation;\n  }\n\n  /**\n   * Returns a point on the curve.\n   *\n   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n   * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.\n   * @return {Vector2} The position on the curve.\n   */\n  getPoint(t) {\n    let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2();\n    const point = optionalTarget;\n    const twoPi = Math.PI * 2;\n    let deltaAngle = this.aEndAngle - this.aStartAngle;\n    const samePoints = Math.abs(deltaAngle) < Number.EPSILON;\n\n    // ensures that deltaAngle is 0 .. 2 PI\n    while (deltaAngle < 0) deltaAngle += twoPi;\n    while (deltaAngle > twoPi) deltaAngle -= twoPi;\n    if (deltaAngle < Number.EPSILON) {\n      if (samePoints) {\n        deltaAngle = 0;\n      } else {\n        deltaAngle = twoPi;\n      }\n    }\n    if (this.aClockwise === true && !samePoints) {\n      if (deltaAngle === twoPi) {\n        deltaAngle = -twoPi;\n      } else {\n        deltaAngle = deltaAngle - twoPi;\n      }\n    }\n    const angle = this.aStartAngle + t * deltaAngle;\n    let x = this.aX + this.xRadius * Math.cos(angle);\n    let y = this.aY + this.yRadius * Math.sin(angle);\n    if (this.aRotation !== 0) {\n      const cos = Math.cos(this.aRotation);\n      const sin = Math.sin(this.aRotation);\n      const tx = x - this.aX;\n      const ty = y - this.aY;\n\n      // Rotate the point about the center of the ellipse.\n      x = tx * cos - ty * sin + this.aX;\n      y = tx * sin + ty * cos + this.aY;\n    }\n    return point.set(x, y);\n  }\n  copy(source) {\n    super.copy(source);\n    this.aX = source.aX;\n    this.aY = source.aY;\n    this.xRadius = source.xRadius;\n    this.yRadius = source.yRadius;\n    this.aStartAngle = source.aStartAngle;\n    this.aEndAngle = source.aEndAngle;\n    this.aClockwise = source.aClockwise;\n    this.aRotation = source.aRotation;\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    data.aX = this.aX;\n    data.aY = this.aY;\n    data.xRadius = this.xRadius;\n    data.yRadius = this.yRadius;\n    data.aStartAngle = this.aStartAngle;\n    data.aEndAngle = this.aEndAngle;\n    data.aClockwise = this.aClockwise;\n    data.aRotation = this.aRotation;\n    return data;\n  }\n  fromJSON(json) {\n    super.fromJSON(json);\n    this.aX = json.aX;\n    this.aY = json.aY;\n    this.xRadius = json.xRadius;\n    this.yRadius = json.yRadius;\n    this.aStartAngle = json.aStartAngle;\n    this.aEndAngle = json.aEndAngle;\n    this.aClockwise = json.aClockwise;\n    this.aRotation = json.aRotation;\n    return this;\n  }\n}\n\n/**\n * A curve representing an arc.\n *\n * @augments EllipseCurve\n */\nclass ArcCurve extends EllipseCurve {\n  /**\n   * Constructs a new arc curve.\n   *\n   * @param {number} [aX=0] - The X center of the ellipse.\n   * @param {number} [aY=0] - The Y center of the ellipse.\n   * @param {number} [aRadius=1] - The radius of the ellipse in the x direction.\n   * @param {number} [aStartAngle=0] - The start angle of the curve in radians starting from the positive X axis.\n   * @param {number} [aEndAngle=Math.PI*2] - The end angle of the curve in radians starting from the positive X axis.\n   * @param {boolean} [aClockwise=false] - Whether the ellipse is drawn clockwise or not.\n   */\n  constructor(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n    super(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isArcCurve = true;\n    this.type = 'ArcCurve';\n  }\n}\nfunction CubicPoly() {\n  /**\n   * Centripetal CatmullRom Curve - which is useful for avoiding\n  * cusps and self-intersections in non-uniform catmull rom curves.\n  * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n  *\n  * curve.type accepts centripetal(default), chordal and catmullrom\n  * curve.tension is used for catmullrom which defaults to 0.5\n  */\n\n  /*\n  Based on an optimized c++ solution in\n  - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n  - http://ideone.com/NoEbVM\n  \tThis CubicPoly class could be used for reusing some variables and calculations,\n  but for three.js curve use, it could be possible inlined and flatten into a single function call\n  which can be placed in CurveUtils.\n  */\n\n  let c0 = 0,\n    c1 = 0,\n    c2 = 0,\n    c3 = 0;\n\n  /*\n   * Compute coefficients for a cubic polynomial\n   *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n   * such that\n   *   p(0) = x0, p(1) = x1\n   *  and\n   *   p'(0) = t0, p'(1) = t1.\n   */\n  function init(x0, x1, t0, t1) {\n    c0 = x0;\n    c1 = t0;\n    c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;\n    c3 = 2 * x0 - 2 * x1 + t0 + t1;\n  }\n  return {\n    initCatmullRom: function (x0, x1, x2, x3, tension) {\n      init(x1, x2, tension * (x2 - x0), tension * (x3 - x1));\n    },\n    initNonuniformCatmullRom: function (x0, x1, x2, x3, dt0, dt1, dt2) {\n      // compute tangents when parameterized in [t1,t2]\n      let t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;\n      let t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2;\n\n      // rescale tangents for parametrization in [0,1]\n      t1 *= dt1;\n      t2 *= dt1;\n      init(x1, x2, t1, t2);\n    },\n    calc: function (t) {\n      const t2 = t * t;\n      const t3 = t2 * t;\n      return c0 + c1 * t + c2 * t2 + c3 * t3;\n    }\n  };\n}\n\n//\n\nconst tmp = /*@__PURE__*/new Vector3();\nconst px = /*@__PURE__*/new CubicPoly();\nconst py = /*@__PURE__*/new CubicPoly();\nconst pz = /*@__PURE__*/new CubicPoly();\n\n/**\n * A curve representing a Catmull-Rom spline.\n *\n * ```js\n * //Create a closed wavey loop\n * const curve = new THREE.CatmullRomCurve3( [\n * \tnew THREE.Vector3( -10, 0, 10 ),\n * \tnew THREE.Vector3( -5, 5, 5 ),\n * \tnew THREE.Vector3( 0, 0, 0 ),\n * \tnew THREE.Vector3( 5, -5, 5 ),\n * \tnew THREE.Vector3( 10, 0, 10 )\n * ] );\n *\n * const points = curve.getPoints( 50 );\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const material = new THREE.LineBasicMaterial( { color: 0xff0000 } );\n *\n * // Create the final object to add to the scene\n * const curveObject = new THREE.Line( geometry, material );\n * ```\n *\n * @augments Curve\n */\nclass CatmullRomCurve3 extends Curve {\n  /**\n   * Constructs a new Catmull-Rom curve.\n   *\n   * @param {Array<Vector3>} [points] - An array of 3D points defining the curve.\n   * @param {boolean} [closed=false] - Whether the curve is closed or not.\n   * @param {('centripetal'|'chordal'|'catmullrom')} [curveType='centripetal'] - The curve type.\n   * @param {number} [tension=0.5] - Tension of the curve.\n   */\n  constructor() {\n    let points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let closed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let curveType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'centripetal';\n    let tension = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.5;\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isCatmullRomCurve3 = true;\n    this.type = 'CatmullRomCurve3';\n\n    /**\n     * An array of 3D points defining the curve.\n     *\n     * @type {Array<Vector3>}\n     */\n    this.points = points;\n\n    /**\n     * Whether the curve is closed or not.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.closed = closed;\n\n    /**\n     * The curve type.\n     *\n     * @type {('centripetal'|'chordal'|'catmullrom')}\n     * @default 'centripetal'\n     */\n    this.curveType = curveType;\n\n    /**\n     * Tension of the curve.\n     *\n     * @type {number}\n     * @default 0.5\n     */\n    this.tension = tension;\n  }\n\n  /**\n   * Returns a point on the curve.\n   *\n   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n   * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n   * @return {Vector3} The position on the curve.\n   */\n  getPoint(t) {\n    let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n    const point = optionalTarget;\n    const points = this.points;\n    const l = points.length;\n    const p = (l - (this.closed ? 0 : 1)) * t;\n    let intPoint = Math.floor(p);\n    let weight = p - intPoint;\n    if (this.closed) {\n      intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;\n    } else if (weight === 0 && intPoint === l - 1) {\n      intPoint = l - 2;\n      weight = 1;\n    }\n    let p0, p3; // 4 points (p1 & p2 defined below)\n\n    if (this.closed || intPoint > 0) {\n      p0 = points[(intPoint - 1) % l];\n    } else {\n      // extrapolate first point\n      tmp.subVectors(points[0], points[1]).add(points[0]);\n      p0 = tmp;\n    }\n    const p1 = points[intPoint % l];\n    const p2 = points[(intPoint + 1) % l];\n    if (this.closed || intPoint + 2 < l) {\n      p3 = points[(intPoint + 2) % l];\n    } else {\n      // extrapolate last point\n      tmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);\n      p3 = tmp;\n    }\n    if (this.curveType === 'centripetal' || this.curveType === 'chordal') {\n      // init Centripetal / Chordal Catmull-Rom\n      const pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n      let dt0 = Math.pow(p0.distanceToSquared(p1), pow);\n      let dt1 = Math.pow(p1.distanceToSquared(p2), pow);\n      let dt2 = Math.pow(p2.distanceToSquared(p3), pow);\n\n      // safety check for repeated points\n      if (dt1 < 1e-4) dt1 = 1.0;\n      if (dt0 < 1e-4) dt0 = dt1;\n      if (dt2 < 1e-4) dt2 = dt1;\n      px.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);\n      py.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);\n      pz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);\n    } else if (this.curveType === 'catmullrom') {\n      px.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);\n      py.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);\n      pz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);\n    }\n    point.set(px.calc(weight), py.calc(weight), pz.calc(weight));\n    return point;\n  }\n  copy(source) {\n    super.copy(source);\n    this.points = [];\n    for (let i = 0, l = source.points.length; i < l; i++) {\n      const point = source.points[i];\n      this.points.push(point.clone());\n    }\n    this.closed = source.closed;\n    this.curveType = source.curveType;\n    this.tension = source.tension;\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    data.points = [];\n    for (let i = 0, l = this.points.length; i < l; i++) {\n      const point = this.points[i];\n      data.points.push(point.toArray());\n    }\n    data.closed = this.closed;\n    data.curveType = this.curveType;\n    data.tension = this.tension;\n    return data;\n  }\n  fromJSON(json) {\n    super.fromJSON(json);\n    this.points = [];\n    for (let i = 0, l = json.points.length; i < l; i++) {\n      const point = json.points[i];\n      this.points.push(new Vector3().fromArray(point));\n    }\n    this.closed = json.closed;\n    this.curveType = json.curveType;\n    this.tension = json.tension;\n    return this;\n  }\n}\n\n// Bezier Curves formulas obtained from: https://en.wikipedia.org/wiki/B%C3%A9zier_curve\n\n/**\n * Computes a point on a Catmull-Rom spline.\n *\n * @param {number} t - The interpolation factor.\n * @param {number} p0 - The first control point.\n * @param {number} p1 - The second control point.\n * @param {number} p2 - The third control point.\n * @param {number} p3 - The fourth control point.\n * @return {number} The calculated point on a Catmull-Rom spline.\n */\nfunction CatmullRom(t, p0, p1, p2, p3) {\n  const v0 = (p2 - p0) * 0.5;\n  const v1 = (p3 - p1) * 0.5;\n  const t2 = t * t;\n  const t3 = t * t2;\n  return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n}\n\n//\n\nfunction QuadraticBezierP0(t, p) {\n  const k = 1 - t;\n  return k * k * p;\n}\nfunction QuadraticBezierP1(t, p) {\n  return 2 * (1 - t) * t * p;\n}\nfunction QuadraticBezierP2(t, p) {\n  return t * t * p;\n}\n\n/**\n * Computes a point on a Quadratic Bezier curve.\n *\n * @param {number} t - The interpolation factor.\n * @param {number} p0 - The first control point.\n * @param {number} p1 - The second control point.\n * @param {number} p2 - The third control point.\n * @return {number} The calculated point on a Quadratic Bezier curve.\n */\nfunction QuadraticBezier(t, p0, p1, p2) {\n  return QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);\n}\n\n//\n\nfunction CubicBezierP0(t, p) {\n  const k = 1 - t;\n  return k * k * k * p;\n}\nfunction CubicBezierP1(t, p) {\n  const k = 1 - t;\n  return 3 * k * k * t * p;\n}\nfunction CubicBezierP2(t, p) {\n  return 3 * (1 - t) * t * t * p;\n}\nfunction CubicBezierP3(t, p) {\n  return t * t * t * p;\n}\n\n/**\n * Computes a point on a Cubic Bezier curve.\n *\n * @param {number} t - The interpolation factor.\n * @param {number} p0 - The first control point.\n * @param {number} p1 - The second control point.\n * @param {number} p2 - The third control point.\n * @param {number} p3 - The fourth control point.\n * @return {number} The calculated point on a Cubic Bezier curve.\n */\nfunction CubicBezier(t, p0, p1, p2, p3) {\n  return CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);\n}\n\n/**\n * A curve representing a 2D Cubic Bezier curve.\n *\n * ```js\n * const curve = new THREE.CubicBezierCurve(\n * \tnew THREE.Vector2( - 0, 0 ),\n * \tnew THREE.Vector2( - 5, 15 ),\n * \tnew THREE.Vector2( 20, 15 ),\n * \tnew THREE.Vector2( 10, 0 )\n * );\n *\n * const points = curve.getPoints( 50 );\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const material = new THREE.LineBasicMaterial( { color: 0xff0000 } );\n *\n * // Create the final object to add to the scene\n * const curveObject = new THREE.Line( geometry, material );\n * ```\n *\n * @augments Curve\n */\nclass CubicBezierCurve extends Curve {\n  /**\n   * Constructs a new Cubic Bezier curve.\n   *\n   * @param {Vector2} [v0] - The start point.\n   * @param {Vector2} [v1] - The first control point.\n   * @param {Vector2} [v2] - The second control point.\n   * @param {Vector2} [v3] - The end point.\n   */\n  constructor() {\n    let v0 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector2();\n    let v1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2();\n    let v2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Vector2();\n    let v3 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Vector2();\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isCubicBezierCurve = true;\n    this.type = 'CubicBezierCurve';\n\n    /**\n     * The start point.\n     *\n     * @type {Vector2}\n     */\n    this.v0 = v0;\n\n    /**\n     * The first control point.\n     *\n     * @type {Vector2}\n     */\n    this.v1 = v1;\n\n    /**\n     * The second control point.\n     *\n     * @type {Vector2}\n     */\n    this.v2 = v2;\n\n    /**\n     * The end point.\n     *\n     * @type {Vector2}\n     */\n    this.v3 = v3;\n  }\n\n  /**\n   * Returns a point on the curve.\n   *\n   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n   * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.\n   * @return {Vector2} The position on the curve.\n   */\n  getPoint(t) {\n    let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2();\n    const point = optionalTarget;\n    const v0 = this.v0,\n      v1 = this.v1,\n      v2 = this.v2,\n      v3 = this.v3;\n    point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y));\n    return point;\n  }\n  copy(source) {\n    super.copy(source);\n    this.v0.copy(source.v0);\n    this.v1.copy(source.v1);\n    this.v2.copy(source.v2);\n    this.v3.copy(source.v3);\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    data.v0 = this.v0.toArray();\n    data.v1 = this.v1.toArray();\n    data.v2 = this.v2.toArray();\n    data.v3 = this.v3.toArray();\n    return data;\n  }\n  fromJSON(json) {\n    super.fromJSON(json);\n    this.v0.fromArray(json.v0);\n    this.v1.fromArray(json.v1);\n    this.v2.fromArray(json.v2);\n    this.v3.fromArray(json.v3);\n    return this;\n  }\n}\n\n/**\n * A curve representing a 3D Cubic Bezier curve.\n *\n * @augments Curve\n */\nclass CubicBezierCurve3 extends Curve {\n  /**\n   * Constructs a new Cubic Bezier curve.\n   *\n   * @param {Vector3} [v0] - The start point.\n   * @param {Vector3} [v1] - The first control point.\n   * @param {Vector3} [v2] - The second control point.\n   * @param {Vector3} [v3] - The end point.\n   */\n  constructor() {\n    let v0 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n    let v1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n    let v2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Vector3();\n    let v3 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Vector3();\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isCubicBezierCurve3 = true;\n    this.type = 'CubicBezierCurve3';\n\n    /**\n     * The start point.\n     *\n     * @type {Vector3}\n     */\n    this.v0 = v0;\n\n    /**\n     * The first control point.\n     *\n     * @type {Vector3}\n     */\n    this.v1 = v1;\n\n    /**\n     * The second control point.\n     *\n     * @type {Vector3}\n     */\n    this.v2 = v2;\n\n    /**\n     * The end point.\n     *\n     * @type {Vector3}\n     */\n    this.v3 = v3;\n  }\n\n  /**\n   * Returns a point on the curve.\n   *\n   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n   * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n   * @return {Vector3} The position on the curve.\n   */\n  getPoint(t) {\n    let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n    const point = optionalTarget;\n    const v0 = this.v0,\n      v1 = this.v1,\n      v2 = this.v2,\n      v3 = this.v3;\n    point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y), CubicBezier(t, v0.z, v1.z, v2.z, v3.z));\n    return point;\n  }\n  copy(source) {\n    super.copy(source);\n    this.v0.copy(source.v0);\n    this.v1.copy(source.v1);\n    this.v2.copy(source.v2);\n    this.v3.copy(source.v3);\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    data.v0 = this.v0.toArray();\n    data.v1 = this.v1.toArray();\n    data.v2 = this.v2.toArray();\n    data.v3 = this.v3.toArray();\n    return data;\n  }\n  fromJSON(json) {\n    super.fromJSON(json);\n    this.v0.fromArray(json.v0);\n    this.v1.fromArray(json.v1);\n    this.v2.fromArray(json.v2);\n    this.v3.fromArray(json.v3);\n    return this;\n  }\n}\n\n/**\n * A curve representing a 2D line segment.\n *\n * @augments Curve\n */\nclass LineCurve extends Curve {\n  /**\n   * Constructs a new line curve.\n   *\n   * @param {Vector2} [v1] - The start point.\n   * @param {Vector2} [v2] - The end point.\n   */\n  constructor() {\n    let v1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector2();\n    let v2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2();\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isLineCurve = true;\n    this.type = 'LineCurve';\n\n    /**\n     * The start point.\n     *\n     * @type {Vector2}\n     */\n    this.v1 = v1;\n\n    /**\n     * The end point.\n     *\n     * @type {Vector2}\n     */\n    this.v2 = v2;\n  }\n\n  /**\n   * Returns a point on the line.\n   *\n   * @param {number} t - A interpolation factor representing a position on the line. Must be in the range `[0,1]`.\n   * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.\n   * @return {Vector2} The position on the line.\n   */\n  getPoint(t) {\n    let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2();\n    const point = optionalTarget;\n    if (t === 1) {\n      point.copy(this.v2);\n    } else {\n      point.copy(this.v2).sub(this.v1);\n      point.multiplyScalar(t).add(this.v1);\n    }\n    return point;\n  }\n\n  // Line curve is linear, so we can overwrite default getPointAt\n  getPointAt(u, optionalTarget) {\n    return this.getPoint(u, optionalTarget);\n  }\n  getTangent(t) {\n    let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2();\n    return optionalTarget.subVectors(this.v2, this.v1).normalize();\n  }\n  getTangentAt(u, optionalTarget) {\n    return this.getTangent(u, optionalTarget);\n  }\n  copy(source) {\n    super.copy(source);\n    this.v1.copy(source.v1);\n    this.v2.copy(source.v2);\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    data.v1 = this.v1.toArray();\n    data.v2 = this.v2.toArray();\n    return data;\n  }\n  fromJSON(json) {\n    super.fromJSON(json);\n    this.v1.fromArray(json.v1);\n    this.v2.fromArray(json.v2);\n    return this;\n  }\n}\n\n/**\n * A curve representing a 3D line segment.\n *\n * @augments Curve\n */\nclass LineCurve3 extends Curve {\n  /**\n   * Constructs a new line curve.\n   *\n   * @param {Vector3} [v1] - The start point.\n   * @param {Vector3} [v2] - The end point.\n   */\n  constructor() {\n    let v1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n    let v2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isLineCurve3 = true;\n    this.type = 'LineCurve3';\n\n    /**\n     * The start point.\n     *\n     * @type {Vector3}\n     */\n    this.v1 = v1;\n\n    /**\n     * The end point.\n     *\n     * @type {Vector2}\n     */\n    this.v2 = v2;\n  }\n\n  /**\n   * Returns a point on the line.\n   *\n   * @param {number} t - A interpolation factor representing a position on the line. Must be in the range `[0,1]`.\n   * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n   * @return {Vector3} The position on the line.\n   */\n  getPoint(t) {\n    let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n    const point = optionalTarget;\n    if (t === 1) {\n      point.copy(this.v2);\n    } else {\n      point.copy(this.v2).sub(this.v1);\n      point.multiplyScalar(t).add(this.v1);\n    }\n    return point;\n  }\n\n  // Line curve is linear, so we can overwrite default getPointAt\n  getPointAt(u, optionalTarget) {\n    return this.getPoint(u, optionalTarget);\n  }\n  getTangent(t) {\n    let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n    return optionalTarget.subVectors(this.v2, this.v1).normalize();\n  }\n  getTangentAt(u, optionalTarget) {\n    return this.getTangent(u, optionalTarget);\n  }\n  copy(source) {\n    super.copy(source);\n    this.v1.copy(source.v1);\n    this.v2.copy(source.v2);\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    data.v1 = this.v1.toArray();\n    data.v2 = this.v2.toArray();\n    return data;\n  }\n  fromJSON(json) {\n    super.fromJSON(json);\n    this.v1.fromArray(json.v1);\n    this.v2.fromArray(json.v2);\n    return this;\n  }\n}\n\n/**\n * A curve representing a 2D Quadratic Bezier curve.\n *\n * ```js\n * const curve = new THREE.QuadraticBezierCurve(\n * \tnew THREE.Vector2( - 10, 0 ),\n * \tnew THREE.Vector2( 20, 15 ),\n * \tnew THREE.Vector2( 10, 0 )\n * )\n *\n * const points = curve.getPoints( 50 );\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const material = new THREE.LineBasicMaterial( { color: 0xff0000 } );\n *\n * // Create the final object to add to the scene\n * const curveObject = new THREE.Line( geometry, material );\n * ```\n *\n * @augments Curve\n */\nclass QuadraticBezierCurve extends Curve {\n  /**\n   * Constructs a new Quadratic Bezier curve.\n   *\n   * @param {Vector2} [v0] - The start point.\n   * @param {Vector2} [v1] - The control point.\n   * @param {Vector2} [v2] - The end point.\n   */\n  constructor() {\n    let v0 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector2();\n    let v1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2();\n    let v2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Vector2();\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isQuadraticBezierCurve = true;\n    this.type = 'QuadraticBezierCurve';\n\n    /**\n     * The start point.\n     *\n     * @type {Vector2}\n     */\n    this.v0 = v0;\n\n    /**\n     * The control point.\n     *\n     * @type {Vector2}\n     */\n    this.v1 = v1;\n\n    /**\n     * The end point.\n     *\n     * @type {Vector2}\n     */\n    this.v2 = v2;\n  }\n\n  /**\n   * Returns a point on the curve.\n   *\n   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n   * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.\n   * @return {Vector2} The position on the curve.\n   */\n  getPoint(t) {\n    let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2();\n    const point = optionalTarget;\n    const v0 = this.v0,\n      v1 = this.v1,\n      v2 = this.v2;\n    point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y));\n    return point;\n  }\n  copy(source) {\n    super.copy(source);\n    this.v0.copy(source.v0);\n    this.v1.copy(source.v1);\n    this.v2.copy(source.v2);\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    data.v0 = this.v0.toArray();\n    data.v1 = this.v1.toArray();\n    data.v2 = this.v2.toArray();\n    return data;\n  }\n  fromJSON(json) {\n    super.fromJSON(json);\n    this.v0.fromArray(json.v0);\n    this.v1.fromArray(json.v1);\n    this.v2.fromArray(json.v2);\n    return this;\n  }\n}\n\n/**\n * A curve representing a 3D Quadratic Bezier curve.\n *\n * @augments Curve\n */\nclass QuadraticBezierCurve3 extends Curve {\n  /**\n   * Constructs a new Quadratic Bezier curve.\n   *\n   * @param {Vector3} [v0] - The start point.\n   * @param {Vector3} [v1] - The control point.\n   * @param {Vector3} [v2] - The end point.\n   */\n  constructor() {\n    let v0 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n    let v1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n    let v2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Vector3();\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isQuadraticBezierCurve3 = true;\n    this.type = 'QuadraticBezierCurve3';\n\n    /**\n     * The start point.\n     *\n     * @type {Vector3}\n     */\n    this.v0 = v0;\n\n    /**\n     * The control point.\n     *\n     * @type {Vector3}\n     */\n    this.v1 = v1;\n\n    /**\n     * The end point.\n     *\n     * @type {Vector3}\n     */\n    this.v2 = v2;\n  }\n\n  /**\n   * Returns a point on the curve.\n   *\n   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n   * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n   * @return {Vector3} The position on the curve.\n   */\n  getPoint(t) {\n    let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n    const point = optionalTarget;\n    const v0 = this.v0,\n      v1 = this.v1,\n      v2 = this.v2;\n    point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y), QuadraticBezier(t, v0.z, v1.z, v2.z));\n    return point;\n  }\n  copy(source) {\n    super.copy(source);\n    this.v0.copy(source.v0);\n    this.v1.copy(source.v1);\n    this.v2.copy(source.v2);\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    data.v0 = this.v0.toArray();\n    data.v1 = this.v1.toArray();\n    data.v2 = this.v2.toArray();\n    return data;\n  }\n  fromJSON(json) {\n    super.fromJSON(json);\n    this.v0.fromArray(json.v0);\n    this.v1.fromArray(json.v1);\n    this.v2.fromArray(json.v2);\n    return this;\n  }\n}\n\n/**\n * A curve representing a 2D spline curve.\n *\n * ```js\n * // Create a sine-like wave\n * const curve = new THREE.SplineCurve( [\n * \tnew THREE.Vector2( -10, 0 ),\n * \tnew THREE.Vector2( -5, 5 ),\n * \tnew THREE.Vector2( 0, 0 ),\n * \tnew THREE.Vector2( 5, -5 ),\n * \tnew THREE.Vector2( 10, 0 )\n * ] );\n *\n * const points = curve.getPoints( 50 );\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const material = new THREE.LineBasicMaterial( { color: 0xff0000 } );\n *\n * // Create the final object to add to the scene\n * const splineObject = new THREE.Line( geometry, material );\n * ```\n *\n * @augments Curve\n */\nclass SplineCurve extends Curve {\n  /**\n   * Constructs a new 2D spline curve.\n   *\n   * @param {Array<Vector2>} [points] -  An array of 2D points defining the curve.\n   */\n  constructor() {\n    let points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isSplineCurve = true;\n    this.type = 'SplineCurve';\n\n    /**\n     * An array of 2D points defining the curve.\n     *\n     * @type {Array<Vector2>}\n     */\n    this.points = points;\n  }\n\n  /**\n   * Returns a point on the curve.\n   *\n   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n   * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.\n   * @return {Vector2} The position on the curve.\n   */\n  getPoint(t) {\n    let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2();\n    const point = optionalTarget;\n    const points = this.points;\n    const p = (points.length - 1) * t;\n    const intPoint = Math.floor(p);\n    const weight = p - intPoint;\n    const p0 = points[intPoint === 0 ? intPoint : intPoint - 1];\n    const p1 = points[intPoint];\n    const p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];\n    const p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];\n    point.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));\n    return point;\n  }\n  copy(source) {\n    super.copy(source);\n    this.points = [];\n    for (let i = 0, l = source.points.length; i < l; i++) {\n      const point = source.points[i];\n      this.points.push(point.clone());\n    }\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    data.points = [];\n    for (let i = 0, l = this.points.length; i < l; i++) {\n      const point = this.points[i];\n      data.points.push(point.toArray());\n    }\n    return data;\n  }\n  fromJSON(json) {\n    super.fromJSON(json);\n    this.points = [];\n    for (let i = 0, l = json.points.length; i < l; i++) {\n      const point = json.points[i];\n      this.points.push(new Vector2().fromArray(point));\n    }\n    return this;\n  }\n}\nvar Curves = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ArcCurve: ArcCurve,\n  CatmullRomCurve3: CatmullRomCurve3,\n  CubicBezierCurve: CubicBezierCurve,\n  CubicBezierCurve3: CubicBezierCurve3,\n  EllipseCurve: EllipseCurve,\n  LineCurve: LineCurve,\n  LineCurve3: LineCurve3,\n  QuadraticBezierCurve: QuadraticBezierCurve,\n  QuadraticBezierCurve3: QuadraticBezierCurve3,\n  SplineCurve: SplineCurve\n});\n\n/**\n * A base class extending {@link Curve}. `CurvePath` is simply an\n * array of connected curves, but retains the API of a curve.\n *\n * @augments Curve\n */\nclass CurvePath extends Curve {\n  /**\n   * Constructs a new curve path.\n   */\n  constructor() {\n    super();\n    this.type = 'CurvePath';\n\n    /**\n     * An array of curves defining the\n     * path.\n     *\n     * @type {Array<Curve>}\n     */\n    this.curves = [];\n\n    /**\n     * Whether the path should automatically be closed\n     * by a line curve.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.autoClose = false;\n  }\n\n  /**\n   * Adds a curve to this curve path.\n   *\n   * @param {Curve} curve - The curve to add.\n   */\n  add(curve) {\n    this.curves.push(curve);\n  }\n\n  /**\n   * Adds a line curve to close the path.\n   *\n   * @return {CurvePath} A reference to this curve path.\n   */\n  closePath() {\n    // Add a line curve if start and end of lines are not connected\n    const startPoint = this.curves[0].getPoint(0);\n    const endPoint = this.curves[this.curves.length - 1].getPoint(1);\n    if (!startPoint.equals(endPoint)) {\n      const lineType = startPoint.isVector2 === true ? 'LineCurve' : 'LineCurve3';\n      this.curves.push(new Curves[lineType](endPoint, startPoint));\n    }\n    return this;\n  }\n\n  /**\n   * This method returns a vector in 2D or 3D space (depending on the curve definitions)\n   * for the given interpolation factor.\n   *\n   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n   * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.\n   * @return {?(Vector2|Vector3)} The position on the curve. It can be a 2D or 3D vector depending on the curve definition.\n   */\n  getPoint(t, optionalTarget) {\n    // To get accurate point with reference to\n    // entire path distance at time t,\n    // following has to be done:\n\n    // 1. Length of each sub path have to be known\n    // 2. Locate and identify type of curve\n    // 3. Get t for the curve\n    // 4. Return curve.getPointAt(t')\n\n    const d = t * this.getLength();\n    const curveLengths = this.getCurveLengths();\n    let i = 0;\n\n    // To think about boundaries points.\n\n    while (i < curveLengths.length) {\n      if (curveLengths[i] >= d) {\n        const diff = curveLengths[i] - d;\n        const curve = this.curves[i];\n        const segmentLength = curve.getLength();\n        const u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n        return curve.getPointAt(u, optionalTarget);\n      }\n      i++;\n    }\n    return null;\n\n    // loop where sum != 0, sum > d , sum+1 <d\n  }\n  getLength() {\n    // We cannot use the default THREE.Curve getPoint() with getLength() because in\n    // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n    // getPoint() depends on getLength\n\n    const lens = this.getCurveLengths();\n    return lens[lens.length - 1];\n  }\n  updateArcLengths() {\n    // cacheLengths must be recalculated.\n\n    this.needsUpdate = true;\n    this.cacheLengths = null;\n    this.getCurveLengths();\n  }\n\n  /**\n   * Returns list of cumulative curve lengths of the defined curves.\n   *\n   * @return {Array<number>} The curve lengths.\n   */\n  getCurveLengths() {\n    // Compute lengths and cache them\n    // We cannot overwrite getLengths() because UtoT mapping uses it.\n    // We use cache values if curves and cache array are same length\n\n    if (this.cacheLengths && this.cacheLengths.length === this.curves.length) {\n      return this.cacheLengths;\n    }\n\n    // Get length of sub-curve\n    // Push sums into cached array\n\n    const lengths = [];\n    let sums = 0;\n    for (let i = 0, l = this.curves.length; i < l; i++) {\n      sums += this.curves[i].getLength();\n      lengths.push(sums);\n    }\n    this.cacheLengths = lengths;\n    return lengths;\n  }\n  getSpacedPoints() {\n    let divisions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 40;\n    const points = [];\n    for (let i = 0; i <= divisions; i++) {\n      points.push(this.getPoint(i / divisions));\n    }\n    if (this.autoClose) {\n      points.push(points[0]);\n    }\n    return points;\n  }\n  getPoints() {\n    let divisions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 12;\n    const points = [];\n    let last;\n    for (let i = 0, curves = this.curves; i < curves.length; i++) {\n      const curve = curves[i];\n      const resolution = curve.isEllipseCurve ? divisions * 2 : curve.isLineCurve || curve.isLineCurve3 ? 1 : curve.isSplineCurve ? divisions * curve.points.length : divisions;\n      const pts = curve.getPoints(resolution);\n      for (let j = 0; j < pts.length; j++) {\n        const point = pts[j];\n        if (last && last.equals(point)) continue; // ensures no consecutive points are duplicates\n\n        points.push(point);\n        last = point;\n      }\n    }\n    if (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {\n      points.push(points[0]);\n    }\n    return points;\n  }\n  copy(source) {\n    super.copy(source);\n    this.curves = [];\n    for (let i = 0, l = source.curves.length; i < l; i++) {\n      const curve = source.curves[i];\n      this.curves.push(curve.clone());\n    }\n    this.autoClose = source.autoClose;\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    data.autoClose = this.autoClose;\n    data.curves = [];\n    for (let i = 0, l = this.curves.length; i < l; i++) {\n      const curve = this.curves[i];\n      data.curves.push(curve.toJSON());\n    }\n    return data;\n  }\n  fromJSON(json) {\n    super.fromJSON(json);\n    this.autoClose = json.autoClose;\n    this.curves = [];\n    for (let i = 0, l = json.curves.length; i < l; i++) {\n      const curve = json.curves[i];\n      this.curves.push(new Curves[curve.type]().fromJSON(curve));\n    }\n    return this;\n  }\n}\n\n/**\n * A 2D path representation. The class provides methods for creating paths\n * and contours of 2D shapes similar to the 2D Canvas API.\n *\n * ```js\n * const path = new THREE.Path();\n *\n * path.lineTo( 0, 0.8 );\n * path.quadraticCurveTo( 0, 1, 0.2, 1 );\n * path.lineTo( 1, 1 );\n *\n * const points = path.getPoints();\n *\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n * const material = new THREE.LineBasicMaterial( { color: 0xffffff } );\n *\n * const line = new THREE.Line( geometry, material );\n * scene.add( line );\n * ```\n *\n * @augments CurvePath\n */\nclass Path extends CurvePath {\n  /**\n   * Constructs a new path.\n   *\n   * @param {Array<Vector2>} [points] - An array of 2D points defining the path.\n   */\n  constructor(points) {\n    super();\n    this.type = 'Path';\n\n    /**\n     * The current offset of the path. Any new curve added will start here.\n     *\n     * @type {Vector2}\n     */\n    this.currentPoint = new Vector2();\n    if (points) {\n      this.setFromPoints(points);\n    }\n  }\n\n  /**\n   * Creates a path from the given list of points. The points are added\n   * to the path as instances of {@link LineCurve}.\n   *\n   * @param {Array<Vector2>} points - An array of 2D points.\n   * @return {Path} A reference to this path.\n   */\n  setFromPoints(points) {\n    this.moveTo(points[0].x, points[0].y);\n    for (let i = 1, l = points.length; i < l; i++) {\n      this.lineTo(points[i].x, points[i].y);\n    }\n    return this;\n  }\n\n  /**\n   * Moves {@link Path#currentPoint} to the given point.\n   *\n   * @param {number} x - The x coordinate.\n   * @param {number} y - The y coordinate.\n   * @return {Path} A reference to this path.\n   */\n  moveTo(x, y) {\n    this.currentPoint.set(x, y); // TODO consider referencing vectors instead of copying?\n\n    return this;\n  }\n\n  /**\n   * Adds an instance of {@link LineCurve} to the path by connecting\n   * the current point with the given one.\n   *\n   * @param {number} x - The x coordinate of the end point.\n   * @param {number} y - The y coordinate of the end point.\n   * @return {Path} A reference to this path.\n   */\n  lineTo(x, y) {\n    const curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));\n    this.curves.push(curve);\n    this.currentPoint.set(x, y);\n    return this;\n  }\n\n  /**\n   * Adds an instance of {@link QuadraticBezierCurve} to the path by connecting\n   * the current point with the given one.\n   *\n   * @param {number} aCPx - The x coordinate of the control point.\n   * @param {number} aCPy - The y coordinate of the control point.\n   * @param {number} aX - The x coordinate of the end point.\n   * @param {number} aY - The y coordinate of the end point.\n   * @return {Path} A reference to this path.\n   */\n  quadraticCurveTo(aCPx, aCPy, aX, aY) {\n    const curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX, aY));\n    this.curves.push(curve);\n    this.currentPoint.set(aX, aY);\n    return this;\n  }\n\n  /**\n   * Adds an instance of {@link CubicBezierCurve} to the path by connecting\n   * the current point with the given one.\n   *\n   * @param {number} aCP1x - The x coordinate of the first control point.\n   * @param {number} aCP1y - The y coordinate of the first control point.\n   * @param {number} aCP2x - The x coordinate of the second control point.\n   * @param {number} aCP2y - The y coordinate of the second control point.\n   * @param {number} aX - The x coordinate of the end point.\n   * @param {number} aY - The y coordinate of the end point.\n   * @return {Path} A reference to this path.\n   */\n  bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n    const curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX, aY));\n    this.curves.push(curve);\n    this.currentPoint.set(aX, aY);\n    return this;\n  }\n\n  /**\n   * Adds an instance of {@link SplineCurve} to the path by connecting\n   * the current point with the given list of points.\n   *\n   * @param {Array<Vector2>} pts - An array of points in 2D space.\n   * @return {Path} A reference to this path.\n   */\n  splineThru(pts) {\n    const npts = [this.currentPoint.clone()].concat(pts);\n    const curve = new SplineCurve(npts);\n    this.curves.push(curve);\n    this.currentPoint.copy(pts[pts.length - 1]);\n    return this;\n  }\n\n  /**\n   * Adds an arc as an instance of {@link EllipseCurve} to the path, positioned relative\n   * to the current point.\n   *\n   * @param {number} aX - The x coordinate of the center of the arc offsetted from the previous curve.\n   * @param {number} aY - The y coordinate of the center of the arc offsetted from the previous curve.\n   * @param {number} aRadius - The radius of the arc.\n   * @param {number} aStartAngle - The start angle in radians.\n   * @param {number} aEndAngle - The end angle in radians.\n   * @param {boolean} [aClockwise=false] - Whether to sweep the arc clockwise or not.\n   * @return {Path} A reference to this path.\n   */\n  arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n    const x0 = this.currentPoint.x;\n    const y0 = this.currentPoint.y;\n    this.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);\n    return this;\n  }\n\n  /**\n   * Adds an absolutely positioned arc as an instance of {@link EllipseCurve} to the path.\n   *\n   * @param {number} aX - The x coordinate of the center of the arc.\n   * @param {number} aY - The y coordinate of the center of the arc.\n   * @param {number} aRadius - The radius of the arc.\n   * @param {number} aStartAngle - The start angle in radians.\n   * @param {number} aEndAngle - The end angle in radians.\n   * @param {boolean} [aClockwise=false] - Whether to sweep the arc clockwise or not.\n   * @return {Path} A reference to this path.\n   */\n  absarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n    this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n    return this;\n  }\n\n  /**\n   * Adds an ellipse as an instance of {@link EllipseCurve} to the path, positioned relative\n   * to the current point\n   *\n   * @param {number} aX - The x coordinate of the center of the ellipse offsetted from the previous curve.\n   * @param {number} aY - The y coordinate of the center of the ellipse offsetted from the previous curve.\n   * @param {number} xRadius - The radius of the ellipse in the x axis.\n   * @param {number} yRadius - The radius of the ellipse in the y axis.\n   * @param {number} aStartAngle - The start angle in radians.\n   * @param {number} aEndAngle - The end angle in radians.\n   * @param {boolean} [aClockwise=false] - Whether to sweep the ellipse clockwise or not.\n   * @param {number} [aRotation=0] - The rotation angle of the ellipse in radians, counterclockwise from the positive X axis.\n   * @return {Path} A reference to this path.\n   */\n  ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n    const x0 = this.currentPoint.x;\n    const y0 = this.currentPoint.y;\n    this.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n    return this;\n  }\n\n  /**\n   * Adds an absolutely positioned ellipse as an instance of {@link EllipseCurve} to the path.\n   *\n   * @param {number} aX - The x coordinate of the absolute center of the ellipse.\n   * @param {number} aY - The y coordinate of the absolute center of the ellipse.\n   * @param {number} xRadius - The radius of the ellipse in the x axis.\n   * @param {number} yRadius - The radius of the ellipse in the y axis.\n   * @param {number} aStartAngle - The start angle in radians.\n   * @param {number} aEndAngle - The end angle in radians.\n   * @param {boolean} [aClockwise=false] - Whether to sweep the ellipse clockwise or not.\n   * @param {number} [aRotation=0] - The rotation angle of the ellipse in radians, counterclockwise from the positive X axis.\n   * @return {Path} A reference to this path.\n   */\n  absellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n    const curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n    if (this.curves.length > 0) {\n      // if a previous curve is present, attempt to join\n      const firstPoint = curve.getPoint(0);\n      if (!firstPoint.equals(this.currentPoint)) {\n        this.lineTo(firstPoint.x, firstPoint.y);\n      }\n    }\n    this.curves.push(curve);\n    const lastPoint = curve.getPoint(1);\n    this.currentPoint.copy(lastPoint);\n    return this;\n  }\n  copy(source) {\n    super.copy(source);\n    this.currentPoint.copy(source.currentPoint);\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    data.currentPoint = this.currentPoint.toArray();\n    return data;\n  }\n  fromJSON(json) {\n    super.fromJSON(json);\n    this.currentPoint.fromArray(json.currentPoint);\n    return this;\n  }\n}\n\n/**\n * Defines an arbitrary 2d shape plane using paths with optional holes. It\n * can be used with {@link ExtrudeGeometry}, {@link ShapeGeometry}, to get\n * points, or to get triangulated faces.\n *\n * ```js\n * const heartShape = new THREE.Shape();\n *\n * heartShape.moveTo( 25, 25 );\n * heartShape.bezierCurveTo( 25, 25, 20, 0, 0, 0 );\n * heartShape.bezierCurveTo( - 30, 0, - 30, 35, - 30, 35 );\n * heartShape.bezierCurveTo( - 30, 55, - 10, 77, 25, 95 );\n * heartShape.bezierCurveTo( 60, 77, 80, 55, 80, 35 );\n * heartShape.bezierCurveTo( 80, 35, 80, 0, 50, 0 );\n * heartShape.bezierCurveTo( 35, 0, 25, 25, 25, 25 );\n *\n * const extrudeSettings = {\n * \tdepth: 8,\n * \tbevelEnabled: true,\n * \tbevelSegments: 2,\n * \tsteps: 2,\n * \tbevelSize: 1,\n * \tbevelThickness: 1\n * };\n *\n * const geometry = new THREE.ExtrudeGeometry( heartShape, extrudeSettings );\n * const mesh = new THREE.Mesh( geometry, new THREE.MeshBasicMaterial() );\n * ```\n *\n * @augments Path\n */\nclass Shape extends Path {\n  /**\n   * Constructs a new shape.\n   *\n   * @param {Array<Vector2>} [points] - An array of 2D points defining the shape.\n   */\n  constructor(points) {\n    super(points);\n\n    /**\n     * The UUID of the shape.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.uuid = generateUUID();\n    this.type = 'Shape';\n\n    /**\n     * Defines the holes in the shape. Hole definitions must use the\n     * opposite winding order (CW/CCW) than the outer shape.\n     *\n     * @type {Array<Path>}\n     * @readonly\n     */\n    this.holes = [];\n  }\n\n  /**\n   * Returns an array representing each contour of the holes\n   * as a list of 2D points.\n   *\n   * @param {number} divisions - The fineness of the result.\n   * @return {Array<Array<Vector2>>} The holes as a series of 2D points.\n   */\n  getPointsHoles(divisions) {\n    const holesPts = [];\n    for (let i = 0, l = this.holes.length; i < l; i++) {\n      holesPts[i] = this.holes[i].getPoints(divisions);\n    }\n    return holesPts;\n  }\n\n  // get points of shape and holes (keypoints based on segments parameter)\n\n  /**\n   * Returns an object that holds contour data for the shape and its holes as\n   * arrays of 2D points.\n   *\n   * @param {number} divisions - The fineness of the result.\n   * @return {{shape:Array<Vector2>,holes:Array<Array<Vector2>>}} An object with contour data.\n   */\n  extractPoints(divisions) {\n    return {\n      shape: this.getPoints(divisions),\n      holes: this.getPointsHoles(divisions)\n    };\n  }\n  copy(source) {\n    super.copy(source);\n    this.holes = [];\n    for (let i = 0, l = source.holes.length; i < l; i++) {\n      const hole = source.holes[i];\n      this.holes.push(hole.clone());\n    }\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    data.uuid = this.uuid;\n    data.holes = [];\n    for (let i = 0, l = this.holes.length; i < l; i++) {\n      const hole = this.holes[i];\n      data.holes.push(hole.toJSON());\n    }\n    return data;\n  }\n  fromJSON(json) {\n    super.fromJSON(json);\n    this.uuid = json.uuid;\n    this.holes = [];\n    for (let i = 0, l = json.holes.length; i < l; i++) {\n      const hole = json.holes[i];\n      this.holes.push(new Path().fromJSON(hole));\n    }\n    return this;\n  }\n}\n\n/* eslint-disable */\n// copy of mapbox/earcut version 3.0.1\n// https://github.com/mapbox/earcut/tree/v3.0.1\n\nfunction earcut(data, holeIndices) {\n  let dim = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n  const hasHoles = holeIndices && holeIndices.length;\n  const outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n  let outerNode = linkedList(data, 0, outerLen, dim, true);\n  const triangles = [];\n  if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n  let minX, minY, invSize;\n  if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\n  // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n  if (data.length > 80 * dim) {\n    minX = Infinity;\n    minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n    for (let i = dim; i < outerLen; i += dim) {\n      const x = data[i];\n      const y = data[i + 1];\n      if (x < minX) minX = x;\n      if (y < minY) minY = y;\n      if (x > maxX) maxX = x;\n      if (y > maxY) maxY = y;\n    }\n\n    // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n    invSize = Math.max(maxX - minX, maxY - minY);\n    invSize = invSize !== 0 ? 32767 / invSize : 0;\n  }\n  earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);\n  return triangles;\n}\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data, start, end, dim, clockwise) {\n  let last;\n  if (clockwise === signedArea(data, start, end, dim) > 0) {\n    for (let i = start; i < end; i += dim) last = insertNode(i / dim | 0, data[i], data[i + 1], last);\n  } else {\n    for (let i = end - dim; i >= start; i -= dim) last = insertNode(i / dim | 0, data[i], data[i + 1], last);\n  }\n  if (last && equals(last, last.next)) {\n    removeNode(last);\n    last = last.next;\n  }\n  return last;\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end) {\n  if (!start) return start;\n  if (!end) end = start;\n  let p = start,\n    again;\n  do {\n    again = false;\n    if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n      removeNode(p);\n      p = end = p.prev;\n      if (p === p.next) break;\n      again = true;\n    } else {\n      p = p.next;\n    }\n  } while (again || p !== end);\n  return end;\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n  if (!ear) return;\n\n  // interlink polygon nodes in z-order\n  if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n  let stop = ear;\n\n  // iterate through ears, slicing them one by one\n  while (ear.prev !== ear.next) {\n    const prev = ear.prev;\n    const next = ear.next;\n    if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n      triangles.push(prev.i, ear.i, next.i); // cut off the triangle\n\n      removeNode(ear);\n\n      // skipping the next vertex leads to less sliver triangles\n      ear = next.next;\n      stop = next.next;\n      continue;\n    }\n    ear = next;\n\n    // if we looped through the whole remaining polygon and can't find any more ears\n    if (ear === stop) {\n      // try filtering points and slicing again\n      if (!pass) {\n        earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\n        // if this didn't work, try curing all small self-intersections locally\n      } else if (pass === 1) {\n        ear = cureLocalIntersections(filterPoints(ear), triangles);\n        earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n        // as a last resort, try splitting the remaining polygon into two\n      } else if (pass === 2) {\n        splitEarcut(ear, triangles, dim, minX, minY, invSize);\n      }\n      break;\n    }\n  }\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n  const a = ear.prev,\n    b = ear,\n    c = ear.next;\n  if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n  // now make sure we don't have other points inside the potential ear\n  const ax = a.x,\n    bx = b.x,\n    cx = c.x,\n    ay = a.y,\n    by = b.y,\n    cy = c.y;\n\n  // triangle bbox\n  const x0 = Math.min(ax, bx, cx),\n    y0 = Math.min(ay, by, cy),\n    x1 = Math.max(ax, bx, cx),\n    y1 = Math.max(ay, by, cy);\n  let p = c.next;\n  while (p !== a) {\n    if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n    p = p.next;\n  }\n  return true;\n}\nfunction isEarHashed(ear, minX, minY, invSize) {\n  const a = ear.prev,\n    b = ear,\n    c = ear.next;\n  if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n  const ax = a.x,\n    bx = b.x,\n    cx = c.x,\n    ay = a.y,\n    by = b.y,\n    cy = c.y;\n\n  // triangle bbox\n  const x0 = Math.min(ax, bx, cx),\n    y0 = Math.min(ay, by, cy),\n    x1 = Math.max(ax, bx, cx),\n    y1 = Math.max(ay, by, cy);\n\n  // z-order range for the current triangle bbox;\n  const minZ = zOrder(x0, y0, minX, minY, invSize),\n    maxZ = zOrder(x1, y1, minX, minY, invSize);\n  let p = ear.prevZ,\n    n = ear.nextZ;\n\n  // look for points inside the triangle in both directions\n  while (p && p.z >= minZ && n && n.z <= maxZ) {\n    if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c && pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n    p = p.prevZ;\n    if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c && pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n    n = n.nextZ;\n  }\n\n  // look for remaining points in decreasing z-order\n  while (p && p.z >= minZ) {\n    if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c && pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n    p = p.prevZ;\n  }\n\n  // look for remaining points in increasing z-order\n  while (n && n.z <= maxZ) {\n    if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c && pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n    n = n.nextZ;\n  }\n  return true;\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles) {\n  let p = start;\n  do {\n    const a = p.prev,\n      b = p.next.next;\n    if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n      triangles.push(a.i, p.i, b.i);\n\n      // remove two nodes involved\n      removeNode(p);\n      removeNode(p.next);\n      p = start = b;\n    }\n    p = p.next;\n  } while (p !== start);\n  return filterPoints(p);\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n  // look for a valid diagonal that divides the polygon into two\n  let a = start;\n  do {\n    let b = a.next.next;\n    while (b !== a.prev) {\n      if (a.i !== b.i && isValidDiagonal(a, b)) {\n        // split the polygon in two by the diagonal\n        let c = splitPolygon(a, b);\n\n        // filter colinear points around the cuts\n        a = filterPoints(a, a.next);\n        c = filterPoints(c, c.next);\n\n        // run earcut on each half\n        earcutLinked(a, triangles, dim, minX, minY, invSize, 0);\n        earcutLinked(c, triangles, dim, minX, minY, invSize, 0);\n        return;\n      }\n      b = b.next;\n    }\n    a = a.next;\n  } while (a !== start);\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n  const queue = [];\n  for (let i = 0, len = holeIndices.length; i < len; i++) {\n    const start = holeIndices[i] * dim;\n    const end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n    const list = linkedList(data, start, end, dim, false);\n    if (list === list.next) list.steiner = true;\n    queue.push(getLeftmost(list));\n  }\n  queue.sort(compareXYSlope);\n\n  // process holes from left to right\n  for (let i = 0; i < queue.length; i++) {\n    outerNode = eliminateHole(queue[i], outerNode);\n  }\n  return outerNode;\n}\nfunction compareXYSlope(a, b) {\n  let result = a.x - b.x;\n  // when the left-most point of 2 holes meet at a vertex, sort the holes counterclockwise so that when we find\n  // the bridge to the outer shell is always the point that they meet at.\n  if (result === 0) {\n    result = a.y - b.y;\n    if (result === 0) {\n      const aSlope = (a.next.y - a.y) / (a.next.x - a.x);\n      const bSlope = (b.next.y - b.y) / (b.next.x - b.x);\n      result = aSlope - bSlope;\n    }\n  }\n  return result;\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n  const bridge = findHoleBridge(hole, outerNode);\n  if (!bridge) {\n    return outerNode;\n  }\n  const bridgeReverse = splitPolygon(bridge, hole);\n\n  // filter collinear points around the cuts\n  filterPoints(bridgeReverse, bridgeReverse.next);\n  return filterPoints(bridge, bridge.next);\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n  let p = outerNode;\n  const hx = hole.x;\n  const hy = hole.y;\n  let qx = -Infinity;\n  let m;\n\n  // find a segment intersected by a ray from the hole's leftmost point to the left;\n  // segment's endpoint with lesser x will be potential connection point\n  // unless they intersect at a vertex, then choose the vertex\n  if (equals(hole, p)) return p;\n  do {\n    if (equals(hole, p.next)) return p.next;else if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n      const x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n      if (x <= hx && x > qx) {\n        qx = x;\n        m = p.x < p.next.x ? p : p.next;\n        if (x === hx) return m; // hole touches outer segment; pick leftmost endpoint\n      }\n    }\n    p = p.next;\n  } while (p !== outerNode);\n  if (!m) return null;\n\n  // look for points inside the triangle of hole point, segment intersection and endpoint;\n  // if there are no points found, we have a valid connection;\n  // otherwise choose the point of the minimum angle with the ray as connection point\n\n  const stop = m;\n  const mx = m.x;\n  const my = m.y;\n  let tanMin = Infinity;\n  p = m;\n  do {\n    if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n      const tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n      if (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {\n        m = p;\n        tanMin = tan;\n      }\n    }\n    p = p.next;\n  } while (p !== stop);\n  return m;\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector(m, p) {\n  return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n  let p = start;\n  do {\n    if (p.z === 0) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n    p.prevZ = p.prev;\n    p.nextZ = p.next;\n    p = p.next;\n  } while (p !== start);\n  p.prevZ.nextZ = null;\n  p.prevZ = null;\n  sortLinked(p);\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n  let numMerges;\n  let inSize = 1;\n  do {\n    let p = list;\n    let e;\n    list = null;\n    let tail = null;\n    numMerges = 0;\n    while (p) {\n      numMerges++;\n      let q = p;\n      let pSize = 0;\n      for (let i = 0; i < inSize; i++) {\n        pSize++;\n        q = q.nextZ;\n        if (!q) break;\n      }\n      let qSize = inSize;\n      while (pSize > 0 || qSize > 0 && q) {\n        if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n          e = p;\n          p = p.nextZ;\n          pSize--;\n        } else {\n          e = q;\n          q = q.nextZ;\n          qSize--;\n        }\n        if (tail) tail.nextZ = e;else list = e;\n        e.prevZ = tail;\n        tail = e;\n      }\n      p = q;\n    }\n    tail.nextZ = null;\n    inSize *= 2;\n  } while (numMerges > 1);\n  return list;\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n  // coords are transformed into non-negative 15-bit integer range\n  x = (x - minX) * invSize | 0;\n  y = (y - minY) * invSize | 0;\n  x = (x | x << 8) & 0x00FF00FF;\n  x = (x | x << 4) & 0x0F0F0F0F;\n  x = (x | x << 2) & 0x33333333;\n  x = (x | x << 1) & 0x55555555;\n  y = (y | y << 8) & 0x00FF00FF;\n  y = (y | y << 4) & 0x0F0F0F0F;\n  y = (y | y << 2) & 0x33333333;\n  y = (y | y << 1) & 0x55555555;\n  return x | y << 1;\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n  let p = start,\n    leftmost = start;\n  do {\n    if (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;\n    p = p.next;\n  } while (p !== start);\n  return leftmost;\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n  return (cx - px) * (ay - py) >= (ax - px) * (cy - py) && (ax - px) * (by - py) >= (bx - px) * (ay - py) && (bx - px) * (cy - py) >= (cx - px) * (by - py);\n}\n\n// check if a point lies within a convex triangle but false if its equal to the first point of the triangle\nfunction pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, px, py) {\n  return !(ax === px && ay === py) && pointInTriangle(ax, ay, bx, by, cx, cy, px, py);\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n  return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && (\n  // dones't intersect other edges\n  locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && (\n  // locally visible\n  area(a.prev, a, b.prev) || area(a, b.prev, b)) ||\n  // does not create opposite-facing sectors\n  equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n}\n\n// signed area of a triangle\nfunction area(p, q, r) {\n  return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n\n// check if two points are equal\nfunction equals(p1, p2) {\n  return p1.x === p2.x && p1.y === p2.y;\n}\n\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n  const o1 = sign(area(p1, q1, p2));\n  const o2 = sign(area(p1, q1, q2));\n  const o3 = sign(area(p2, q2, p1));\n  const o4 = sign(area(p2, q2, q1));\n  if (o1 !== o2 && o3 !== o4) return true; // general case\n\n  if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n  if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n  if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n  if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n  return false;\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment(p, q, r) {\n  return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n}\nfunction sign(num) {\n  return num > 0 ? 1 : num < 0 ? -1 : 0;\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n  let p = a;\n  do {\n    if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;\n    p = p.next;\n  } while (p !== a);\n  return false;\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n  return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n  let p = a;\n  let inside = false;\n  const px = (a.x + b.x) / 2;\n  const py = (a.y + b.y) / 2;\n  do {\n    if (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;\n    p = p.next;\n  } while (p !== a);\n  return inside;\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n  const a2 = createNode(a.i, a.x, a.y),\n    b2 = createNode(b.i, b.x, b.y),\n    an = a.next,\n    bp = b.prev;\n  a.next = b;\n  b.prev = a;\n  a2.next = an;\n  an.prev = a2;\n  b2.next = a2;\n  a2.prev = b2;\n  bp.next = b2;\n  b2.prev = bp;\n  return b2;\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n  const p = createNode(i, x, y);\n  if (!last) {\n    p.prev = p;\n    p.next = p;\n  } else {\n    p.next = last.next;\n    p.prev = last;\n    last.next.prev = p;\n    last.next = p;\n  }\n  return p;\n}\nfunction removeNode(p) {\n  p.next.prev = p.prev;\n  p.prev.next = p.next;\n  if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n  if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\nfunction createNode(i, x, y) {\n  return {\n    i,\n    // vertex index in coordinates array\n    x,\n    y,\n    // vertex coordinates\n    prev: null,\n    // previous and next vertex nodes in a polygon ring\n    next: null,\n    z: 0,\n    // z-order curve value\n    prevZ: null,\n    // previous and next nodes in z-order\n    nextZ: null,\n    steiner: false // indicates whether this is a steiner point\n  };\n}\nfunction signedArea(data, start, end, dim) {\n  let sum = 0;\n  for (let i = start, j = end - dim; i < end; i += dim) {\n    sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n    j = i;\n  }\n  return sum;\n}\nclass Earcut {\n  /**\n   * Triangulates the given shape definition by returning an array of triangles.\n   *\n   * @param {Array<number>} data - An array with 2D points.\n   * @param {Array<number>} holeIndices - An array with indices defining holes.\n   * @param {number} [dim=2] - The number of coordinates per vertex in the input array.\n   * @return {Array<number>} An array representing the triangulated faces. Each face is defined by three consecutive numbers\n   * representing vertex indices.\n   */\n  static triangulate(data, holeIndices) {\n    let dim = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n    return earcut(data, holeIndices, dim);\n  }\n}\n\n/**\n * A class containing utility functions for shapes.\n *\n * @hideconstructor\n */\nclass ShapeUtils {\n  /**\n   * Calculate area of a ( 2D ) contour polygon.\n   *\n   * @param {Array<Vector2>} contour - An array of 2D points.\n   * @return {number} The area.\n   */\n  static area(contour) {\n    const n = contour.length;\n    let a = 0.0;\n    for (let p = n - 1, q = 0; q < n; p = q++) {\n      a += contour[p].x * contour[q].y - contour[q].x * contour[p].y;\n    }\n    return a * 0.5;\n  }\n\n  /**\n   * Returns `true` if the given contour uses a clockwise winding order.\n   *\n   * @param {Array<Vector2>} pts - An array of 2D points defining a polygon.\n   * @return {boolean} Whether the given contour uses a clockwise winding order or not.\n   */\n  static isClockWise(pts) {\n    return ShapeUtils.area(pts) < 0;\n  }\n\n  /**\n   * Triangulates the given shape definition.\n   *\n   * @param {Array<Vector2>} contour - An array of 2D points defining the contour.\n   * @param {Array<Array<Vector2>>} holes - An array that holds arrays of 2D points defining the holes.\n   * @return {Array<Array<number>>} An array that holds for each face definition an array with three indices.\n   */\n  static triangulateShape(contour, holes) {\n    const vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n    const holeIndices = []; // array of hole indices\n    const faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n    removeDupEndPts(contour);\n    addContour(vertices, contour);\n\n    //\n\n    let holeIndex = contour.length;\n    holes.forEach(removeDupEndPts);\n    for (let i = 0; i < holes.length; i++) {\n      holeIndices.push(holeIndex);\n      holeIndex += holes[i].length;\n      addContour(vertices, holes[i]);\n    }\n\n    //\n\n    const triangles = Earcut.triangulate(vertices, holeIndices);\n\n    //\n\n    for (let i = 0; i < triangles.length; i += 3) {\n      faces.push(triangles.slice(i, i + 3));\n    }\n    return faces;\n  }\n}\nfunction removeDupEndPts(points) {\n  const l = points.length;\n  if (l > 2 && points[l - 1].equals(points[0])) {\n    points.pop();\n  }\n}\nfunction addContour(vertices, contour) {\n  for (let i = 0; i < contour.length; i++) {\n    vertices.push(contour[i].x);\n    vertices.push(contour[i].y);\n  }\n}\n\n/**\n * Creates extruded geometry from a path shape.\n *\n * ```js\n * const length = 12, width = 8;\n *\n * const shape = new THREE.Shape();\n * shape.moveTo( 0,0 );\n * shape.lineTo( 0, width );\n * shape.lineTo( length, width );\n * shape.lineTo( length, 0 );\n * shape.lineTo( 0, 0 );\n *\n * const geometry = new THREE.ExtrudeGeometry( shape );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n * const mesh = new THREE.Mesh( geometry, material ) ;\n * scene.add( mesh );\n * ```\n *\n * @augments BufferGeometry\n */\nclass ExtrudeGeometry extends BufferGeometry {\n  /**\n   * Constructs a new extrude geometry.\n   *\n   * @param {Shape|Array<Shape>} [shapes] - A shape or an array of shapes.\n   * @param {ExtrudeGeometry~Options} [options] - The extrude settings.\n   */\n  constructor() {\n    let shapes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Shape([new Vector2(0.5, 0.5), new Vector2(-0.5, 0.5), new Vector2(-0.5, -0.5), new Vector2(0.5, -0.5)]);\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super();\n    this.type = 'ExtrudeGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      shapes: shapes,\n      options: options\n    };\n    shapes = Array.isArray(shapes) ? shapes : [shapes];\n    const scope = this;\n    const verticesArray = [];\n    const uvArray = [];\n    for (let i = 0, l = shapes.length; i < l; i++) {\n      const shape = shapes[i];\n      addShape(shape);\n    }\n\n    // build geometry\n\n    this.setAttribute('position', new Float32BufferAttribute(verticesArray, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvArray, 2));\n    this.computeVertexNormals();\n\n    // functions\n\n    function addShape(shape) {\n      const placeholder = [];\n\n      // options\n\n      const curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n      const steps = options.steps !== undefined ? options.steps : 1;\n      const depth = options.depth !== undefined ? options.depth : 1;\n      let bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n      let bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 0.2;\n      let bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 0.1;\n      let bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n      let bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n      const extrudePath = options.extrudePath;\n      const uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\n\n      //\n\n      let extrudePts,\n        extrudeByPath = false;\n      let splineTube, binormal, normal, position2;\n      if (extrudePath) {\n        extrudePts = extrudePath.getSpacedPoints(steps);\n        extrudeByPath = true;\n        bevelEnabled = false; // bevels not supported for path extrusion\n\n        // SETUP TNB variables\n\n        // TODO1 - have a .isClosed in spline?\n\n        splineTube = extrudePath.computeFrenetFrames(steps, false);\n\n        // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n        binormal = new Vector3();\n        normal = new Vector3();\n        position2 = new Vector3();\n      }\n\n      // Safeguards if bevels are not enabled\n\n      if (!bevelEnabled) {\n        bevelSegments = 0;\n        bevelThickness = 0;\n        bevelSize = 0;\n        bevelOffset = 0;\n      }\n\n      // Variables initialization\n\n      const shapePoints = shape.extractPoints(curveSegments);\n      let vertices = shapePoints.shape;\n      const holes = shapePoints.holes;\n      const reverse = !ShapeUtils.isClockWise(vertices);\n      if (reverse) {\n        vertices = vertices.reverse();\n\n        // Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n        for (let h = 0, hl = holes.length; h < hl; h++) {\n          const ahole = holes[h];\n          if (ShapeUtils.isClockWise(ahole)) {\n            holes[h] = ahole.reverse();\n          }\n        }\n      }\n\n      /**Merges index-adjacent points that are within a threshold distance of each other. Array is modified in-place. Threshold distance is empirical, and scaled based on the magnitude of point coordinates.\n       * @param {Array<Vector2>} points\n      */\n      function mergeOverlappingPoints(points) {\n        const THRESHOLD = 1e-10;\n        const THRESHOLD_SQ = THRESHOLD * THRESHOLD;\n        let prevPos = points[0];\n        for (let i = 1; i <= points.length; i++) {\n          const currentIndex = i % points.length;\n          const currentPos = points[currentIndex];\n          const dx = currentPos.x - prevPos.x;\n          const dy = currentPos.y - prevPos.y;\n          const distSq = dx * dx + dy * dy;\n          const scalingFactorSqrt = Math.max(Math.abs(currentPos.x), Math.abs(currentPos.y), Math.abs(prevPos.x), Math.abs(prevPos.y));\n          const thresholdSqScaled = THRESHOLD_SQ * scalingFactorSqrt * scalingFactorSqrt;\n          if (distSq <= thresholdSqScaled) {\n            points.splice(currentIndex, 1);\n            i--;\n            continue;\n          }\n          prevPos = currentPos;\n        }\n      }\n      mergeOverlappingPoints(vertices);\n      holes.forEach(mergeOverlappingPoints);\n      const numHoles = holes.length;\n\n      /* Vertices */\n\n      const contour = vertices; // vertices has all points but contour has only points of circumference\n\n      for (let h = 0; h < numHoles; h++) {\n        const ahole = holes[h];\n        vertices = vertices.concat(ahole);\n      }\n      function scalePt2(pt, vec, size) {\n        if (!vec) console.error('THREE.ExtrudeGeometry: vec does not exist');\n        return pt.clone().addScaledVector(vec, size);\n      }\n      const vlen = vertices.length;\n\n      // Find directions for point movement\n\n      function getBevelVec(inPt, inPrev, inNext) {\n        // computes for inPt the corresponding point inPt' on a new contour\n        //   shifted by 1 unit (length of normalized vector) to the left\n        // if we walk along contour clockwise, this new contour is outside the old one\n        //\n        // inPt' is the intersection of the two lines parallel to the two\n        //  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n        let v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\n        // good reading for geometry algorithms (here: line-line intersection)\n        // http://geomalgorithms.com/a05-_intersect-1.html\n\n        const v_prev_x = inPt.x - inPrev.x,\n          v_prev_y = inPt.y - inPrev.y;\n        const v_next_x = inNext.x - inPt.x,\n          v_next_y = inNext.y - inPt.y;\n        const v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y;\n\n        // check for collinear edges\n        const collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;\n        if (Math.abs(collinear0) > Number.EPSILON) {\n          // not collinear\n\n          // length of vectors for normalizing\n\n          const v_prev_len = Math.sqrt(v_prev_lensq);\n          const v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y);\n\n          // shift adjacent points by unit vectors to the left\n\n          const ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;\n          const ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;\n          const ptNextShift_x = inNext.x - v_next_y / v_next_len;\n          const ptNextShift_y = inNext.y + v_next_x / v_next_len;\n\n          // scaling factor for v_prev to intersection point\n\n          const sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x);\n\n          // vector from inPt to intersection point\n\n          v_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;\n          v_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y;\n\n          // Don't normalize!, otherwise sharp corners become ugly\n          //  but prevent crazy spikes\n          const v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;\n          if (v_trans_lensq <= 2) {\n            return new Vector2(v_trans_x, v_trans_y);\n          } else {\n            shrink_by = Math.sqrt(v_trans_lensq / 2);\n          }\n        } else {\n          // handle special case of collinear edges\n\n          let direction_eq = false; // assumes: opposite\n\n          if (v_prev_x > Number.EPSILON) {\n            if (v_next_x > Number.EPSILON) {\n              direction_eq = true;\n            }\n          } else {\n            if (v_prev_x < -Number.EPSILON) {\n              if (v_next_x < -Number.EPSILON) {\n                direction_eq = true;\n              }\n            } else {\n              if (Math.sign(v_prev_y) === Math.sign(v_next_y)) {\n                direction_eq = true;\n              }\n            }\n          }\n          if (direction_eq) {\n            // console.log(\"Warning: lines are a straight sequence\");\n            v_trans_x = -v_prev_y;\n            v_trans_y = v_prev_x;\n            shrink_by = Math.sqrt(v_prev_lensq);\n          } else {\n            // console.log(\"Warning: lines are a straight spike\");\n            v_trans_x = v_prev_x;\n            v_trans_y = v_prev_y;\n            shrink_by = Math.sqrt(v_prev_lensq / 2);\n          }\n        }\n        return new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);\n      }\n      const contourMovements = [];\n      for (let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {\n        if (j === il) j = 0;\n        if (k === il) k = 0;\n\n        //  (j)---(i)---(k)\n        // console.log('i,j,k', i, j , k)\n\n        contourMovements[i] = getBevelVec(contour[i], contour[j], contour[k]);\n      }\n      const holesMovements = [];\n      let oneHoleMovements,\n        verticesMovements = contourMovements.concat();\n      for (let h = 0, hl = numHoles; h < hl; h++) {\n        const ahole = holes[h];\n        oneHoleMovements = [];\n        for (let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {\n          if (j === il) j = 0;\n          if (k === il) k = 0;\n\n          //  (j)---(i)---(k)\n          oneHoleMovements[i] = getBevelVec(ahole[i], ahole[j], ahole[k]);\n        }\n        holesMovements.push(oneHoleMovements);\n        verticesMovements = verticesMovements.concat(oneHoleMovements);\n      }\n      let faces;\n      if (bevelSegments === 0) {\n        faces = ShapeUtils.triangulateShape(contour, holes);\n      } else {\n        const contractedContourVertices = [];\n        const expandedHoleVertices = [];\n\n        // Loop bevelSegments, 1 for the front, 1 for the back\n\n        for (let b = 0; b < bevelSegments; b++) {\n          //for ( b = bevelSegments; b > 0; b -- ) {\n\n          const t = b / bevelSegments;\n          const z = bevelThickness * Math.cos(t * Math.PI / 2);\n          const bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset;\n\n          // contract shape\n\n          for (let i = 0, il = contour.length; i < il; i++) {\n            const vert = scalePt2(contour[i], contourMovements[i], bs);\n            v(vert.x, vert.y, -z);\n            if (t === 0) contractedContourVertices.push(vert);\n          }\n\n          // expand holes\n\n          for (let h = 0, hl = numHoles; h < hl; h++) {\n            const ahole = holes[h];\n            oneHoleMovements = holesMovements[h];\n            const oneHoleVertices = [];\n            for (let i = 0, il = ahole.length; i < il; i++) {\n              const vert = scalePt2(ahole[i], oneHoleMovements[i], bs);\n              v(vert.x, vert.y, -z);\n              if (t === 0) oneHoleVertices.push(vert);\n            }\n            if (t === 0) expandedHoleVertices.push(oneHoleVertices);\n          }\n        }\n        faces = ShapeUtils.triangulateShape(contractedContourVertices, expandedHoleVertices);\n      }\n      const flen = faces.length;\n      const bs = bevelSize + bevelOffset;\n\n      // Back facing vertices\n\n      for (let i = 0; i < vlen; i++) {\n        const vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];\n        if (!extrudeByPath) {\n          v(vert.x, vert.y, 0);\n        } else {\n          // v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n          normal.copy(splineTube.normals[0]).multiplyScalar(vert.x);\n          binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);\n          position2.copy(extrudePts[0]).add(normal).add(binormal);\n          v(position2.x, position2.y, position2.z);\n        }\n      }\n\n      // Add stepped vertices...\n      // Including front facing vertices\n\n      for (let s = 1; s <= steps; s++) {\n        for (let i = 0; i < vlen; i++) {\n          const vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];\n          if (!extrudeByPath) {\n            v(vert.x, vert.y, depth / steps * s);\n          } else {\n            // v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n            normal.copy(splineTube.normals[s]).multiplyScalar(vert.x);\n            binormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);\n            position2.copy(extrudePts[s]).add(normal).add(binormal);\n            v(position2.x, position2.y, position2.z);\n          }\n        }\n      }\n\n      // Add bevel segments planes\n\n      //for ( b = 1; b <= bevelSegments; b ++ ) {\n      for (let b = bevelSegments - 1; b >= 0; b--) {\n        const t = b / bevelSegments;\n        const z = bevelThickness * Math.cos(t * Math.PI / 2);\n        const bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset;\n\n        // contract shape\n\n        for (let i = 0, il = contour.length; i < il; i++) {\n          const vert = scalePt2(contour[i], contourMovements[i], bs);\n          v(vert.x, vert.y, depth + z);\n        }\n\n        // expand holes\n\n        for (let h = 0, hl = holes.length; h < hl; h++) {\n          const ahole = holes[h];\n          oneHoleMovements = holesMovements[h];\n          for (let i = 0, il = ahole.length; i < il; i++) {\n            const vert = scalePt2(ahole[i], oneHoleMovements[i], bs);\n            if (!extrudeByPath) {\n              v(vert.x, vert.y, depth + z);\n            } else {\n              v(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z);\n            }\n          }\n        }\n      }\n\n      /* Faces */\n\n      // Top and bottom faces\n\n      buildLidFaces();\n\n      // Sides faces\n\n      buildSideFaces();\n\n      /////  Internal functions\n\n      function buildLidFaces() {\n        const start = verticesArray.length / 3;\n        if (bevelEnabled) {\n          let layer = 0; // steps + 1\n          let offset = vlen * layer;\n\n          // Bottom faces\n\n          for (let i = 0; i < flen; i++) {\n            const face = faces[i];\n            f3(face[2] + offset, face[1] + offset, face[0] + offset);\n          }\n          layer = steps + bevelSegments * 2;\n          offset = vlen * layer;\n\n          // Top faces\n\n          for (let i = 0; i < flen; i++) {\n            const face = faces[i];\n            f3(face[0] + offset, face[1] + offset, face[2] + offset);\n          }\n        } else {\n          // Bottom faces\n\n          for (let i = 0; i < flen; i++) {\n            const face = faces[i];\n            f3(face[2], face[1], face[0]);\n          }\n\n          // Top faces\n\n          for (let i = 0; i < flen; i++) {\n            const face = faces[i];\n            f3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);\n          }\n        }\n        scope.addGroup(start, verticesArray.length / 3 - start, 0);\n      }\n\n      // Create faces for the z-sides of the shape\n\n      function buildSideFaces() {\n        const start = verticesArray.length / 3;\n        let layeroffset = 0;\n        sidewalls(contour, layeroffset);\n        layeroffset += contour.length;\n        for (let h = 0, hl = holes.length; h < hl; h++) {\n          const ahole = holes[h];\n          sidewalls(ahole, layeroffset);\n\n          //, true\n          layeroffset += ahole.length;\n        }\n        scope.addGroup(start, verticesArray.length / 3 - start, 1);\n      }\n      function sidewalls(contour, layeroffset) {\n        let i = contour.length;\n        while (--i >= 0) {\n          const j = i;\n          let k = i - 1;\n          if (k < 0) k = contour.length - 1;\n\n          //console.log('b', i,j, i-1, k,vertices.length);\n\n          for (let s = 0, sl = steps + bevelSegments * 2; s < sl; s++) {\n            const slen1 = vlen * s;\n            const slen2 = vlen * (s + 1);\n            const a = layeroffset + j + slen1,\n              b = layeroffset + k + slen1,\n              c = layeroffset + k + slen2,\n              d = layeroffset + j + slen2;\n            f4(a, b, c, d);\n          }\n        }\n      }\n      function v(x, y, z) {\n        placeholder.push(x);\n        placeholder.push(y);\n        placeholder.push(z);\n      }\n      function f3(a, b, c) {\n        addVertex(a);\n        addVertex(b);\n        addVertex(c);\n        const nextIndex = verticesArray.length / 3;\n        const uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n        addUV(uvs[0]);\n        addUV(uvs[1]);\n        addUV(uvs[2]);\n      }\n      function f4(a, b, c, d) {\n        addVertex(a);\n        addVertex(b);\n        addVertex(d);\n        addVertex(b);\n        addVertex(c);\n        addVertex(d);\n        const nextIndex = verticesArray.length / 3;\n        const uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n        addUV(uvs[0]);\n        addUV(uvs[1]);\n        addUV(uvs[3]);\n        addUV(uvs[1]);\n        addUV(uvs[2]);\n        addUV(uvs[3]);\n      }\n      function addVertex(index) {\n        verticesArray.push(placeholder[index * 3 + 0]);\n        verticesArray.push(placeholder[index * 3 + 1]);\n        verticesArray.push(placeholder[index * 3 + 2]);\n      }\n      function addUV(vector2) {\n        uvArray.push(vector2.x);\n        uvArray.push(vector2.y);\n      }\n    }\n  }\n  copy(source) {\n    super.copy(source);\n    this.parameters = Object.assign({}, source.parameters);\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    const shapes = this.parameters.shapes;\n    const options = this.parameters.options;\n    return toJSON$1(shapes, options, data);\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @param {Array<Shape>} shapes - An array of shapes.\n   * @return {ExtrudeGeometry} A new instance.\n   */\n  static fromJSON(data, shapes) {\n    const geometryShapes = [];\n    for (let j = 0, jl = data.shapes.length; j < jl; j++) {\n      const shape = shapes[data.shapes[j]];\n      geometryShapes.push(shape);\n    }\n    const extrudePath = data.options.extrudePath;\n    if (extrudePath !== undefined) {\n      data.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath);\n    }\n    return new ExtrudeGeometry(geometryShapes, data.options);\n  }\n}\nconst WorldUVGenerator = {\n  generateTopUV: function (geometry, vertices, indexA, indexB, indexC) {\n    const a_x = vertices[indexA * 3];\n    const a_y = vertices[indexA * 3 + 1];\n    const b_x = vertices[indexB * 3];\n    const b_y = vertices[indexB * 3 + 1];\n    const c_x = vertices[indexC * 3];\n    const c_y = vertices[indexC * 3 + 1];\n    return [new Vector2(a_x, a_y), new Vector2(b_x, b_y), new Vector2(c_x, c_y)];\n  },\n  generateSideWallUV: function (geometry, vertices, indexA, indexB, indexC, indexD) {\n    const a_x = vertices[indexA * 3];\n    const a_y = vertices[indexA * 3 + 1];\n    const a_z = vertices[indexA * 3 + 2];\n    const b_x = vertices[indexB * 3];\n    const b_y = vertices[indexB * 3 + 1];\n    const b_z = vertices[indexB * 3 + 2];\n    const c_x = vertices[indexC * 3];\n    const c_y = vertices[indexC * 3 + 1];\n    const c_z = vertices[indexC * 3 + 2];\n    const d_x = vertices[indexD * 3];\n    const d_y = vertices[indexD * 3 + 1];\n    const d_z = vertices[indexD * 3 + 2];\n    if (Math.abs(a_y - b_y) < Math.abs(a_x - b_x)) {\n      return [new Vector2(a_x, 1 - a_z), new Vector2(b_x, 1 - b_z), new Vector2(c_x, 1 - c_z), new Vector2(d_x, 1 - d_z)];\n    } else {\n      return [new Vector2(a_y, 1 - a_z), new Vector2(b_y, 1 - b_z), new Vector2(c_y, 1 - c_z), new Vector2(d_y, 1 - d_z)];\n    }\n  }\n};\nfunction toJSON$1(shapes, options, data) {\n  data.shapes = [];\n  if (Array.isArray(shapes)) {\n    for (let i = 0, l = shapes.length; i < l; i++) {\n      const shape = shapes[i];\n      data.shapes.push(shape.uuid);\n    }\n  } else {\n    data.shapes.push(shapes.uuid);\n  }\n  data.options = Object.assign({}, options);\n  if (options.extrudePath !== undefined) data.options.extrudePath = options.extrudePath.toJSON();\n  return data;\n}\n\n/**\n * A geometry class for representing an icosahedron.\n *\n * ```js\n * const geometry = new THREE.IcosahedronGeometry();\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const icosahedron = new THREE.Mesh( geometry, material );\n * scene.add( icosahedron );\n * ```\n *\n * @augments PolyhedronGeometry\n */\nclass IcosahedronGeometry extends PolyhedronGeometry {\n  /**\n   * Constructs a new icosahedron geometry.\n   *\n   * @param {number} [radius=1] - Radius of the icosahedron.\n   * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a icosahedron.\n   */\n  constructor() {\n    let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const t = (1 + Math.sqrt(5)) / 2;\n    const vertices = [-1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, 0, 0, -1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, t, 0, -1, t, 0, 1, -t, 0, -1, -t, 0, 1];\n    const indices = [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1];\n    super(vertices, indices, radius, detail);\n    this.type = 'IcosahedronGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      radius: radius,\n      detail: detail\n    };\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @return {IcosahedronGeometry} A new instance.\n   */\n  static fromJSON(data) {\n    return new IcosahedronGeometry(data.radius, data.detail);\n  }\n}\n\n/**\n * Creates meshes with axial symmetry like vases. The lathe rotates around the Y axis.\n *\n * ```js\n * const points = [];\n * for ( let i = 0; i < 10; i ++ ) {\n * \tpoints.push( new THREE.Vector2( Math.sin( i * 0.2 ) * 10 + 5, ( i - 5 ) * 2 ) );\n * }\n * const geometry = new THREE.LatheGeometry( points );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const lathe = new THREE.Mesh( geometry, material );\n * scene.add( lathe );\n * ```\n *\n * @augments BufferGeometry\n */\nclass LatheGeometry extends BufferGeometry {\n  /**\n   * Constructs a new lathe geometry.\n   *\n   * @param {Array<Vector2|Vector3>} [points] - An array of points in 2D space. The x-coordinate of each point\n   * must be greater than zero.\n   * @param {number} [segments=12] - The number of circumference segments to generate.\n   * @param {number} [phiStart=0] - The starting angle in radians.\n   * @param {number} [phiLength=Math.PI*2] - The radian (0 to 2PI) range of the lathed section 2PI is a\n   * closed lathe, less than 2PI is a portion.\n   */\n  constructor() {\n    let points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [new Vector2(0, -0.5), new Vector2(0.5, 0), new Vector2(0, 0.5)];\n    let segments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 12;\n    let phiStart = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let phiLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Math.PI * 2;\n    super();\n    this.type = 'LatheGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      points: points,\n      segments: segments,\n      phiStart: phiStart,\n      phiLength: phiLength\n    };\n    segments = Math.floor(segments);\n\n    // clamp phiLength so it's in range of [ 0, 2PI ]\n\n    phiLength = clamp(phiLength, 0, Math.PI * 2);\n\n    // buffers\n\n    const indices = [];\n    const vertices = [];\n    const uvs = [];\n    const initNormals = [];\n    const normals = [];\n\n    // helper variables\n\n    const inverseSegments = 1.0 / segments;\n    const vertex = new Vector3();\n    const uv = new Vector2();\n    const normal = new Vector3();\n    const curNormal = new Vector3();\n    const prevNormal = new Vector3();\n    let dx = 0;\n    let dy = 0;\n\n    // pre-compute normals for initial \"meridian\"\n\n    for (let j = 0; j <= points.length - 1; j++) {\n      switch (j) {\n        case 0:\n          // special handling for 1st vertex on path\n\n          dx = points[j + 1].x - points[j].x;\n          dy = points[j + 1].y - points[j].y;\n          normal.x = dy * 1.0;\n          normal.y = -dx;\n          normal.z = dy * 0.0;\n          prevNormal.copy(normal);\n          normal.normalize();\n          initNormals.push(normal.x, normal.y, normal.z);\n          break;\n        case points.length - 1:\n          // special handling for last Vertex on path\n\n          initNormals.push(prevNormal.x, prevNormal.y, prevNormal.z);\n          break;\n        default:\n          // default handling for all vertices in between\n\n          dx = points[j + 1].x - points[j].x;\n          dy = points[j + 1].y - points[j].y;\n          normal.x = dy * 1.0;\n          normal.y = -dx;\n          normal.z = dy * 0.0;\n          curNormal.copy(normal);\n          normal.x += prevNormal.x;\n          normal.y += prevNormal.y;\n          normal.z += prevNormal.z;\n          normal.normalize();\n          initNormals.push(normal.x, normal.y, normal.z);\n          prevNormal.copy(curNormal);\n      }\n    }\n\n    // generate vertices, uvs and normals\n\n    for (let i = 0; i <= segments; i++) {\n      const phi = phiStart + i * inverseSegments * phiLength;\n      const sin = Math.sin(phi);\n      const cos = Math.cos(phi);\n      for (let j = 0; j <= points.length - 1; j++) {\n        // vertex\n\n        vertex.x = points[j].x * sin;\n        vertex.y = points[j].y;\n        vertex.z = points[j].x * cos;\n        vertices.push(vertex.x, vertex.y, vertex.z);\n\n        // uv\n\n        uv.x = i / segments;\n        uv.y = j / (points.length - 1);\n        uvs.push(uv.x, uv.y);\n\n        // normal\n\n        const x = initNormals[3 * j + 0] * sin;\n        const y = initNormals[3 * j + 1];\n        const z = initNormals[3 * j + 0] * cos;\n        normals.push(x, y, z);\n      }\n    }\n\n    // indices\n\n    for (let i = 0; i < segments; i++) {\n      for (let j = 0; j < points.length - 1; j++) {\n        const base = j + i * points.length;\n        const a = base;\n        const b = base + points.length;\n        const c = base + points.length + 1;\n        const d = base + 1;\n\n        // faces\n\n        indices.push(a, b, d);\n        indices.push(c, d, b);\n      }\n    }\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n  }\n  copy(source) {\n    super.copy(source);\n    this.parameters = Object.assign({}, source.parameters);\n    return this;\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @return {LatheGeometry} A new instance.\n   */\n  static fromJSON(data) {\n    return new LatheGeometry(data.points, data.segments, data.phiStart, data.phiLength);\n  }\n}\n\n/**\n * A geometry class for representing an octahedron.\n *\n * ```js\n * const geometry = new THREE.OctahedronGeometry();\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const octahedron = new THREE.Mesh( geometry, material );\n * scene.add( octahedron );\n * ```\n *\n * @augments PolyhedronGeometry\n */\nclass OctahedronGeometry extends PolyhedronGeometry {\n  /**\n   * Constructs a new octahedron geometry.\n   *\n   * @param {number} [radius=1] - Radius of the octahedron.\n   * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a octahedron.\n   */\n  constructor() {\n    let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const vertices = [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1];\n    const indices = [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2];\n    super(vertices, indices, radius, detail);\n    this.type = 'OctahedronGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      radius: radius,\n      detail: detail\n    };\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @return {OctahedronGeometry} A new instance.\n   */\n  static fromJSON(data) {\n    return new OctahedronGeometry(data.radius, data.detail);\n  }\n}\n\n/**\n * A geometry class for representing a plane.\n *\n * ```js\n * const geometry = new THREE.PlaneGeometry( 1, 1 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00, side: THREE.DoubleSide } );\n * const plane = new THREE.Mesh( geometry, material );\n * scene.add( plane );\n * ```\n *\n * @augments BufferGeometry\n */\nclass PlaneGeometry extends BufferGeometry {\n  /**\n   * Constructs a new plane geometry.\n   *\n   * @param {number} [width=1] - The width along the X axis.\n   * @param {number} [height=1] - The height along the Y axis\n   * @param {number} [widthSegments=1] - The number of segments along the X axis.\n   * @param {number} [heightSegments=1] - The number of segments along the Y axis.\n   */\n  constructor() {\n    let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let widthSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let heightSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    super();\n    this.type = 'PlaneGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      width: width,\n      height: height,\n      widthSegments: widthSegments,\n      heightSegments: heightSegments\n    };\n    const width_half = width / 2;\n    const height_half = height / 2;\n    const gridX = Math.floor(widthSegments);\n    const gridY = Math.floor(heightSegments);\n    const gridX1 = gridX + 1;\n    const gridY1 = gridY + 1;\n    const segment_width = width / gridX;\n    const segment_height = height / gridY;\n\n    //\n\n    const indices = [];\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n    for (let iy = 0; iy < gridY1; iy++) {\n      const y = iy * segment_height - height_half;\n      for (let ix = 0; ix < gridX1; ix++) {\n        const x = ix * segment_width - width_half;\n        vertices.push(x, -y, 0);\n        normals.push(0, 0, 1);\n        uvs.push(ix / gridX);\n        uvs.push(1 - iy / gridY);\n      }\n    }\n    for (let iy = 0; iy < gridY; iy++) {\n      for (let ix = 0; ix < gridX; ix++) {\n        const a = ix + gridX1 * iy;\n        const b = ix + gridX1 * (iy + 1);\n        const c = ix + 1 + gridX1 * (iy + 1);\n        const d = ix + 1 + gridX1 * iy;\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    }\n    this.setIndex(indices);\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n  }\n  copy(source) {\n    super.copy(source);\n    this.parameters = Object.assign({}, source.parameters);\n    return this;\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @return {PlaneGeometry} A new instance.\n   */\n  static fromJSON(data) {\n    return new PlaneGeometry(data.width, data.height, data.widthSegments, data.heightSegments);\n  }\n}\n\n/**\n * A class for generating a two-dimensional ring geometry.\n *\n * ```js\n * const geometry = new THREE.RingGeometry( 1, 5, 32 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00, side: THREE.DoubleSide } );\n * const mesh = new THREE.Mesh( geometry, material );\n * scene.add( mesh );\n * ```\n *\n * @augments BufferGeometry\n */\nclass RingGeometry extends BufferGeometry {\n  /**\n   * Constructs a new ring geometry.\n   *\n   * @param {number} [innerRadius=0.5] - The inner radius of the ring.\n   * @param {number} [outerRadius=1] - The outer radius of the ring.\n   * @param {number} [thetaSegments=32] - Number of segments. A higher number means the ring will be more round. Minimum is `3`.\n   * @param {number} [phiSegments=1] - Number of segments per ring segment. Minimum is `1`.\n   * @param {number} [thetaStart=0] - Starting angle in radians.\n   * @param {number} [thetaLength=Math.PI*2] - Central angle in radians.\n   */\n  constructor() {\n    let innerRadius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.5;\n    let outerRadius = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let thetaSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 32;\n    let phiSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    let thetaStart = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    let thetaLength = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Math.PI * 2;\n    super();\n    this.type = 'RingGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      innerRadius: innerRadius,\n      outerRadius: outerRadius,\n      thetaSegments: thetaSegments,\n      phiSegments: phiSegments,\n      thetaStart: thetaStart,\n      thetaLength: thetaLength\n    };\n    thetaSegments = Math.max(3, thetaSegments);\n    phiSegments = Math.max(1, phiSegments);\n\n    // buffers\n\n    const indices = [];\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n\n    // some helper variables\n\n    let radius = innerRadius;\n    const radiusStep = (outerRadius - innerRadius) / phiSegments;\n    const vertex = new Vector3();\n    const uv = new Vector2();\n\n    // generate vertices, normals and uvs\n\n    for (let j = 0; j <= phiSegments; j++) {\n      for (let i = 0; i <= thetaSegments; i++) {\n        // values are generate from the inside of the ring to the outside\n\n        const segment = thetaStart + i / thetaSegments * thetaLength;\n\n        // vertex\n\n        vertex.x = radius * Math.cos(segment);\n        vertex.y = radius * Math.sin(segment);\n        vertices.push(vertex.x, vertex.y, vertex.z);\n\n        // normal\n\n        normals.push(0, 0, 1);\n\n        // uv\n\n        uv.x = (vertex.x / outerRadius + 1) / 2;\n        uv.y = (vertex.y / outerRadius + 1) / 2;\n        uvs.push(uv.x, uv.y);\n      }\n\n      // increase the radius for next row of vertices\n\n      radius += radiusStep;\n    }\n\n    // indices\n\n    for (let j = 0; j < phiSegments; j++) {\n      const thetaSegmentLevel = j * (thetaSegments + 1);\n      for (let i = 0; i < thetaSegments; i++) {\n        const segment = i + thetaSegmentLevel;\n        const a = segment;\n        const b = segment + thetaSegments + 1;\n        const c = segment + thetaSegments + 2;\n        const d = segment + 1;\n\n        // faces\n\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    }\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n  }\n  copy(source) {\n    super.copy(source);\n    this.parameters = Object.assign({}, source.parameters);\n    return this;\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @return {RingGeometry} A new instance.\n   */\n  static fromJSON(data) {\n    return new RingGeometry(data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);\n  }\n}\n\n/**\n * Creates an one-sided polygonal geometry from one or more path shapes.\n *\n * ```js\n * const arcShape = new THREE.Shape()\n *\t.moveTo( 5, 1 )\n *\t.absarc( 1, 1, 4, 0, Math.PI * 2, false );\n *\n * const geometry = new THREE.ShapeGeometry( arcShape );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00, side: THREE.DoubleSide } );\n * const mesh = new THREE.Mesh( geometry, material ) ;\n * scene.add( mesh );\n * ```\n *\n * @augments BufferGeometry\n */\nclass ShapeGeometry extends BufferGeometry {\n  /**\n   * Constructs a new shape geometry.\n   *\n   * @param {Shape|Array<Shape>} [shapes] - A shape or an array of shapes.\n   * @param {number} [curveSegments=12] - Number of segments per shape.\n   */\n  constructor() {\n    let shapes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Shape([new Vector2(0, 0.5), new Vector2(-0.5, -0.5), new Vector2(0.5, -0.5)]);\n    let curveSegments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 12;\n    super();\n    this.type = 'ShapeGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      shapes: shapes,\n      curveSegments: curveSegments\n    };\n\n    // buffers\n\n    const indices = [];\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n\n    // helper variables\n\n    let groupStart = 0;\n    let groupCount = 0;\n\n    // allow single and array values for \"shapes\" parameter\n\n    if (Array.isArray(shapes) === false) {\n      addShape(shapes);\n    } else {\n      for (let i = 0; i < shapes.length; i++) {\n        addShape(shapes[i]);\n        this.addGroup(groupStart, groupCount, i); // enables MultiMaterial support\n\n        groupStart += groupCount;\n        groupCount = 0;\n      }\n    }\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n    // helper functions\n\n    function addShape(shape) {\n      const indexOffset = vertices.length / 3;\n      const points = shape.extractPoints(curveSegments);\n      let shapeVertices = points.shape;\n      const shapeHoles = points.holes;\n\n      // check direction of vertices\n\n      if (ShapeUtils.isClockWise(shapeVertices) === false) {\n        shapeVertices = shapeVertices.reverse();\n      }\n      for (let i = 0, l = shapeHoles.length; i < l; i++) {\n        const shapeHole = shapeHoles[i];\n        if (ShapeUtils.isClockWise(shapeHole) === true) {\n          shapeHoles[i] = shapeHole.reverse();\n        }\n      }\n      const faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles);\n\n      // join vertices of inner and outer paths to a single array\n\n      for (let i = 0, l = shapeHoles.length; i < l; i++) {\n        const shapeHole = shapeHoles[i];\n        shapeVertices = shapeVertices.concat(shapeHole);\n      }\n\n      // vertices, normals, uvs\n\n      for (let i = 0, l = shapeVertices.length; i < l; i++) {\n        const vertex = shapeVertices[i];\n        vertices.push(vertex.x, vertex.y, 0);\n        normals.push(0, 0, 1);\n        uvs.push(vertex.x, vertex.y); // world uvs\n      }\n\n      // indices\n\n      for (let i = 0, l = faces.length; i < l; i++) {\n        const face = faces[i];\n        const a = face[0] + indexOffset;\n        const b = face[1] + indexOffset;\n        const c = face[2] + indexOffset;\n        indices.push(a, b, c);\n        groupCount += 3;\n      }\n    }\n  }\n  copy(source) {\n    super.copy(source);\n    this.parameters = Object.assign({}, source.parameters);\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    const shapes = this.parameters.shapes;\n    return toJSON(shapes, data);\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @param {Array<Shape>} shapes - An array of shapes.\n   * @return {ShapeGeometry} A new instance.\n   */\n  static fromJSON(data, shapes) {\n    const geometryShapes = [];\n    for (let j = 0, jl = data.shapes.length; j < jl; j++) {\n      const shape = shapes[data.shapes[j]];\n      geometryShapes.push(shape);\n    }\n    return new ShapeGeometry(geometryShapes, data.curveSegments);\n  }\n}\nfunction toJSON(shapes, data) {\n  data.shapes = [];\n  if (Array.isArray(shapes)) {\n    for (let i = 0, l = shapes.length; i < l; i++) {\n      const shape = shapes[i];\n      data.shapes.push(shape.uuid);\n    }\n  } else {\n    data.shapes.push(shapes.uuid);\n  }\n  return data;\n}\n\n/**\n * A class for generating a sphere geometry.\n *\n * ```js\n * const geometry = new THREE.SphereGeometry( 15, 32, 16 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const sphere = new THREE.Mesh( geometry, material );\n * scene.add( sphere );\n * ```\n *\n * @augments BufferGeometry\n */\nclass SphereGeometry extends BufferGeometry {\n  /**\n   * Constructs a new sphere geometry.\n   *\n   * @param {number} [radius=1] - The sphere radius.\n   * @param {number} [widthSegments=32] - The number of horizontal segments. Minimum value is `3`.\n   * @param {number} [heightSegments=16] - The number of vertical segments. Minimum value is `2`.\n   * @param {number} [phiStart=0] - The horizontal starting angle in radians.\n   * @param {number} [phiLength=Math.PI*2] - The horizontal sweep angle size.\n   * @param {number} [thetaStart=0] - The vertical starting angle in radians.\n   * @param {number} [thetaLength=Math.PI] - The vertical sweep angle size.\n   */\n  constructor() {\n    let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let widthSegments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 32;\n    let heightSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 16;\n    let phiStart = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    let phiLength = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Math.PI * 2;\n    let thetaStart = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    let thetaLength = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : Math.PI;\n    super();\n    this.type = 'SphereGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      radius: radius,\n      widthSegments: widthSegments,\n      heightSegments: heightSegments,\n      phiStart: phiStart,\n      phiLength: phiLength,\n      thetaStart: thetaStart,\n      thetaLength: thetaLength\n    };\n    widthSegments = Math.max(3, Math.floor(widthSegments));\n    heightSegments = Math.max(2, Math.floor(heightSegments));\n    const thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);\n    let index = 0;\n    const grid = [];\n    const vertex = new Vector3();\n    const normal = new Vector3();\n\n    // buffers\n\n    const indices = [];\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n\n    // generate vertices, normals and uvs\n\n    for (let iy = 0; iy <= heightSegments; iy++) {\n      const verticesRow = [];\n      const v = iy / heightSegments;\n\n      // special case for the poles\n\n      let uOffset = 0;\n      if (iy === 0 && thetaStart === 0) {\n        uOffset = 0.5 / widthSegments;\n      } else if (iy === heightSegments && thetaEnd === Math.PI) {\n        uOffset = -0.5 / widthSegments;\n      }\n      for (let ix = 0; ix <= widthSegments; ix++) {\n        const u = ix / widthSegments;\n\n        // vertex\n\n        vertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n        vertex.y = radius * Math.cos(thetaStart + v * thetaLength);\n        vertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n        vertices.push(vertex.x, vertex.y, vertex.z);\n\n        // normal\n\n        normal.copy(vertex).normalize();\n        normals.push(normal.x, normal.y, normal.z);\n\n        // uv\n\n        uvs.push(u + uOffset, 1 - v);\n        verticesRow.push(index++);\n      }\n      grid.push(verticesRow);\n    }\n\n    // indices\n\n    for (let iy = 0; iy < heightSegments; iy++) {\n      for (let ix = 0; ix < widthSegments; ix++) {\n        const a = grid[iy][ix + 1];\n        const b = grid[iy][ix];\n        const c = grid[iy + 1][ix];\n        const d = grid[iy + 1][ix + 1];\n        if (iy !== 0 || thetaStart > 0) indices.push(a, b, d);\n        if (iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);\n      }\n    }\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n  }\n  copy(source) {\n    super.copy(source);\n    this.parameters = Object.assign({}, source.parameters);\n    return this;\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @return {SphereGeometry} A new instance.\n   */\n  static fromJSON(data) {\n    return new SphereGeometry(data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);\n  }\n}\n\n/**\n * A geometry class for representing an tetrahedron.\n *\n * ```js\n * const geometry = new THREE.TetrahedronGeometry();\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const tetrahedron = new THREE.Mesh( geometry, material );\n * scene.add( tetrahedron );\n * ```\n *\n * @augments PolyhedronGeometry\n */\nclass TetrahedronGeometry extends PolyhedronGeometry {\n  /**\n   * Constructs a new tetrahedron geometry.\n   *\n   * @param {number} [radius=1] - Radius of the tetrahedron.\n   * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a tetrahedron.\n   */\n  constructor() {\n    let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const vertices = [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1];\n    const indices = [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1];\n    super(vertices, indices, radius, detail);\n    this.type = 'TetrahedronGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      radius: radius,\n      detail: detail\n    };\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @return {TetrahedronGeometry} A new instance.\n   */\n  static fromJSON(data) {\n    return new TetrahedronGeometry(data.radius, data.detail);\n  }\n}\n\n/**\n * A geometry class for representing an torus.\n *\n * ```js\n * const geometry = new THREE.TorusGeometry( 10, 3, 16, 100 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const torus = new THREE.Mesh( geometry, material );\n * scene.add( torus );\n * ```\n *\n * @augments BufferGeometry\n */\nclass TorusGeometry extends BufferGeometry {\n  /**\n   * Constructs a new torus geometry.\n   *\n   * @param {number} [radius=1] - Radius of the torus, from the center of the torus to the center of the tube.\n   * @param {number} [tube=0.4] - Radius of the tube. Must be smaller than `radius`.\n   * @param {number} [radialSegments=12] - The number of radial segments.\n   * @param {number} [tubularSegments=48] - The number of tubular segments.\n   * @param {number} [arc=Math.PI*2] - Central angle in radians.\n   */\n  constructor() {\n    let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let tube = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.4;\n    let radialSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 12;\n    let tubularSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 48;\n    let arc = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Math.PI * 2;\n    super();\n    this.type = 'TorusGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      radius: radius,\n      tube: tube,\n      radialSegments: radialSegments,\n      tubularSegments: tubularSegments,\n      arc: arc\n    };\n    radialSegments = Math.floor(radialSegments);\n    tubularSegments = Math.floor(tubularSegments);\n\n    // buffers\n\n    const indices = [];\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n\n    // helper variables\n\n    const center = new Vector3();\n    const vertex = new Vector3();\n    const normal = new Vector3();\n\n    // generate vertices, normals and uvs\n\n    for (let j = 0; j <= radialSegments; j++) {\n      for (let i = 0; i <= tubularSegments; i++) {\n        const u = i / tubularSegments * arc;\n        const v = j / radialSegments * Math.PI * 2;\n\n        // vertex\n\n        vertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);\n        vertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);\n        vertex.z = tube * Math.sin(v);\n        vertices.push(vertex.x, vertex.y, vertex.z);\n\n        // normal\n\n        center.x = radius * Math.cos(u);\n        center.y = radius * Math.sin(u);\n        normal.subVectors(vertex, center).normalize();\n        normals.push(normal.x, normal.y, normal.z);\n\n        // uv\n\n        uvs.push(i / tubularSegments);\n        uvs.push(j / radialSegments);\n      }\n    }\n\n    // generate indices\n\n    for (let j = 1; j <= radialSegments; j++) {\n      for (let i = 1; i <= tubularSegments; i++) {\n        // indices\n\n        const a = (tubularSegments + 1) * j + i - 1;\n        const b = (tubularSegments + 1) * (j - 1) + i - 1;\n        const c = (tubularSegments + 1) * (j - 1) + i;\n        const d = (tubularSegments + 1) * j + i;\n\n        // faces\n\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    }\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n  }\n  copy(source) {\n    super.copy(source);\n    this.parameters = Object.assign({}, source.parameters);\n    return this;\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @return {TorusGeometry} A new instance.\n   */\n  static fromJSON(data) {\n    return new TorusGeometry(data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);\n  }\n}\n\n/**\n * Creates a torus knot, the particular shape of which is defined by a pair\n * of coprime integers, p and q. If p and q are not coprime, the result will\n * be a torus link.\n *\n * ```js\n * const geometry = new THREE.TorusKnotGeometry( 10, 3, 100, 16 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const torusKnot = new THREE.Mesh( geometry, material );\n * scene.add( torusKnot );\n * ```\n *\n * @augments BufferGeometry\n */\nclass TorusKnotGeometry extends BufferGeometry {\n  /**\n   * Constructs a new torus knot geometry.\n   *\n   * @param {number} [radius=1] - Radius of the torus knot.\n   * @param {number} [tube=0.4] - Radius of the tube.\n   * @param {number} [tubularSegments=64] - The number of tubular segments.\n   * @param {number} [radialSegments=8] - The number of radial segments.\n   * @param {number} [p=2] - This value determines, how many times the geometry winds around its axis of rotational symmetry.\n   * @param {number} [q=3] - This value determines, how many times the geometry winds around a circle in the interior of the torus.\n   */\n  constructor() {\n    let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let tube = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.4;\n    let tubularSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 64;\n    let radialSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;\n    let p = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 2;\n    let q = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 3;\n    super();\n    this.type = 'TorusKnotGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      radius: radius,\n      tube: tube,\n      tubularSegments: tubularSegments,\n      radialSegments: radialSegments,\n      p: p,\n      q: q\n    };\n    tubularSegments = Math.floor(tubularSegments);\n    radialSegments = Math.floor(radialSegments);\n\n    // buffers\n\n    const indices = [];\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n\n    // helper variables\n\n    const vertex = new Vector3();\n    const normal = new Vector3();\n    const P1 = new Vector3();\n    const P2 = new Vector3();\n    const B = new Vector3();\n    const T = new Vector3();\n    const N = new Vector3();\n\n    // generate vertices, normals and uvs\n\n    for (let i = 0; i <= tubularSegments; ++i) {\n      // the radian \"u\" is used to calculate the position on the torus curve of the current tubular segment\n\n      const u = i / tubularSegments * p * Math.PI * 2;\n\n      // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n      // these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n      calculatePositionOnCurve(u, p, q, radius, P1);\n      calculatePositionOnCurve(u + 0.01, p, q, radius, P2);\n\n      // calculate orthonormal basis\n\n      T.subVectors(P2, P1);\n      N.addVectors(P2, P1);\n      B.crossVectors(T, N);\n      N.crossVectors(B, T);\n\n      // normalize B, N. T can be ignored, we don't use it\n\n      B.normalize();\n      N.normalize();\n      for (let j = 0; j <= radialSegments; ++j) {\n        // now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n        // because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n        const v = j / radialSegments * Math.PI * 2;\n        const cx = -tube * Math.cos(v);\n        const cy = tube * Math.sin(v);\n\n        // now calculate the final vertex position.\n        // first we orient the extrusion with our basis vectors, then we add it to the current position on the curve\n\n        vertex.x = P1.x + (cx * N.x + cy * B.x);\n        vertex.y = P1.y + (cx * N.y + cy * B.y);\n        vertex.z = P1.z + (cx * N.z + cy * B.z);\n        vertices.push(vertex.x, vertex.y, vertex.z);\n\n        // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n        normal.subVectors(vertex, P1).normalize();\n        normals.push(normal.x, normal.y, normal.z);\n\n        // uv\n\n        uvs.push(i / tubularSegments);\n        uvs.push(j / radialSegments);\n      }\n    }\n\n    // generate indices\n\n    for (let j = 1; j <= tubularSegments; j++) {\n      for (let i = 1; i <= radialSegments; i++) {\n        // indices\n\n        const a = (radialSegments + 1) * (j - 1) + (i - 1);\n        const b = (radialSegments + 1) * j + (i - 1);\n        const c = (radialSegments + 1) * j + i;\n        const d = (radialSegments + 1) * (j - 1) + i;\n\n        // faces\n\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    }\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n    // this function calculates the current position on the torus curve\n\n    function calculatePositionOnCurve(u, p, q, radius, position) {\n      const cu = Math.cos(u);\n      const su = Math.sin(u);\n      const quOverP = q / p * u;\n      const cs = Math.cos(quOverP);\n      position.x = radius * (2 + cs) * 0.5 * cu;\n      position.y = radius * (2 + cs) * su * 0.5;\n      position.z = radius * Math.sin(quOverP) * 0.5;\n    }\n  }\n  copy(source) {\n    super.copy(source);\n    this.parameters = Object.assign({}, source.parameters);\n    return this;\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @return {TorusKnotGeometry} A new instance.\n   */\n  static fromJSON(data) {\n    return new TorusKnotGeometry(data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);\n  }\n}\n\n/**\n * Creates a tube that extrudes along a 3D curve.\n *\n * ```js\n * class CustomSinCurve extends THREE.Curve {\n *\n * \tgetPoint( t, optionalTarget = new THREE.Vector3() ) {\n *\n * \t\tconst tx = t * 3 - 1.5;\n * \t\tconst ty = Math.sin( 2 * Math.PI * t );\n * \t\tconst tz = 0;\n *\n * \t\treturn optionalTarget.set( tx, ty, tz );\n * \t}\n *\n * }\n *\n * const path = new CustomSinCurve( 10 );\n * const geometry = new THREE.TubeGeometry( path, 20, 2, 8, false );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n * const mesh = new THREE.Mesh( geometry, material );\n * scene.add( mesh );\n * ```\n *\n * @augments BufferGeometry\n */\nclass TubeGeometry extends BufferGeometry {\n  /**\n   * Constructs a new tube geometry.\n   *\n   * @param {Curve} [path=QuadraticBezierCurve3] - A 3D curve defining the path of the tube.\n   * @param {number} [tubularSegments=64] - The number of segments that make up the tube.\n   * @param {number} [radius=1] -The radius of the tube.\n   * @param {number} [radialSegments=8] - The number of segments that make up the cross-section.\n   * @param {boolean} [closed=false] - Whether the tube is closed or not.\n   */\n  constructor() {\n    let path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new QuadraticBezierCurve3(new Vector3(-1, -1, 0), new Vector3(-1, 1, 0), new Vector3(1, 1, 0));\n    let tubularSegments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 64;\n    let radius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let radialSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;\n    let closed = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    super();\n    this.type = 'TubeGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      path: path,\n      tubularSegments: tubularSegments,\n      radius: radius,\n      radialSegments: radialSegments,\n      closed: closed\n    };\n    const frames = path.computeFrenetFrames(tubularSegments, closed);\n\n    // expose internals\n\n    this.tangents = frames.tangents;\n    this.normals = frames.normals;\n    this.binormals = frames.binormals;\n\n    // helper variables\n\n    const vertex = new Vector3();\n    const normal = new Vector3();\n    const uv = new Vector2();\n    let P = new Vector3();\n\n    // buffer\n\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n    const indices = [];\n\n    // create buffer data\n\n    generateBufferData();\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n    // functions\n\n    function generateBufferData() {\n      for (let i = 0; i < tubularSegments; i++) {\n        generateSegment(i);\n      }\n\n      // if the geometry is not closed, generate the last row of vertices and normals\n      // at the regular position on the given path\n      //\n      // if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n      generateSegment(closed === false ? tubularSegments : 0);\n\n      // uvs are generated in a separate function.\n      // this makes it easy compute correct values for closed geometries\n\n      generateUVs();\n\n      // finally create faces\n\n      generateIndices();\n    }\n    function generateSegment(i) {\n      // we use getPointAt to sample evenly distributed points from the given path\n\n      P = path.getPointAt(i / tubularSegments, P);\n\n      // retrieve corresponding normal and binormal\n\n      const N = frames.normals[i];\n      const B = frames.binormals[i];\n\n      // generate normals and vertices for the current segment\n\n      for (let j = 0; j <= radialSegments; j++) {\n        const v = j / radialSegments * Math.PI * 2;\n        const sin = Math.sin(v);\n        const cos = -Math.cos(v);\n\n        // normal\n\n        normal.x = cos * N.x + sin * B.x;\n        normal.y = cos * N.y + sin * B.y;\n        normal.z = cos * N.z + sin * B.z;\n        normal.normalize();\n        normals.push(normal.x, normal.y, normal.z);\n\n        // vertex\n\n        vertex.x = P.x + radius * normal.x;\n        vertex.y = P.y + radius * normal.y;\n        vertex.z = P.z + radius * normal.z;\n        vertices.push(vertex.x, vertex.y, vertex.z);\n      }\n    }\n    function generateIndices() {\n      for (let j = 1; j <= tubularSegments; j++) {\n        for (let i = 1; i <= radialSegments; i++) {\n          const a = (radialSegments + 1) * (j - 1) + (i - 1);\n          const b = (radialSegments + 1) * j + (i - 1);\n          const c = (radialSegments + 1) * j + i;\n          const d = (radialSegments + 1) * (j - 1) + i;\n\n          // faces\n\n          indices.push(a, b, d);\n          indices.push(b, c, d);\n        }\n      }\n    }\n    function generateUVs() {\n      for (let i = 0; i <= tubularSegments; i++) {\n        for (let j = 0; j <= radialSegments; j++) {\n          uv.x = i / tubularSegments;\n          uv.y = j / radialSegments;\n          uvs.push(uv.x, uv.y);\n        }\n      }\n    }\n  }\n  copy(source) {\n    super.copy(source);\n    this.parameters = Object.assign({}, source.parameters);\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    data.path = this.parameters.path.toJSON();\n    return data;\n  }\n\n  /**\n   * Factory method for creating an instance of this class from the given\n   * JSON object.\n   *\n   * @param {Object} data - A JSON object representing the serialized geometry.\n   * @return {TubeGeometry} A new instance.\n   */\n  static fromJSON(data) {\n    // This only works for built-in curves (e.g. CatmullRomCurve3).\n    // User defined curves or instances of CurvePath will not be deserialized.\n    return new TubeGeometry(new Curves[data.path.type]().fromJSON(data.path), data.tubularSegments, data.radius, data.radialSegments, data.closed);\n  }\n}\n\n/**\n * Can be used as a helper object to visualize a geometry as a wireframe.\n *\n * ```js\n * const geometry = new THREE.SphereGeometry();\n *\n * const wireframe = new THREE.WireframeGeometry( geometry );\n *\n * const line = new THREE.LineSegments( wireframe );\n * line.material.depthWrite = false;\n * line.material.opacity = 0.25;\n * line.material.transparent = true;\n *\n * scene.add( line );\n * ```\n *\n * Note: It is not yet possible to serialize/deserialize instances of this class.\n *\n * @augments BufferGeometry\n */\nclass WireframeGeometry extends BufferGeometry {\n  /**\n   * Constructs a new wireframe geometry.\n   *\n   * @param {?BufferGeometry} [geometry=null] - The geometry.\n   */\n  constructor() {\n    let geometry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    super();\n    this.type = 'WireframeGeometry';\n\n    /**\n     * Holds the constructor parameters that have been\n     * used to generate the geometry. Any modification\n     * after instantiation does not change the geometry.\n     *\n     * @type {Object}\n     */\n    this.parameters = {\n      geometry: geometry\n    };\n    if (geometry !== null) {\n      // buffer\n\n      const vertices = [];\n      const edges = new Set();\n\n      // helper variables\n\n      const start = new Vector3();\n      const end = new Vector3();\n      if (geometry.index !== null) {\n        // indexed BufferGeometry\n\n        const position = geometry.attributes.position;\n        const indices = geometry.index;\n        let groups = geometry.groups;\n        if (groups.length === 0) {\n          groups = [{\n            start: 0,\n            count: indices.count,\n            materialIndex: 0\n          }];\n        }\n\n        // create a data structure that contains all edges without duplicates\n\n        for (let o = 0, ol = groups.length; o < ol; ++o) {\n          const group = groups[o];\n          const groupStart = group.start;\n          const groupCount = group.count;\n          for (let i = groupStart, l = groupStart + groupCount; i < l; i += 3) {\n            for (let j = 0; j < 3; j++) {\n              const index1 = indices.getX(i + j);\n              const index2 = indices.getX(i + (j + 1) % 3);\n              start.fromBufferAttribute(position, index1);\n              end.fromBufferAttribute(position, index2);\n              if (isUniqueEdge(start, end, edges) === true) {\n                vertices.push(start.x, start.y, start.z);\n                vertices.push(end.x, end.y, end.z);\n              }\n            }\n          }\n        }\n      } else {\n        // non-indexed BufferGeometry\n\n        const position = geometry.attributes.position;\n        for (let i = 0, l = position.count / 3; i < l; i++) {\n          for (let j = 0; j < 3; j++) {\n            // three edges per triangle, an edge is represented as (index1, index2)\n            // e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\n            const index1 = 3 * i + j;\n            const index2 = 3 * i + (j + 1) % 3;\n            start.fromBufferAttribute(position, index1);\n            end.fromBufferAttribute(position, index2);\n            if (isUniqueEdge(start, end, edges) === true) {\n              vertices.push(start.x, start.y, start.z);\n              vertices.push(end.x, end.y, end.z);\n            }\n          }\n        }\n      }\n\n      // build geometry\n\n      this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    }\n  }\n  copy(source) {\n    super.copy(source);\n    this.parameters = Object.assign({}, source.parameters);\n    return this;\n  }\n}\nfunction isUniqueEdge(start, end, edges) {\n  const hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;\n  const hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`; // coincident edge\n\n  if (edges.has(hash1) === true || edges.has(hash2) === true) {\n    return false;\n  } else {\n    edges.add(hash1);\n    edges.add(hash2);\n    return true;\n  }\n}\nvar Geometries = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  BoxGeometry: BoxGeometry,\n  CapsuleGeometry: CapsuleGeometry,\n  CircleGeometry: CircleGeometry,\n  ConeGeometry: ConeGeometry,\n  CylinderGeometry: CylinderGeometry,\n  DodecahedronGeometry: DodecahedronGeometry,\n  EdgesGeometry: EdgesGeometry,\n  ExtrudeGeometry: ExtrudeGeometry,\n  IcosahedronGeometry: IcosahedronGeometry,\n  LatheGeometry: LatheGeometry,\n  OctahedronGeometry: OctahedronGeometry,\n  PlaneGeometry: PlaneGeometry,\n  PolyhedronGeometry: PolyhedronGeometry,\n  RingGeometry: RingGeometry,\n  ShapeGeometry: ShapeGeometry,\n  SphereGeometry: SphereGeometry,\n  TetrahedronGeometry: TetrahedronGeometry,\n  TorusGeometry: TorusGeometry,\n  TorusKnotGeometry: TorusKnotGeometry,\n  TubeGeometry: TubeGeometry,\n  WireframeGeometry: WireframeGeometry\n});\n\n/**\n * This material can receive shadows, but otherwise is completely transparent.\n *\n * ```js\n * const geometry = new THREE.PlaneGeometry( 2000, 2000 );\n * geometry.rotateX( - Math.PI / 2 );\n *\n * const material = new THREE.ShadowMaterial();\n * material.opacity = 0.2;\n *\n * const plane = new THREE.Mesh( geometry, material );\n * plane.position.y = -200;\n * plane.receiveShadow = true;\n * scene.add( plane );\n * ```\n *\n * @augments Material\n */\nclass ShadowMaterial extends Material {\n  /**\n   * Constructs a new shadow material.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isShadowMaterial = true;\n    this.type = 'ShadowMaterial';\n\n    /**\n     * Color of the material.\n     *\n     * @type {Color}\n     * @default (0,0,0)\n     */\n    this.color = new Color(0x000000);\n\n    /**\n     * Overwritten since shadow materials are transparent\n     * by default.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.transparent = true;\n\n    /**\n     * Whether the material is affected by fog or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.fog = true;\n    this.setValues(parameters);\n  }\n  copy(source) {\n    super.copy(source);\n    this.color.copy(source.color);\n    this.fog = source.fog;\n    return this;\n  }\n}\n\n/**\n * This class works just like {@link ShaderMaterial}, except that definitions\n * of built-in uniforms and attributes are not automatically prepended to the\n * GLSL shader code.\n *\n * `RawShaderMaterial` can only be used with {@link WebGLRenderer}.\n *\n * @augments ShaderMaterial\n */\nclass RawShaderMaterial extends ShaderMaterial {\n  /**\n   * Constructs a new raw shader material.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super(parameters);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isRawShaderMaterial = true;\n    this.type = 'RawShaderMaterial';\n  }\n}\n\n/**\n * A standard physically based material, using Metallic-Roughness workflow.\n *\n * Physically based rendering (PBR) has recently become the standard in many\n * 3D applications, such as [Unity]{@link https://blogs.unity3d.com/2014/10/29/physically-based-shading-in-unity-5-a-primer/},\n * [Unreal]{@link https://docs.unrealengine.com/latest/INT/Engine/Rendering/Materials/PhysicallyBased/} and\n * [3D Studio Max]{@link http://area.autodesk.com/blogs/the-3ds-max-blog/what039s-new-for-rendering-in-3ds-max-2017}.\n *\n * This approach differs from older approaches in that instead of using\n * approximations for the way in which light interacts with a surface, a\n * physically correct model is used. The idea is that, instead of tweaking\n * materials to look good under specific lighting, a material can be created\n * that will react 'correctly' under all lighting scenarios.\n *\n * In practice this gives a more accurate and realistic looking result than\n * the {@link MeshLambertMaterial} or {@link MeshPhongMaterial}, at the cost of\n * being somewhat more computationally expensive. `MeshStandardMaterial` uses per-fragment\n * shading.\n *\n * Note that for best results you should always specify an environment map when using this material.\n *\n * For a non-technical introduction to the concept of PBR and how to set up a\n * PBR material, check out these articles by the people at [marmoset]{@link https://www.marmoset.co}:\n *\n * - [Basic Theory of Physically Based Rendering]{@link https://www.marmoset.co/posts/basic-theory-of-physically-based-rendering/}\n * - [Physically Based Rendering and You Can Too]{@link https://www.marmoset.co/posts/physically-based-rendering-and-you-can-too/}\n *\n * Technical details of the approach used in three.js (and most other PBR systems) can be found is this\n * [paper from Disney]{@link https://media.disneyanimation.com/uploads/production/publication_asset/48/asset/s2012_pbs_disney_brdf_notes_v3.pdf}\n * (pdf), by Brent Burley.\n *\n * @augments Material\n */\nclass MeshStandardMaterial extends Material {\n  /**\n   * Constructs a new mesh standard material.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isMeshStandardMaterial = true;\n    this.type = 'MeshStandardMaterial';\n    this.defines = {\n      'STANDARD': ''\n    };\n\n    /**\n     * Color of the material.\n     *\n     * @type {Color}\n     * @default (1,1,1)\n     */\n    this.color = new Color(0xffffff); // diffuse\n\n    /**\n     * How rough the material appears. `0.0` means a smooth mirror reflection, `1.0`\n     * means fully diffuse. If `roughnessMap` is also provided,\n     * both values are multiplied.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.roughness = 1.0;\n\n    /**\n     * How much the material is like a metal. Non-metallic materials such as wood\n     * or stone use `0.0`, metallic use `1.0`, with nothing (usually) in between.\n     * A value between `0.0` and `1.0` could be used for a rusty metal look.\n     * If `metalnessMap` is also provided, both values are multiplied.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.metalness = 0.0;\n\n    /**\n     * The color map. May optionally include an alpha channel, typically combined\n     * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n     * color is modulated by the diffuse `color`.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.map = null;\n\n    /**\n     * The light map. Requires a second set of UVs.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.lightMap = null;\n\n    /**\n     * Intensity of the baked light.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.lightMapIntensity = 1.0;\n\n    /**\n     * The red channel of this texture is used as the ambient occlusion map.\n     * Requires a second set of UVs.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.aoMap = null;\n\n    /**\n     * Intensity of the ambient occlusion effect. Range is `[0,1]`, where `0`\n     * disables ambient occlusion. Where intensity is `1` and the AO map's\n     * red channel is also `1`, ambient light is fully occluded on a surface.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.aoMapIntensity = 1.0;\n\n    /**\n     * Emissive (light) color of the material, essentially a solid color\n     * unaffected by other lighting.\n     *\n     * @type {Color}\n     * @default (0,0,0)\n     */\n    this.emissive = new Color(0x000000);\n\n    /**\n     * Intensity of the emissive light. Modulates the emissive color.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.emissiveIntensity = 1.0;\n\n    /**\n     * Set emissive (glow) map. The emissive map color is modulated by the\n     * emissive color and the emissive intensity. If you have an emissive map,\n     * be sure to set the emissive color to something other than black.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.emissiveMap = null;\n\n    /**\n     * The texture to create a bump map. The black and white values map to the\n     * perceived depth in relation to the lights. Bump doesn't actually affect\n     * the geometry of the object, only the lighting. If a normal map is defined\n     * this will be ignored.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.bumpMap = null;\n\n    /**\n     * How much the bump map affects the material. Typical range is `[0,1]`.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.bumpScale = 1;\n\n    /**\n     * The texture to create a normal map. The RGB values affect the surface\n     * normal for each pixel fragment and change the way the color is lit. Normal\n     * maps do not change the actual shape of the surface, only the lighting. In\n     * case the material has a normal map authored using the left handed\n     * convention, the `y` component of `normalScale` should be negated to compensate\n     * for the different handedness.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.normalMap = null;\n\n    /**\n     * The type of normal map.\n     *\n     * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}\n     * @default TangentSpaceNormalMap\n     */\n    this.normalMapType = TangentSpaceNormalMap;\n\n    /**\n     * How much the normal map affects the material. Typical value range is `[0,1]`.\n     *\n     * @type {Vector2}\n     * @default (1,1)\n     */\n    this.normalScale = new Vector2(1, 1);\n\n    /**\n     * The displacement map affects the position of the mesh's vertices. Unlike\n     * other maps which only affect the light and shade of the material the\n     * displaced vertices can cast shadows, block other objects, and otherwise\n     * act as real geometry. The displacement texture is an image where the value\n     * of each pixel (white being the highest) is mapped against, and\n     * repositions, the vertices of the mesh.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.displacementMap = null;\n\n    /**\n     * How much the displacement map affects the mesh (where black is no\n     * displacement, and white is maximum displacement). Without a displacement\n     * map set, this value is not applied.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.displacementScale = 1;\n\n    /**\n     * The offset of the displacement map's values on the mesh's vertices.\n     * The bias is added to the scaled sample of the displacement map.\n     * Without a displacement map set, this value is not applied.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.displacementBias = 0;\n\n    /**\n     * The green channel of this texture is used to alter the roughness of the\n     * material.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.roughnessMap = null;\n\n    /**\n     * The blue channel of this texture is used to alter the metalness of the\n     * material.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.metalnessMap = null;\n\n    /**\n     * The alpha map is a grayscale texture that controls the opacity across the\n     * surface (black: fully transparent; white: fully opaque).\n     *\n     * Only the color of the texture is used, ignoring the alpha channel if one\n     * exists. For RGB and RGBA textures, the renderer will use the green channel\n     * when sampling this texture due to the extra bit of precision provided for\n     * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n     * luminance/alpha textures will also still work as expected.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.alphaMap = null;\n\n    /**\n     * The environment map. To ensure a physically correct rendering, environment maps\n     * are internally pre-processed with {@link PMREMGenerator}.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.envMap = null;\n\n    /**\n     * The rotation of the environment map in radians.\n     *\n     * @type {Euler}\n     * @default (0,0,0)\n     */\n    this.envMapRotation = new Euler();\n\n    /**\n     * Scales the effect of the environment map by multiplying its color.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.envMapIntensity = 1.0;\n\n    /**\n     * Renders the geometry as a wireframe.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.wireframe = false;\n\n    /**\n     * Controls the thickness of the wireframe.\n     *\n     * Can only be used with {@link SVGRenderer}.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.wireframeLinewidth = 1;\n\n    /**\n     * Defines appearance of wireframe ends.\n     *\n     * Can only be used with {@link SVGRenderer}.\n     *\n     * @type {('round'|'bevel'|'miter')}\n     * @default 'round'\n     */\n    this.wireframeLinecap = 'round';\n\n    /**\n     * Defines appearance of wireframe joints.\n     *\n     * Can only be used with {@link SVGRenderer}.\n     *\n     * @type {('round'|'bevel'|'miter')}\n     * @default 'round'\n     */\n    this.wireframeLinejoin = 'round';\n\n    /**\n     * Whether the material is rendered with flat shading or not.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.flatShading = false;\n\n    /**\n     * Whether the material is affected by fog or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.fog = true;\n    this.setValues(parameters);\n  }\n  copy(source) {\n    super.copy(source);\n    this.defines = {\n      'STANDARD': ''\n    };\n    this.color.copy(source.color);\n    this.roughness = source.roughness;\n    this.metalness = source.metalness;\n    this.map = source.map;\n    this.lightMap = source.lightMap;\n    this.lightMapIntensity = source.lightMapIntensity;\n    this.aoMap = source.aoMap;\n    this.aoMapIntensity = source.aoMapIntensity;\n    this.emissive.copy(source.emissive);\n    this.emissiveMap = source.emissiveMap;\n    this.emissiveIntensity = source.emissiveIntensity;\n    this.bumpMap = source.bumpMap;\n    this.bumpScale = source.bumpScale;\n    this.normalMap = source.normalMap;\n    this.normalMapType = source.normalMapType;\n    this.normalScale.copy(source.normalScale);\n    this.displacementMap = source.displacementMap;\n    this.displacementScale = source.displacementScale;\n    this.displacementBias = source.displacementBias;\n    this.roughnessMap = source.roughnessMap;\n    this.metalnessMap = source.metalnessMap;\n    this.alphaMap = source.alphaMap;\n    this.envMap = source.envMap;\n    this.envMapRotation.copy(source.envMapRotation);\n    this.envMapIntensity = source.envMapIntensity;\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    this.wireframeLinecap = source.wireframeLinecap;\n    this.wireframeLinejoin = source.wireframeLinejoin;\n    this.flatShading = source.flatShading;\n    this.fog = source.fog;\n    return this;\n  }\n}\n\n/**\n * An extension of the {@link MeshStandardMaterial}, providing more advanced\n * physically-based rendering properties:\n *\n * - Anisotropy: Ability to represent the anisotropic property of materials\n * as observable with brushed metals.\n * - Clearcoat: Some materials — like car paints, carbon fiber, and wet surfaces — require\n * a clear, reflective layer on top of another layer that may be irregular or rough.\n * Clearcoat approximates this effect, without the need for a separate transparent surface.\n * - Iridescence: Allows to render the effect where hue varies  depending on the viewing\n * angle and illumination angle. This can be seen on soap bubbles, oil films, or on the\n * wings of many insects.\n * - Physically-based transparency: One limitation of {@link Material#opacity} is that highly\n * transparent materials are less reflective. Physically-based transmission provides a more\n * realistic option for thin, transparent surfaces like glass.\n * - Advanced reflectivity: More flexible reflectivity for non-metallic materials.\n * - Sheen: Can be used for representing cloth and fabric materials.\n *\n * As a result of these complex shading features, `MeshPhysicalMaterial` has a\n * higher performance cost, per pixel, than other three.js materials. Most\n * effects are disabled by default, and add cost as they are enabled. For\n * best results, always specify an environment map when using this material.\n *\n * @augments MeshStandardMaterial\n */\nclass MeshPhysicalMaterial extends MeshStandardMaterial {\n  /**\n   * Constructs a new mesh physical material.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isMeshPhysicalMaterial = true;\n    this.defines = {\n      'STANDARD': '',\n      'PHYSICAL': ''\n    };\n    this.type = 'MeshPhysicalMaterial';\n\n    /**\n     * The rotation of the anisotropy in tangent, bitangent space, measured in radians\n     * counter-clockwise from the tangent. When `anisotropyMap` is present, this\n     * property provides additional rotation to the vectors in the texture.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.anisotropyRotation = 0;\n\n    /**\n     * Red and green channels represent the anisotropy direction in `[-1, 1]` tangent,\n     * bitangent space, to be rotated by `anisotropyRotation`. The blue channel\n     * contains strength as `[0, 1]` to be multiplied by `anisotropy`.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.anisotropyMap = null;\n\n    /**\n     * The red channel of this texture is multiplied against `clearcoat`,\n     * for per-pixel control over a coating's intensity.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.clearcoatMap = null;\n\n    /**\n     * Roughness of the clear coat layer, from `0.0` to `1.0`.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.clearcoatRoughness = 0.0;\n\n    /**\n     * The green channel of this texture is multiplied against\n     * `clearcoatRoughness`, for per-pixel control over a coating's roughness.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.clearcoatRoughnessMap = null;\n\n    /**\n     * How much `clearcoatNormalMap` affects the clear coat layer, from\n     * `(0,0)` to `(1,1)`.\n     *\n     * @type {Vector2}\n     * @default (1,1)\n     */\n    this.clearcoatNormalScale = new Vector2(1, 1);\n\n    /**\n     * Can be used to enable independent normals for the clear coat layer.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.clearcoatNormalMap = null;\n\n    /**\n     * Index-of-refraction for non-metallic materials, from `1.0` to `2.333`.\n     *\n     * @type {number}\n     * @default 1.5\n     */\n    this.ior = 1.5;\n\n    /**\n     * Degree of reflectivity, from `0.0` to `1.0`. Default is `0.5`, which\n     * corresponds to an index-of-refraction of `1.5`.\n     *\n     * This models the reflectivity of non-metallic materials. It has no effect\n     * when `metalness` is `1.0`\n     *\n     * @name MeshPhysicalMaterial#reflectivity\n     * @type {number}\n     * @default 0.5\n     */\n    Object.defineProperty(this, 'reflectivity', {\n      get: function () {\n        return clamp(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);\n      },\n      set: function (reflectivity) {\n        this.ior = (1 + 0.4 * reflectivity) / (1 - 0.4 * reflectivity);\n      }\n    });\n\n    /**\n     * The red channel of this texture is multiplied against `iridescence`, for per-pixel\n     * control over iridescence.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.iridescenceMap = null;\n\n    /**\n     * Strength of the iridescence RGB color shift effect, represented by an index-of-refraction.\n     * Between `1.0` to `2.333`.\n     *\n     * @type {number}\n     * @default 1.3\n     */\n    this.iridescenceIOR = 1.3;\n\n    /**\n     *Array of exactly 2 elements, specifying minimum and maximum thickness of the iridescence layer.\n     Thickness of iridescence layer has an equivalent effect of the one `thickness` has on `ior`.\n     *\n     * @type {Array<number,number>}\n     * @default [100,400]\n     */\n    this.iridescenceThicknessRange = [100, 400];\n\n    /**\n     * A texture that defines the thickness of the iridescence layer, stored in the green channel.\n     * Minimum and maximum values of thickness are defined by `iridescenceThicknessRange` array:\n     * - `0.0` in the green channel will result in thickness equal to first element of the array.\n     * - `1.0` in the green channel will result in thickness equal to second element of the array.\n     * - Values in-between will linearly interpolate between the elements of the array.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.iridescenceThicknessMap = null;\n\n    /**\n     * The sheen tint.\n     *\n     * @type {Color}\n     * @default (0,0,0)\n     */\n    this.sheenColor = new Color(0x000000);\n\n    /**\n     * The RGB channels of this texture are multiplied against  `sheenColor`, for per-pixel control\n     * over sheen tint.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.sheenColorMap = null;\n\n    /**\n     * Roughness of the sheen layer, from `0.0` to `1.0`.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.sheenRoughness = 1.0;\n\n    /**\n     * The alpha channel of this texture is multiplied against `sheenRoughness`, for per-pixel control\n     * over sheen roughness.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.sheenRoughnessMap = null;\n\n    /**\n     * The red channel of this texture is multiplied against `transmission`, for per-pixel control over\n     * optical transparency.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.transmissionMap = null;\n\n    /**\n     * The thickness of the volume beneath the surface. The value is given in the\n     * coordinate space of the mesh. If the value is `0` the material is\n     * thin-walled. Otherwise the material is a volume boundary.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.thickness = 0;\n\n    /**\n     * A texture that defines the thickness, stored in the green channel. This will\n     * be multiplied by `thickness`.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.thicknessMap = null;\n\n    /**\n     * Density of the medium given as the average distance that light travels in\n     * the medium before interacting with a particle. The value is given in world\n     * space units, and must be greater than zero.\n     *\n     * @type {number}\n     * @default Infinity\n     */\n    this.attenuationDistance = Infinity;\n\n    /**\n     * The color that white light turns into due to absorption when reaching the\n     * attenuation distance.\n     *\n     * @type {Color}\n     * @default (1,1,1)\n     */\n    this.attenuationColor = new Color(1, 1, 1);\n\n    /**\n     * A float that scales the amount of specular reflection for non-metals only.\n     * When set to zero, the model is effectively Lambertian. From `0.0` to `1.0`.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.specularIntensity = 1.0;\n\n    /**\n     * The alpha channel of this texture is multiplied against `specularIntensity`,\n     * for per-pixel control over specular intensity.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.specularIntensityMap = null;\n\n    /**\n     * Tints the specular reflection at normal incidence for non-metals only.\n     *\n     * @type {Color}\n     * @default (1,1,1)\n     */\n    this.specularColor = new Color(1, 1, 1);\n\n    /**\n     * The RGB channels of this texture are multiplied against `specularColor`,\n     * for per-pixel control over specular color.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.specularColorMap = null;\n    this._anisotropy = 0;\n    this._clearcoat = 0;\n    this._dispersion = 0;\n    this._iridescence = 0;\n    this._sheen = 0.0;\n    this._transmission = 0;\n    this.setValues(parameters);\n  }\n\n  /**\n   * The anisotropy strength.\n   *\n   * @type {number}\n   * @default 0\n   */\n  get anisotropy() {\n    return this._anisotropy;\n  }\n  set anisotropy(value) {\n    if (this._anisotropy > 0 !== value > 0) {\n      this.version++;\n    }\n    this._anisotropy = value;\n  }\n\n  /**\n   * Represents the intensity of the clear coat layer, from `0.0` to `1.0`. Use\n   * clear coat related properties to enable multilayer materials that have a\n   * thin translucent layer over the base layer.\n   *\n   * @type {number}\n   * @default 0\n   */\n  get clearcoat() {\n    return this._clearcoat;\n  }\n  set clearcoat(value) {\n    if (this._clearcoat > 0 !== value > 0) {\n      this.version++;\n    }\n    this._clearcoat = value;\n  }\n  /**\n   * The intensity of the iridescence layer, simulating RGB color shift based on the angle between\n   * the surface and the viewer, from `0.0` to `1.0`.\n   *\n   * @type {number}\n   * @default 0\n   */\n  get iridescence() {\n    return this._iridescence;\n  }\n  set iridescence(value) {\n    if (this._iridescence > 0 !== value > 0) {\n      this.version++;\n    }\n    this._iridescence = value;\n  }\n\n  /**\n   * Defines the strength of the angular separation of colors (chromatic aberration) transmitting\n   * through a relatively clear volume. Any value zero or larger is valid, the typical range of\n   * realistic values is `[0, 1]`. This property can be only be used with transmissive objects.\n   *\n   * @type {number}\n   * @default 0\n   */\n  get dispersion() {\n    return this._dispersion;\n  }\n  set dispersion(value) {\n    if (this._dispersion > 0 !== value > 0) {\n      this.version++;\n    }\n    this._dispersion = value;\n  }\n\n  /**\n   * The intensity of the sheen layer, from `0.0` to `1.0`.\n   *\n   * @type {number}\n   * @default 0\n   */\n  get sheen() {\n    return this._sheen;\n  }\n  set sheen(value) {\n    if (this._sheen > 0 !== value > 0) {\n      this.version++;\n    }\n    this._sheen = value;\n  }\n\n  /**\n   * Degree of transmission (or optical transparency), from `0.0` to `1.0`.\n   *\n   * Thin, transparent or semitransparent, plastic or glass materials remain\n   * largely reflective even if they are fully transmissive. The transmission\n   * property can be used to model these materials.\n   *\n   * When transmission is non-zero, `opacity` should be  set to `1`.\n   *\n   * @type {number}\n   * @default 0\n   */\n  get transmission() {\n    return this._transmission;\n  }\n  set transmission(value) {\n    if (this._transmission > 0 !== value > 0) {\n      this.version++;\n    }\n    this._transmission = value;\n  }\n  copy(source) {\n    super.copy(source);\n    this.defines = {\n      'STANDARD': '',\n      'PHYSICAL': ''\n    };\n    this.anisotropy = source.anisotropy;\n    this.anisotropyRotation = source.anisotropyRotation;\n    this.anisotropyMap = source.anisotropyMap;\n    this.clearcoat = source.clearcoat;\n    this.clearcoatMap = source.clearcoatMap;\n    this.clearcoatRoughness = source.clearcoatRoughness;\n    this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n    this.clearcoatNormalMap = source.clearcoatNormalMap;\n    this.clearcoatNormalScale.copy(source.clearcoatNormalScale);\n    this.dispersion = source.dispersion;\n    this.ior = source.ior;\n    this.iridescence = source.iridescence;\n    this.iridescenceMap = source.iridescenceMap;\n    this.iridescenceIOR = source.iridescenceIOR;\n    this.iridescenceThicknessRange = [...source.iridescenceThicknessRange];\n    this.iridescenceThicknessMap = source.iridescenceThicknessMap;\n    this.sheen = source.sheen;\n    this.sheenColor.copy(source.sheenColor);\n    this.sheenColorMap = source.sheenColorMap;\n    this.sheenRoughness = source.sheenRoughness;\n    this.sheenRoughnessMap = source.sheenRoughnessMap;\n    this.transmission = source.transmission;\n    this.transmissionMap = source.transmissionMap;\n    this.thickness = source.thickness;\n    this.thicknessMap = source.thicknessMap;\n    this.attenuationDistance = source.attenuationDistance;\n    this.attenuationColor.copy(source.attenuationColor);\n    this.specularIntensity = source.specularIntensity;\n    this.specularIntensityMap = source.specularIntensityMap;\n    this.specularColor.copy(source.specularColor);\n    this.specularColorMap = source.specularColorMap;\n    return this;\n  }\n}\n\n/**\n * A material for shiny surfaces with specular highlights.\n *\n * The material uses a non-physically based [Blinn-Phong]{@link https://en.wikipedia.org/wiki/Blinn-Phong_shading_model}\n * model for calculating reflectance. Unlike the Lambertian model used in the\n * {@link MeshLambertMaterial} this can simulate shiny surfaces with specular\n * highlights (such as varnished wood). `MeshPhongMaterial` uses per-fragment shading.\n *\n * Performance will generally be greater when using this material over the\n * {@link MeshStandardMaterial} or {@link MeshPhysicalMaterial}, at the cost of\n * some graphical accuracy.\n *\n * @augments Material\n */\nclass MeshPhongMaterial extends Material {\n  /**\n   * Constructs a new mesh phong material.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isMeshPhongMaterial = true;\n    this.type = 'MeshPhongMaterial';\n\n    /**\n     * Color of the material.\n     *\n     * @type {Color}\n     * @default (1,1,1)\n     */\n    this.color = new Color(0xffffff); // diffuse\n\n    /**\n     * Specular color of the material. The default color is set to `0x111111` (very dark grey)\n     *\n     * This defines how shiny the material is and the color of its shine.\n     *\n     * @type {Color}\n     */\n    this.specular = new Color(0x111111);\n\n    /**\n     * How shiny the specular highlight is; a higher value gives a sharper highlight.\n     *\n     * @type {number}\n     * @default 30\n     */\n    this.shininess = 30;\n\n    /**\n     * The color map. May optionally include an alpha channel, typically combined\n     * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n     * color is modulated by the diffuse `color`.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.map = null;\n\n    /**\n     * The light map. Requires a second set of UVs.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.lightMap = null;\n\n    /**\n     * Intensity of the baked light.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.lightMapIntensity = 1.0;\n\n    /**\n     * The red channel of this texture is used as the ambient occlusion map.\n     * Requires a second set of UVs.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.aoMap = null;\n\n    /**\n     * Intensity of the ambient occlusion effect. Range is `[0,1]`, where `0`\n     * disables ambient occlusion. Where intensity is `1` and the AO map's\n     * red channel is also `1`, ambient light is fully occluded on a surface.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.aoMapIntensity = 1.0;\n\n    /**\n     * Emissive (light) color of the material, essentially a solid color\n     * unaffected by other lighting.\n     *\n     * @type {Color}\n     * @default (0,0,0)\n     */\n    this.emissive = new Color(0x000000);\n\n    /**\n     * Intensity of the emissive light. Modulates the emissive color.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.emissiveIntensity = 1.0;\n\n    /**\n     * Set emissive (glow) map. The emissive map color is modulated by the\n     * emissive color and the emissive intensity. If you have an emissive map,\n     * be sure to set the emissive color to something other than black.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.emissiveMap = null;\n\n    /**\n     * The texture to create a bump map. The black and white values map to the\n     * perceived depth in relation to the lights. Bump doesn't actually affect\n     * the geometry of the object, only the lighting. If a normal map is defined\n     * this will be ignored.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.bumpMap = null;\n\n    /**\n     * How much the bump map affects the material. Typical range is `[0,1]`.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.bumpScale = 1;\n\n    /**\n     * The texture to create a normal map. The RGB values affect the surface\n     * normal for each pixel fragment and change the way the color is lit. Normal\n     * maps do not change the actual shape of the surface, only the lighting. In\n     * case the material has a normal map authored using the left handed\n     * convention, the `y` component of `normalScale` should be negated to compensate\n     * for the different handedness.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.normalMap = null;\n\n    /**\n     * The type of normal map.\n     *\n     * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}\n     * @default TangentSpaceNormalMap\n     */\n    this.normalMapType = TangentSpaceNormalMap;\n\n    /**\n     * How much the normal map affects the material. Typical value range is `[0,1]`.\n     *\n     * @type {Vector2}\n     * @default (1,1)\n     */\n    this.normalScale = new Vector2(1, 1);\n\n    /**\n     * The displacement map affects the position of the mesh's vertices. Unlike\n     * other maps which only affect the light and shade of the material the\n     * displaced vertices can cast shadows, block other objects, and otherwise\n     * act as real geometry. The displacement texture is an image where the value\n     * of each pixel (white being the highest) is mapped against, and\n     * repositions, the vertices of the mesh.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.displacementMap = null;\n\n    /**\n     * How much the displacement map affects the mesh (where black is no\n     * displacement, and white is maximum displacement). Without a displacement\n     * map set, this value is not applied.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.displacementScale = 1;\n\n    /**\n     * The offset of the displacement map's values on the mesh's vertices.\n     * The bias is added to the scaled sample of the displacement map.\n     * Without a displacement map set, this value is not applied.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.displacementBias = 0;\n\n    /**\n     * The specular map value affects both how much the specular surface\n     * highlight contributes and how much of the environment map affects the\n     * surface.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.specularMap = null;\n\n    /**\n     * The alpha map is a grayscale texture that controls the opacity across the\n     * surface (black: fully transparent; white: fully opaque).\n     *\n     * Only the color of the texture is used, ignoring the alpha channel if one\n     * exists. For RGB and RGBA textures, the renderer will use the green channel\n     * when sampling this texture due to the extra bit of precision provided for\n     * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n     * luminance/alpha textures will also still work as expected.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.alphaMap = null;\n\n    /**\n     * The environment map.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.envMap = null;\n\n    /**\n     * The rotation of the environment map in radians.\n     *\n     * @type {Euler}\n     * @default (0,0,0)\n     */\n    this.envMapRotation = new Euler();\n\n    /**\n     * How to combine the result of the surface's color with the environment map, if any.\n     *\n     * When set to `MixOperation`, the {@link MeshBasicMaterial#reflectivity} is used to\n     * blend between the two colors.\n     *\n     * @type {(MultiplyOperation|MixOperation|AddOperation)}\n     * @default MultiplyOperation\n     */\n    this.combine = MultiplyOperation;\n\n    /**\n     * How much the environment map affects the surface.\n     * The valid range is between `0` (no reflections) and `1` (full reflections).\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.reflectivity = 1;\n\n    /**\n     * The index of refraction (IOR) of air (approximately 1) divided by the\n     * index of refraction of the material. It is used with environment mapping\n     * modes {@link CubeRefractionMapping} and {@link EquirectangularRefractionMapping}.\n     * The refraction ratio should not exceed `1`.\n     *\n     * @type {number}\n     * @default 0.98\n     */\n    this.refractionRatio = 0.98;\n\n    /**\n     * Renders the geometry as a wireframe.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.wireframe = false;\n\n    /**\n     * Controls the thickness of the wireframe.\n     *\n     * Can only be used with {@link SVGRenderer}.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.wireframeLinewidth = 1;\n\n    /**\n     * Defines appearance of wireframe ends.\n     *\n     * Can only be used with {@link SVGRenderer}.\n     *\n     * @type {('round'|'bevel'|'miter')}\n     * @default 'round'\n     */\n    this.wireframeLinecap = 'round';\n\n    /**\n     * Defines appearance of wireframe joints.\n     *\n     * Can only be used with {@link SVGRenderer}.\n     *\n     * @type {('round'|'bevel'|'miter')}\n     * @default 'round'\n     */\n    this.wireframeLinejoin = 'round';\n\n    /**\n     * Whether the material is rendered with flat shading or not.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.flatShading = false;\n\n    /**\n     * Whether the material is affected by fog or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.fog = true;\n    this.setValues(parameters);\n  }\n  copy(source) {\n    super.copy(source);\n    this.color.copy(source.color);\n    this.specular.copy(source.specular);\n    this.shininess = source.shininess;\n    this.map = source.map;\n    this.lightMap = source.lightMap;\n    this.lightMapIntensity = source.lightMapIntensity;\n    this.aoMap = source.aoMap;\n    this.aoMapIntensity = source.aoMapIntensity;\n    this.emissive.copy(source.emissive);\n    this.emissiveMap = source.emissiveMap;\n    this.emissiveIntensity = source.emissiveIntensity;\n    this.bumpMap = source.bumpMap;\n    this.bumpScale = source.bumpScale;\n    this.normalMap = source.normalMap;\n    this.normalMapType = source.normalMapType;\n    this.normalScale.copy(source.normalScale);\n    this.displacementMap = source.displacementMap;\n    this.displacementScale = source.displacementScale;\n    this.displacementBias = source.displacementBias;\n    this.specularMap = source.specularMap;\n    this.alphaMap = source.alphaMap;\n    this.envMap = source.envMap;\n    this.envMapRotation.copy(source.envMapRotation);\n    this.combine = source.combine;\n    this.reflectivity = source.reflectivity;\n    this.refractionRatio = source.refractionRatio;\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    this.wireframeLinecap = source.wireframeLinecap;\n    this.wireframeLinejoin = source.wireframeLinejoin;\n    this.flatShading = source.flatShading;\n    this.fog = source.fog;\n    return this;\n  }\n}\n\n/**\n * A material implementing toon shading.\n *\n * @augments Material\n */\nclass MeshToonMaterial extends Material {\n  /**\n   * Constructs a new mesh toon material.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isMeshToonMaterial = true;\n    this.defines = {\n      'TOON': ''\n    };\n    this.type = 'MeshToonMaterial';\n\n    /**\n     * Color of the material.\n     *\n     * @type {Color}\n     * @default (1,1,1)\n     */\n    this.color = new Color(0xffffff);\n\n    /**\n     * The color map. May optionally include an alpha channel, typically combined\n     * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n     * color is modulated by the diffuse `color`.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.map = null;\n\n    /**\n     * Gradient map for toon shading. It's required to set\n     * {@link Texture#minFilter} and {@link Texture#magFilter} to {@linkNearestFilter}\n     * when using this type of texture.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.gradientMap = null;\n\n    /**\n     * The light map. Requires a second set of UVs.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.lightMap = null;\n\n    /**\n     * Intensity of the baked light.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.lightMapIntensity = 1.0;\n\n    /**\n     * The red channel of this texture is used as the ambient occlusion map.\n     * Requires a second set of UVs.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.aoMap = null;\n\n    /**\n     * Intensity of the ambient occlusion effect. Range is `[0,1]`, where `0`\n     * disables ambient occlusion. Where intensity is `1` and the AO map's\n     * red channel is also `1`, ambient light is fully occluded on a surface.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.aoMapIntensity = 1.0;\n\n    /**\n     * Emissive (light) color of the material, essentially a solid color\n     * unaffected by other lighting.\n     *\n     * @type {Color}\n     * @default (0,0,0)\n     */\n    this.emissive = new Color(0x000000);\n\n    /**\n     * Intensity of the emissive light. Modulates the emissive color.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.emissiveIntensity = 1.0;\n\n    /**\n     * Set emissive (glow) map. The emissive map color is modulated by the\n     * emissive color and the emissive intensity. If you have an emissive map,\n     * be sure to set the emissive color to something other than black.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.emissiveMap = null;\n\n    /**\n     * The texture to create a bump map. The black and white values map to the\n     * perceived depth in relation to the lights. Bump doesn't actually affect\n     * the geometry of the object, only the lighting. If a normal map is defined\n     * this will be ignored.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.bumpMap = null;\n\n    /**\n     * How much the bump map affects the material. Typical range is `[0,1]`.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.bumpScale = 1;\n\n    /**\n     * The texture to create a normal map. The RGB values affect the surface\n     * normal for each pixel fragment and change the way the color is lit. Normal\n     * maps do not change the actual shape of the surface, only the lighting. In\n     * case the material has a normal map authored using the left handed\n     * convention, the `y` component of `normalScale` should be negated to compensate\n     * for the different handedness.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.normalMap = null;\n\n    /**\n     * The type of normal map.\n     *\n     * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}\n     * @default TangentSpaceNormalMap\n     */\n    this.normalMapType = TangentSpaceNormalMap;\n\n    /**\n     * How much the normal map affects the material. Typical value range is `[0,1]`.\n     *\n     * @type {Vector2}\n     * @default (1,1)\n     */\n    this.normalScale = new Vector2(1, 1);\n\n    /**\n     * The displacement map affects the position of the mesh's vertices. Unlike\n     * other maps which only affect the light and shade of the material the\n     * displaced vertices can cast shadows, block other objects, and otherwise\n     * act as real geometry. The displacement texture is an image where the value\n     * of each pixel (white being the highest) is mapped against, and\n     * repositions, the vertices of the mesh.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.displacementMap = null;\n\n    /**\n     * How much the displacement map affects the mesh (where black is no\n     * displacement, and white is maximum displacement). Without a displacement\n     * map set, this value is not applied.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.displacementScale = 1;\n\n    /**\n     * The offset of the displacement map's values on the mesh's vertices.\n     * The bias is added to the scaled sample of the displacement map.\n     * Without a displacement map set, this value is not applied.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.displacementBias = 0;\n\n    /**\n     * The alpha map is a grayscale texture that controls the opacity across the\n     * surface (black: fully transparent; white: fully opaque).\n     *\n     * Only the color of the texture is used, ignoring the alpha channel if one\n     * exists. For RGB and RGBA textures, the renderer will use the green channel\n     * when sampling this texture due to the extra bit of precision provided for\n     * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n     * luminance/alpha textures will also still work as expected.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.alphaMap = null;\n\n    /**\n     * Renders the geometry as a wireframe.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.wireframe = false;\n\n    /**\n     * Controls the thickness of the wireframe.\n     *\n     * Can only be used with {@link SVGRenderer}.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.wireframeLinewidth = 1;\n\n    /**\n     * Defines appearance of wireframe ends.\n     *\n     * Can only be used with {@link SVGRenderer}.\n     *\n     * @type {('round'|'bevel'|'miter')}\n     * @default 'round'\n     */\n    this.wireframeLinecap = 'round';\n\n    /**\n     * Defines appearance of wireframe joints.\n     *\n     * Can only be used with {@link SVGRenderer}.\n     *\n     * @type {('round'|'bevel'|'miter')}\n     * @default 'round'\n     */\n    this.wireframeLinejoin = 'round';\n\n    /**\n     * Whether the material is affected by fog or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.fog = true;\n    this.setValues(parameters);\n  }\n  copy(source) {\n    super.copy(source);\n    this.color.copy(source.color);\n    this.map = source.map;\n    this.gradientMap = source.gradientMap;\n    this.lightMap = source.lightMap;\n    this.lightMapIntensity = source.lightMapIntensity;\n    this.aoMap = source.aoMap;\n    this.aoMapIntensity = source.aoMapIntensity;\n    this.emissive.copy(source.emissive);\n    this.emissiveMap = source.emissiveMap;\n    this.emissiveIntensity = source.emissiveIntensity;\n    this.bumpMap = source.bumpMap;\n    this.bumpScale = source.bumpScale;\n    this.normalMap = source.normalMap;\n    this.normalMapType = source.normalMapType;\n    this.normalScale.copy(source.normalScale);\n    this.displacementMap = source.displacementMap;\n    this.displacementScale = source.displacementScale;\n    this.displacementBias = source.displacementBias;\n    this.alphaMap = source.alphaMap;\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    this.wireframeLinecap = source.wireframeLinecap;\n    this.wireframeLinejoin = source.wireframeLinejoin;\n    this.fog = source.fog;\n    return this;\n  }\n}\n\n/**\n * A material that maps the normal vectors to RGB colors.\n *\n * @augments Material\n */\nclass MeshNormalMaterial extends Material {\n  /**\n   * Constructs a new mesh normal material.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isMeshNormalMaterial = true;\n    this.type = 'MeshNormalMaterial';\n\n    /**\n     * The texture to create a bump map. The black and white values map to the\n     * perceived depth in relation to the lights. Bump doesn't actually affect\n     * the geometry of the object, only the lighting. If a normal map is defined\n     * this will be ignored.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.bumpMap = null;\n\n    /**\n     * How much the bump map affects the material. Typical range is `[0,1]`.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.bumpScale = 1;\n\n    /**\n     * The texture to create a normal map. The RGB values affect the surface\n     * normal for each pixel fragment and change the way the color is lit. Normal\n     * maps do not change the actual shape of the surface, only the lighting. In\n     * case the material has a normal map authored using the left handed\n     * convention, the `y` component of `normalScale` should be negated to compensate\n     * for the different handedness.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.normalMap = null;\n\n    /**\n     * The type of normal map.\n     *\n     * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}\n     * @default TangentSpaceNormalMap\n     */\n    this.normalMapType = TangentSpaceNormalMap;\n\n    /**\n     * How much the normal map affects the material. Typical value range is `[0,1]`.\n     *\n     * @type {Vector2}\n     * @default (1,1)\n     */\n    this.normalScale = new Vector2(1, 1);\n\n    /**\n     * The displacement map affects the position of the mesh's vertices. Unlike\n     * other maps which only affect the light and shade of the material the\n     * displaced vertices can cast shadows, block other objects, and otherwise\n     * act as real geometry. The displacement texture is an image where the value\n     * of each pixel (white being the highest) is mapped against, and\n     * repositions, the vertices of the mesh.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.displacementMap = null;\n\n    /**\n     * How much the displacement map affects the mesh (where black is no\n     * displacement, and white is maximum displacement). Without a displacement\n     * map set, this value is not applied.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.displacementScale = 1;\n\n    /**\n     * The offset of the displacement map's values on the mesh's vertices.\n     * The bias is added to the scaled sample of the displacement map.\n     * Without a displacement map set, this value is not applied.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.displacementBias = 0;\n\n    /**\n     * Renders the geometry as a wireframe.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.wireframe = false;\n\n    /**\n     * Controls the thickness of the wireframe.\n     *\n     * WebGL and WebGPU ignore this property and always render\n     * 1 pixel wide lines.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.wireframeLinewidth = 1;\n\n    /**\n     * Whether the material is rendered with flat shading or not.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.flatShading = false;\n    this.setValues(parameters);\n  }\n  copy(source) {\n    super.copy(source);\n    this.bumpMap = source.bumpMap;\n    this.bumpScale = source.bumpScale;\n    this.normalMap = source.normalMap;\n    this.normalMapType = source.normalMapType;\n    this.normalScale.copy(source.normalScale);\n    this.displacementMap = source.displacementMap;\n    this.displacementScale = source.displacementScale;\n    this.displacementBias = source.displacementBias;\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    this.flatShading = source.flatShading;\n    return this;\n  }\n}\n\n/**\n * A material for non-shiny surfaces, without specular highlights.\n *\n * The material uses a non-physically based [Lambertian]{@link https://en.wikipedia.org/wiki/Lambertian_reflectance}\n * model for calculating reflectance. This can simulate some surfaces (such\n * as untreated wood or stone) well, but cannot simulate shiny surfaces with\n * specular highlights (such as varnished wood). `MeshLambertMaterial` uses per-fragment\n * shading.\n *\n * Due to the simplicity of the reflectance and illumination models,\n * performance will be greater when using this material over the\n * {@link MeshPhongMaterial}, {@link MeshStandardMaterial} or\n * {@link MeshPhysicalMaterial}, at the cost of some graphical accuracy.\n *\n * @augments Material\n */\nclass MeshLambertMaterial extends Material {\n  /**\n   * Constructs a new mesh lambert material.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isMeshLambertMaterial = true;\n    this.type = 'MeshLambertMaterial';\n\n    /**\n     * Color of the material.\n     *\n     * @type {Color}\n     * @default (1,1,1)\n     */\n    this.color = new Color(0xffffff); // diffuse\n\n    /**\n     * The color map. May optionally include an alpha channel, typically combined\n     * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n     * color is modulated by the diffuse `color`.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.map = null;\n\n    /**\n     * The light map. Requires a second set of UVs.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.lightMap = null;\n\n    /**\n     * Intensity of the baked light.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.lightMapIntensity = 1.0;\n\n    /**\n     * The red channel of this texture is used as the ambient occlusion map.\n     * Requires a second set of UVs.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.aoMap = null;\n\n    /**\n     * Intensity of the ambient occlusion effect. Range is `[0,1]`, where `0`\n     * disables ambient occlusion. Where intensity is `1` and the AO map's\n     * red channel is also `1`, ambient light is fully occluded on a surface.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.aoMapIntensity = 1.0;\n\n    /**\n     * Emissive (light) color of the material, essentially a solid color\n     * unaffected by other lighting.\n     *\n     * @type {Color}\n     * @default (0,0,0)\n     */\n    this.emissive = new Color(0x000000);\n\n    /**\n     * Intensity of the emissive light. Modulates the emissive color.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.emissiveIntensity = 1.0;\n\n    /**\n     * Set emissive (glow) map. The emissive map color is modulated by the\n     * emissive color and the emissive intensity. If you have an emissive map,\n     * be sure to set the emissive color to something other than black.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.emissiveMap = null;\n\n    /**\n     * The texture to create a bump map. The black and white values map to the\n     * perceived depth in relation to the lights. Bump doesn't actually affect\n     * the geometry of the object, only the lighting. If a normal map is defined\n     * this will be ignored.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.bumpMap = null;\n\n    /**\n     * How much the bump map affects the material. Typical range is `[0,1]`.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.bumpScale = 1;\n\n    /**\n     * The texture to create a normal map. The RGB values affect the surface\n     * normal for each pixel fragment and change the way the color is lit. Normal\n     * maps do not change the actual shape of the surface, only the lighting. In\n     * case the material has a normal map authored using the left handed\n     * convention, the `y` component of `normalScale` should be negated to compensate\n     * for the different handedness.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.normalMap = null;\n\n    /**\n     * The type of normal map.\n     *\n     * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}\n     * @default TangentSpaceNormalMap\n     */\n    this.normalMapType = TangentSpaceNormalMap;\n\n    /**\n     * How much the normal map affects the material. Typical value range is `[0,1]`.\n     *\n     * @type {Vector2}\n     * @default (1,1)\n     */\n    this.normalScale = new Vector2(1, 1);\n\n    /**\n     * The displacement map affects the position of the mesh's vertices. Unlike\n     * other maps which only affect the light and shade of the material the\n     * displaced vertices can cast shadows, block other objects, and otherwise\n     * act as real geometry. The displacement texture is an image where the value\n     * of each pixel (white being the highest) is mapped against, and\n     * repositions, the vertices of the mesh.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.displacementMap = null;\n\n    /**\n     * How much the displacement map affects the mesh (where black is no\n     * displacement, and white is maximum displacement). Without a displacement\n     * map set, this value is not applied.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.displacementScale = 1;\n\n    /**\n     * The offset of the displacement map's values on the mesh's vertices.\n     * The bias is added to the scaled sample of the displacement map.\n     * Without a displacement map set, this value is not applied.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.displacementBias = 0;\n\n    /**\n     * Specular map used by the material.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.specularMap = null;\n\n    /**\n     * The alpha map is a grayscale texture that controls the opacity across the\n     * surface (black: fully transparent; white: fully opaque).\n     *\n     * Only the color of the texture is used, ignoring the alpha channel if one\n     * exists. For RGB and RGBA textures, the renderer will use the green channel\n     * when sampling this texture due to the extra bit of precision provided for\n     * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n     * luminance/alpha textures will also still work as expected.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.alphaMap = null;\n\n    /**\n     * The environment map.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.envMap = null;\n\n    /**\n     * The rotation of the environment map in radians.\n     *\n     * @type {Euler}\n     * @default (0,0,0)\n     */\n    this.envMapRotation = new Euler();\n\n    /**\n     * How to combine the result of the surface's color with the environment map, if any.\n     *\n     * When set to `MixOperation`, the {@link MeshBasicMaterial#reflectivity} is used to\n     * blend between the two colors.\n     *\n     * @type {(MultiplyOperation|MixOperation|AddOperation)}\n     * @default MultiplyOperation\n     */\n    this.combine = MultiplyOperation;\n\n    /**\n     * How much the environment map affects the surface.\n     * The valid range is between `0` (no reflections) and `1` (full reflections).\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.reflectivity = 1;\n\n    /**\n     * The index of refraction (IOR) of air (approximately 1) divided by the\n     * index of refraction of the material. It is used with environment mapping\n     * modes {@link CubeRefractionMapping} and {@link EquirectangularRefractionMapping}.\n     * The refraction ratio should not exceed `1`.\n     *\n     * @type {number}\n     * @default 0.98\n     */\n    this.refractionRatio = 0.98;\n\n    /**\n     * Renders the geometry as a wireframe.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.wireframe = false;\n\n    /**\n     * Controls the thickness of the wireframe.\n     *\n     * Can only be used with {@link SVGRenderer}.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.wireframeLinewidth = 1;\n\n    /**\n     * Defines appearance of wireframe ends.\n     *\n     * Can only be used with {@link SVGRenderer}.\n     *\n     * @type {('round'|'bevel'|'miter')}\n     * @default 'round'\n     */\n    this.wireframeLinecap = 'round';\n\n    /**\n     * Defines appearance of wireframe joints.\n     *\n     * Can only be used with {@link SVGRenderer}.\n     *\n     * @type {('round'|'bevel'|'miter')}\n     * @default 'round'\n     */\n    this.wireframeLinejoin = 'round';\n\n    /**\n     * Whether the material is rendered with flat shading or not.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.flatShading = false;\n\n    /**\n     * Whether the material is affected by fog or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.fog = true;\n    this.setValues(parameters);\n  }\n  copy(source) {\n    super.copy(source);\n    this.color.copy(source.color);\n    this.map = source.map;\n    this.lightMap = source.lightMap;\n    this.lightMapIntensity = source.lightMapIntensity;\n    this.aoMap = source.aoMap;\n    this.aoMapIntensity = source.aoMapIntensity;\n    this.emissive.copy(source.emissive);\n    this.emissiveMap = source.emissiveMap;\n    this.emissiveIntensity = source.emissiveIntensity;\n    this.bumpMap = source.bumpMap;\n    this.bumpScale = source.bumpScale;\n    this.normalMap = source.normalMap;\n    this.normalMapType = source.normalMapType;\n    this.normalScale.copy(source.normalScale);\n    this.displacementMap = source.displacementMap;\n    this.displacementScale = source.displacementScale;\n    this.displacementBias = source.displacementBias;\n    this.specularMap = source.specularMap;\n    this.alphaMap = source.alphaMap;\n    this.envMap = source.envMap;\n    this.envMapRotation.copy(source.envMapRotation);\n    this.combine = source.combine;\n    this.reflectivity = source.reflectivity;\n    this.refractionRatio = source.refractionRatio;\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    this.wireframeLinecap = source.wireframeLinecap;\n    this.wireframeLinejoin = source.wireframeLinejoin;\n    this.flatShading = source.flatShading;\n    this.fog = source.fog;\n    return this;\n  }\n}\n\n/**\n * A material for drawing geometry by depth. Depth is based off of the camera\n * near and far plane. White is nearest, black is farthest.\n *\n * @augments Material\n */\nclass MeshDepthMaterial extends Material {\n  /**\n   * Constructs a new mesh depth material.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isMeshDepthMaterial = true;\n    this.type = 'MeshDepthMaterial';\n\n    /**\n     * Type for depth packing.\n     *\n     * @type {(BasicDepthPacking|RGBADepthPacking|RGBDepthPacking|RGDepthPacking)}\n     * @default BasicDepthPacking\n     */\n    this.depthPacking = BasicDepthPacking;\n\n    /**\n     * The color map. May optionally include an alpha channel, typically combined\n     * with {@link Material#transparent} or {@link Material#alphaTest}.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.map = null;\n\n    /**\n     * The alpha map is a grayscale texture that controls the opacity across the\n     * surface (black: fully transparent; white: fully opaque).\n     *\n     * Only the color of the texture is used, ignoring the alpha channel if one\n     * exists. For RGB and RGBA textures, the renderer will use the green channel\n     * when sampling this texture due to the extra bit of precision provided for\n     * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n     * luminance/alpha textures will also still work as expected.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.alphaMap = null;\n\n    /**\n     * The displacement map affects the position of the mesh's vertices. Unlike\n     * other maps which only affect the light and shade of the material the\n     * displaced vertices can cast shadows, block other objects, and otherwise\n     * act as real geometry. The displacement texture is an image where the value\n     * of each pixel (white being the highest) is mapped against, and\n     * repositions, the vertices of the mesh.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.displacementMap = null;\n\n    /**\n     * How much the displacement map affects the mesh (where black is no\n     * displacement, and white is maximum displacement). Without a displacement\n     * map set, this value is not applied.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.displacementScale = 1;\n\n    /**\n     * The offset of the displacement map's values on the mesh's vertices.\n     * The bias is added to the scaled sample of the displacement map.\n     * Without a displacement map set, this value is not applied.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.displacementBias = 0;\n\n    /**\n     * Renders the geometry as a wireframe.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.wireframe = false;\n\n    /**\n     * Controls the thickness of the wireframe.\n     *\n     * WebGL and WebGPU ignore this property and always render\n     * 1 pixel wide lines.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.wireframeLinewidth = 1;\n    this.setValues(parameters);\n  }\n  copy(source) {\n    super.copy(source);\n    this.depthPacking = source.depthPacking;\n    this.map = source.map;\n    this.alphaMap = source.alphaMap;\n    this.displacementMap = source.displacementMap;\n    this.displacementScale = source.displacementScale;\n    this.displacementBias = source.displacementBias;\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    return this;\n  }\n}\n\n/**\n * A material used internally for implementing shadow mapping with\n * point lights.\n *\n * Can also be used to customize the shadow casting of an object by assigning\n * an instance of `MeshDistanceMaterial` to {@link Object3D#customDistanceMaterial}.\n * The following examples demonstrates this approach in order to ensure\n * transparent parts of objects do no cast shadows.\n *\n * @augments Material\n */\nclass MeshDistanceMaterial extends Material {\n  /**\n   * Constructs a new mesh distance material.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isMeshDistanceMaterial = true;\n    this.type = 'MeshDistanceMaterial';\n\n    /**\n     * The color map. May optionally include an alpha channel, typically combined\n     * with {@link Material#transparent} or {@link Material#alphaTest}.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.map = null;\n\n    /**\n     * The alpha map is a grayscale texture that controls the opacity across the\n     * surface (black: fully transparent; white: fully opaque).\n     *\n     * Only the color of the texture is used, ignoring the alpha channel if one\n     * exists. For RGB and RGBA textures, the renderer will use the green channel\n     * when sampling this texture due to the extra bit of precision provided for\n     * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n     * luminance/alpha textures will also still work as expected.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.alphaMap = null;\n\n    /**\n     * The displacement map affects the position of the mesh's vertices. Unlike\n     * other maps which only affect the light and shade of the material the\n     * displaced vertices can cast shadows, block other objects, and otherwise\n     * act as real geometry. The displacement texture is an image where the value\n     * of each pixel (white being the highest) is mapped against, and\n     * repositions, the vertices of the mesh.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.displacementMap = null;\n\n    /**\n     * How much the displacement map affects the mesh (where black is no\n     * displacement, and white is maximum displacement). Without a displacement\n     * map set, this value is not applied.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.displacementScale = 1;\n\n    /**\n     * The offset of the displacement map's values on the mesh's vertices.\n     * The bias is added to the scaled sample of the displacement map.\n     * Without a displacement map set, this value is not applied.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.displacementBias = 0;\n    this.setValues(parameters);\n  }\n  copy(source) {\n    super.copy(source);\n    this.map = source.map;\n    this.alphaMap = source.alphaMap;\n    this.displacementMap = source.displacementMap;\n    this.displacementScale = source.displacementScale;\n    this.displacementBias = source.displacementBias;\n    return this;\n  }\n}\n\n/**\n * This material is defined by a MatCap (or Lit Sphere) texture, which encodes the\n * material color and shading.\n *\n * `MeshMatcapMaterial` does not respond to lights since the matcap image file encodes\n * baked lighting. It will cast a shadow onto an object that receives shadows\n * (and shadow clipping works), but it will not self-shadow or receive\n * shadows.\n *\n * @augments Material\n */\nclass MeshMatcapMaterial extends Material {\n  /**\n   * Constructs a new mesh matcap material.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isMeshMatcapMaterial = true;\n    this.defines = {\n      'MATCAP': ''\n    };\n    this.type = 'MeshMatcapMaterial';\n\n    /**\n     * Color of the material.\n     *\n     * @type {Color}\n     * @default (1,1,1)\n     */\n    this.color = new Color(0xffffff); // diffuse\n\n    /**\n     * The matcap map.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.matcap = null;\n\n    /**\n     * The color map. May optionally include an alpha channel, typically combined\n     * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n     * color is modulated by the diffuse `color`.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.map = null;\n\n    /**\n     * The texture to create a bump map. The black and white values map to the\n     * perceived depth in relation to the lights. Bump doesn't actually affect\n     * the geometry of the object, only the lighting. If a normal map is defined\n     * this will be ignored.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.bumpMap = null;\n\n    /**\n     * How much the bump map affects the material. Typical range is `[0,1]`.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.bumpScale = 1;\n\n    /**\n     * The texture to create a normal map. The RGB values affect the surface\n     * normal for each pixel fragment and change the way the color is lit. Normal\n     * maps do not change the actual shape of the surface, only the lighting. In\n     * case the material has a normal map authored using the left handed\n     * convention, the `y` component of `normalScale` should be negated to compensate\n     * for the different handedness.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.normalMap = null;\n\n    /**\n     * The type of normal map.\n     *\n     * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}\n     * @default TangentSpaceNormalMap\n     */\n    this.normalMapType = TangentSpaceNormalMap;\n\n    /**\n     * How much the normal map affects the material. Typical value range is `[0,1]`.\n     *\n     * @type {Vector2}\n     * @default (1,1)\n     */\n    this.normalScale = new Vector2(1, 1);\n\n    /**\n     * The displacement map affects the position of the mesh's vertices. Unlike\n     * other maps which only affect the light and shade of the material the\n     * displaced vertices can cast shadows, block other objects, and otherwise\n     * act as real geometry. The displacement texture is an image where the value\n     * of each pixel (white being the highest) is mapped against, and\n     * repositions, the vertices of the mesh.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.displacementMap = null;\n\n    /**\n     * How much the displacement map affects the mesh (where black is no\n     * displacement, and white is maximum displacement). Without a displacement\n     * map set, this value is not applied.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.displacementScale = 1;\n\n    /**\n     * The offset of the displacement map's values on the mesh's vertices.\n     * The bias is added to the scaled sample of the displacement map.\n     * Without a displacement map set, this value is not applied.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.displacementBias = 0;\n\n    /**\n     * The alpha map is a grayscale texture that controls the opacity across the\n     * surface (black: fully transparent; white: fully opaque).\n     *\n     * Only the color of the texture is used, ignoring the alpha channel if one\n     * exists. For RGB and RGBA textures, the renderer will use the green channel\n     * when sampling this texture due to the extra bit of precision provided for\n     * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n     * luminance/alpha textures will also still work as expected.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.alphaMap = null;\n\n    /**\n     * Whether the material is rendered with flat shading or not.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.flatShading = false;\n\n    /**\n     * Whether the material is affected by fog or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.fog = true;\n    this.setValues(parameters);\n  }\n  copy(source) {\n    super.copy(source);\n    this.defines = {\n      'MATCAP': ''\n    };\n    this.color.copy(source.color);\n    this.matcap = source.matcap;\n    this.map = source.map;\n    this.bumpMap = source.bumpMap;\n    this.bumpScale = source.bumpScale;\n    this.normalMap = source.normalMap;\n    this.normalMapType = source.normalMapType;\n    this.normalScale.copy(source.normalScale);\n    this.displacementMap = source.displacementMap;\n    this.displacementScale = source.displacementScale;\n    this.displacementBias = source.displacementBias;\n    this.alphaMap = source.alphaMap;\n    this.flatShading = source.flatShading;\n    this.fog = source.fog;\n    return this;\n  }\n}\n\n/**\n * A material for rendering line primitives.\n *\n * Materials define the appearance of renderable 3D objects.\n *\n * ```js\n * const material = new THREE.LineDashedMaterial( {\n * \tcolor: 0xffffff,\n * \tscale: 1,\n * \tdashSize: 3,\n * \tgapSize: 1,\n * } );\n * ```\n *\n * @augments LineBasicMaterial\n */\nclass LineDashedMaterial extends LineBasicMaterial {\n  /**\n   * Constructs a new line dashed material.\n   *\n   * @param {Object} [parameters] - An object with one or more properties\n   * defining the material's appearance. Any property of the material\n   * (including any property from inherited materials) can be passed\n   * in here. Color values can be passed any type of value accepted\n   * by {@link Color#set}.\n   */\n  constructor(parameters) {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isLineDashedMaterial = true;\n    this.type = 'LineDashedMaterial';\n\n    /**\n     * The scale of the dashed part of a line.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.scale = 1;\n\n    /**\n     * The size of the dash. This is both the gap with the stroke.\n     *\n     * @type {number}\n     * @default 3\n     */\n    this.dashSize = 3;\n\n    /**\n     * The size of the gap.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.gapSize = 1;\n    this.setValues(parameters);\n  }\n  copy(source) {\n    super.copy(source);\n    this.scale = source.scale;\n    this.dashSize = source.dashSize;\n    this.gapSize = source.gapSize;\n    return this;\n  }\n}\n\n/**\n * Converts an array to a specific type.\n *\n * @param {TypedArray|Array} array - The array to convert.\n * @param {TypedArray.constructor} type - The constructor of a typed array that defines the new type.\n * @return {TypedArray} The converted array.\n */\nfunction convertArray(array, type) {\n  if (!array || array.constructor === type) return array;\n  if (typeof type.BYTES_PER_ELEMENT === 'number') {\n    return new type(array); // create typed array\n  }\n  return Array.prototype.slice.call(array); // create Array\n}\n\n/**\n * Returns `true` if the given object is a typed array.\n *\n * @param {any} object - The object to check.\n * @return {boolean} Whether the given object is a typed array.\n */\nfunction isTypedArray(object) {\n  return ArrayBuffer.isView(object) && !(object instanceof DataView);\n}\n\n/**\n * Returns an array by which times and values can be sorted.\n *\n * @param {Array<number>} times - The keyframe time values.\n * @return {Array<number>} The array.\n */\nfunction getKeyframeOrder(times) {\n  function compareTime(i, j) {\n    return times[i] - times[j];\n  }\n  const n = times.length;\n  const result = new Array(n);\n  for (let i = 0; i !== n; ++i) result[i] = i;\n  result.sort(compareTime);\n  return result;\n}\n\n/**\n * Sorts the given array by the previously computed order via `getKeyframeOrder()`.\n *\n * @param {Array<number>} values - The values to sort.\n * @param {number} stride - The stride.\n * @param {Array<number>} order - The sort order.\n * @return {Array<number>} The sorted values.\n */\nfunction sortedArray(values, stride, order) {\n  const nValues = values.length;\n  const result = new values.constructor(nValues);\n  for (let i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {\n    const srcOffset = order[i] * stride;\n    for (let j = 0; j !== stride; ++j) {\n      result[dstOffset++] = values[srcOffset + j];\n    }\n  }\n  return result;\n}\n\n/**\n * Used for parsing AOS keyframe formats.\n *\n * @param {Array<number>} jsonKeys - A list of JSON keyframes.\n * @param {Array<number>} times - This array will be filled with keyframe times by this function.\n * @param {Array<number>} values - This array will be filled with keyframe values by this function.\n * @param {string} valuePropertyName - The name of the property to use.\n */\nfunction flattenJSON(jsonKeys, times, values, valuePropertyName) {\n  let i = 1,\n    key = jsonKeys[0];\n  while (key !== undefined && key[valuePropertyName] === undefined) {\n    key = jsonKeys[i++];\n  }\n  if (key === undefined) return; // no data\n\n  let value = key[valuePropertyName];\n  if (value === undefined) return; // no data\n\n  if (Array.isArray(value)) {\n    do {\n      value = key[valuePropertyName];\n      if (value !== undefined) {\n        times.push(key.time);\n        values.push(...value); // push all elements\n      }\n      key = jsonKeys[i++];\n    } while (key !== undefined);\n  } else if (value.toArray !== undefined) {\n    // ...assume THREE.Math-ish\n\n    do {\n      value = key[valuePropertyName];\n      if (value !== undefined) {\n        times.push(key.time);\n        value.toArray(values, values.length);\n      }\n      key = jsonKeys[i++];\n    } while (key !== undefined);\n  } else {\n    // otherwise push as-is\n\n    do {\n      value = key[valuePropertyName];\n      if (value !== undefined) {\n        times.push(key.time);\n        values.push(value);\n      }\n      key = jsonKeys[i++];\n    } while (key !== undefined);\n  }\n}\n\n/**\n * Creates a new clip, containing only the segment of the original clip between the given frames.\n *\n * @param {AnimationClip} sourceClip - The values to sort.\n * @param {string} name - The name of the clip.\n * @param {number} startFrame - The start frame.\n * @param {number} endFrame - The end frame.\n * @param {number} [fps=30] - The FPS.\n * @return {AnimationClip} The new sub clip.\n */\nfunction subclip(sourceClip, name, startFrame, endFrame) {\n  let fps = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 30;\n  const clip = sourceClip.clone();\n  clip.name = name;\n  const tracks = [];\n  for (let i = 0; i < clip.tracks.length; ++i) {\n    const track = clip.tracks[i];\n    const valueSize = track.getValueSize();\n    const times = [];\n    const values = [];\n    for (let j = 0; j < track.times.length; ++j) {\n      const frame = track.times[j] * fps;\n      if (frame < startFrame || frame >= endFrame) continue;\n      times.push(track.times[j]);\n      for (let k = 0; k < valueSize; ++k) {\n        values.push(track.values[j * valueSize + k]);\n      }\n    }\n    if (times.length === 0) continue;\n    track.times = convertArray(times, track.times.constructor);\n    track.values = convertArray(values, track.values.constructor);\n    tracks.push(track);\n  }\n  clip.tracks = tracks;\n\n  // find minimum .times value across all tracks in the trimmed clip\n\n  let minStartTime = Infinity;\n  for (let i = 0; i < clip.tracks.length; ++i) {\n    if (minStartTime > clip.tracks[i].times[0]) {\n      minStartTime = clip.tracks[i].times[0];\n    }\n  }\n\n  // shift all tracks such that clip begins at t=0\n\n  for (let i = 0; i < clip.tracks.length; ++i) {\n    clip.tracks[i].shift(-1 * minStartTime);\n  }\n  clip.resetDuration();\n  return clip;\n}\n\n/**\n * Converts the keyframes of the given animation clip to an additive format.\n *\n * @param {AnimationClip} targetClip - The clip to make additive.\n * @param {number} [referenceFrame=0] - The reference frame.\n * @param {AnimationClip} [referenceClip=targetClip] - The reference clip.\n * @param {number} [fps=30] - The FPS.\n * @return {AnimationClip} The updated clip which is now additive.\n */\nfunction makeClipAdditive(targetClip) {\n  let referenceFrame = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let referenceClip = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : targetClip;\n  let fps = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 30;\n  if (fps <= 0) fps = 30;\n  const numTracks = referenceClip.tracks.length;\n  const referenceTime = referenceFrame / fps;\n\n  // Make each track's values relative to the values at the reference frame\n  for (let i = 0; i < numTracks; ++i) {\n    const referenceTrack = referenceClip.tracks[i];\n    const referenceTrackType = referenceTrack.ValueTypeName;\n\n    // Skip this track if it's non-numeric\n    if (referenceTrackType === 'bool' || referenceTrackType === 'string') continue;\n\n    // Find the track in the target clip whose name and type matches the reference track\n    const targetTrack = targetClip.tracks.find(function (track) {\n      return track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;\n    });\n    if (targetTrack === undefined) continue;\n    let referenceOffset = 0;\n    const referenceValueSize = referenceTrack.getValueSize();\n    if (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n      referenceOffset = referenceValueSize / 3;\n    }\n    let targetOffset = 0;\n    const targetValueSize = targetTrack.getValueSize();\n    if (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n      targetOffset = targetValueSize / 3;\n    }\n    const lastIndex = referenceTrack.times.length - 1;\n    let referenceValue;\n\n    // Find the value to subtract out of the track\n    if (referenceTime <= referenceTrack.times[0]) {\n      // Reference frame is earlier than the first keyframe, so just use the first keyframe\n      const startIndex = referenceOffset;\n      const endIndex = referenceValueSize - referenceOffset;\n      referenceValue = referenceTrack.values.slice(startIndex, endIndex);\n    } else if (referenceTime >= referenceTrack.times[lastIndex]) {\n      // Reference frame is after the last keyframe, so just use the last keyframe\n      const startIndex = lastIndex * referenceValueSize + referenceOffset;\n      const endIndex = startIndex + referenceValueSize - referenceOffset;\n      referenceValue = referenceTrack.values.slice(startIndex, endIndex);\n    } else {\n      // Interpolate to the reference value\n      const interpolant = referenceTrack.createInterpolant();\n      const startIndex = referenceOffset;\n      const endIndex = referenceValueSize - referenceOffset;\n      interpolant.evaluate(referenceTime);\n      referenceValue = interpolant.resultBuffer.slice(startIndex, endIndex);\n    }\n\n    // Conjugate the quaternion\n    if (referenceTrackType === 'quaternion') {\n      const referenceQuat = new Quaternion().fromArray(referenceValue).normalize().conjugate();\n      referenceQuat.toArray(referenceValue);\n    }\n\n    // Subtract the reference value from all of the track values\n\n    const numTimes = targetTrack.times.length;\n    for (let j = 0; j < numTimes; ++j) {\n      const valueStart = j * targetValueSize + targetOffset;\n      if (referenceTrackType === 'quaternion') {\n        // Multiply the conjugate for quaternion track types\n        Quaternion.multiplyQuaternionsFlat(targetTrack.values, valueStart, referenceValue, 0, targetTrack.values, valueStart);\n      } else {\n        const valueEnd = targetValueSize - targetOffset * 2;\n\n        // Subtract each value for all other numeric track types\n        for (let k = 0; k < valueEnd; ++k) {\n          targetTrack.values[valueStart + k] -= referenceValue[k];\n        }\n      }\n    }\n  }\n  targetClip.blendMode = AdditiveAnimationBlendMode;\n  return targetClip;\n}\n\n/**\n * A class with various methods to assist with animations.\n *\n * @hideconstructor\n */\nclass AnimationUtils {\n  /**\n   * Converts an array to a specific type\n   *\n   * @static\n   * @param {TypedArray|Array} array - The array to convert.\n   * @param {TypedArray.constructor} type - The constructor of a type array.\n   * @return {TypedArray} The converted array\n   */\n  static convertArray(array, type) {\n    return convertArray(array, type);\n  }\n\n  /**\n   * Returns `true` if the given object is a typed array.\n   *\n   * @static\n   * @param {any} object - The object to check.\n   * @return {boolean} Whether the given object is a typed array.\n   */\n  static isTypedArray(object) {\n    return isTypedArray(object);\n  }\n\n  /**\n   * Returns an array by which times and values can be sorted.\n   *\n   * @static\n   * @param {Array<number>} times - The keyframe time values.\n   * @return {Array<number>} The array.\n   */\n  static getKeyframeOrder(times) {\n    return getKeyframeOrder(times);\n  }\n\n  /**\n   * Sorts the given array by the previously computed order via `getKeyframeOrder()`.\n   *\n   * @static\n   * @param {Array<number>} values - The values to sort.\n   * @param {number} stride - The stride.\n   * @param {Array<number>} order - The sort order.\n   * @return {Array<number>} The sorted values.\n   */\n  static sortedArray(values, stride, order) {\n    return sortedArray(values, stride, order);\n  }\n\n  /**\n   * Used for parsing AOS keyframe formats.\n   *\n   * @static\n   * @param {Array<number>} jsonKeys - A list of JSON keyframes.\n   * @param {Array<number>} times - This array will be filled with keyframe times by this method.\n   * @param {Array<number>} values - This array will be filled with keyframe values by this method.\n   * @param {string} valuePropertyName - The name of the property to use.\n   */\n  static flattenJSON(jsonKeys, times, values, valuePropertyName) {\n    flattenJSON(jsonKeys, times, values, valuePropertyName);\n  }\n\n  /**\n   * Creates a new clip, containing only the segment of the original clip between the given frames.\n   *\n   * @static\n   * @param {AnimationClip} sourceClip - The values to sort.\n   * @param {string} name - The name of the clip.\n   * @param {number} startFrame - The start frame.\n   * @param {number} endFrame - The end frame.\n   * @param {number} [fps=30] - The FPS.\n   * @return {AnimationClip} The new sub clip.\n   */\n  static subclip(sourceClip, name, startFrame, endFrame) {\n    let fps = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 30;\n    return subclip(sourceClip, name, startFrame, endFrame, fps);\n  }\n\n  /**\n   * Converts the keyframes of the given animation clip to an additive format.\n   *\n   * @static\n   * @param {AnimationClip} targetClip - The clip to make additive.\n   * @param {number} [referenceFrame=0] - The reference frame.\n   * @param {AnimationClip} [referenceClip=targetClip] - The reference clip.\n   * @param {number} [fps=30] - The FPS.\n   * @return {AnimationClip} The updated clip which is now additive.\n   */\n  static makeClipAdditive(targetClip) {\n    let referenceFrame = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let referenceClip = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : targetClip;\n    let fps = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 30;\n    return makeClipAdditive(targetClip, referenceFrame, referenceClip, fps);\n  }\n}\n\n/**\n * Abstract base class of interpolants over parametric samples.\n *\n * The parameter domain is one dimensional, typically the time or a path\n * along a curve defined by the data.\n *\n * The sample values can have any dimensionality and derived classes may\n * apply special interpretations to the data.\n *\n * This class provides the interval seek in a Template Method, deferring\n * the actual interpolation to derived classes.\n *\n * Time complexity is O(1) for linear access crossing at most two points\n * and O(log N) for random access, where N is the number of positions.\n *\n * References: {@link http://www.oodesign.com/template-method-pattern.html}\n *\n * @abstract\n */\nclass Interpolant {\n  /**\n   * Constructs a new interpolant.\n   *\n   * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.\n   * @param {TypedArray} sampleValues - The sample values.\n   * @param {number} sampleSize - The sample size\n   * @param {TypedArray} [resultBuffer] - The result buffer.\n   */\n  constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n    /**\n     * The parameter positions.\n     *\n     * @type {TypedArray}\n     */\n    this.parameterPositions = parameterPositions;\n\n    /**\n     * A cache index.\n     *\n     * @private\n     * @type {number}\n     * @default 0\n     */\n    this._cachedIndex = 0;\n\n    /**\n     * The result buffer.\n     *\n     * @type {TypedArray}\n     */\n    this.resultBuffer = resultBuffer !== undefined ? resultBuffer : new sampleValues.constructor(sampleSize);\n\n    /**\n     * The sample values.\n     *\n     * @type {TypedArray}\n     */\n    this.sampleValues = sampleValues;\n\n    /**\n     * The value size.\n     *\n     * @type {TypedArray}\n     */\n    this.valueSize = sampleSize;\n\n    /**\n     * The interpolation settings.\n     *\n     * @type {?Object}\n     * @default null\n     */\n    this.settings = null;\n\n    /**\n     * The default settings object.\n     *\n     * @type {Object}\n     */\n    this.DefaultSettings_ = {};\n  }\n\n  /**\n   * Evaluate the interpolant at position `t`.\n   *\n   * @param {number} t - The interpolation factor.\n   * @return {TypedArray} The result buffer.\n   */\n  evaluate(t) {\n    const pp = this.parameterPositions;\n    let i1 = this._cachedIndex,\n      t1 = pp[i1],\n      t0 = pp[i1 - 1];\n    validate_interval: {\n      seek: {\n        let right;\n        linear_scan: {\n          //- See http://jsperf.com/comparison-to-undefined/3\n          //- slower code:\n          //-\n          //- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n          forward_scan: if (!(t < t1)) {\n            for (let giveUpAt = i1 + 2;;) {\n              if (t1 === undefined) {\n                if (t < t0) break forward_scan;\n\n                // after end\n\n                i1 = pp.length;\n                this._cachedIndex = i1;\n                return this.copySampleValue_(i1 - 1);\n              }\n              if (i1 === giveUpAt) break; // this loop\n\n              t0 = t1;\n              t1 = pp[++i1];\n              if (t < t1) {\n                // we have arrived at the sought interval\n                break seek;\n              }\n            }\n\n            // prepare binary search on the right side of the index\n            right = pp.length;\n            break linear_scan;\n          }\n\n          //- slower code:\n          //-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n          if (!(t >= t0)) {\n            // looping?\n\n            const t1global = pp[1];\n            if (t < t1global) {\n              i1 = 2; // + 1, using the scan for the details\n              t0 = t1global;\n            }\n\n            // linear reverse scan\n\n            for (let giveUpAt = i1 - 2;;) {\n              if (t0 === undefined) {\n                // before start\n\n                this._cachedIndex = 0;\n                return this.copySampleValue_(0);\n              }\n              if (i1 === giveUpAt) break; // this loop\n\n              t1 = t0;\n              t0 = pp[--i1 - 1];\n              if (t >= t0) {\n                // we have arrived at the sought interval\n                break seek;\n              }\n            }\n\n            // prepare binary search on the left side of the index\n            right = i1;\n            i1 = 0;\n            break linear_scan;\n          }\n\n          // the interval is valid\n\n          break validate_interval;\n        } // linear scan\n\n        // binary search\n\n        while (i1 < right) {\n          const mid = i1 + right >>> 1;\n          if (t < pp[mid]) {\n            right = mid;\n          } else {\n            i1 = mid + 1;\n          }\n        }\n        t1 = pp[i1];\n        t0 = pp[i1 - 1];\n\n        // check boundary cases, again\n\n        if (t0 === undefined) {\n          this._cachedIndex = 0;\n          return this.copySampleValue_(0);\n        }\n        if (t1 === undefined) {\n          i1 = pp.length;\n          this._cachedIndex = i1;\n          return this.copySampleValue_(i1 - 1);\n        }\n      } // seek\n\n      this._cachedIndex = i1;\n      this.intervalChanged_(i1, t0, t1);\n    } // validate_interval\n\n    return this.interpolate_(i1, t0, t, t1);\n  }\n\n  /**\n   * Returns the interpolation settings.\n   *\n   * @return {Object} The interpolation settings.\n   */\n  getSettings_() {\n    return this.settings || this.DefaultSettings_;\n  }\n\n  /**\n   * Copies a sample value to the result buffer.\n   *\n   * @param {number} index - An index into the sample value buffer.\n   * @return {TypedArray} The result buffer.\n   */\n  copySampleValue_(index) {\n    // copies a sample value to the result buffer\n\n    const result = this.resultBuffer,\n      values = this.sampleValues,\n      stride = this.valueSize,\n      offset = index * stride;\n    for (let i = 0; i !== stride; ++i) {\n      result[i] = values[offset + i];\n    }\n    return result;\n  }\n\n  /**\n   * Copies a sample value to the result buffer.\n   *\n   * @abstract\n   * @param {number} i1 - An index into the sample value buffer.\n   * @param {number} t0 - The previous interpolation factor.\n   * @param {number} t - The current interpolation factor.\n   * @param {number} t1 - The next interpolation factor.\n   * @return {TypedArray} The result buffer.\n   */\n  interpolate_(/* i1, t0, t, t1 */\n  ) {\n    throw new Error('call to abstract method');\n    // implementations shall return this.resultBuffer\n  }\n\n  /**\n   * Optional method that is executed when the interval has changed.\n   *\n   * @param {number} i1 - An index into the sample value buffer.\n   * @param {number} t0 - The previous interpolation factor.\n   * @param {number} t - The current interpolation factor.\n   */\n  intervalChanged_(/* i1, t0, t1 */\n  ) {\n\n    // empty\n  }\n}\n\n/**\n * Fast and simple cubic spline interpolant.\n *\n * It was derived from a Hermitian construction setting the first derivative\n * at each sample position to the linear slope between neighboring positions\n * over their parameter interval.\n *\n * @augments Interpolant\n */\nclass CubicInterpolant extends Interpolant {\n  /**\n   * Constructs a new cubic interpolant.\n   *\n   * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.\n   * @param {TypedArray} sampleValues - The sample values.\n   * @param {number} sampleSize - The sample size\n   * @param {TypedArray} [resultBuffer] - The result buffer.\n   */\n  constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n    super(parameterPositions, sampleValues, sampleSize, resultBuffer);\n    this._weightPrev = -0;\n    this._offsetPrev = -0;\n    this._weightNext = -0;\n    this._offsetNext = -0;\n    this.DefaultSettings_ = {\n      endingStart: ZeroCurvatureEnding,\n      endingEnd: ZeroCurvatureEnding\n    };\n  }\n  intervalChanged_(i1, t0, t1) {\n    const pp = this.parameterPositions;\n    let iPrev = i1 - 2,\n      iNext = i1 + 1,\n      tPrev = pp[iPrev],\n      tNext = pp[iNext];\n    if (tPrev === undefined) {\n      switch (this.getSettings_().endingStart) {\n        case ZeroSlopeEnding:\n          // f'(t0) = 0\n          iPrev = i1;\n          tPrev = 2 * t0 - t1;\n          break;\n        case WrapAroundEnding:\n          // use the other end of the curve\n          iPrev = pp.length - 2;\n          tPrev = t0 + pp[iPrev] - pp[iPrev + 1];\n          break;\n        default:\n          // ZeroCurvatureEnding\n\n          // f''(t0) = 0 a.k.a. Natural Spline\n          iPrev = i1;\n          tPrev = t1;\n      }\n    }\n    if (tNext === undefined) {\n      switch (this.getSettings_().endingEnd) {\n        case ZeroSlopeEnding:\n          // f'(tN) = 0\n          iNext = i1;\n          tNext = 2 * t1 - t0;\n          break;\n        case WrapAroundEnding:\n          // use the other end of the curve\n          iNext = 1;\n          tNext = t1 + pp[1] - pp[0];\n          break;\n        default:\n          // ZeroCurvatureEnding\n\n          // f''(tN) = 0, a.k.a. Natural Spline\n          iNext = i1 - 1;\n          tNext = t0;\n      }\n    }\n    const halfDt = (t1 - t0) * 0.5,\n      stride = this.valueSize;\n    this._weightPrev = halfDt / (t0 - tPrev);\n    this._weightNext = halfDt / (tNext - t1);\n    this._offsetPrev = iPrev * stride;\n    this._offsetNext = iNext * stride;\n  }\n  interpolate_(i1, t0, t, t1) {\n    const result = this.resultBuffer,\n      values = this.sampleValues,\n      stride = this.valueSize,\n      o1 = i1 * stride,\n      o0 = o1 - stride,\n      oP = this._offsetPrev,\n      oN = this._offsetNext,\n      wP = this._weightPrev,\n      wN = this._weightNext,\n      p = (t - t0) / (t1 - t0),\n      pp = p * p,\n      ppp = pp * p;\n\n    // evaluate polynomials\n\n    const sP = -wP * ppp + 2 * wP * pp - wP * p;\n    const s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;\n    const s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;\n    const sN = wN * ppp - wN * pp;\n\n    // combine data linearly\n\n    for (let i = 0; i !== stride; ++i) {\n      result[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];\n    }\n    return result;\n  }\n}\n\n/**\n * A basic linear interpolant.\n *\n * @augments Interpolant\n */\nclass LinearInterpolant extends Interpolant {\n  /**\n   * Constructs a new linear interpolant.\n   *\n   * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.\n   * @param {TypedArray} sampleValues - The sample values.\n   * @param {number} sampleSize - The sample size\n   * @param {TypedArray} [resultBuffer] - The result buffer.\n   */\n  constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n    super(parameterPositions, sampleValues, sampleSize, resultBuffer);\n  }\n  interpolate_(i1, t0, t, t1) {\n    const result = this.resultBuffer,\n      values = this.sampleValues,\n      stride = this.valueSize,\n      offset1 = i1 * stride,\n      offset0 = offset1 - stride,\n      weight1 = (t - t0) / (t1 - t0),\n      weight0 = 1 - weight1;\n    for (let i = 0; i !== stride; ++i) {\n      result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;\n    }\n    return result;\n  }\n}\n\n/**\n * Interpolant that evaluates to the sample value at the position preceding\n * the parameter.\n *\n * @augments Interpolant\n */\nclass DiscreteInterpolant extends Interpolant {\n  /**\n   * Constructs a new discrete interpolant.\n   *\n   * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.\n   * @param {TypedArray} sampleValues - The sample values.\n   * @param {number} sampleSize - The sample size\n   * @param {TypedArray} [resultBuffer] - The result buffer.\n   */\n  constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n    super(parameterPositions, sampleValues, sampleSize, resultBuffer);\n  }\n  interpolate_(i1 /*, t0, t, t1 */) {\n    return this.copySampleValue_(i1 - 1);\n  }\n}\n\n/**\n * Represents s a timed sequence of keyframes, which are composed of lists of\n * times and related values, and which are used to animate a specific property\n * of an object.\n */\nclass KeyframeTrack {\n  /**\n   * Constructs a new keyframe track.\n   *\n   * @param {string} name - The keyframe track's name.\n   * @param {Array<number>} times - A list of keyframe times.\n   * @param {Array<number>} values - A list of keyframe values.\n   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.\n   */\n  constructor(name, times, values, interpolation) {\n    if (name === undefined) throw new Error('THREE.KeyframeTrack: track name is undefined');\n    if (times === undefined || times.length === 0) throw new Error('THREE.KeyframeTrack: no keyframes in track named ' + name);\n\n    /**\n     * The track's name can refer to morph targets or bones or\n     * possibly other values within an animated object. See {@link PropertyBinding#parseTrackName}\n     * for the forms of strings that can be parsed for property binding.\n     *\n     * @type {string}\n     */\n    this.name = name;\n\n    /**\n     * The keyframe times.\n     *\n     * @type {Float32Array}\n     */\n    this.times = convertArray(times, this.TimeBufferType);\n\n    /**\n     * The keyframe values.\n     *\n     * @type {Float32Array}\n     */\n    this.values = convertArray(values, this.ValueBufferType);\n    this.setInterpolation(interpolation || this.DefaultInterpolation);\n  }\n\n  /**\n   * Converts the keyframe track to JSON.\n   *\n   * @static\n   * @param {KeyframeTrack} track - The keyframe track to serialize.\n   * @return {Object} The serialized keyframe track as JSON.\n   */\n  static toJSON(track) {\n    const trackType = track.constructor;\n    let json;\n\n    // derived classes can define a static toJSON method\n    if (trackType.toJSON !== this.toJSON) {\n      json = trackType.toJSON(track);\n    } else {\n      // by default, we assume the data can be serialized as-is\n      json = {\n        'name': track.name,\n        'times': convertArray(track.times, Array),\n        'values': convertArray(track.values, Array)\n      };\n      const interpolation = track.getInterpolation();\n      if (interpolation !== track.DefaultInterpolation) {\n        json.interpolation = interpolation;\n      }\n    }\n    json.type = track.ValueTypeName; // mandatory\n\n    return json;\n  }\n\n  /**\n   * Factory method for creating a new discrete interpolant.\n   *\n   * @static\n   * @param {TypedArray} [result] - The result buffer.\n   * @return {DiscreteInterpolant} The new interpolant.\n   */\n  InterpolantFactoryMethodDiscrete(result) {\n    return new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);\n  }\n\n  /**\n   * Factory method for creating a new linear interpolant.\n   *\n   * @static\n   * @param {TypedArray} [result] - The result buffer.\n   * @return {LinearInterpolant} The new interpolant.\n   */\n  InterpolantFactoryMethodLinear(result) {\n    return new LinearInterpolant(this.times, this.values, this.getValueSize(), result);\n  }\n\n  /**\n   * Factory method for creating a new smooth interpolant.\n   *\n   * @static\n   * @param {TypedArray} [result] - The result buffer.\n   * @return {CubicInterpolant} The new interpolant.\n   */\n  InterpolantFactoryMethodSmooth(result) {\n    return new CubicInterpolant(this.times, this.values, this.getValueSize(), result);\n  }\n\n  /**\n   * Defines the interpolation factor method for this keyframe track.\n   *\n   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} interpolation - The interpolation type.\n   * @return {KeyframeTrack} A reference to this keyframe track.\n   */\n  setInterpolation(interpolation) {\n    let factoryMethod;\n    switch (interpolation) {\n      case InterpolateDiscrete:\n        factoryMethod = this.InterpolantFactoryMethodDiscrete;\n        break;\n      case InterpolateLinear:\n        factoryMethod = this.InterpolantFactoryMethodLinear;\n        break;\n      case InterpolateSmooth:\n        factoryMethod = this.InterpolantFactoryMethodSmooth;\n        break;\n    }\n    if (factoryMethod === undefined) {\n      const message = 'unsupported interpolation for ' + this.ValueTypeName + ' keyframe track named ' + this.name;\n      if (this.createInterpolant === undefined) {\n        // fall back to default, unless the default itself is messed up\n        if (interpolation !== this.DefaultInterpolation) {\n          this.setInterpolation(this.DefaultInterpolation);\n        } else {\n          throw new Error(message); // fatal, in this case\n        }\n      }\n      console.warn('THREE.KeyframeTrack:', message);\n      return this;\n    }\n    this.createInterpolant = factoryMethod;\n    return this;\n  }\n\n  /**\n   * Returns the current interpolation type.\n   *\n   * @return {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} The interpolation type.\n   */\n  getInterpolation() {\n    switch (this.createInterpolant) {\n      case this.InterpolantFactoryMethodDiscrete:\n        return InterpolateDiscrete;\n      case this.InterpolantFactoryMethodLinear:\n        return InterpolateLinear;\n      case this.InterpolantFactoryMethodSmooth:\n        return InterpolateSmooth;\n    }\n  }\n\n  /**\n   * Returns the value size.\n   *\n   * @return {number} The value size.\n   */\n  getValueSize() {\n    return this.values.length / this.times.length;\n  }\n\n  /**\n   * Moves all keyframes either forward or backward in time.\n   *\n   * @param {number} timeOffset - The offset to move the time values.\n   * @return {KeyframeTrack} A reference to this keyframe track.\n   */\n  shift(timeOffset) {\n    if (timeOffset !== 0.0) {\n      const times = this.times;\n      for (let i = 0, n = times.length; i !== n; ++i) {\n        times[i] += timeOffset;\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Scale all keyframe times by a factor (useful for frame - seconds conversions).\n   *\n   * @param {number} timeScale - The time scale.\n   * @return {KeyframeTrack} A reference to this keyframe track.\n   */\n  scale(timeScale) {\n    if (timeScale !== 1.0) {\n      const times = this.times;\n      for (let i = 0, n = times.length; i !== n; ++i) {\n        times[i] *= timeScale;\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Removes keyframes before and after animation without changing any values within the defined time range.\n   *\n   * Note: The method does not shift around keys to the start of the track time, because for interpolated\n   * keys this will change their values\n   *\n   * @param {number} startTime - The start time.\n   * @param {number} endTime - The end time.\n   * @return {KeyframeTrack} A reference to this keyframe track.\n   */\n  trim(startTime, endTime) {\n    const times = this.times,\n      nKeys = times.length;\n    let from = 0,\n      to = nKeys - 1;\n    while (from !== nKeys && times[from] < startTime) {\n      ++from;\n    }\n    while (to !== -1 && times[to] > endTime) {\n      --to;\n    }\n    ++to; // inclusive -> exclusive bound\n\n    if (from !== 0 || to !== nKeys) {\n      // empty tracks are forbidden, so keep at least one keyframe\n      if (from >= to) {\n        to = Math.max(to, 1);\n        from = to - 1;\n      }\n      const stride = this.getValueSize();\n      this.times = times.slice(from, to);\n      this.values = this.values.slice(from * stride, to * stride);\n    }\n    return this;\n  }\n\n  /**\n   * Performs minimal validation on the keyframe track. Returns `true` if the values\n   * are valid.\n   *\n   * @return {boolean} Whether the keyframes are valid or not.\n   */\n  validate() {\n    let valid = true;\n    const valueSize = this.getValueSize();\n    if (valueSize - Math.floor(valueSize) !== 0) {\n      console.error('THREE.KeyframeTrack: Invalid value size in track.', this);\n      valid = false;\n    }\n    const times = this.times,\n      values = this.values,\n      nKeys = times.length;\n    if (nKeys === 0) {\n      console.error('THREE.KeyframeTrack: Track is empty.', this);\n      valid = false;\n    }\n    let prevTime = null;\n    for (let i = 0; i !== nKeys; i++) {\n      const currTime = times[i];\n      if (typeof currTime === 'number' && isNaN(currTime)) {\n        console.error('THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime);\n        valid = false;\n        break;\n      }\n      if (prevTime !== null && prevTime > currTime) {\n        console.error('THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime);\n        valid = false;\n        break;\n      }\n      prevTime = currTime;\n    }\n    if (values !== undefined) {\n      if (isTypedArray(values)) {\n        for (let i = 0, n = values.length; i !== n; ++i) {\n          const value = values[i];\n          if (isNaN(value)) {\n            console.error('THREE.KeyframeTrack: Value is not a valid number.', this, i, value);\n            valid = false;\n            break;\n          }\n        }\n      }\n    }\n    return valid;\n  }\n\n  /**\n   * Optimizes this keyframe track by removing equivalent sequential keys (which are\n   * common in morph target sequences).\n   *\n   * @return {AnimationClip} A reference to this animation clip.\n   */\n  optimize() {\n    // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\n    // times or values may be shared with other tracks, so overwriting is unsafe\n    const times = this.times.slice(),\n      values = this.values.slice(),\n      stride = this.getValueSize(),\n      smoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n      lastIndex = times.length - 1;\n    let writeIndex = 1;\n    for (let i = 1; i < lastIndex; ++i) {\n      let keep = false;\n      const time = times[i];\n      const timeNext = times[i + 1];\n\n      // remove adjacent keyframes scheduled at the same time\n\n      if (time !== timeNext && (i !== 1 || time !== times[0])) {\n        if (!smoothInterpolation) {\n          // remove unnecessary keyframes same as their neighbors\n\n          const offset = i * stride,\n            offsetP = offset - stride,\n            offsetN = offset + stride;\n          for (let j = 0; j !== stride; ++j) {\n            const value = values[offset + j];\n            if (value !== values[offsetP + j] || value !== values[offsetN + j]) {\n              keep = true;\n              break;\n            }\n          }\n        } else {\n          keep = true;\n        }\n      }\n\n      // in-place compaction\n\n      if (keep) {\n        if (i !== writeIndex) {\n          times[writeIndex] = times[i];\n          const readOffset = i * stride,\n            writeOffset = writeIndex * stride;\n          for (let j = 0; j !== stride; ++j) {\n            values[writeOffset + j] = values[readOffset + j];\n          }\n        }\n        ++writeIndex;\n      }\n    }\n\n    // flush last keyframe (compaction looks ahead)\n\n    if (lastIndex > 0) {\n      times[writeIndex] = times[lastIndex];\n      for (let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++j) {\n        values[writeOffset + j] = values[readOffset + j];\n      }\n      ++writeIndex;\n    }\n    if (writeIndex !== times.length) {\n      this.times = times.slice(0, writeIndex);\n      this.values = values.slice(0, writeIndex * stride);\n    } else {\n      this.times = times;\n      this.values = values;\n    }\n    return this;\n  }\n\n  /**\n   * Returns a new keyframe track with copied values from this instance.\n   *\n   * @return {KeyframeTrack} A clone of this instance.\n   */\n  clone() {\n    const times = this.times.slice();\n    const values = this.values.slice();\n    const TypedKeyframeTrack = this.constructor;\n    const track = new TypedKeyframeTrack(this.name, times, values);\n\n    // Interpolant argument to constructor is not saved, so copy the factory method directly.\n    track.createInterpolant = this.createInterpolant;\n    return track;\n  }\n}\n\n/**\n * The value type name.\n *\n * @type {String}\n * @default ''\n */\nKeyframeTrack.prototype.ValueTypeName = '';\n\n/**\n * The time buffer type of this keyframe track.\n *\n * @type {TypedArray|Array}\n * @default Float32Array.constructor\n */\nKeyframeTrack.prototype.TimeBufferType = Float32Array;\n\n/**\n * The value buffer type of this keyframe track.\n *\n * @type {TypedArray|Array}\n * @default Float32Array.constructor\n */\nKeyframeTrack.prototype.ValueBufferType = Float32Array;\n\n/**\n * The default interpolation type of this keyframe track.\n *\n * @type {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)}\n * @default InterpolateLinear\n */\nKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n\n/**\n * A track for boolean keyframe values.\n *\n * @augments KeyframeTrack\n */\nclass BooleanKeyframeTrack extends KeyframeTrack {\n  /**\n   * Constructs a new boolean keyframe track.\n   *\n   * This keyframe track type has no `interpolation` parameter because the\n   * interpolation is always discrete.\n   *\n   * @param {string} name - The keyframe track's name.\n   * @param {Array<number>} times - A list of keyframe times.\n   * @param {Array<number>} values - A list of keyframe values.\n   */\n  constructor(name, times, values) {\n    super(name, times, values);\n  }\n}\n\n/**\n * The value type name.\n *\n * @type {String}\n * @default 'bool'\n */\nBooleanKeyframeTrack.prototype.ValueTypeName = 'bool';\n\n/**\n * The value buffer type of this keyframe track.\n *\n * @type {TypedArray|Array}\n * @default Array.constructor\n */\nBooleanKeyframeTrack.prototype.ValueBufferType = Array;\n\n/**\n * The default interpolation type of this keyframe track.\n *\n * @type {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)}\n * @default InterpolateDiscrete\n */\nBooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\nBooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\nBooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A track for color keyframe values.\n *\n * @augments KeyframeTrack\n */\nclass ColorKeyframeTrack extends KeyframeTrack {\n  /**\n   * Constructs a new color keyframe track.\n   *\n   * @param {string} name - The keyframe track's name.\n   * @param {Array<number>} times - A list of keyframe times.\n   * @param {Array<number>} values - A list of keyframe values.\n   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.\n   */\n  constructor(name, times, values, interpolation) {\n    super(name, times, values, interpolation);\n  }\n}\n\n/**\n * The value type name.\n *\n * @type {String}\n * @default 'color'\n */\nColorKeyframeTrack.prototype.ValueTypeName = 'color';\n\n/**\n * A track for numeric keyframe values.\n *\n * @augments KeyframeTrack\n */\nclass NumberKeyframeTrack extends KeyframeTrack {\n  /**\n   * Constructs a new number keyframe track.\n   *\n   * @param {string} name - The keyframe track's name.\n   * @param {Array<number>} times - A list of keyframe times.\n   * @param {Array<number>} values - A list of keyframe values.\n   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.\n   */\n  constructor(name, times, values, interpolation) {\n    super(name, times, values, interpolation);\n  }\n}\n\n/**\n * The value type name.\n *\n * @type {String}\n * @default 'number'\n */\nNumberKeyframeTrack.prototype.ValueTypeName = 'number';\n\n/**\n * Spherical linear unit quaternion interpolant.\n *\n * @augments Interpolant\n */\nclass QuaternionLinearInterpolant extends Interpolant {\n  /**\n   * Constructs a new SLERP interpolant.\n   *\n   * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.\n   * @param {TypedArray} sampleValues - The sample values.\n   * @param {number} sampleSize - The sample size\n   * @param {TypedArray} [resultBuffer] - The result buffer.\n   */\n  constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n    super(parameterPositions, sampleValues, sampleSize, resultBuffer);\n  }\n  interpolate_(i1, t0, t, t1) {\n    const result = this.resultBuffer,\n      values = this.sampleValues,\n      stride = this.valueSize,\n      alpha = (t - t0) / (t1 - t0);\n    let offset = i1 * stride;\n    for (let end = offset + stride; offset !== end; offset += 4) {\n      Quaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);\n    }\n    return result;\n  }\n}\n\n/**\n * A track for Quaternion keyframe values.\n *\n * @augments KeyframeTrack\n */\nclass QuaternionKeyframeTrack extends KeyframeTrack {\n  /**\n   * Constructs a new Quaternion keyframe track.\n   *\n   * @param {string} name - The keyframe track's name.\n   * @param {Array<number>} times - A list of keyframe times.\n   * @param {Array<number>} values - A list of keyframe values.\n   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.\n   */\n  constructor(name, times, values, interpolation) {\n    super(name, times, values, interpolation);\n  }\n\n  /**\n   * Overwritten so the method returns Quaternion based interpolant.\n   *\n   * @static\n   * @param {TypedArray} [result] - The result buffer.\n   * @return {QuaternionLinearInterpolant} The new interpolant.\n   */\n  InterpolantFactoryMethodLinear(result) {\n    return new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);\n  }\n}\n\n/**\n * The value type name.\n *\n * @type {String}\n * @default 'quaternion'\n */\nQuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion';\n// ValueBufferType is inherited\n// DefaultInterpolation is inherited;\nQuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A track for string keyframe values.\n *\n * @augments KeyframeTrack\n */\nclass StringKeyframeTrack extends KeyframeTrack {\n  /**\n   * Constructs a new string keyframe track.\n   *\n   * This keyframe track type has no `interpolation` parameter because the\n   * interpolation is always discrete.\n   *\n   * @param {string} name - The keyframe track's name.\n   * @param {Array<number>} times - A list of keyframe times.\n   * @param {Array<number>} values - A list of keyframe values.\n   */\n  constructor(name, times, values) {\n    super(name, times, values);\n  }\n}\n\n/**\n * The value type name.\n *\n * @type {String}\n * @default 'string'\n */\nStringKeyframeTrack.prototype.ValueTypeName = 'string';\n\n/**\n * The value buffer type of this keyframe track.\n *\n * @type {TypedArray|Array}\n * @default Array.constructor\n */\nStringKeyframeTrack.prototype.ValueBufferType = Array;\n\n/**\n * The default interpolation type of this keyframe track.\n *\n * @type {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)}\n * @default InterpolateDiscrete\n */\nStringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\nStringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\nStringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A track for vector keyframe values.\n *\n * @augments KeyframeTrack\n */\nclass VectorKeyframeTrack extends KeyframeTrack {\n  /**\n   * Constructs a new vector keyframe track.\n   *\n   * @param {string} name - The keyframe track's name.\n   * @param {Array<number>} times - A list of keyframe times.\n   * @param {Array<number>} values - A list of keyframe values.\n   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.\n   */\n  constructor(name, times, values, interpolation) {\n    super(name, times, values, interpolation);\n  }\n}\n\n/**\n * The value type name.\n *\n * @type {String}\n * @default 'vector'\n */\nVectorKeyframeTrack.prototype.ValueTypeName = 'vector';\n\n/**\n * A reusable set of keyframe tracks which represent an animation.\n */\nclass AnimationClip {\n  /**\n   * Constructs a new animation clip.\n   *\n   * Note: Instead of instantiating an AnimationClip directly with the constructor, you can\n   * use the static interface of this class for creating clips. In most cases though, animation clips\n   * will automatically be created by loaders when importing animated 3D assets.\n   *\n   * @param {string} [name=''] - The clip's name.\n   * @param {number} [duration=-1] - The clip's duration in seconds. If a negative value is passed,\n   * the duration will be calculated from the passed keyframes.\n   * @param {Array<KeyframeTrack>} tracks - An array of keyframe tracks.\n   * @param {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)} [blendMode=NormalAnimationBlendMode] - Defines how the animation\n   * is blended/combined when two or more animations are simultaneously played.\n   */\n  constructor() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    let tracks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let blendMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : NormalAnimationBlendMode;\n    /**\n     * The clip's name.\n     *\n     * @type {string}\n     */\n    this.name = name;\n\n    /**\n     *  An array of keyframe tracks.\n     *\n     * @type {Array<KeyframeTrack>}\n     */\n    this.tracks = tracks;\n\n    /**\n     * The clip's duration in seconds.\n     *\n     * @type {number}\n     */\n    this.duration = duration;\n\n    /**\n     * Defines how the animation is blended/combined when two or more animations\n     * are simultaneously played.\n     *\n     * @type {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)}\n     */\n    this.blendMode = blendMode;\n\n    /**\n     * The UUID of the animation clip.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.uuid = generateUUID();\n\n    // this means it should figure out its duration by scanning the tracks\n    if (this.duration < 0) {\n      this.resetDuration();\n    }\n  }\n\n  /**\n   * Factory method for creating an animation clip from the given JSON.\n   *\n   * @static\n   * @param {Object} json - The serialized animation clip.\n   * @return {AnimationClip} The new animation clip.\n   */\n  static parse(json) {\n    const tracks = [],\n      jsonTracks = json.tracks,\n      frameTime = 1.0 / (json.fps || 1.0);\n    for (let i = 0, n = jsonTracks.length; i !== n; ++i) {\n      tracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));\n    }\n    const clip = new this(json.name, json.duration, tracks, json.blendMode);\n    clip.uuid = json.uuid;\n    return clip;\n  }\n\n  /**\n   * Serializes the given animation clip into JSON.\n   *\n   * @static\n   * @param {AnimationClip} clip - The animation clip to serialize.\n   * @return {Object} The JSON object.\n   */\n  static toJSON(clip) {\n    const tracks = [],\n      clipTracks = clip.tracks;\n    const json = {\n      'name': clip.name,\n      'duration': clip.duration,\n      'tracks': tracks,\n      'uuid': clip.uuid,\n      'blendMode': clip.blendMode\n    };\n    for (let i = 0, n = clipTracks.length; i !== n; ++i) {\n      tracks.push(KeyframeTrack.toJSON(clipTracks[i]));\n    }\n    return json;\n  }\n\n  /**\n   * Returns a new animation clip from the passed morph targets array of a\n   * geometry, taking a name and the number of frames per second.\n   *\n   * Note: The fps parameter is required, but the animation speed can be\n   * overridden via {@link AnimationAction#setDuration}.\n   *\n   * @static\n   * @param {string} name - The name of the animation clip.\n   * @param {Array<Object>} morphTargetSequence - A sequence of morph targets.\n   * @param {number} fps - The Frames-Per-Second value.\n   * @param {boolean} noLoop - Whether the clip should be no loop or not.\n   * @return {AnimationClip} The new animation clip.\n   */\n  static CreateFromMorphTargetSequence(name, morphTargetSequence, fps, noLoop) {\n    const numMorphTargets = morphTargetSequence.length;\n    const tracks = [];\n    for (let i = 0; i < numMorphTargets; i++) {\n      let times = [];\n      let values = [];\n      times.push((i + numMorphTargets - 1) % numMorphTargets, i, (i + 1) % numMorphTargets);\n      values.push(0, 1, 0);\n      const order = getKeyframeOrder(times);\n      times = sortedArray(times, 1, order);\n      values = sortedArray(values, 1, order);\n\n      // if there is a key at the first frame, duplicate it as the\n      // last frame as well for perfect loop.\n      if (!noLoop && times[0] === 0) {\n        times.push(numMorphTargets);\n        values.push(values[0]);\n      }\n      tracks.push(new NumberKeyframeTrack('.morphTargetInfluences[' + morphTargetSequence[i].name + ']', times, values).scale(1.0 / fps));\n    }\n    return new this(name, -1, tracks);\n  }\n\n  /**\n   * Searches for an animation clip by name, taking as its first parameter\n   * either an array of clips, or a mesh or geometry that contains an\n   * array named \"animations\" property.\n   *\n   * @static\n   * @param {(Array<AnimationClip>|Object3D)} objectOrClipArray - The array or object to search through.\n   * @param {string} name - The name to search for.\n   * @return {?AnimationClip} The found animation clip. Returns `null` if no clip has been found.\n   */\n  static findByName(objectOrClipArray, name) {\n    let clipArray = objectOrClipArray;\n    if (!Array.isArray(objectOrClipArray)) {\n      const o = objectOrClipArray;\n      clipArray = o.geometry && o.geometry.animations || o.animations;\n    }\n    for (let i = 0; i < clipArray.length; i++) {\n      if (clipArray[i].name === name) {\n        return clipArray[i];\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns an array of new AnimationClips created from the morph target\n   * sequences of a geometry, trying to sort morph target names into\n   * animation-group-based patterns like \"Walk_001, Walk_002, Run_001, Run_002...\".\n   *\n   * See {@link MD2Loader#parse} as an example for how the method should be used.\n   *\n   * @static\n   * @param {Array<Object>} morphTargets - A sequence of morph targets.\n   * @param {number} fps - The Frames-Per-Second value.\n   * @param {boolean} noLoop - Whether the clip should be no loop or not.\n   * @return {Array<AnimationClip>} An array of new animation clips.\n   */\n  static CreateClipsFromMorphTargetSequences(morphTargets, fps, noLoop) {\n    const animationToMorphTargets = {};\n\n    // tested with https://regex101.com/ on trick sequences\n    // such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n    const pattern = /^([\\w-]*?)([\\d]+)$/;\n\n    // sort morph target names into animation groups based\n    // patterns like Walk_001, Walk_002, Run_001, Run_002\n    for (let i = 0, il = morphTargets.length; i < il; i++) {\n      const morphTarget = morphTargets[i];\n      const parts = morphTarget.name.match(pattern);\n      if (parts && parts.length > 1) {\n        const name = parts[1];\n        let animationMorphTargets = animationToMorphTargets[name];\n        if (!animationMorphTargets) {\n          animationToMorphTargets[name] = animationMorphTargets = [];\n        }\n        animationMorphTargets.push(morphTarget);\n      }\n    }\n    const clips = [];\n    for (const name in animationToMorphTargets) {\n      clips.push(this.CreateFromMorphTargetSequence(name, animationToMorphTargets[name], fps, noLoop));\n    }\n    return clips;\n  }\n\n  /**\n   * Parses the `animation.hierarchy` format and returns a new animation clip.\n   *\n   * @static\n   * @deprecated since r175.\n   * @param {Object} animation - A serialized animation clip as JSON.\n   * @param {Array<Bones>} bones - An array of bones.\n   * @return {?AnimationClip} The new animation clip.\n   */\n  static parseAnimation(animation, bones) {\n    console.warn('THREE.AnimationClip: parseAnimation() is deprecated and will be removed with r185');\n    if (!animation) {\n      console.error('THREE.AnimationClip: No animation in JSONLoader data.');\n      return null;\n    }\n    const addNonemptyTrack = function (trackType, trackName, animationKeys, propertyName, destTracks) {\n      // only return track if there are actually keys.\n      if (animationKeys.length !== 0) {\n        const times = [];\n        const values = [];\n        flattenJSON(animationKeys, times, values, propertyName);\n\n        // empty keys are filtered out, so check again\n        if (times.length !== 0) {\n          destTracks.push(new trackType(trackName, times, values));\n        }\n      }\n    };\n    const tracks = [];\n    const clipName = animation.name || 'default';\n    const fps = animation.fps || 30;\n    const blendMode = animation.blendMode;\n\n    // automatic length determination in AnimationClip.\n    let duration = animation.length || -1;\n    const hierarchyTracks = animation.hierarchy || [];\n    for (let h = 0; h < hierarchyTracks.length; h++) {\n      const animationKeys = hierarchyTracks[h].keys;\n\n      // skip empty tracks\n      if (!animationKeys || animationKeys.length === 0) continue;\n\n      // process morph targets\n      if (animationKeys[0].morphTargets) {\n        // figure out all morph targets used in this track\n        const morphTargetNames = {};\n        let k;\n        for (k = 0; k < animationKeys.length; k++) {\n          if (animationKeys[k].morphTargets) {\n            for (let m = 0; m < animationKeys[k].morphTargets.length; m++) {\n              morphTargetNames[animationKeys[k].morphTargets[m]] = -1;\n            }\n          }\n        }\n\n        // create a track for each morph target with all zero\n        // morphTargetInfluences except for the keys in which\n        // the morphTarget is named.\n        for (const morphTargetName in morphTargetNames) {\n          const times = [];\n          const values = [];\n          for (let m = 0; m !== animationKeys[k].morphTargets.length; ++m) {\n            const animationKey = animationKeys[k];\n            times.push(animationKey.time);\n            values.push(animationKey.morphTarget === morphTargetName ? 1 : 0);\n          }\n          tracks.push(new NumberKeyframeTrack('.morphTargetInfluence[' + morphTargetName + ']', times, values));\n        }\n        duration = morphTargetNames.length * fps;\n      } else {\n        // ...assume skeletal animation\n\n        const boneName = '.bones[' + bones[h].name + ']';\n        addNonemptyTrack(VectorKeyframeTrack, boneName + '.position', animationKeys, 'pos', tracks);\n        addNonemptyTrack(QuaternionKeyframeTrack, boneName + '.quaternion', animationKeys, 'rot', tracks);\n        addNonemptyTrack(VectorKeyframeTrack, boneName + '.scale', animationKeys, 'scl', tracks);\n      }\n    }\n    if (tracks.length === 0) {\n      return null;\n    }\n    const clip = new this(clipName, duration, tracks, blendMode);\n    return clip;\n  }\n\n  /**\n   * Sets the duration of this clip to the duration of its longest keyframe track.\n   *\n   * @return {AnimationClip} A reference to this animation clip.\n   */\n  resetDuration() {\n    const tracks = this.tracks;\n    let duration = 0;\n    for (let i = 0, n = tracks.length; i !== n; ++i) {\n      const track = this.tracks[i];\n      duration = Math.max(duration, track.times[track.times.length - 1]);\n    }\n    this.duration = duration;\n    return this;\n  }\n\n  /**\n   * Trims all tracks to the clip's duration.\n   *\n   * @return {AnimationClip} A reference to this animation clip.\n   */\n  trim() {\n    for (let i = 0; i < this.tracks.length; i++) {\n      this.tracks[i].trim(0, this.duration);\n    }\n    return this;\n  }\n\n  /**\n   * Performs minimal validation on each track in the clip. Returns `true` if all\n   * tracks are valid.\n   *\n   * @return {boolean} Whether the clip's keyframes are valid or not.\n   */\n  validate() {\n    let valid = true;\n    for (let i = 0; i < this.tracks.length; i++) {\n      valid = valid && this.tracks[i].validate();\n    }\n    return valid;\n  }\n\n  /**\n   * Optimizes each track by removing equivalent sequential keys (which are\n   * common in morph target sequences).\n   *\n   * @return {AnimationClip} A reference to this animation clip.\n   */\n  optimize() {\n    for (let i = 0; i < this.tracks.length; i++) {\n      this.tracks[i].optimize();\n    }\n    return this;\n  }\n\n  /**\n   * Returns a new animation clip with copied values from this instance.\n   *\n   * @return {AnimationClip} A clone of this instance.\n   */\n  clone() {\n    const tracks = [];\n    for (let i = 0; i < this.tracks.length; i++) {\n      tracks.push(this.tracks[i].clone());\n    }\n    return new this.constructor(this.name, this.duration, tracks, this.blendMode);\n  }\n\n  /**\n   * Serializes this animation clip into JSON.\n   *\n   * @return {Object} The JSON object.\n   */\n  toJSON() {\n    return this.constructor.toJSON(this);\n  }\n}\nfunction getTrackTypeForValueTypeName(typeName) {\n  switch (typeName.toLowerCase()) {\n    case 'scalar':\n    case 'double':\n    case 'float':\n    case 'number':\n    case 'integer':\n      return NumberKeyframeTrack;\n    case 'vector':\n    case 'vector2':\n    case 'vector3':\n    case 'vector4':\n      return VectorKeyframeTrack;\n    case 'color':\n      return ColorKeyframeTrack;\n    case 'quaternion':\n      return QuaternionKeyframeTrack;\n    case 'bool':\n    case 'boolean':\n      return BooleanKeyframeTrack;\n    case 'string':\n      return StringKeyframeTrack;\n  }\n  throw new Error('THREE.KeyframeTrack: Unsupported typeName: ' + typeName);\n}\nfunction parseKeyframeTrack(json) {\n  if (json.type === undefined) {\n    throw new Error('THREE.KeyframeTrack: track type undefined, can not parse');\n  }\n  const trackType = getTrackTypeForValueTypeName(json.type);\n  if (json.times === undefined) {\n    const times = [],\n      values = [];\n    flattenJSON(json.keys, times, values, 'value');\n    json.times = times;\n    json.values = values;\n  }\n\n  // derived classes can define a static parse method\n  if (trackType.parse !== undefined) {\n    return trackType.parse(json);\n  } else {\n    // by default, we assume a constructor compatible with the base\n    return new trackType(json.name, json.times, json.values, json.interpolation);\n  }\n}\n\n/**\n * @class\n * @classdesc A simple caching system, used internally by {@link FileLoader}.\n * To enable caching across all loaders that use {@link FileLoader}, add `THREE.Cache.enabled = true.` once in your app.\n * @hideconstructor\n */\nconst Cache = {\n  /**\n   * Whether caching is enabled or not.\n   *\n   * @static\n   * @type {boolean}\n   * @default false\n   */\n  enabled: false,\n  /**\n   * A dictionary that holds cached files.\n   *\n   * @static\n   * @type {Object<string,Object>}\n   */\n  files: {},\n  /**\n   * Adds a cache entry with a key to reference the file. If this key already\n   * holds a file, it is overwritten.\n   *\n   * @static\n   * @param {string} key - The key to reference the cached file.\n   * @param {Object} file -  The file to be cached.\n   */\n  add: function (key, file) {\n    if (this.enabled === false) return;\n\n    // console.log( 'THREE.Cache', 'Adding key:', key );\n\n    this.files[key] = file;\n  },\n  /**\n   * Gets the cached value for the given key.\n   *\n   * @static\n   * @param {string} key - The key to reference the cached file.\n   * @return {Object|undefined} The cached file. If the key does not exist `undefined` is returned.\n   */\n  get: function (key) {\n    if (this.enabled === false) return;\n\n    // console.log( 'THREE.Cache', 'Checking key:', key );\n\n    return this.files[key];\n  },\n  /**\n   * Removes the cached file associated with the given key.\n   *\n   * @static\n   * @param {string} key - The key to reference the cached file.\n   */\n  remove: function (key) {\n    delete this.files[key];\n  },\n  /**\n   * Remove all values from the cache.\n   *\n   * @static\n   */\n  clear: function () {\n    this.files = {};\n  }\n};\n\n/**\n * Handles and keeps track of loaded and pending data. A default global\n * instance of this class is created and used by loaders if not supplied\n * manually.\n *\n * In general that should be sufficient, however there are times when it can\n * be useful to have separate loaders - for example if you want to show\n * separate loading bars for objects and textures.\n *\n * ```js\n * const manager = new THREE.LoadingManager();\n * manager.onLoad = () => console.log( 'Loading complete!' );\n *\n * const loader1 = new OBJLoader( manager );\n * const loader2 = new ColladaLoader( manager );\n * ```\n */\nclass LoadingManager {\n  /**\n   * Constructs a new loading manager.\n   *\n   * @param {Function} [onLoad] - Executes when all items have been loaded.\n   * @param {Function} [onProgress] - Executes when single items have been loaded.\n   * @param {Function} [onError] - Executes when an error occurs.\n   */\n  constructor(onLoad, onProgress, onError) {\n    const scope = this;\n    let isLoading = false;\n    let itemsLoaded = 0;\n    let itemsTotal = 0;\n    let urlModifier = undefined;\n    const handlers = [];\n\n    // Refer to #5689 for the reason why we don't set .onStart\n    // in the constructor\n\n    /**\n     * Executes when an item starts loading.\n     *\n     * @type {Function|undefined}\n     * @default undefined\n     */\n    this.onStart = undefined;\n\n    /**\n     * Executes when all items have been loaded.\n     *\n     * @type {Function|undefined}\n     * @default undefined\n     */\n    this.onLoad = onLoad;\n\n    /**\n     * Executes when single items have been loaded.\n     *\n     * @type {Function|undefined}\n     * @default undefined\n     */\n    this.onProgress = onProgress;\n\n    /**\n     * Executes when an error occurs.\n     *\n     * @type {Function|undefined}\n     * @default undefined\n     */\n    this.onError = onError;\n\n    /**\n     * This should be called by any loader using the manager when the loader\n     * starts loading an item.\n     *\n     * @param {string} url - The URL to load.\n     */\n    this.itemStart = function (url) {\n      itemsTotal++;\n      if (isLoading === false) {\n        if (scope.onStart !== undefined) {\n          scope.onStart(url, itemsLoaded, itemsTotal);\n        }\n      }\n      isLoading = true;\n    };\n\n    /**\n     * This should be called by any loader using the manager when the loader\n     * ended loading an item.\n     *\n     * @param {string} url - The URL of the loaded item.\n     */\n    this.itemEnd = function (url) {\n      itemsLoaded++;\n      if (scope.onProgress !== undefined) {\n        scope.onProgress(url, itemsLoaded, itemsTotal);\n      }\n      if (itemsLoaded === itemsTotal) {\n        isLoading = false;\n        if (scope.onLoad !== undefined) {\n          scope.onLoad();\n        }\n      }\n    };\n\n    /**\n     * This should be called by any loader using the manager when the loader\n     * encounters an error when loading an item.\n     *\n     * @param {string} url - The URL of the item that produces an error.\n     */\n    this.itemError = function (url) {\n      if (scope.onError !== undefined) {\n        scope.onError(url);\n      }\n    };\n\n    /**\n     * Given a URL, uses the URL modifier callback (if any) and returns a\n     * resolved URL. If no URL modifier is set, returns the original URL.\n     *\n     * @param {string} url - The URL to load.\n     * @return {string} The resolved URL.\n     */\n    this.resolveURL = function (url) {\n      if (urlModifier) {\n        return urlModifier(url);\n      }\n      return url;\n    };\n\n    /**\n     * If provided, the callback will be passed each resource URL before a\n     * request is sent. The callback may return the original URL, or a new URL to\n     * override loading behavior. This behavior can be used to load assets from\n     * .ZIP files, drag-and-drop APIs, and Data URIs.\n     *\n     * ```js\n     * const blobs = {'fish.gltf': blob1, 'diffuse.png': blob2, 'normal.png': blob3};\n     *\n     * const manager = new THREE.LoadingManager();\n     *\n     * // Initialize loading manager with URL callback.\n     * const objectURLs = [];\n     * manager.setURLModifier( ( url ) => {\n     *\n     * \turl = URL.createObjectURL( blobs[ url ] );\n     * \tobjectURLs.push( url );\n     * \treturn url;\n     *\n     * } );\n     *\n     * // Load as usual, then revoke the blob URLs.\n     * const loader = new GLTFLoader( manager );\n     * loader.load( 'fish.gltf', (gltf) => {\n     *\n     * \tscene.add( gltf.scene );\n     * \tobjectURLs.forEach( ( url ) => URL.revokeObjectURL( url ) );\n     *\n     * } );\n     * ```\n     *\n     * @param {function(string):string} transform - URL modifier callback. Called with an URL and must return a resolved URL.\n     * @return {LoadingManager} A reference to this loading manager.\n     */\n    this.setURLModifier = function (transform) {\n      urlModifier = transform;\n      return this;\n    };\n\n    /**\n     * Registers a loader with the given regular expression. Can be used to\n     * define what loader should be used in order to load specific files. A\n     * typical use case is to overwrite the default loader for textures.\n     *\n     * ```js\n     * // add handler for TGA textures\n     * manager.addHandler( /\\.tga$/i, new TGALoader() );\n     * ```\n     *\n     * @param {string} regex - A regular expression.\n     * @param {Loader} loader - A loader that should handle matched cases.\n     * @return {LoadingManager} A reference to this loading manager.\n     */\n    this.addHandler = function (regex, loader) {\n      handlers.push(regex, loader);\n      return this;\n    };\n\n    /**\n     * Removes the loader for the given regular expression.\n     *\n     * @param {string} regex - A regular expression.\n     * @return {LoadingManager} A reference to this loading manager.\n     */\n    this.removeHandler = function (regex) {\n      const index = handlers.indexOf(regex);\n      if (index !== -1) {\n        handlers.splice(index, 2);\n      }\n      return this;\n    };\n\n    /**\n     * Can be used to retrieve the registered loader for the given file path.\n     *\n     * @param {string} file - The file path.\n     * @return {?Loader} The registered loader. Returns `null` if no loader was found.\n     */\n    this.getHandler = function (file) {\n      for (let i = 0, l = handlers.length; i < l; i += 2) {\n        const regex = handlers[i];\n        const loader = handlers[i + 1];\n        if (regex.global) regex.lastIndex = 0; // see #17920\n\n        if (regex.test(file)) {\n          return loader;\n        }\n      }\n      return null;\n    };\n  }\n}\n\n/**\n * The global default loading manager.\n *\n * @constant\n * @type {LoadingManager}\n */\nconst DefaultLoadingManager = /*@__PURE__*/new LoadingManager();\n\n/**\n * Abstract base class for loaders.\n *\n * @abstract\n */\nclass Loader {\n  /**\n   * Constructs a new loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    /**\n     * The loading manager.\n     *\n     * @type {LoadingManager}\n     * @default DefaultLoadingManager\n     */\n    this.manager = manager !== undefined ? manager : DefaultLoadingManager;\n\n    /**\n     * The crossOrigin string to implement CORS for loading the url from a\n     * different domain that allows CORS.\n     *\n     * @type {string}\n     * @default 'anonymous'\n     */\n    this.crossOrigin = 'anonymous';\n\n    /**\n     * Whether the XMLHttpRequest uses credentials.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.withCredentials = false;\n\n    /**\n     * The base path from which the asset will be loaded.\n     *\n     * @type {string}\n     */\n    this.path = '';\n\n    /**\n     * The base path from which additional resources like textures will be loaded.\n     *\n     * @type {string}\n     */\n    this.resourcePath = '';\n\n    /**\n     * The [request header]{@link https://developer.mozilla.org/en-US/docs/Glossary/Request_header}\n     * used in HTTP request.\n     *\n     * @type {Object<string, any>}\n     */\n    this.requestHeader = {};\n  }\n\n  /**\n   * This method needs to be implemented by all concrete loaders. It holds the\n   * logic for loading assets from the backend.\n   *\n   * @param {string} url - The path/URL of the file to be loaded.\n   * @param {Function} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} [onProgress] - Executed while the loading is in progress.\n   * @param {onErrorCallback} [onError] - Executed when errors occur.\n   */\n  load(/* url, onLoad, onProgress, onError */) {}\n\n  /**\n   * A async version of {@link Loader#load}.\n   *\n   * @param {string} url - The path/URL of the file to be loaded.\n   * @param {onProgressCallback} [onProgress] - Executed while the loading is in progress.\n   * @return {Promise} A Promise that resolves when the asset has been loaded.\n   */\n  loadAsync(url, onProgress) {\n    const scope = this;\n    return new Promise(function (resolve, reject) {\n      scope.load(url, resolve, onProgress, reject);\n    });\n  }\n\n  /**\n   * This method needs to be implemented by all concrete loaders. It holds the\n   * logic for parsing the asset into three.js entities.\n   *\n   * @param {any} data - The data to parse.\n   */\n  parse(/* data */) {}\n\n  /**\n   * Sets the `crossOrigin` String to implement CORS for loading the URL\n   * from a different domain that allows CORS.\n   *\n   * @param {string} crossOrigin - The `crossOrigin` value.\n   * @return {Loader} A reference to this instance.\n   */\n  setCrossOrigin(crossOrigin) {\n    this.crossOrigin = crossOrigin;\n    return this;\n  }\n\n  /**\n   * Whether the XMLHttpRequest uses credentials such as cookies, authorization\n   * headers or TLS client certificates, see [XMLHttpRequest.withCredentials]{@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials}.\n   *\n   * Note: This setting has no effect if you are loading files locally or from the same domain.\n   *\n   * @param {boolean} value - The `withCredentials` value.\n   * @return {Loader} A reference to this instance.\n   */\n  setWithCredentials(value) {\n    this.withCredentials = value;\n    return this;\n  }\n\n  /**\n   * Sets the base path for the asset.\n   *\n   * @param {string} path - The base path.\n   * @return {Loader} A reference to this instance.\n   */\n  setPath(path) {\n    this.path = path;\n    return this;\n  }\n\n  /**\n   * Sets the base path for dependent resources like textures.\n   *\n   * @param {string} resourcePath - The resource path.\n   * @return {Loader} A reference to this instance.\n   */\n  setResourcePath(resourcePath) {\n    this.resourcePath = resourcePath;\n    return this;\n  }\n\n  /**\n   * Sets the given request header.\n   *\n   * @param {Object} requestHeader - A [request header]{@link https://developer.mozilla.org/en-US/docs/Glossary/Request_header}\n   * for configuring the HTTP request.\n   * @return {Loader} A reference to this instance.\n   */\n  setRequestHeader(requestHeader) {\n    this.requestHeader = requestHeader;\n    return this;\n  }\n}\n\n/**\n * Callback for onProgress in loaders.\n *\n * @callback onProgressCallback\n * @param {ProgressEvent} event - An instance of `ProgressEvent` that represents the current loading status.\n */\n\n/**\n * Callback for onError in loaders.\n *\n * @callback onErrorCallback\n * @param {Error} error - The error which occurred during the loading process.\n */\n\n/**\n * The default material name that is used by loaders\n * when creating materials for loaded 3D objects.\n *\n * Note: Not all loaders might honor this setting.\n *\n * @static\n * @type {string}\n * @default '__DEFAULT'\n */\nLoader.DEFAULT_MATERIAL_NAME = '__DEFAULT';\nconst loading = {};\nclass HttpError extends Error {\n  constructor(message, response) {\n    super(message);\n    this.response = response;\n  }\n}\n\n/**\n * A low level class for loading resources with the Fetch API, used internally by\n * most loaders. It can also be used directly to load any file type that does\n * not have a loader.\n *\n * This loader supports caching. If you want to use it, add `THREE.Cache.enabled = true;`\n * once to your application.\n *\n * ```js\n * const loader = new THREE.FileLoader();\n * const data = await loader.loadAsync( 'example.txt' );\n * ```\n *\n * @augments Loader\n */\nclass FileLoader extends Loader {\n  /**\n   * Constructs a new file loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n\n    /**\n     * The expected mime type.\n     *\n     * @type {string}\n     */\n    this.mimeType = '';\n\n    /**\n     * The expected response type.\n     *\n     * @type {('arraybuffer'|'blob'|'document'|'json'|'')}\n     * @default ''\n     */\n    this.responseType = '';\n  }\n\n  /**\n   * Starts loading from the given URL and pass the loaded response to the `onLoad()` callback.\n   *\n   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n   * @param {function(any)} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} [onProgress] - Executed while the loading is in progress.\n   * @param {onErrorCallback} [onError] - Executed when errors occur.\n   * @return {any|undefined} The cached resource if available.\n   */\n  load(url, onLoad, onProgress, onError) {\n    if (url === undefined) url = '';\n    if (this.path !== undefined) url = this.path + url;\n    url = this.manager.resolveURL(url);\n    const cached = Cache.get(url);\n    if (cached !== undefined) {\n      this.manager.itemStart(url);\n      setTimeout(() => {\n        if (onLoad) onLoad(cached);\n        this.manager.itemEnd(url);\n      }, 0);\n      return cached;\n    }\n\n    // Check if request is duplicate\n\n    if (loading[url] !== undefined) {\n      loading[url].push({\n        onLoad: onLoad,\n        onProgress: onProgress,\n        onError: onError\n      });\n      return;\n    }\n\n    // Initialise array for duplicate requests\n    loading[url] = [];\n    loading[url].push({\n      onLoad: onLoad,\n      onProgress: onProgress,\n      onError: onError\n    });\n\n    // create request\n    const req = new Request(url, {\n      headers: new Headers(this.requestHeader),\n      credentials: this.withCredentials ? 'include' : 'same-origin'\n      // An abort controller could be added within a future PR\n    });\n\n    // record states ( avoid data race )\n    const mimeType = this.mimeType;\n    const responseType = this.responseType;\n\n    // start the fetch\n    fetch(req).then(response => {\n      if (response.status === 200 || response.status === 0) {\n        // Some browsers return HTTP Status 0 when using non-http protocol\n        // e.g. 'file://' or 'data://'. Handle as success.\n\n        if (response.status === 0) {\n          console.warn('THREE.FileLoader: HTTP Status 0 received.');\n        }\n\n        // Workaround: Checking if response.body === undefined for Alipay browser #23548\n\n        if (typeof ReadableStream === 'undefined' || response.body === undefined || response.body.getReader === undefined) {\n          return response;\n        }\n        const callbacks = loading[url];\n        const reader = response.body.getReader();\n\n        // Nginx needs X-File-Size check\n        // https://serverfault.com/questions/482875/why-does-nginx-remove-content-length-header-for-chunked-content\n        const contentLength = response.headers.get('X-File-Size') || response.headers.get('Content-Length');\n        const total = contentLength ? parseInt(contentLength) : 0;\n        const lengthComputable = total !== 0;\n        let loaded = 0;\n\n        // periodically read data into the new stream tracking while download progress\n        const stream = new ReadableStream({\n          start(controller) {\n            readData();\n            function readData() {\n              reader.read().then(_ref => {\n                let {\n                  done,\n                  value\n                } = _ref;\n                if (done) {\n                  controller.close();\n                } else {\n                  loaded += value.byteLength;\n                  const event = new ProgressEvent('progress', {\n                    lengthComputable,\n                    loaded,\n                    total\n                  });\n                  for (let i = 0, il = callbacks.length; i < il; i++) {\n                    const callback = callbacks[i];\n                    if (callback.onProgress) callback.onProgress(event);\n                  }\n                  controller.enqueue(value);\n                  readData();\n                }\n              }, e => {\n                controller.error(e);\n              });\n            }\n          }\n        });\n        return new Response(stream);\n      } else {\n        throw new HttpError(`fetch for \"${response.url}\" responded with ${response.status}: ${response.statusText}`, response);\n      }\n    }).then(response => {\n      switch (responseType) {\n        case 'arraybuffer':\n          return response.arrayBuffer();\n        case 'blob':\n          return response.blob();\n        case 'document':\n          return response.text().then(text => {\n            const parser = new DOMParser();\n            return parser.parseFromString(text, mimeType);\n          });\n        case 'json':\n          return response.json();\n        default:\n          if (mimeType === '') {\n            return response.text();\n          } else {\n            // sniff encoding\n            const re = /charset=\"?([^;\"\\s]*)\"?/i;\n            const exec = re.exec(mimeType);\n            const label = exec && exec[1] ? exec[1].toLowerCase() : undefined;\n            const decoder = new TextDecoder(label);\n            return response.arrayBuffer().then(ab => decoder.decode(ab));\n          }\n      }\n    }).then(data => {\n      // Add to cache only on HTTP success, so that we do not cache\n      // error response bodies as proper responses to requests.\n      Cache.add(url, data);\n      const callbacks = loading[url];\n      delete loading[url];\n      for (let i = 0, il = callbacks.length; i < il; i++) {\n        const callback = callbacks[i];\n        if (callback.onLoad) callback.onLoad(data);\n      }\n    }).catch(err => {\n      // Abort errors and other errors are handled the same\n\n      const callbacks = loading[url];\n      if (callbacks === undefined) {\n        // When onLoad was called and url was deleted in `loading`\n        this.manager.itemError(url);\n        throw err;\n      }\n      delete loading[url];\n      for (let i = 0, il = callbacks.length; i < il; i++) {\n        const callback = callbacks[i];\n        if (callback.onError) callback.onError(err);\n      }\n      this.manager.itemError(url);\n    }).finally(() => {\n      this.manager.itemEnd(url);\n    });\n    this.manager.itemStart(url);\n  }\n\n  /**\n   * Sets the expected response type.\n   *\n   * @param {('arraybuffer'|'blob'|'document'|'json'|'')} value - The response type.\n   * @return {FileLoader} A reference to this file loader.\n   */\n  setResponseType(value) {\n    this.responseType = value;\n    return this;\n  }\n\n  /**\n   * Sets the expected mime type of the loaded file.\n   *\n   * @param {string} value - The mime type.\n   * @return {FileLoader} A reference to this file loader.\n   */\n  setMimeType(value) {\n    this.mimeType = value;\n    return this;\n  }\n}\n\n/**\n * Class for loading animation clips in the JSON format. The files are internally\n * loaded via {@link FileLoader}.\n *\n * ```js\n * const loader = new THREE.AnimationLoader();\n * const animations = await loader.loadAsync( 'animations/animation.js' );\n * ```\n *\n * @augments Loader\n */\nclass AnimationLoader extends Loader {\n  /**\n   * Constructs a new animation loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n  }\n\n  /**\n   * Starts loading from the given URL and pass the loaded animations as an array\n   * holding instances of {@link AnimationClip} to the `onLoad()` callback.\n   *\n   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n   * @param {function(Array<AnimationClip>)} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   */\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(JSON.parse(text)));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  /**\n   * Parses the given JSON object and returns an array of animation clips.\n   *\n   * @param {Object} json - The serialized animation clips.\n   * @return {Array<AnimationClip>} The parsed animation clips.\n   */\n  parse(json) {\n    const animations = [];\n    for (let i = 0; i < json.length; i++) {\n      const clip = AnimationClip.parse(json[i]);\n      animations.push(clip);\n    }\n    return animations;\n  }\n}\n\n/**\n * Abstract base class for loading compressed texture formats S3TC, ASTC or ETC.\n * Textures are internally loaded via {@link FileLoader}.\n *\n * Derived classes have to implement the `parse()` method which holds the parsing\n * for the respective format.\n *\n * @abstract\n * @augments Loader\n */\nclass CompressedTextureLoader extends Loader {\n  /**\n   * Constructs a new compressed texture loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n  }\n\n  /**\n   * Starts loading from the given URL and passes the loaded compressed texture\n   * to the `onLoad()` callback. The method also returns a new texture object which can\n   * directly be used for material creation. If you do it this way, the texture\n   * may pop up in your scene once the respective loading process is finished.\n   *\n   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n   * @param {function(CompressedTexture)} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   * @return {CompressedTexture} The compressed texture.\n   */\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const images = [];\n    const texture = new CompressedTexture();\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    let loaded = 0;\n    function loadTexture(i) {\n      loader.load(url[i], function (buffer) {\n        const texDatas = scope.parse(buffer, true);\n        images[i] = {\n          width: texDatas.width,\n          height: texDatas.height,\n          format: texDatas.format,\n          mipmaps: texDatas.mipmaps\n        };\n        loaded += 1;\n        if (loaded === 6) {\n          if (texDatas.mipmapCount === 1) texture.minFilter = LinearFilter;\n          texture.image = images;\n          texture.format = texDatas.format;\n          texture.needsUpdate = true;\n          if (onLoad) onLoad(texture);\n        }\n      }, onProgress, onError);\n    }\n    if (Array.isArray(url)) {\n      for (let i = 0, il = url.length; i < il; ++i) {\n        loadTexture(i);\n      }\n    } else {\n      // compressed cubemap texture stored in a single DDS file\n\n      loader.load(url, function (buffer) {\n        const texDatas = scope.parse(buffer, true);\n        if (texDatas.isCubemap) {\n          const faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n          for (let f = 0; f < faces; f++) {\n            images[f] = {\n              mipmaps: []\n            };\n            for (let i = 0; i < texDatas.mipmapCount; i++) {\n              images[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + i]);\n              images[f].format = texDatas.format;\n              images[f].width = texDatas.width;\n              images[f].height = texDatas.height;\n            }\n          }\n          texture.image = images;\n        } else {\n          texture.image.width = texDatas.width;\n          texture.image.height = texDatas.height;\n          texture.mipmaps = texDatas.mipmaps;\n        }\n        if (texDatas.mipmapCount === 1) {\n          texture.minFilter = LinearFilter;\n        }\n        texture.format = texDatas.format;\n        texture.needsUpdate = true;\n        if (onLoad) onLoad(texture);\n      }, onProgress, onError);\n    }\n    return texture;\n  }\n}\n\n/**\n * A loader for loading images. The class loads images with the HTML `Image` API.\n *\n * ```js\n * const loader = new THREE.ImageLoader();\n * const image = await loader.loadAsync( 'image.png' );\n * ```\n * Please note that `ImageLoader` has dropped support for progress\n * events in `r84`. For an `ImageLoader` that supports progress events, see\n * [this thread]{@link https://github.com/mrdoob/three.js/issues/10439#issuecomment-275785639}.\n *\n * @augments Loader\n */\nclass ImageLoader extends Loader {\n  /**\n   * Constructs a new image loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n  }\n\n  /**\n   * Starts loading from the given URL and passes the loaded image\n   * to the `onLoad()` callback. The method also returns a new `Image` object which can\n   * directly be used for texture creation. If you do it this way, the texture\n   * may pop up in your scene once the respective loading process is finished.\n   *\n   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n   * @param {function(Image)} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} onProgress - Unsupported in this loader.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   * @return {Image} The image.\n   */\n  load(url, onLoad, onProgress, onError) {\n    if (this.path !== undefined) url = this.path + url;\n    url = this.manager.resolveURL(url);\n    const scope = this;\n    const cached = Cache.get(url);\n    if (cached !== undefined) {\n      scope.manager.itemStart(url);\n      setTimeout(function () {\n        if (onLoad) onLoad(cached);\n        scope.manager.itemEnd(url);\n      }, 0);\n      return cached;\n    }\n    const image = createElementNS('img');\n    function onImageLoad() {\n      removeEventListeners();\n      Cache.add(url, this);\n      if (onLoad) onLoad(this);\n      scope.manager.itemEnd(url);\n    }\n    function onImageError(event) {\n      removeEventListeners();\n      if (onError) onError(event);\n      scope.manager.itemError(url);\n      scope.manager.itemEnd(url);\n    }\n    function removeEventListeners() {\n      image.removeEventListener('load', onImageLoad, false);\n      image.removeEventListener('error', onImageError, false);\n    }\n    image.addEventListener('load', onImageLoad, false);\n    image.addEventListener('error', onImageError, false);\n    if (url.slice(0, 5) !== 'data:') {\n      if (this.crossOrigin !== undefined) image.crossOrigin = this.crossOrigin;\n    }\n    scope.manager.itemStart(url);\n    image.src = url;\n    return image;\n  }\n}\n\n/**\n * Class for loading cube textures. Images are internally loaded via {@link ImageLoader}.\n *\n * The loader returns an instance of {@link CubeTexture} and expects the cube map to\n * be defined as six separate images representing the sides of a cube. Other cube map definitions\n * like vertical and horizontal cross, column and row layouts are not supported.\n *\n * Note that, by convention, cube maps are specified in a coordinate system\n * in which positive-x is to the right when looking up the positive-z axis --\n * in other words, using a left-handed coordinate system. Since three.js uses\n * a right-handed coordinate system, environment maps used in three.js will\n * have pos-x and neg-x swapped.\n *\n * The loaded cube texture is in sRGB color space. Meaning {@link Texture#colorSpace}\n * is set to `SRGBColorSpace` by default.\n *\n * ```js\n * const loader = new THREE.CubeTextureLoader().setPath( 'textures/cubeMaps/' );\n * const cubeTexture = await loader.loadAsync( [\n * \t'px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png'\n * ] );\n * scene.background = cubeTexture;\n * ```\n *\n * @augments Loader\n */\nclass CubeTextureLoader extends Loader {\n  /**\n   * Constructs a new cube texture loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n  }\n\n  /**\n   * Starts loading from the given URL and pass the fully loaded cube texture\n   * to the `onLoad()` callback. The method also returns a new cube texture object which can\n   * directly be used for material creation. If you do it this way, the cube texture\n   * may pop up in your scene once the respective loading process is finished.\n   *\n   * @param {Array<string>} urls - Array of 6 URLs to images, one for each side of the\n   * cube texture. The urls should be specified in the following order: pos-x,\n   * neg-x, pos-y, neg-y, pos-z, neg-z. An array of data URIs are allowed as well.\n   * @param {function(CubeTexture)} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} onProgress - Unsupported in this loader.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   * @return {CubeTexture} The cube texture.\n   */\n  load(urls, onLoad, onProgress, onError) {\n    const texture = new CubeTexture();\n    texture.colorSpace = SRGBColorSpace;\n    const loader = new ImageLoader(this.manager);\n    loader.setCrossOrigin(this.crossOrigin);\n    loader.setPath(this.path);\n    let loaded = 0;\n    function loadTexture(i) {\n      loader.load(urls[i], function (image) {\n        texture.images[i] = image;\n        loaded++;\n        if (loaded === 6) {\n          texture.needsUpdate = true;\n          if (onLoad) onLoad(texture);\n        }\n      }, undefined, onError);\n    }\n    for (let i = 0; i < urls.length; ++i) {\n      loadTexture(i);\n    }\n    return texture;\n  }\n}\n\n/**\n * Abstract base class for loading binary texture formats RGBE, EXR or TGA.\n * Textures are internally loaded via {@link FileLoader}.\n *\n * Derived classes have to implement the `parse()` method which holds the parsing\n * for the respective format.\n *\n * @abstract\n * @augments Loader\n */\nclass DataTextureLoader extends Loader {\n  /**\n   * Constructs a new data texture loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n  }\n\n  /**\n   * Starts loading from the given URL and passes the loaded data texture\n   * to the `onLoad()` callback. The method also returns a new texture object which can\n   * directly be used for material creation. If you do it this way, the texture\n   * may pop up in your scene once the respective loading process is finished.\n   *\n   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n   * @param {function(DataTexture)} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   * @return {DataTexture} The data texture.\n   */\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const texture = new DataTexture();\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    loader.setPath(this.path);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (buffer) {\n      let texData;\n      try {\n        texData = scope.parse(buffer);\n      } catch (error) {\n        if (onError !== undefined) {\n          onError(error);\n        } else {\n          console.error(error);\n          return;\n        }\n      }\n      if (texData.image !== undefined) {\n        texture.image = texData.image;\n      } else if (texData.data !== undefined) {\n        texture.image.width = texData.width;\n        texture.image.height = texData.height;\n        texture.image.data = texData.data;\n      }\n      texture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n      texture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n      texture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n      texture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n      texture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n      if (texData.colorSpace !== undefined) {\n        texture.colorSpace = texData.colorSpace;\n      }\n      if (texData.flipY !== undefined) {\n        texture.flipY = texData.flipY;\n      }\n      if (texData.format !== undefined) {\n        texture.format = texData.format;\n      }\n      if (texData.type !== undefined) {\n        texture.type = texData.type;\n      }\n      if (texData.mipmaps !== undefined) {\n        texture.mipmaps = texData.mipmaps;\n        texture.minFilter = LinearMipmapLinearFilter; // presumably...\n      }\n      if (texData.mipmapCount === 1) {\n        texture.minFilter = LinearFilter;\n      }\n      if (texData.generateMipmaps !== undefined) {\n        texture.generateMipmaps = texData.generateMipmaps;\n      }\n      texture.needsUpdate = true;\n      if (onLoad) onLoad(texture, texData);\n    }, onProgress, onError);\n    return texture;\n  }\n}\n\n/**\n * Class for loading textures. Images are internally\n * loaded via {@link ImageLoader}.\n *\n * ```js\n * const loader = new THREE.TextureLoader();\n * const texture = await loader.loadAsync( 'textures/land_ocean_ice_cloud_2048.jpg' );\n *\n * const material = new THREE.MeshBasicMaterial( { map:texture } );\n * ```\n * Please note that `TextureLoader` has dropped support for progress\n * events in `r84`. For a `TextureLoader` that supports progress events, see\n * [this thread]{@link https://github.com/mrdoob/three.js/issues/10439#issuecomment-293260145}.\n *\n * @augments Loader\n */\nclass TextureLoader extends Loader {\n  /**\n   * Constructs a new texture loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n  }\n\n  /**\n   * Starts loading from the given URL and pass the fully loaded texture\n   * to the `onLoad()` callback. The method also returns a new texture object which can\n   * directly be used for material creation. If you do it this way, the texture\n   * may pop up in your scene once the respective loading process is finished.\n   *\n   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n   * @param {function(Texture)} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} onProgress - Unsupported in this loader.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   * @return {Texture} The texture.\n   */\n  load(url, onLoad, onProgress, onError) {\n    const texture = new Texture();\n    const loader = new ImageLoader(this.manager);\n    loader.setCrossOrigin(this.crossOrigin);\n    loader.setPath(this.path);\n    loader.load(url, function (image) {\n      texture.image = image;\n      texture.needsUpdate = true;\n      if (onLoad !== undefined) {\n        onLoad(texture);\n      }\n    }, onProgress, onError);\n    return texture;\n  }\n}\n\n/**\n * Abstract base class for lights - all other light types inherit the\n * properties and methods described here.\n *\n * @abstract\n * @augments Object3D\n */\nclass Light extends Object3D {\n  /**\n   * Constructs a new light.\n   *\n   * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n   * @param {number} [intensity=1] - The light's strength/intensity.\n   */\n  constructor(color) {\n    let intensity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isLight = true;\n    this.type = 'Light';\n\n    /**\n     * The light's color.\n     *\n     * @type {Color}\n     */\n    this.color = new Color(color);\n\n    /**\n     * The light's intensity.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.intensity = intensity;\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n\n    // Empty here in base class; some subclasses override.\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.color.copy(source.color);\n    this.intensity = source.intensity;\n    return this;\n  }\n  toJSON(meta) {\n    const data = super.toJSON(meta);\n    data.object.color = this.color.getHex();\n    data.object.intensity = this.intensity;\n    if (this.groundColor !== undefined) data.object.groundColor = this.groundColor.getHex();\n    if (this.distance !== undefined) data.object.distance = this.distance;\n    if (this.angle !== undefined) data.object.angle = this.angle;\n    if (this.decay !== undefined) data.object.decay = this.decay;\n    if (this.penumbra !== undefined) data.object.penumbra = this.penumbra;\n    if (this.shadow !== undefined) data.object.shadow = this.shadow.toJSON();\n    if (this.target !== undefined) data.object.target = this.target.uuid;\n    return data;\n  }\n}\n\n/**\n * A light source positioned directly above the scene, with color fading from\n * the sky color to the ground color.\n *\n * This light cannot be used to cast shadows.\n *\n * ```js\n * const light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 );\n * scene.add( light );\n * ```\n *\n * @augments Light\n */\nclass HemisphereLight extends Light {\n  /**\n   * Constructs a new hemisphere light.\n   *\n   * @param {(number|Color|string)} [skyColor=0xffffff] - The light's sky color.\n   * @param {(number|Color|string)} [groundColor=0xffffff] - The light's ground color.\n   * @param {number} [intensity=1] - The light's strength/intensity.\n   */\n  constructor(skyColor, groundColor, intensity) {\n    super(skyColor, intensity);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isHemisphereLight = true;\n    this.type = 'HemisphereLight';\n    this.position.copy(Object3D.DEFAULT_UP);\n    this.updateMatrix();\n\n    /**\n     * The light's ground color.\n     *\n     * @type {Color}\n     */\n    this.groundColor = new Color(groundColor);\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.groundColor.copy(source.groundColor);\n    return this;\n  }\n}\nconst _projScreenMatrix$1 = /*@__PURE__*/new Matrix4();\nconst _lightPositionWorld$1 = /*@__PURE__*/new Vector3();\nconst _lookTarget$1 = /*@__PURE__*/new Vector3();\n\n/**\n * Abstract base class for light shadow classes. These classes\n * represent the shadow configuration for different light types.\n *\n * @abstract\n */\nclass LightShadow {\n  /**\n   * Constructs a new light shadow.\n   *\n   * @param {Camera} camera - The light's view of the world.\n   */\n  constructor(camera) {\n    /**\n     * The light's view of the world.\n     *\n     * @type {Camera}\n     */\n    this.camera = camera;\n\n    /**\n     * The intensity of the shadow. The default is `1`.\n     * Valid values are in the range `[0, 1]`.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.intensity = 1;\n\n    /**\n     * Shadow map bias, how much to add or subtract from the normalized depth\n     * when deciding whether a surface is in shadow.\n     *\n     * The default is `0`. Very tiny adjustments here (in the order of `0.0001`)\n     * may help reduce artifacts in shadows.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.bias = 0;\n\n    /**\n     * Defines how much the position used to query the shadow map is offset along\n     * the object normal. The default is `0`. Increasing this value can be used to\n     * reduce shadow acne especially in large scenes where light shines onto\n     * geometry at a shallow angle. The cost is that shadows may appear distorted.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.normalBias = 0;\n\n    /**\n     * Setting this to values greater than 1 will blur the edges of the shadow.\n     * High values will cause unwanted banding effects in the shadows - a greater\n     * map size will allow for a higher value to be used here before these effects\n     * become visible.\n     *\n     * The property has no effect when the shadow map type is `PCFSoftShadowMap` and\n     * and it is recommended to increase softness by decreasing the shadow map size instead.\n     *\n     * The property has no effect when the shadow map type is `BasicShadowMap`.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.radius = 1;\n\n    /**\n     * The amount of samples to use when blurring a VSM shadow map.\n     *\n     * @type {number}\n     * @default 8\n     */\n    this.blurSamples = 8;\n\n    /**\n     * Defines the width and height of the shadow map. Higher values give better quality\n     * shadows at the cost of computation time. Values must be powers of two.\n     *\n     * @type {Vector2}\n     * @default (512,512)\n     */\n    this.mapSize = new Vector2(512, 512);\n\n    /**\n     * The type of shadow texture. The default is `UnsignedByteType`.\n     *\n     * @type {number}\n     * @default UnsignedByteType\n     */\n    this.mapType = UnsignedByteType;\n\n    /**\n     * The depth map generated using the internal camera; a location beyond a\n     * pixel's depth is in shadow. Computed internally during rendering.\n     *\n     * @type {?RenderTarget}\n     * @default null\n     */\n    this.map = null;\n\n    /**\n     * The distribution map generated using the internal camera; an occlusion is\n     * calculated based on the distribution of depths. Computed internally during\n     * rendering.\n     *\n     * @type {?RenderTarget}\n     * @default null\n     */\n    this.mapPass = null;\n\n    /**\n     * Model to shadow camera space, to compute location and depth in shadow map.\n     * This is computed internally during rendering.\n     *\n     * @type {Matrix4}\n     */\n    this.matrix = new Matrix4();\n\n    /**\n     * Enables automatic updates of the light's shadow. If you do not require dynamic\n     * lighting / shadows, you may set this to `false`.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.autoUpdate = true;\n\n    /**\n     * When set to `true`, shadow maps will be updated in the next `render` call.\n     * If you have set {@link LightShadow#autoUpdate} to `false`, you will need to\n     * set this property to `true` and then make a render call to update the light's shadow.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.needsUpdate = false;\n    this._frustum = new Frustum();\n    this._frameExtents = new Vector2(1, 1);\n    this._viewportCount = 1;\n    this._viewports = [new Vector4(0, 0, 1, 1)];\n  }\n\n  /**\n   * Used internally by the renderer to get the number of viewports that need\n   * to be rendered for this shadow.\n   *\n   * @return {number} The viewport count.\n   */\n  getViewportCount() {\n    return this._viewportCount;\n  }\n\n  /**\n   * Gets the shadow cameras frustum. Used internally by the renderer to cull objects.\n   *\n   * @return {Frustum} The shadow camera frustum.\n   */\n  getFrustum() {\n    return this._frustum;\n  }\n\n  /**\n   * Update the matrices for the camera and shadow, used internally by the renderer.\n   *\n   * @param {Light} light - The light for which the shadow is being rendered.\n   */\n  updateMatrices(light) {\n    const shadowCamera = this.camera;\n    const shadowMatrix = this.matrix;\n    _lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld);\n    shadowCamera.position.copy(_lightPositionWorld$1);\n    _lookTarget$1.setFromMatrixPosition(light.target.matrixWorld);\n    shadowCamera.lookAt(_lookTarget$1);\n    shadowCamera.updateMatrixWorld();\n    _projScreenMatrix$1.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);\n    this._frustum.setFromProjectionMatrix(_projScreenMatrix$1);\n    shadowMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n    shadowMatrix.multiply(_projScreenMatrix$1);\n  }\n\n  /**\n   * Returns a viewport definition for the given viewport index.\n   *\n   * @param {number} viewportIndex - The viewport index.\n   * @return {Vector4} The viewport.\n   */\n  getViewport(viewportIndex) {\n    return this._viewports[viewportIndex];\n  }\n\n  /**\n   * Returns the frame extends.\n   *\n   * @return {Vector2} The frame extends.\n   */\n  getFrameExtents() {\n    return this._frameExtents;\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    if (this.map) {\n      this.map.dispose();\n    }\n    if (this.mapPass) {\n      this.mapPass.dispose();\n    }\n  }\n\n  /**\n   * Copies the values of the given light shadow instance to this instance.\n   *\n   * @param {LightShadow} source - The light shadow to copy.\n   * @return {LightShadow} A reference to this light shadow instance.\n   */\n  copy(source) {\n    this.camera = source.camera.clone();\n    this.intensity = source.intensity;\n    this.bias = source.bias;\n    this.radius = source.radius;\n    this.autoUpdate = source.autoUpdate;\n    this.needsUpdate = source.needsUpdate;\n    this.normalBias = source.normalBias;\n    this.blurSamples = source.blurSamples;\n    this.mapSize.copy(source.mapSize);\n    return this;\n  }\n\n  /**\n   * Returns a new light shadow instance with copied values from this instance.\n   *\n   * @return {LightShadow} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  /**\n   * Serializes the light shadow into JSON.\n   *\n   * @return {Object} A JSON object representing the serialized light shadow.\n   * @see {@link ObjectLoader#parse}\n   */\n  toJSON() {\n    const object = {};\n    if (this.intensity !== 1) object.intensity = this.intensity;\n    if (this.bias !== 0) object.bias = this.bias;\n    if (this.normalBias !== 0) object.normalBias = this.normalBias;\n    if (this.radius !== 1) object.radius = this.radius;\n    if (this.mapSize.x !== 512 || this.mapSize.y !== 512) object.mapSize = this.mapSize.toArray();\n    object.camera = this.camera.toJSON(false).object;\n    delete object.camera.matrix;\n    return object;\n  }\n}\n\n/**\n * Represents the shadow configuration of directional lights.\n *\n * @augments LightShadow\n */\nclass SpotLightShadow extends LightShadow {\n  /**\n   * Constructs a new spot light shadow.\n   */\n  constructor() {\n    super(new PerspectiveCamera(50, 1, 0.5, 500));\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isSpotLightShadow = true;\n\n    /**\n     * Used to focus the shadow camera. The camera's field of view is set as a\n     * percentage of the spotlight's field-of-view. Range is `[0, 1]`.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.focus = 1;\n  }\n  updateMatrices(light) {\n    const camera = this.camera;\n    const fov = RAD2DEG * 2 * light.angle * this.focus;\n    const aspect = this.mapSize.width / this.mapSize.height;\n    const far = light.distance || camera.far;\n    if (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {\n      camera.fov = fov;\n      camera.aspect = aspect;\n      camera.far = far;\n      camera.updateProjectionMatrix();\n    }\n    super.updateMatrices(light);\n  }\n  copy(source) {\n    super.copy(source);\n    this.focus = source.focus;\n    return this;\n  }\n}\n\n/**\n * This light gets emitted from a single point in one direction, along a cone\n * that increases in size the further from the light it gets.\n *\n * This light can cast shadows - see the {@link SpotLightShadow} for details.\n *\n * ```js\n * // white spotlight shining from the side, modulated by a texture\n * const spotLight = new THREE.SpotLight( 0xffffff );\n * spotLight.position.set( 100, 1000, 100 );\n * spotLight.map = new THREE.TextureLoader().load( url );\n *\n * spotLight.castShadow = true;\n * spotLight.shadow.mapSize.width = 1024;\n * spotLight.shadow.mapSize.height = 1024;\n * spotLight.shadow.camera.near = 500;\n * spotLight.shadow.camera.far = 4000;\n * spotLight.shadow.camera.fov = 30;s\n * ```\n *\n * @augments Light\n */\nclass SpotLight extends Light {\n  /**\n   * Constructs a new spot light.\n   *\n   * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n   * @param {number} [intensity=1] - The light's strength/intensity measured in candela (cd).\n   * @param {number} [distance=0] - Maximum range of the light. `0` means no limit.\n   * @param {number} [angle=Math.PI/3] - Maximum angle of light dispersion from its direction whose upper bound is `Math.PI/2`.\n   * @param {number} [penumbra=0] - Percent of the spotlight cone that is attenuated due to penumbra. Value range is `[0,1]`.\n   * @param {number} [decay=2] - The amount the light dims along the distance of the light.\n   */\n  constructor(color, intensity) {\n    let distance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let angle = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Math.PI / 3;\n    let penumbra = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    let decay = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 2;\n    super(color, intensity);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isSpotLight = true;\n    this.type = 'SpotLight';\n    this.position.copy(Object3D.DEFAULT_UP);\n    this.updateMatrix();\n\n    /**\n     * The spot light points from its position to the\n     * target's position.\n     *\n     * For the target's position to be changed to anything other\n     * than the default, it must be added to the scene.\n     *\n     * It is also possible to set the target to be another 3D object\n     * in the scene. The light will now track the target object.\n     *\n     * @type {Object3D}\n     */\n    this.target = new Object3D();\n\n    /**\n     * Maximum range of the light. `0` means no limit.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.distance = distance;\n\n    /**\n     * Maximum angle of light dispersion from its direction whose upper bound is `Math.PI/2`.\n     *\n     * @type {number}\n     * @default Math.PI/3\n     */\n    this.angle = angle;\n\n    /**\n     * Percent of the spotlight cone that is attenuated due to penumbra.\n     * Value range is `[0,1]`.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.penumbra = penumbra;\n\n    /**\n     * The amount the light dims along the distance of the light. In context of\n     * physically-correct rendering the default value should not be changed.\n     *\n     * @type {number}\n     * @default 2\n     */\n    this.decay = decay;\n\n    /**\n     * A texture used to modulate the color of the light. The spot light\n     * color is mixed with the RGB value of this texture, with a ratio\n     * corresponding to its alpha value. The cookie-like masking effect is\n     * reproduced using pixel values (0, 0, 0, 1-cookie_value).\n     *\n     * *Warning*: This property is disabled if {@link Object3D#castShadow} is set to `false`.\n     *\n     * @type {?Texture}\n     * @default null\n     */\n    this.map = null;\n\n    /**\n     * This property holds the light's shadow configuration.\n     *\n     * @type {SpotLightShadow}\n     */\n    this.shadow = new SpotLightShadow();\n  }\n\n  /**\n   * The light's power. Power is the luminous power of the light measured in lumens (lm).\n   *  Changing the power will also change the light's intensity.\n   *\n   * @type {number}\n   */\n  get power() {\n    // compute the light's luminous power (in lumens) from its intensity (in candela)\n    // by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)\n    return this.intensity * Math.PI;\n  }\n  set power(power) {\n    // set the light's intensity (in candela) from the desired luminous power (in lumens)\n    this.intensity = power / Math.PI;\n  }\n  dispose() {\n    this.shadow.dispose();\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.distance = source.distance;\n    this.angle = source.angle;\n    this.penumbra = source.penumbra;\n    this.decay = source.decay;\n    this.target = source.target.clone();\n    this.shadow = source.shadow.clone();\n    return this;\n  }\n}\nconst _projScreenMatrix = /*@__PURE__*/new Matrix4();\nconst _lightPositionWorld = /*@__PURE__*/new Vector3();\nconst _lookTarget = /*@__PURE__*/new Vector3();\n\n/**\n * Represents the shadow configuration of point lights.\n *\n * @augments LightShadow\n */\nclass PointLightShadow extends LightShadow {\n  /**\n   * Constructs a new point light shadow.\n   */\n  constructor() {\n    super(new PerspectiveCamera(90, 1, 0.5, 500));\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isPointLightShadow = true;\n    this._frameExtents = new Vector2(4, 2);\n    this._viewportCount = 6;\n    this._viewports = [\n    // These viewports map a cube-map onto a 2D texture with the\n    // following orientation:\n    //\n    //  xzXZ\n    //   y Y\n    //\n    // X - Positive x direction\n    // x - Negative x direction\n    // Y - Positive y direction\n    // y - Negative y direction\n    // Z - Positive z direction\n    // z - Negative z direction\n\n    // positive X\n    new Vector4(2, 1, 1, 1),\n    // negative X\n    new Vector4(0, 1, 1, 1),\n    // positive Z\n    new Vector4(3, 1, 1, 1),\n    // negative Z\n    new Vector4(1, 1, 1, 1),\n    // positive Y\n    new Vector4(3, 0, 1, 1),\n    // negative Y\n    new Vector4(1, 0, 1, 1)];\n    this._cubeDirections = [new Vector3(1, 0, 0), new Vector3(-1, 0, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1), new Vector3(0, 1, 0), new Vector3(0, -1, 0)];\n    this._cubeUps = [new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1)];\n  }\n\n  /**\n   * Update the matrices for the camera and shadow, used internally by the renderer.\n   *\n   * @param {Light} light - The light for which the shadow is being rendered.\n   * @param {number} [viewportIndex=0] - The viewport index.\n   */\n  updateMatrices(light) {\n    let viewportIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const camera = this.camera;\n    const shadowMatrix = this.matrix;\n    const far = light.distance || camera.far;\n    if (far !== camera.far) {\n      camera.far = far;\n      camera.updateProjectionMatrix();\n    }\n    _lightPositionWorld.setFromMatrixPosition(light.matrixWorld);\n    camera.position.copy(_lightPositionWorld);\n    _lookTarget.copy(camera.position);\n    _lookTarget.add(this._cubeDirections[viewportIndex]);\n    camera.up.copy(this._cubeUps[viewportIndex]);\n    camera.lookAt(_lookTarget);\n    camera.updateMatrixWorld();\n    shadowMatrix.makeTranslation(-_lightPositionWorld.x, -_lightPositionWorld.y, -_lightPositionWorld.z);\n    _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n    this._frustum.setFromProjectionMatrix(_projScreenMatrix);\n  }\n}\n\n/**\n * A light that gets emitted from a single point in all directions. A common\n * use case for this is to replicate the light emitted from a bare\n * lightbulb.\n *\n * This light can cast shadows - see the {@link PointLightShadow} for details.\n *\n * ```js\n * const light = new THREE.PointLight( 0xff0000, 1, 100 );\n * light.position.set( 50, 50, 50 );\n * scene.add( light );\n * ```\n *\n * @augments Light\n */\nclass PointLight extends Light {\n  /**\n   * Constructs a new point light.\n   *\n   * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n   * @param {number} [intensity=1] - The light's strength/intensity measured in candela (cd).\n   * @param {number} [distance=0] - Maximum range of the light. `0` means no limit.\n   * @param {number} [decay=2] - The amount the light dims along the distance of the light.\n   */\n  constructor(color, intensity) {\n    let distance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let decay = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2;\n    super(color, intensity);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isPointLight = true;\n    this.type = 'PointLight';\n\n    /**\n     * When distance is zero, light will attenuate according to inverse-square\n     * law to infinite distance. When distance is non-zero, light will attenuate\n     * according to inverse-square law until near the distance cutoff, where it\n     * will then attenuate quickly and smoothly to 0. Inherently, cutoffs are not\n     * physically correct.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.distance = distance;\n\n    /**\n     * The amount the light dims along the distance of the light. In context of\n     * physically-correct rendering the default value should not be changed.\n     *\n     * @type {number}\n     * @default 2\n     */\n    this.decay = decay;\n\n    /**\n     * This property holds the light's shadow configuration.\n     *\n     * @type {PointLightShadow}\n     */\n    this.shadow = new PointLightShadow();\n  }\n\n  /**\n   * The light's power. Power is the luminous power of the light measured in lumens (lm).\n   * Changing the power will also change the light's intensity.\n   *\n   * @type {number}\n   */\n  get power() {\n    // compute the light's luminous power (in lumens) from its intensity (in candela)\n    // for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)\n    return this.intensity * 4 * Math.PI;\n  }\n  set power(power) {\n    // set the light's intensity (in candela) from the desired luminous power (in lumens)\n    this.intensity = power / (4 * Math.PI);\n  }\n  dispose() {\n    this.shadow.dispose();\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.distance = source.distance;\n    this.decay = source.decay;\n    this.shadow = source.shadow.clone();\n    return this;\n  }\n}\n\n/**\n * Camera that uses [orthographic projection]{@link https://en.wikipedia.org/wiki/Orthographic_projection}.\n *\n * In this projection mode, an object's size in the rendered image stays\n * constant regardless of its distance from the camera. This can be useful\n * for rendering 2D scenes and UI elements, amongst other things.\n *\n * ```js\n * const camera = new THREE.OrthographicCamera( width / - 2, width / 2, height / 2, height / - 2, 1, 1000 );\n * scene.add( camera );\n * ```\n *\n * @augments Camera\n */\nclass OrthographicCamera extends Camera {\n  /**\n   * Constructs a new orthographic camera.\n   *\n   * @param {number} [left=-1] - The left plane of the camera's frustum.\n   * @param {number} [right=1] - The right plane of the camera's frustum.\n   * @param {number} [top=1] - The top plane of the camera's frustum.\n   * @param {number} [bottom=-1] - The bottom plane of the camera's frustum.\n   * @param {number} [near=0.1] - The camera's near plane.\n   * @param {number} [far=2000] - The camera's far plane.\n   */\n  constructor() {\n    let left = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n    let right = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let top = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let bottom = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n    let near = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.1;\n    let far = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 2000;\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isOrthographicCamera = true;\n    this.type = 'OrthographicCamera';\n\n    /**\n     * The zoom factor of the camera.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.zoom = 1;\n\n    /**\n     * Represents the frustum window specification. This property should not be edited\n     * directly but via {@link PerspectiveCamera#setViewOffset} and {@link PerspectiveCamera#clearViewOffset}.\n     *\n     * @type {?Object}\n     * @default null\n     */\n    this.view = null;\n\n    /**\n     * The left plane of the camera's frustum.\n     *\n     * @type {number}\n     * @default -1\n     */\n    this.left = left;\n\n    /**\n     * The right plane of the camera's frustum.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.right = right;\n\n    /**\n     * The top plane of the camera's frustum.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.top = top;\n\n    /**\n     * The bottom plane of the camera's frustum.\n     *\n     * @type {number}\n     * @default -1\n     */\n    this.bottom = bottom;\n\n    /**\n     * The camera's near plane. The valid range is greater than `0`\n     * and less than the current value of {@link OrthographicCamera#far}.\n     *\n     * Note that, unlike for the {@link PerspectiveCamera}, `0` is a\n     * valid value for an orthographic camera's near plane.\n     *\n     * @type {number}\n     * @default 0.1\n     */\n    this.near = near;\n\n    /**\n     * The camera's far plane. Must be greater than the\n     * current value of {@link OrthographicCamera#near}.\n     *\n     * @type {number}\n     * @default 2000\n     */\n    this.far = far;\n    this.updateProjectionMatrix();\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.left = source.left;\n    this.right = source.right;\n    this.top = source.top;\n    this.bottom = source.bottom;\n    this.near = source.near;\n    this.far = source.far;\n    this.zoom = source.zoom;\n    this.view = source.view === null ? null : Object.assign({}, source.view);\n    return this;\n  }\n\n  /**\n   * Sets an offset in a larger frustum. This is useful for multi-window or\n   * multi-monitor/multi-machine setups.\n   *\n   * @param {number} fullWidth - The full width of multiview setup.\n   * @param {number} fullHeight - The full height of multiview setup.\n   * @param {number} x - The horizontal offset of the subcamera.\n   * @param {number} y - The vertical offset of the subcamera.\n   * @param {number} width - The width of subcamera.\n   * @param {number} height - The height of subcamera.\n   * @see {@link PerspectiveCamera#setViewOffset}\n   */\n  setViewOffset(fullWidth, fullHeight, x, y, width, height) {\n    if (this.view === null) {\n      this.view = {\n        enabled: true,\n        fullWidth: 1,\n        fullHeight: 1,\n        offsetX: 0,\n        offsetY: 0,\n        width: 1,\n        height: 1\n      };\n    }\n    this.view.enabled = true;\n    this.view.fullWidth = fullWidth;\n    this.view.fullHeight = fullHeight;\n    this.view.offsetX = x;\n    this.view.offsetY = y;\n    this.view.width = width;\n    this.view.height = height;\n    this.updateProjectionMatrix();\n  }\n\n  /**\n   * Removes the view offset from the projection matrix.\n   */\n  clearViewOffset() {\n    if (this.view !== null) {\n      this.view.enabled = false;\n    }\n    this.updateProjectionMatrix();\n  }\n\n  /**\n   * Updates the camera's projection matrix. Must be called after any change of\n   * camera properties.\n   */\n  updateProjectionMatrix() {\n    const dx = (this.right - this.left) / (2 * this.zoom);\n    const dy = (this.top - this.bottom) / (2 * this.zoom);\n    const cx = (this.right + this.left) / 2;\n    const cy = (this.top + this.bottom) / 2;\n    let left = cx - dx;\n    let right = cx + dx;\n    let top = cy + dy;\n    let bottom = cy - dy;\n    if (this.view !== null && this.view.enabled) {\n      const scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;\n      const scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;\n      left += scaleW * this.view.offsetX;\n      right = left + scaleW * this.view.width;\n      top -= scaleH * this.view.offsetY;\n      bottom = top - scaleH * this.view.height;\n    }\n    this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far, this.coordinateSystem);\n    this.projectionMatrixInverse.copy(this.projectionMatrix).invert();\n  }\n  toJSON(meta) {\n    const data = super.toJSON(meta);\n    data.object.zoom = this.zoom;\n    data.object.left = this.left;\n    data.object.right = this.right;\n    data.object.top = this.top;\n    data.object.bottom = this.bottom;\n    data.object.near = this.near;\n    data.object.far = this.far;\n    if (this.view !== null) data.object.view = Object.assign({}, this.view);\n    return data;\n  }\n}\n\n/**\n * Represents the shadow configuration of directional lights.\n *\n * @augments LightShadow\n */\nclass DirectionalLightShadow extends LightShadow {\n  /**\n   * Constructs a new directional light shadow.\n   */\n  constructor() {\n    super(new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isDirectionalLightShadow = true;\n  }\n}\n\n/**\n * A light that gets emitted in a specific direction. This light will behave\n * as though it is infinitely far away and the rays produced from it are all\n * parallel. The common use case for this is to simulate daylight; the sun is\n * far enough away that its position can be considered to be infinite, and\n * all light rays coming from it are parallel.\n *\n * A common point of confusion for directional lights is that setting the\n * rotation has no effect. This is because three.js's DirectionalLight is the\n * equivalent to what is often called a 'Target Direct Light' in other\n * applications.\n *\n * This means that its direction is calculated as pointing from the light's\n * {@link Object3D#position} to the {@link DirectionalLight#target} position\n * (as opposed to a 'Free Direct Light' that just has a rotation\n * component).\n *\n * This light can cast shadows - see the {@link DirectionalLightShadow} for details.\n *\n * ```js\n * // White directional light at half intensity shining from the top.\n * const directionalLight = new THREE.DirectionalLight( 0xffffff, 0.5 );\n * scene.add( directionalLight );\n * ```\n *\n * @augments Light\n */\nclass DirectionalLight extends Light {\n  /**\n   * Constructs a new directional light.\n   *\n   * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n   * @param {number} [intensity=1] - The light's strength/intensity.\n   */\n  constructor(color, intensity) {\n    super(color, intensity);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isDirectionalLight = true;\n    this.type = 'DirectionalLight';\n    this.position.copy(Object3D.DEFAULT_UP);\n    this.updateMatrix();\n\n    /**\n     * The directional light points from its position to the\n     * target's position.\n     *\n     * For the target's position to be changed to anything other\n     * than the default, it must be added to the scene.\n     *\n     * It is also possible to set the target to be another 3D object\n     * in the scene. The light will now track the target object.\n     *\n     * @type {Object3D}\n     */\n    this.target = new Object3D();\n\n    /**\n     * This property holds the light's shadow configuration.\n     *\n     * @type {DirectionalLightShadow}\n     */\n    this.shadow = new DirectionalLightShadow();\n  }\n  dispose() {\n    this.shadow.dispose();\n  }\n  copy(source) {\n    super.copy(source);\n    this.target = source.target.clone();\n    this.shadow = source.shadow.clone();\n    return this;\n  }\n}\n\n/**\n * This light globally illuminates all objects in the scene equally.\n *\n * It cannot be used to cast shadows as it does not have a direction.\n *\n * ```js\n * const light = new THREE.AmbientLight( 0x404040 ); // soft white light\n * scene.add( light );\n * ```\n *\n * @augments Light\n */\nclass AmbientLight extends Light {\n  /**\n   * Constructs a new ambient light.\n   *\n   * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n   * @param {number} [intensity=1] - The light's strength/intensity.\n   */\n  constructor(color, intensity) {\n    super(color, intensity);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isAmbientLight = true;\n    this.type = 'AmbientLight';\n  }\n}\n\n/**\n * This class emits light uniformly across the face a rectangular plane.\n * This light type can be used to simulate light sources such as bright\n * windows or strip lighting.\n *\n * Important Notes:\n *\n * - There is no shadow support.\n * - Only PBR materials are supported.\n * - You have to include `RectAreaLightUniformsLib` (`WebGLRenderer`) or `RectAreaLightTexturesLib` (`WebGPURenderer`)\n * into your app and init the uniforms/textures.\n *\n * ```js\n * RectAreaLightUniformsLib.init(); // only relevant for WebGLRenderer\n * THREE.RectAreaLightNode.setLTC( RectAreaLightTexturesLib.init() ); //  only relevant for WebGPURenderer\n *\n * const intensity = 1; const width = 10; const height = 10;\n * const rectLight = new THREE.RectAreaLight( 0xffffff, intensity, width, height );\n * rectLight.position.set( 5, 5, 0 );\n * rectLight.lookAt( 0, 0, 0 );\n * scene.add( rectLight )\n * ```\n *\n * @augments Light\n */\nclass RectAreaLight extends Light {\n  /**\n   * Constructs a new area light.\n   *\n   * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n   * @param {number} [intensity=1] - The light's strength/intensity.\n   * @param {number} [width=10] - The width of the light.\n   * @param {number} [height=10] - The height of the light.\n   */\n  constructor(color, intensity) {\n    let width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n    let height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10;\n    super(color, intensity);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isRectAreaLight = true;\n    this.type = 'RectAreaLight';\n\n    /**\n     * The width of the light.\n     *\n     * @type {number}\n     * @default 10\n     */\n    this.width = width;\n\n    /**\n     * The height of the light.\n     *\n     * @type {number}\n     * @default 10\n     */\n    this.height = height;\n  }\n\n  /**\n   * The light's power. Power is the luminous power of the light measured in lumens (lm).\n   * Changing the power will also change the light's intensity.\n   *\n   * @type {number}\n   */\n  get power() {\n    // compute the light's luminous power (in lumens) from its intensity (in nits)\n    return this.intensity * this.width * this.height * Math.PI;\n  }\n  set power(power) {\n    // set the light's intensity (in nits) from the desired luminous power (in lumens)\n    this.intensity = power / (this.width * this.height * Math.PI);\n  }\n  copy(source) {\n    super.copy(source);\n    this.width = source.width;\n    this.height = source.height;\n    return this;\n  }\n  toJSON(meta) {\n    const data = super.toJSON(meta);\n    data.object.width = this.width;\n    data.object.height = this.height;\n    return data;\n  }\n}\n\n/**\n * Represents a third-order spherical harmonics (SH). Light probes use this class\n * to encode lighting information.\n *\n * - Primary reference: {@link https://graphics.stanford.edu/papers/envmap/envmap.pdf}\n * - Secondary reference: {@link https://www.ppsloan.org/publications/StupidSH36.pdf}\n */\nclass SphericalHarmonics3 {\n  /**\n   * Constructs a new spherical harmonics.\n   */\n  constructor() {\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isSphericalHarmonics3 = true;\n\n    /**\n     * An array holding the (9) SH coefficients.\n     *\n     * @type {Array<Vector3>}\n     */\n    this.coefficients = [];\n    for (let i = 0; i < 9; i++) {\n      this.coefficients.push(new Vector3());\n    }\n  }\n\n  /**\n   * Sets the given SH coefficients to this instance by copying\n   * the values.\n   *\n   * @param {Array<Vector3>} coefficients - The SH coefficients.\n   * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n   */\n  set(coefficients) {\n    for (let i = 0; i < 9; i++) {\n      this.coefficients[i].copy(coefficients[i]);\n    }\n    return this;\n  }\n\n  /**\n   * Sets all SH coefficients to `0`.\n   *\n   * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n   */\n  zero() {\n    for (let i = 0; i < 9; i++) {\n      this.coefficients[i].set(0, 0, 0);\n    }\n    return this;\n  }\n\n  /**\n   * Returns the radiance in the direction of the given normal.\n   *\n   * @param {Vector3} normal - The normal vector (assumed to be unit length)\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} The radiance.\n   */\n  getAt(normal, target) {\n    // normal is assumed to be unit length\n\n    const x = normal.x,\n      y = normal.y,\n      z = normal.z;\n    const coeff = this.coefficients;\n\n    // band 0\n    target.copy(coeff[0]).multiplyScalar(0.282095);\n\n    // band 1\n    target.addScaledVector(coeff[1], 0.488603 * y);\n    target.addScaledVector(coeff[2], 0.488603 * z);\n    target.addScaledVector(coeff[3], 0.488603 * x);\n\n    // band 2\n    target.addScaledVector(coeff[4], 1.092548 * (x * y));\n    target.addScaledVector(coeff[5], 1.092548 * (y * z));\n    target.addScaledVector(coeff[6], 0.315392 * (3.0 * z * z - 1.0));\n    target.addScaledVector(coeff[7], 1.092548 * (x * z));\n    target.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));\n    return target;\n  }\n\n  /**\n   * Returns the irradiance (radiance convolved with cosine lobe) in the\n   * direction of the given normal.\n   *\n   * @param {Vector3} normal - The normal vector (assumed to be unit length)\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} The irradiance.\n   */\n  getIrradianceAt(normal, target) {\n    // normal is assumed to be unit length\n\n    const x = normal.x,\n      y = normal.y,\n      z = normal.z;\n    const coeff = this.coefficients;\n\n    // band 0\n    target.copy(coeff[0]).multiplyScalar(0.886227); // π * 0.282095\n\n    // band 1\n    target.addScaledVector(coeff[1], 2.0 * 0.511664 * y); // ( 2 * π / 3 ) * 0.488603\n    target.addScaledVector(coeff[2], 2.0 * 0.511664 * z);\n    target.addScaledVector(coeff[3], 2.0 * 0.511664 * x);\n\n    // band 2\n    target.addScaledVector(coeff[4], 2.0 * 0.429043 * x * y); // ( π / 4 ) * 1.092548\n    target.addScaledVector(coeff[5], 2.0 * 0.429043 * y * z);\n    target.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708); // ( π / 4 ) * 0.315392 * 3\n    target.addScaledVector(coeff[7], 2.0 * 0.429043 * x * z);\n    target.addScaledVector(coeff[8], 0.429043 * (x * x - y * y)); // ( π / 4 ) * 0.546274\n\n    return target;\n  }\n\n  /**\n   * Adds the given SH to this instance.\n   *\n   * @param {SphericalHarmonics3} sh - The SH to add.\n   * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n   */\n  add(sh) {\n    for (let i = 0; i < 9; i++) {\n      this.coefficients[i].add(sh.coefficients[i]);\n    }\n    return this;\n  }\n\n  /**\n   * A convenience method for performing {@link SphericalHarmonics3#add} and\n   * {@link SphericalHarmonics3#scale} at once.\n   *\n   * @param {SphericalHarmonics3} sh - The SH to add.\n   * @param {number} s - The scale factor.\n   * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n   */\n  addScaledSH(sh, s) {\n    for (let i = 0; i < 9; i++) {\n      this.coefficients[i].addScaledVector(sh.coefficients[i], s);\n    }\n    return this;\n  }\n\n  /**\n   * Scales this SH by the given scale factor.\n   *\n   * @param {number} s - The scale factor.\n   * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n   */\n  scale(s) {\n    for (let i = 0; i < 9; i++) {\n      this.coefficients[i].multiplyScalar(s);\n    }\n    return this;\n  }\n\n  /**\n   * Linear interpolates between the given SH and this instance by the given\n   * alpha factor.\n   *\n   * @param {SphericalHarmonics3} sh - The SH to interpolate with.\n   * @param {number} alpha - The alpha factor.\n   * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n   */\n  lerp(sh, alpha) {\n    for (let i = 0; i < 9; i++) {\n      this.coefficients[i].lerp(sh.coefficients[i], alpha);\n    }\n    return this;\n  }\n\n  /**\n   * Returns `true` if this spherical harmonics is equal with the given one.\n   *\n   * @param {SphericalHarmonics3} sh - The spherical harmonics to test for equality.\n   * @return {boolean} Whether this spherical harmonics is equal with the given one.\n   */\n  equals(sh) {\n    for (let i = 0; i < 9; i++) {\n      if (!this.coefficients[i].equals(sh.coefficients[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Copies the values of the given spherical harmonics to this instance.\n   *\n   * @param {SphericalHarmonics3} sh - The spherical harmonics to copy.\n   * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n   */\n  copy(sh) {\n    return this.set(sh.coefficients);\n  }\n\n  /**\n   * Returns a new spherical harmonics with copied values from this instance.\n   *\n   * @return {SphericalHarmonics3} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  /**\n   * Sets the SH coefficients of this instance from the given array.\n   *\n   * @param {Array<number>} array - An array holding the SH coefficients.\n   * @param {number} [offset=0] - The array offset where to start copying.\n   * @return {SphericalHarmonics3} A clone of this instance.\n   */\n  fromArray(array) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const coefficients = this.coefficients;\n    for (let i = 0; i < 9; i++) {\n      coefficients[i].fromArray(array, offset + i * 3);\n    }\n    return this;\n  }\n\n  /**\n   * Returns an array with the SH coefficients, or copies them into the provided\n   * array. The coefficients are represented as numbers.\n   *\n   * @param {Array<number>} [array=[]] - The target array.\n   * @param {number} [offset=0] - The array offset where to start copying.\n   * @return {Array<number>} An array with flat SH coefficients.\n   */\n  toArray() {\n    let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const coefficients = this.coefficients;\n    for (let i = 0; i < 9; i++) {\n      coefficients[i].toArray(array, offset + i * 3);\n    }\n    return array;\n  }\n\n  /**\n   * Computes the SH basis for the given normal vector.\n   *\n   * @param {Vector3} normal - The normal.\n   * @param {Array<number>} shBasis - The target array holding the SH basis.\n   */\n  static getBasisAt(normal, shBasis) {\n    // normal is assumed to be unit length\n\n    const x = normal.x,\n      y = normal.y,\n      z = normal.z;\n\n    // band 0\n    shBasis[0] = 0.282095;\n\n    // band 1\n    shBasis[1] = 0.488603 * y;\n    shBasis[2] = 0.488603 * z;\n    shBasis[3] = 0.488603 * x;\n\n    // band 2\n    shBasis[4] = 1.092548 * x * y;\n    shBasis[5] = 1.092548 * y * z;\n    shBasis[6] = 0.315392 * (3 * z * z - 1);\n    shBasis[7] = 1.092548 * x * z;\n    shBasis[8] = 0.546274 * (x * x - y * y);\n  }\n}\n\n/**\n * Light probes are an alternative way of adding light to a 3D scene. Unlike\n * classical light sources (e.g. directional, point or spot lights), light\n * probes do not emit light. Instead they store information about light\n * passing through 3D space. During rendering, the light that hits a 3D\n * object is approximated by using the data from the light probe.\n *\n * Light probes are usually created from (radiance) environment maps. The\n * class {@link LightProbeGenerator} can be used to create light probes from\n * cube textures or render targets. However, light estimation data could also\n * be provided in other forms e.g. by WebXR. This enables the rendering of\n * augmented reality content that reacts to real world lighting.\n *\n * The current probe implementation in three.js supports so-called diffuse\n * light probes. This type of light probe is functionally equivalent to an\n * irradiance environment map.\n *\n * @augments Light\n */\nclass LightProbe extends Light {\n  /**\n   * Constructs a new light probe.\n   *\n   * @param {SphericalHarmonics3} sh - The spherical harmonics which represents encoded lighting information.\n   * @param {number} [intensity=1] - The light's strength/intensity.\n   */\n  constructor() {\n    let sh = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new SphericalHarmonics3();\n    let intensity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    super(undefined, intensity);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isLightProbe = true;\n\n    /**\n     * A light probe uses spherical harmonics to encode lighting information.\n     *\n     * @type {SphericalHarmonics3}\n     */\n    this.sh = sh;\n  }\n  copy(source) {\n    super.copy(source);\n    this.sh.copy(source.sh);\n    return this;\n  }\n\n  /**\n   * Deserializes the light prove from the given JSON.\n   *\n   * @param {Object} json - The JSON holding the serialized light probe.\n   * @return {LightProbe} A reference to this light probe.\n   */\n  fromJSON(json) {\n    this.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n    this.sh.fromArray(json.sh);\n    return this;\n  }\n  toJSON(meta) {\n    const data = super.toJSON(meta);\n    data.object.sh = this.sh.toArray();\n    return data;\n  }\n}\n\n/**\n * Class for loading geometries. The files are internally\n * loaded via {@link FileLoader}.\n *\n * ```js\n * const loader = new THREE.MaterialLoader();\n * const material = await loader.loadAsync( 'material.json' );\n * ```\n * This loader does not support node materials. Use {@link NodeMaterialLoader} instead.\n *\n * @augments Loader\n */\nclass MaterialLoader extends Loader {\n  /**\n   * Constructs a new material loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n\n    /**\n     * A dictionary holding textures used by the material.\n     *\n     * @type {Object<string,Texture>}\n     */\n    this.textures = {};\n  }\n\n  /**\n   * Starts loading from the given URL and pass the loaded material to the `onLoad()` callback.\n   *\n   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n   * @param {function(Material)} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   */\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(JSON.parse(text)));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  /**\n   * Parses the given JSON object and returns a material.\n   *\n   * @param {Object} json - The serialized material.\n   * @return {Material} The parsed material.\n   */\n  parse(json) {\n    const textures = this.textures;\n    function getTexture(name) {\n      if (textures[name] === undefined) {\n        console.warn('THREE.MaterialLoader: Undefined texture', name);\n      }\n      return textures[name];\n    }\n    const material = this.createMaterialFromType(json.type);\n    if (json.uuid !== undefined) material.uuid = json.uuid;\n    if (json.name !== undefined) material.name = json.name;\n    if (json.color !== undefined && material.color !== undefined) material.color.setHex(json.color);\n    if (json.roughness !== undefined) material.roughness = json.roughness;\n    if (json.metalness !== undefined) material.metalness = json.metalness;\n    if (json.sheen !== undefined) material.sheen = json.sheen;\n    if (json.sheenColor !== undefined) material.sheenColor = new Color().setHex(json.sheenColor);\n    if (json.sheenRoughness !== undefined) material.sheenRoughness = json.sheenRoughness;\n    if (json.emissive !== undefined && material.emissive !== undefined) material.emissive.setHex(json.emissive);\n    if (json.specular !== undefined && material.specular !== undefined) material.specular.setHex(json.specular);\n    if (json.specularIntensity !== undefined) material.specularIntensity = json.specularIntensity;\n    if (json.specularColor !== undefined && material.specularColor !== undefined) material.specularColor.setHex(json.specularColor);\n    if (json.shininess !== undefined) material.shininess = json.shininess;\n    if (json.clearcoat !== undefined) material.clearcoat = json.clearcoat;\n    if (json.clearcoatRoughness !== undefined) material.clearcoatRoughness = json.clearcoatRoughness;\n    if (json.dispersion !== undefined) material.dispersion = json.dispersion;\n    if (json.iridescence !== undefined) material.iridescence = json.iridescence;\n    if (json.iridescenceIOR !== undefined) material.iridescenceIOR = json.iridescenceIOR;\n    if (json.iridescenceThicknessRange !== undefined) material.iridescenceThicknessRange = json.iridescenceThicknessRange;\n    if (json.transmission !== undefined) material.transmission = json.transmission;\n    if (json.thickness !== undefined) material.thickness = json.thickness;\n    if (json.attenuationDistance !== undefined) material.attenuationDistance = json.attenuationDistance;\n    if (json.attenuationColor !== undefined && material.attenuationColor !== undefined) material.attenuationColor.setHex(json.attenuationColor);\n    if (json.anisotropy !== undefined) material.anisotropy = json.anisotropy;\n    if (json.anisotropyRotation !== undefined) material.anisotropyRotation = json.anisotropyRotation;\n    if (json.fog !== undefined) material.fog = json.fog;\n    if (json.flatShading !== undefined) material.flatShading = json.flatShading;\n    if (json.blending !== undefined) material.blending = json.blending;\n    if (json.combine !== undefined) material.combine = json.combine;\n    if (json.side !== undefined) material.side = json.side;\n    if (json.shadowSide !== undefined) material.shadowSide = json.shadowSide;\n    if (json.opacity !== undefined) material.opacity = json.opacity;\n    if (json.transparent !== undefined) material.transparent = json.transparent;\n    if (json.alphaTest !== undefined) material.alphaTest = json.alphaTest;\n    if (json.alphaHash !== undefined) material.alphaHash = json.alphaHash;\n    if (json.depthFunc !== undefined) material.depthFunc = json.depthFunc;\n    if (json.depthTest !== undefined) material.depthTest = json.depthTest;\n    if (json.depthWrite !== undefined) material.depthWrite = json.depthWrite;\n    if (json.colorWrite !== undefined) material.colorWrite = json.colorWrite;\n    if (json.blendSrc !== undefined) material.blendSrc = json.blendSrc;\n    if (json.blendDst !== undefined) material.blendDst = json.blendDst;\n    if (json.blendEquation !== undefined) material.blendEquation = json.blendEquation;\n    if (json.blendSrcAlpha !== undefined) material.blendSrcAlpha = json.blendSrcAlpha;\n    if (json.blendDstAlpha !== undefined) material.blendDstAlpha = json.blendDstAlpha;\n    if (json.blendEquationAlpha !== undefined) material.blendEquationAlpha = json.blendEquationAlpha;\n    if (json.blendColor !== undefined && material.blendColor !== undefined) material.blendColor.setHex(json.blendColor);\n    if (json.blendAlpha !== undefined) material.blendAlpha = json.blendAlpha;\n    if (json.stencilWriteMask !== undefined) material.stencilWriteMask = json.stencilWriteMask;\n    if (json.stencilFunc !== undefined) material.stencilFunc = json.stencilFunc;\n    if (json.stencilRef !== undefined) material.stencilRef = json.stencilRef;\n    if (json.stencilFuncMask !== undefined) material.stencilFuncMask = json.stencilFuncMask;\n    if (json.stencilFail !== undefined) material.stencilFail = json.stencilFail;\n    if (json.stencilZFail !== undefined) material.stencilZFail = json.stencilZFail;\n    if (json.stencilZPass !== undefined) material.stencilZPass = json.stencilZPass;\n    if (json.stencilWrite !== undefined) material.stencilWrite = json.stencilWrite;\n    if (json.wireframe !== undefined) material.wireframe = json.wireframe;\n    if (json.wireframeLinewidth !== undefined) material.wireframeLinewidth = json.wireframeLinewidth;\n    if (json.wireframeLinecap !== undefined) material.wireframeLinecap = json.wireframeLinecap;\n    if (json.wireframeLinejoin !== undefined) material.wireframeLinejoin = json.wireframeLinejoin;\n    if (json.rotation !== undefined) material.rotation = json.rotation;\n    if (json.linewidth !== undefined) material.linewidth = json.linewidth;\n    if (json.dashSize !== undefined) material.dashSize = json.dashSize;\n    if (json.gapSize !== undefined) material.gapSize = json.gapSize;\n    if (json.scale !== undefined) material.scale = json.scale;\n    if (json.polygonOffset !== undefined) material.polygonOffset = json.polygonOffset;\n    if (json.polygonOffsetFactor !== undefined) material.polygonOffsetFactor = json.polygonOffsetFactor;\n    if (json.polygonOffsetUnits !== undefined) material.polygonOffsetUnits = json.polygonOffsetUnits;\n    if (json.dithering !== undefined) material.dithering = json.dithering;\n    if (json.alphaToCoverage !== undefined) material.alphaToCoverage = json.alphaToCoverage;\n    if (json.premultipliedAlpha !== undefined) material.premultipliedAlpha = json.premultipliedAlpha;\n    if (json.forceSinglePass !== undefined) material.forceSinglePass = json.forceSinglePass;\n    if (json.visible !== undefined) material.visible = json.visible;\n    if (json.toneMapped !== undefined) material.toneMapped = json.toneMapped;\n    if (json.userData !== undefined) material.userData = json.userData;\n    if (json.vertexColors !== undefined) {\n      if (typeof json.vertexColors === 'number') {\n        material.vertexColors = json.vertexColors > 0 ? true : false;\n      } else {\n        material.vertexColors = json.vertexColors;\n      }\n    }\n\n    // Shader Material\n\n    if (json.uniforms !== undefined) {\n      for (const name in json.uniforms) {\n        const uniform = json.uniforms[name];\n        material.uniforms[name] = {};\n        switch (uniform.type) {\n          case 't':\n            material.uniforms[name].value = getTexture(uniform.value);\n            break;\n          case 'c':\n            material.uniforms[name].value = new Color().setHex(uniform.value);\n            break;\n          case 'v2':\n            material.uniforms[name].value = new Vector2().fromArray(uniform.value);\n            break;\n          case 'v3':\n            material.uniforms[name].value = new Vector3().fromArray(uniform.value);\n            break;\n          case 'v4':\n            material.uniforms[name].value = new Vector4().fromArray(uniform.value);\n            break;\n          case 'm3':\n            material.uniforms[name].value = new Matrix3().fromArray(uniform.value);\n            break;\n          case 'm4':\n            material.uniforms[name].value = new Matrix4().fromArray(uniform.value);\n            break;\n          default:\n            material.uniforms[name].value = uniform.value;\n        }\n      }\n    }\n    if (json.defines !== undefined) material.defines = json.defines;\n    if (json.vertexShader !== undefined) material.vertexShader = json.vertexShader;\n    if (json.fragmentShader !== undefined) material.fragmentShader = json.fragmentShader;\n    if (json.glslVersion !== undefined) material.glslVersion = json.glslVersion;\n    if (json.extensions !== undefined) {\n      for (const key in json.extensions) {\n        material.extensions[key] = json.extensions[key];\n      }\n    }\n    if (json.lights !== undefined) material.lights = json.lights;\n    if (json.clipping !== undefined) material.clipping = json.clipping;\n\n    // for PointsMaterial\n\n    if (json.size !== undefined) material.size = json.size;\n    if (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation;\n\n    // maps\n\n    if (json.map !== undefined) material.map = getTexture(json.map);\n    if (json.matcap !== undefined) material.matcap = getTexture(json.matcap);\n    if (json.alphaMap !== undefined) material.alphaMap = getTexture(json.alphaMap);\n    if (json.bumpMap !== undefined) material.bumpMap = getTexture(json.bumpMap);\n    if (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;\n    if (json.normalMap !== undefined) material.normalMap = getTexture(json.normalMap);\n    if (json.normalMapType !== undefined) material.normalMapType = json.normalMapType;\n    if (json.normalScale !== undefined) {\n      let normalScale = json.normalScale;\n      if (Array.isArray(normalScale) === false) {\n        // Blender exporter used to export a scalar. See #7459\n\n        normalScale = [normalScale, normalScale];\n      }\n      material.normalScale = new Vector2().fromArray(normalScale);\n    }\n    if (json.displacementMap !== undefined) material.displacementMap = getTexture(json.displacementMap);\n    if (json.displacementScale !== undefined) material.displacementScale = json.displacementScale;\n    if (json.displacementBias !== undefined) material.displacementBias = json.displacementBias;\n    if (json.roughnessMap !== undefined) material.roughnessMap = getTexture(json.roughnessMap);\n    if (json.metalnessMap !== undefined) material.metalnessMap = getTexture(json.metalnessMap);\n    if (json.emissiveMap !== undefined) material.emissiveMap = getTexture(json.emissiveMap);\n    if (json.emissiveIntensity !== undefined) material.emissiveIntensity = json.emissiveIntensity;\n    if (json.specularMap !== undefined) material.specularMap = getTexture(json.specularMap);\n    if (json.specularIntensityMap !== undefined) material.specularIntensityMap = getTexture(json.specularIntensityMap);\n    if (json.specularColorMap !== undefined) material.specularColorMap = getTexture(json.specularColorMap);\n    if (json.envMap !== undefined) material.envMap = getTexture(json.envMap);\n    if (json.envMapRotation !== undefined) material.envMapRotation.fromArray(json.envMapRotation);\n    if (json.envMapIntensity !== undefined) material.envMapIntensity = json.envMapIntensity;\n    if (json.reflectivity !== undefined) material.reflectivity = json.reflectivity;\n    if (json.refractionRatio !== undefined) material.refractionRatio = json.refractionRatio;\n    if (json.lightMap !== undefined) material.lightMap = getTexture(json.lightMap);\n    if (json.lightMapIntensity !== undefined) material.lightMapIntensity = json.lightMapIntensity;\n    if (json.aoMap !== undefined) material.aoMap = getTexture(json.aoMap);\n    if (json.aoMapIntensity !== undefined) material.aoMapIntensity = json.aoMapIntensity;\n    if (json.gradientMap !== undefined) material.gradientMap = getTexture(json.gradientMap);\n    if (json.clearcoatMap !== undefined) material.clearcoatMap = getTexture(json.clearcoatMap);\n    if (json.clearcoatRoughnessMap !== undefined) material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap);\n    if (json.clearcoatNormalMap !== undefined) material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);\n    if (json.clearcoatNormalScale !== undefined) material.clearcoatNormalScale = new Vector2().fromArray(json.clearcoatNormalScale);\n    if (json.iridescenceMap !== undefined) material.iridescenceMap = getTexture(json.iridescenceMap);\n    if (json.iridescenceThicknessMap !== undefined) material.iridescenceThicknessMap = getTexture(json.iridescenceThicknessMap);\n    if (json.transmissionMap !== undefined) material.transmissionMap = getTexture(json.transmissionMap);\n    if (json.thicknessMap !== undefined) material.thicknessMap = getTexture(json.thicknessMap);\n    if (json.anisotropyMap !== undefined) material.anisotropyMap = getTexture(json.anisotropyMap);\n    if (json.sheenColorMap !== undefined) material.sheenColorMap = getTexture(json.sheenColorMap);\n    if (json.sheenRoughnessMap !== undefined) material.sheenRoughnessMap = getTexture(json.sheenRoughnessMap);\n    return material;\n  }\n\n  /**\n   * Textures are not embedded in the material JSON so they have\n   * to be injected before the loading process starts.\n   *\n   * @param {Object} value - A dictionary holding textures for material properties.\n   * @return {MaterialLoader} A reference to this material loader.\n   */\n  setTextures(value) {\n    this.textures = value;\n    return this;\n  }\n\n  /**\n   * Creates a material for the given type.\n   *\n   * @param {string} type - The material type.\n   * @return {Material} The new material.\n   */\n  createMaterialFromType(type) {\n    return MaterialLoader.createMaterialFromType(type);\n  }\n\n  /**\n   * Creates a material for the given type.\n   *\n   * @static\n   * @param {string} type - The material type.\n   * @return {Material} The new material.\n   */\n  static createMaterialFromType(type) {\n    const materialLib = {\n      ShadowMaterial,\n      SpriteMaterial,\n      RawShaderMaterial,\n      ShaderMaterial,\n      PointsMaterial,\n      MeshPhysicalMaterial,\n      MeshStandardMaterial,\n      MeshPhongMaterial,\n      MeshToonMaterial,\n      MeshNormalMaterial,\n      MeshLambertMaterial,\n      MeshDepthMaterial,\n      MeshDistanceMaterial,\n      MeshBasicMaterial,\n      MeshMatcapMaterial,\n      LineDashedMaterial,\n      LineBasicMaterial,\n      Material\n    };\n    return new materialLib[type]();\n  }\n}\n\n/**\n * A class with loader utility functions.\n */\nclass LoaderUtils {\n  /**\n   * Extracts the base URL from the given URL.\n   *\n   * @param {string} url -The URL to extract the base URL from.\n   * @return {string} The extracted base URL.\n   */\n  static extractUrlBase(url) {\n    const index = url.lastIndexOf('/');\n    if (index === -1) return './';\n    return url.slice(0, index + 1);\n  }\n\n  /**\n   * Resolves relative URLs against the given path. Absolute paths, data urls,\n   * and blob URLs will be returned as is. Invalid URLs will return an empty\n   * string.\n   *\n   * @param {string} url -The URL to resolve.\n   * @param {string} path - The base path for relative URLs to be resolved against.\n   * @return {string} The resolved URL.\n   */\n  static resolveURL(url, path) {\n    // Invalid URL\n    if (typeof url !== 'string' || url === '') return '';\n\n    // Host Relative URL\n    if (/^https?:\\/\\//i.test(path) && /^\\//.test(url)) {\n      path = path.replace(/(^https?:\\/\\/[^\\/]+).*/i, '$1');\n    }\n\n    // Absolute URL http://,https://,//\n    if (/^(https?:)?\\/\\//i.test(url)) return url;\n\n    // Data URI\n    if (/^data:.*,.*$/i.test(url)) return url;\n\n    // Blob URL\n    if (/^blob:.*$/i.test(url)) return url;\n\n    // Relative URL\n    return path + url;\n  }\n}\n\n/**\n * An instanced version of a geometry.\n */\nclass InstancedBufferGeometry extends BufferGeometry {\n  /**\n   * Constructs a new instanced buffer geometry.\n   */\n  constructor() {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isInstancedBufferGeometry = true;\n    this.type = 'InstancedBufferGeometry';\n\n    /**\n     * The instance count.\n     *\n     * @type {number}\n     * @default Infinity\n     */\n    this.instanceCount = Infinity;\n  }\n  copy(source) {\n    super.copy(source);\n    this.instanceCount = source.instanceCount;\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    data.instanceCount = this.instanceCount;\n    data.isInstancedBufferGeometry = true;\n    return data;\n  }\n}\n\n/**\n * Class for loading geometries. The files are internally\n * loaded via {@link FileLoader}.\n *\n * ```js\n * const loader = new THREE.BufferGeometryLoader();\n * const geometry = await loader.loadAsync( 'models/json/pressure.json' );\n *\n * const material = new THREE.MeshBasicMaterial( { color: 0xF5F5F5 } );\n * const object = new THREE.Mesh( geometry, material );\n * scene.add( object );\n * ```\n *\n * @augments Loader\n */\nclass BufferGeometryLoader extends Loader {\n  /**\n   * Constructs a new geometry loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n  }\n\n  /**\n   * Starts loading from the given URL and pass the loaded geometry to the `onLoad()` callback.\n   *\n   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n   * @param {function(BufferGeometry)} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   */\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(JSON.parse(text)));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  /**\n   * Parses the given JSON object and returns a geometry.\n   *\n   * @param {Object} json - The serialized geometry.\n   * @return {BufferGeometry} The parsed geometry.\n   */\n  parse(json) {\n    const interleavedBufferMap = {};\n    const arrayBufferMap = {};\n    function getInterleavedBuffer(json, uuid) {\n      if (interleavedBufferMap[uuid] !== undefined) return interleavedBufferMap[uuid];\n      const interleavedBuffers = json.interleavedBuffers;\n      const interleavedBuffer = interleavedBuffers[uuid];\n      const buffer = getArrayBuffer(json, interleavedBuffer.buffer);\n      const array = getTypedArray(interleavedBuffer.type, buffer);\n      const ib = new InterleavedBuffer(array, interleavedBuffer.stride);\n      ib.uuid = interleavedBuffer.uuid;\n      interleavedBufferMap[uuid] = ib;\n      return ib;\n    }\n    function getArrayBuffer(json, uuid) {\n      if (arrayBufferMap[uuid] !== undefined) return arrayBufferMap[uuid];\n      const arrayBuffers = json.arrayBuffers;\n      const arrayBuffer = arrayBuffers[uuid];\n      const ab = new Uint32Array(arrayBuffer).buffer;\n      arrayBufferMap[uuid] = ab;\n      return ab;\n    }\n    const geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n    const index = json.data.index;\n    if (index !== undefined) {\n      const typedArray = getTypedArray(index.type, index.array);\n      geometry.setIndex(new BufferAttribute(typedArray, 1));\n    }\n    const attributes = json.data.attributes;\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      let bufferAttribute;\n      if (attribute.isInterleavedBufferAttribute) {\n        const interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);\n        bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);\n      } else {\n        const typedArray = getTypedArray(attribute.type, attribute.array);\n        const bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n        bufferAttribute = new bufferAttributeConstr(typedArray, attribute.itemSize, attribute.normalized);\n      }\n      if (attribute.name !== undefined) bufferAttribute.name = attribute.name;\n      if (attribute.usage !== undefined) bufferAttribute.setUsage(attribute.usage);\n      geometry.setAttribute(key, bufferAttribute);\n    }\n    const morphAttributes = json.data.morphAttributes;\n    if (morphAttributes) {\n      for (const key in morphAttributes) {\n        const attributeArray = morphAttributes[key];\n        const array = [];\n        for (let i = 0, il = attributeArray.length; i < il; i++) {\n          const attribute = attributeArray[i];\n          let bufferAttribute;\n          if (attribute.isInterleavedBufferAttribute) {\n            const interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);\n            bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);\n          } else {\n            const typedArray = getTypedArray(attribute.type, attribute.array);\n            bufferAttribute = new BufferAttribute(typedArray, attribute.itemSize, attribute.normalized);\n          }\n          if (attribute.name !== undefined) bufferAttribute.name = attribute.name;\n          array.push(bufferAttribute);\n        }\n        geometry.morphAttributes[key] = array;\n      }\n    }\n    const morphTargetsRelative = json.data.morphTargetsRelative;\n    if (morphTargetsRelative) {\n      geometry.morphTargetsRelative = true;\n    }\n    const groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n    if (groups !== undefined) {\n      for (let i = 0, n = groups.length; i !== n; ++i) {\n        const group = groups[i];\n        geometry.addGroup(group.start, group.count, group.materialIndex);\n      }\n    }\n    const boundingSphere = json.data.boundingSphere;\n    if (boundingSphere !== undefined) {\n      const center = new Vector3();\n      if (boundingSphere.center !== undefined) {\n        center.fromArray(boundingSphere.center);\n      }\n      geometry.boundingSphere = new Sphere(center, boundingSphere.radius);\n    }\n    if (json.name) geometry.name = json.name;\n    if (json.userData) geometry.userData = json.userData;\n    return geometry;\n  }\n}\n\n/**\n * A loader for loading a JSON resource in the [JSON Object/Scene format]{@link https://github.com/mrdoob/three.js/wiki/JSON-Object-Scene-format-4}.\n * The files are internally loaded via {@link FileLoader}.\n *\n * ```js\n * const loader = new THREE.ObjectLoader();\n * const obj = await loader.loadAsync( 'models/json/example.json' );\n * scene.add( obj );\n *\n * // Alternatively, to parse a previously loaded JSON structure\n * const object = await loader.parseAsync( a_json_object );\n * scene.add( object );\n * ```\n *\n * @augments Loader\n */\nclass ObjectLoader extends Loader {\n  /**\n   * Constructs a new object loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n  }\n\n  /**\n   * Starts loading from the given URL and pass the loaded 3D object to the `onLoad()` callback.\n   *\n   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n   * @param {function(Object3D)} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   */\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n    this.resourcePath = this.resourcePath || path;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      let json = null;\n      try {\n        json = JSON.parse(text);\n      } catch (error) {\n        if (onError !== undefined) onError(error);\n        console.error('THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message);\n        return;\n      }\n      const metadata = json.metadata;\n      if (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {\n        if (onError !== undefined) onError(new Error('THREE.ObjectLoader: Can\\'t load ' + url));\n        console.error('THREE.ObjectLoader: Can\\'t load ' + url);\n        return;\n      }\n      scope.parse(json, onLoad);\n    }, onProgress, onError);\n  }\n\n  /**\n   * Async version of {@link ObjectLoader#load}.\n   *\n   * @async\n   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n   * @return {Promise<Object3D>} A Promise that resolves with the loaded 3D object.\n   */\n  async loadAsync(url, onProgress) {\n    const scope = this;\n    const path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n    this.resourcePath = this.resourcePath || path;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    const text = await loader.loadAsync(url, onProgress);\n    const json = JSON.parse(text);\n    const metadata = json.metadata;\n    if (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {\n      throw new Error('THREE.ObjectLoader: Can\\'t load ' + url);\n    }\n    return await scope.parseAsync(json);\n  }\n\n  /**\n   * Parses the given JSON. This is used internally by {@link ObjectLoader#load}\n   * but can also be used directly to parse a previously loaded JSON structure.\n   *\n   * @param {Object} json - The serialized 3D object.\n   * @param {onLoad} onLoad - Executed when all resources (e.g. textures) have been fully loaded.\n   * @return {Object3D} The parsed 3D object.\n   */\n  parse(json, onLoad) {\n    const animations = this.parseAnimations(json.animations);\n    const shapes = this.parseShapes(json.shapes);\n    const geometries = this.parseGeometries(json.geometries, shapes);\n    const images = this.parseImages(json.images, function () {\n      if (onLoad !== undefined) onLoad(object);\n    });\n    const textures = this.parseTextures(json.textures, images);\n    const materials = this.parseMaterials(json.materials, textures);\n    const object = this.parseObject(json.object, geometries, materials, textures, animations);\n    const skeletons = this.parseSkeletons(json.skeletons, object);\n    this.bindSkeletons(object, skeletons);\n    this.bindLightTargets(object);\n\n    //\n\n    if (onLoad !== undefined) {\n      let hasImages = false;\n      for (const uuid in images) {\n        if (images[uuid].data instanceof HTMLImageElement) {\n          hasImages = true;\n          break;\n        }\n      }\n      if (hasImages === false) onLoad(object);\n    }\n    return object;\n  }\n\n  /**\n   * Async version of {@link ObjectLoader#parse}.\n   *\n   * @param {Object} json - The serialized 3D object.\n   * @return {Promise<Object3D>} A Promise that resolves with the parsed 3D object.\n   */\n  async parseAsync(json) {\n    const animations = this.parseAnimations(json.animations);\n    const shapes = this.parseShapes(json.shapes);\n    const geometries = this.parseGeometries(json.geometries, shapes);\n    const images = await this.parseImagesAsync(json.images);\n    const textures = this.parseTextures(json.textures, images);\n    const materials = this.parseMaterials(json.materials, textures);\n    const object = this.parseObject(json.object, geometries, materials, textures, animations);\n    const skeletons = this.parseSkeletons(json.skeletons, object);\n    this.bindSkeletons(object, skeletons);\n    this.bindLightTargets(object);\n    return object;\n  }\n\n  // internals\n\n  parseShapes(json) {\n    const shapes = {};\n    if (json !== undefined) {\n      for (let i = 0, l = json.length; i < l; i++) {\n        const shape = new Shape().fromJSON(json[i]);\n        shapes[shape.uuid] = shape;\n      }\n    }\n    return shapes;\n  }\n  parseSkeletons(json, object) {\n    const skeletons = {};\n    const bones = {};\n\n    // generate bone lookup table\n\n    object.traverse(function (child) {\n      if (child.isBone) bones[child.uuid] = child;\n    });\n\n    // create skeletons\n\n    if (json !== undefined) {\n      for (let i = 0, l = json.length; i < l; i++) {\n        const skeleton = new Skeleton().fromJSON(json[i], bones);\n        skeletons[skeleton.uuid] = skeleton;\n      }\n    }\n    return skeletons;\n  }\n  parseGeometries(json, shapes) {\n    const geometries = {};\n    if (json !== undefined) {\n      const bufferGeometryLoader = new BufferGeometryLoader();\n      for (let i = 0, l = json.length; i < l; i++) {\n        let geometry;\n        const data = json[i];\n        switch (data.type) {\n          case 'BufferGeometry':\n          case 'InstancedBufferGeometry':\n            geometry = bufferGeometryLoader.parse(data);\n            break;\n          default:\n            if (data.type in Geometries) {\n              geometry = Geometries[data.type].fromJSON(data, shapes);\n            } else {\n              console.warn(`THREE.ObjectLoader: Unsupported geometry type \"${data.type}\"`);\n            }\n        }\n        geometry.uuid = data.uuid;\n        if (data.name !== undefined) geometry.name = data.name;\n        if (data.userData !== undefined) geometry.userData = data.userData;\n        geometries[data.uuid] = geometry;\n      }\n    }\n    return geometries;\n  }\n  parseMaterials(json, textures) {\n    const cache = {}; // MultiMaterial\n    const materials = {};\n    if (json !== undefined) {\n      const loader = new MaterialLoader();\n      loader.setTextures(textures);\n      for (let i = 0, l = json.length; i < l; i++) {\n        const data = json[i];\n        if (cache[data.uuid] === undefined) {\n          cache[data.uuid] = loader.parse(data);\n        }\n        materials[data.uuid] = cache[data.uuid];\n      }\n    }\n    return materials;\n  }\n  parseAnimations(json) {\n    const animations = {};\n    if (json !== undefined) {\n      for (let i = 0; i < json.length; i++) {\n        const data = json[i];\n        const clip = AnimationClip.parse(data);\n        animations[clip.uuid] = clip;\n      }\n    }\n    return animations;\n  }\n  parseImages(json, onLoad) {\n    const scope = this;\n    const images = {};\n    let loader;\n    function loadImage(url) {\n      scope.manager.itemStart(url);\n      return loader.load(url, function () {\n        scope.manager.itemEnd(url);\n      }, undefined, function () {\n        scope.manager.itemError(url);\n        scope.manager.itemEnd(url);\n      });\n    }\n    function deserializeImage(image) {\n      if (typeof image === 'string') {\n        const url = image;\n        const path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(url) ? url : scope.resourcePath + url;\n        return loadImage(path);\n      } else {\n        if (image.data) {\n          return {\n            data: getTypedArray(image.type, image.data),\n            width: image.width,\n            height: image.height\n          };\n        } else {\n          return null;\n        }\n      }\n    }\n    if (json !== undefined && json.length > 0) {\n      const manager = new LoadingManager(onLoad);\n      loader = new ImageLoader(manager);\n      loader.setCrossOrigin(this.crossOrigin);\n      for (let i = 0, il = json.length; i < il; i++) {\n        const image = json[i];\n        const url = image.url;\n        if (Array.isArray(url)) {\n          // load array of images e.g CubeTexture\n\n          const imageArray = [];\n          for (let j = 0, jl = url.length; j < jl; j++) {\n            const currentUrl = url[j];\n            const deserializedImage = deserializeImage(currentUrl);\n            if (deserializedImage !== null) {\n              if (deserializedImage instanceof HTMLImageElement) {\n                imageArray.push(deserializedImage);\n              } else {\n                // special case: handle array of data textures for cube textures\n\n                imageArray.push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));\n              }\n            }\n          }\n          images[image.uuid] = new Source(imageArray);\n        } else {\n          // load single image\n\n          const deserializedImage = deserializeImage(image.url);\n          images[image.uuid] = new Source(deserializedImage);\n        }\n      }\n    }\n    return images;\n  }\n  async parseImagesAsync(json) {\n    const scope = this;\n    const images = {};\n    let loader;\n    async function deserializeImage(image) {\n      if (typeof image === 'string') {\n        const url = image;\n        const path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(url) ? url : scope.resourcePath + url;\n        return await loader.loadAsync(path);\n      } else {\n        if (image.data) {\n          return {\n            data: getTypedArray(image.type, image.data),\n            width: image.width,\n            height: image.height\n          };\n        } else {\n          return null;\n        }\n      }\n    }\n    if (json !== undefined && json.length > 0) {\n      loader = new ImageLoader(this.manager);\n      loader.setCrossOrigin(this.crossOrigin);\n      for (let i = 0, il = json.length; i < il; i++) {\n        const image = json[i];\n        const url = image.url;\n        if (Array.isArray(url)) {\n          // load array of images e.g CubeTexture\n\n          const imageArray = [];\n          for (let j = 0, jl = url.length; j < jl; j++) {\n            const currentUrl = url[j];\n            const deserializedImage = await deserializeImage(currentUrl);\n            if (deserializedImage !== null) {\n              if (deserializedImage instanceof HTMLImageElement) {\n                imageArray.push(deserializedImage);\n              } else {\n                // special case: handle array of data textures for cube textures\n\n                imageArray.push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));\n              }\n            }\n          }\n          images[image.uuid] = new Source(imageArray);\n        } else {\n          // load single image\n\n          const deserializedImage = await deserializeImage(image.url);\n          images[image.uuid] = new Source(deserializedImage);\n        }\n      }\n    }\n    return images;\n  }\n  parseTextures(json, images) {\n    function parseConstant(value, type) {\n      if (typeof value === 'number') return value;\n      console.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value);\n      return type[value];\n    }\n    const textures = {};\n    if (json !== undefined) {\n      for (let i = 0, l = json.length; i < l; i++) {\n        const data = json[i];\n        if (data.image === undefined) {\n          console.warn('THREE.ObjectLoader: No \"image\" specified for', data.uuid);\n        }\n        if (images[data.image] === undefined) {\n          console.warn('THREE.ObjectLoader: Undefined image', data.image);\n        }\n        const source = images[data.image];\n        const image = source.data;\n        let texture;\n        if (Array.isArray(image)) {\n          texture = new CubeTexture();\n          if (image.length === 6) texture.needsUpdate = true;\n        } else {\n          if (image && image.data) {\n            texture = new DataTexture();\n          } else {\n            texture = new Texture();\n          }\n          if (image) texture.needsUpdate = true; // textures can have undefined image data\n        }\n        texture.source = source;\n        texture.uuid = data.uuid;\n        if (data.name !== undefined) texture.name = data.name;\n        if (data.mapping !== undefined) texture.mapping = parseConstant(data.mapping, TEXTURE_MAPPING);\n        if (data.channel !== undefined) texture.channel = data.channel;\n        if (data.offset !== undefined) texture.offset.fromArray(data.offset);\n        if (data.repeat !== undefined) texture.repeat.fromArray(data.repeat);\n        if (data.center !== undefined) texture.center.fromArray(data.center);\n        if (data.rotation !== undefined) texture.rotation = data.rotation;\n        if (data.wrap !== undefined) {\n          texture.wrapS = parseConstant(data.wrap[0], TEXTURE_WRAPPING);\n          texture.wrapT = parseConstant(data.wrap[1], TEXTURE_WRAPPING);\n        }\n        if (data.format !== undefined) texture.format = data.format;\n        if (data.internalFormat !== undefined) texture.internalFormat = data.internalFormat;\n        if (data.type !== undefined) texture.type = data.type;\n        if (data.colorSpace !== undefined) texture.colorSpace = data.colorSpace;\n        if (data.minFilter !== undefined) texture.minFilter = parseConstant(data.minFilter, TEXTURE_FILTER);\n        if (data.magFilter !== undefined) texture.magFilter = parseConstant(data.magFilter, TEXTURE_FILTER);\n        if (data.anisotropy !== undefined) texture.anisotropy = data.anisotropy;\n        if (data.flipY !== undefined) texture.flipY = data.flipY;\n        if (data.generateMipmaps !== undefined) texture.generateMipmaps = data.generateMipmaps;\n        if (data.premultiplyAlpha !== undefined) texture.premultiplyAlpha = data.premultiplyAlpha;\n        if (data.unpackAlignment !== undefined) texture.unpackAlignment = data.unpackAlignment;\n        if (data.compareFunction !== undefined) texture.compareFunction = data.compareFunction;\n        if (data.userData !== undefined) texture.userData = data.userData;\n        textures[data.uuid] = texture;\n      }\n    }\n    return textures;\n  }\n  parseObject(data, geometries, materials, textures, animations) {\n    let object;\n    function getGeometry(name) {\n      if (geometries[name] === undefined) {\n        console.warn('THREE.ObjectLoader: Undefined geometry', name);\n      }\n      return geometries[name];\n    }\n    function getMaterial(name) {\n      if (name === undefined) return undefined;\n      if (Array.isArray(name)) {\n        const array = [];\n        for (let i = 0, l = name.length; i < l; i++) {\n          const uuid = name[i];\n          if (materials[uuid] === undefined) {\n            console.warn('THREE.ObjectLoader: Undefined material', uuid);\n          }\n          array.push(materials[uuid]);\n        }\n        return array;\n      }\n      if (materials[name] === undefined) {\n        console.warn('THREE.ObjectLoader: Undefined material', name);\n      }\n      return materials[name];\n    }\n    function getTexture(uuid) {\n      if (textures[uuid] === undefined) {\n        console.warn('THREE.ObjectLoader: Undefined texture', uuid);\n      }\n      return textures[uuid];\n    }\n    let geometry, material;\n    switch (data.type) {\n      case 'Scene':\n        object = new Scene();\n        if (data.background !== undefined) {\n          if (Number.isInteger(data.background)) {\n            object.background = new Color(data.background);\n          } else {\n            object.background = getTexture(data.background);\n          }\n        }\n        if (data.environment !== undefined) {\n          object.environment = getTexture(data.environment);\n        }\n        if (data.fog !== undefined) {\n          if (data.fog.type === 'Fog') {\n            object.fog = new Fog(data.fog.color, data.fog.near, data.fog.far);\n          } else if (data.fog.type === 'FogExp2') {\n            object.fog = new FogExp2(data.fog.color, data.fog.density);\n          }\n          if (data.fog.name !== '') {\n            object.fog.name = data.fog.name;\n          }\n        }\n        if (data.backgroundBlurriness !== undefined) object.backgroundBlurriness = data.backgroundBlurriness;\n        if (data.backgroundIntensity !== undefined) object.backgroundIntensity = data.backgroundIntensity;\n        if (data.backgroundRotation !== undefined) object.backgroundRotation.fromArray(data.backgroundRotation);\n        if (data.environmentIntensity !== undefined) object.environmentIntensity = data.environmentIntensity;\n        if (data.environmentRotation !== undefined) object.environmentRotation.fromArray(data.environmentRotation);\n        break;\n      case 'PerspectiveCamera':\n        object = new PerspectiveCamera(data.fov, data.aspect, data.near, data.far);\n        if (data.focus !== undefined) object.focus = data.focus;\n        if (data.zoom !== undefined) object.zoom = data.zoom;\n        if (data.filmGauge !== undefined) object.filmGauge = data.filmGauge;\n        if (data.filmOffset !== undefined) object.filmOffset = data.filmOffset;\n        if (data.view !== undefined) object.view = Object.assign({}, data.view);\n        break;\n      case 'OrthographicCamera':\n        object = new OrthographicCamera(data.left, data.right, data.top, data.bottom, data.near, data.far);\n        if (data.zoom !== undefined) object.zoom = data.zoom;\n        if (data.view !== undefined) object.view = Object.assign({}, data.view);\n        break;\n      case 'AmbientLight':\n        object = new AmbientLight(data.color, data.intensity);\n        break;\n      case 'DirectionalLight':\n        object = new DirectionalLight(data.color, data.intensity);\n        object.target = data.target || '';\n        break;\n      case 'PointLight':\n        object = new PointLight(data.color, data.intensity, data.distance, data.decay);\n        break;\n      case 'RectAreaLight':\n        object = new RectAreaLight(data.color, data.intensity, data.width, data.height);\n        break;\n      case 'SpotLight':\n        object = new SpotLight(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);\n        object.target = data.target || '';\n        break;\n      case 'HemisphereLight':\n        object = new HemisphereLight(data.color, data.groundColor, data.intensity);\n        break;\n      case 'LightProbe':\n        object = new LightProbe().fromJSON(data);\n        break;\n      case 'SkinnedMesh':\n        geometry = getGeometry(data.geometry);\n        material = getMaterial(data.material);\n        object = new SkinnedMesh(geometry, material);\n        if (data.bindMode !== undefined) object.bindMode = data.bindMode;\n        if (data.bindMatrix !== undefined) object.bindMatrix.fromArray(data.bindMatrix);\n        if (data.skeleton !== undefined) object.skeleton = data.skeleton;\n        break;\n      case 'Mesh':\n        geometry = getGeometry(data.geometry);\n        material = getMaterial(data.material);\n        object = new Mesh(geometry, material);\n        break;\n      case 'InstancedMesh':\n        geometry = getGeometry(data.geometry);\n        material = getMaterial(data.material);\n        const count = data.count;\n        const instanceMatrix = data.instanceMatrix;\n        const instanceColor = data.instanceColor;\n        object = new InstancedMesh(geometry, material, count);\n        object.instanceMatrix = new InstancedBufferAttribute(new Float32Array(instanceMatrix.array), 16);\n        if (instanceColor !== undefined) object.instanceColor = new InstancedBufferAttribute(new Float32Array(instanceColor.array), instanceColor.itemSize);\n        break;\n      case 'BatchedMesh':\n        geometry = getGeometry(data.geometry);\n        material = getMaterial(data.material);\n        object = new BatchedMesh(data.maxInstanceCount, data.maxVertexCount, data.maxIndexCount, material);\n        object.geometry = geometry;\n        object.perObjectFrustumCulled = data.perObjectFrustumCulled;\n        object.sortObjects = data.sortObjects;\n        object._drawRanges = data.drawRanges;\n        object._reservedRanges = data.reservedRanges;\n        object._geometryInfo = data.geometryInfo.map(info => {\n          let box = null;\n          let sphere = null;\n          if (info.boundingBox !== undefined) {\n            box = new Box3();\n            box.min.fromArray(info.boundingBox.min);\n            box.max.fromArray(info.boundingBox.max);\n          }\n          if (info.boundingSphere !== undefined) {\n            sphere = new Sphere();\n            sphere.radius = info.boundingSphere.radius;\n            sphere.center.fromArray(info.boundingSphere.center);\n          }\n          return {\n            ...info,\n            boundingBox: box,\n            boundingSphere: sphere\n          };\n        });\n        object._instanceInfo = data.instanceInfo;\n        object._availableInstanceIds = data._availableInstanceIds;\n        object._availableGeometryIds = data._availableGeometryIds;\n        object._nextIndexStart = data.nextIndexStart;\n        object._nextVertexStart = data.nextVertexStart;\n        object._geometryCount = data.geometryCount;\n        object._maxInstanceCount = data.maxInstanceCount;\n        object._maxVertexCount = data.maxVertexCount;\n        object._maxIndexCount = data.maxIndexCount;\n        object._geometryInitialized = data.geometryInitialized;\n        object._matricesTexture = getTexture(data.matricesTexture.uuid);\n        object._indirectTexture = getTexture(data.indirectTexture.uuid);\n        if (data.colorsTexture !== undefined) {\n          object._colorsTexture = getTexture(data.colorsTexture.uuid);\n        }\n        if (data.boundingSphere !== undefined) {\n          object.boundingSphere = new Sphere();\n          object.boundingSphere.center.fromArray(data.boundingSphere.center);\n          object.boundingSphere.radius = data.boundingSphere.radius;\n        }\n        if (data.boundingBox !== undefined) {\n          object.boundingBox = new Box3();\n          object.boundingBox.min.fromArray(data.boundingBox.min);\n          object.boundingBox.max.fromArray(data.boundingBox.max);\n        }\n        break;\n      case 'LOD':\n        object = new LOD();\n        break;\n      case 'Line':\n        object = new Line(getGeometry(data.geometry), getMaterial(data.material));\n        break;\n      case 'LineLoop':\n        object = new LineLoop(getGeometry(data.geometry), getMaterial(data.material));\n        break;\n      case 'LineSegments':\n        object = new LineSegments(getGeometry(data.geometry), getMaterial(data.material));\n        break;\n      case 'PointCloud':\n      case 'Points':\n        object = new Points(getGeometry(data.geometry), getMaterial(data.material));\n        break;\n      case 'Sprite':\n        object = new Sprite(getMaterial(data.material));\n        break;\n      case 'Group':\n        object = new Group();\n        break;\n      case 'Bone':\n        object = new Bone();\n        break;\n      default:\n        object = new Object3D();\n    }\n    object.uuid = data.uuid;\n    if (data.name !== undefined) object.name = data.name;\n    if (data.matrix !== undefined) {\n      object.matrix.fromArray(data.matrix);\n      if (data.matrixAutoUpdate !== undefined) object.matrixAutoUpdate = data.matrixAutoUpdate;\n      if (object.matrixAutoUpdate) object.matrix.decompose(object.position, object.quaternion, object.scale);\n    } else {\n      if (data.position !== undefined) object.position.fromArray(data.position);\n      if (data.rotation !== undefined) object.rotation.fromArray(data.rotation);\n      if (data.quaternion !== undefined) object.quaternion.fromArray(data.quaternion);\n      if (data.scale !== undefined) object.scale.fromArray(data.scale);\n    }\n    if (data.up !== undefined) object.up.fromArray(data.up);\n    if (data.castShadow !== undefined) object.castShadow = data.castShadow;\n    if (data.receiveShadow !== undefined) object.receiveShadow = data.receiveShadow;\n    if (data.shadow) {\n      if (data.shadow.intensity !== undefined) object.shadow.intensity = data.shadow.intensity;\n      if (data.shadow.bias !== undefined) object.shadow.bias = data.shadow.bias;\n      if (data.shadow.normalBias !== undefined) object.shadow.normalBias = data.shadow.normalBias;\n      if (data.shadow.radius !== undefined) object.shadow.radius = data.shadow.radius;\n      if (data.shadow.mapSize !== undefined) object.shadow.mapSize.fromArray(data.shadow.mapSize);\n      if (data.shadow.camera !== undefined) object.shadow.camera = this.parseObject(data.shadow.camera);\n    }\n    if (data.visible !== undefined) object.visible = data.visible;\n    if (data.frustumCulled !== undefined) object.frustumCulled = data.frustumCulled;\n    if (data.renderOrder !== undefined) object.renderOrder = data.renderOrder;\n    if (data.userData !== undefined) object.userData = data.userData;\n    if (data.layers !== undefined) object.layers.mask = data.layers;\n    if (data.children !== undefined) {\n      const children = data.children;\n      for (let i = 0; i < children.length; i++) {\n        object.add(this.parseObject(children[i], geometries, materials, textures, animations));\n      }\n    }\n    if (data.animations !== undefined) {\n      const objectAnimations = data.animations;\n      for (let i = 0; i < objectAnimations.length; i++) {\n        const uuid = objectAnimations[i];\n        object.animations.push(animations[uuid]);\n      }\n    }\n    if (data.type === 'LOD') {\n      if (data.autoUpdate !== undefined) object.autoUpdate = data.autoUpdate;\n      const levels = data.levels;\n      for (let l = 0; l < levels.length; l++) {\n        const level = levels[l];\n        const child = object.getObjectByProperty('uuid', level.object);\n        if (child !== undefined) {\n          object.addLevel(child, level.distance, level.hysteresis);\n        }\n      }\n    }\n    return object;\n  }\n  bindSkeletons(object, skeletons) {\n    if (Object.keys(skeletons).length === 0) return;\n    object.traverse(function (child) {\n      if (child.isSkinnedMesh === true && child.skeleton !== undefined) {\n        const skeleton = skeletons[child.skeleton];\n        if (skeleton === undefined) {\n          console.warn('THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton);\n        } else {\n          child.bind(skeleton, child.bindMatrix);\n        }\n      }\n    });\n  }\n  bindLightTargets(object) {\n    object.traverse(function (child) {\n      if (child.isDirectionalLight || child.isSpotLight) {\n        const uuid = child.target;\n        const target = object.getObjectByProperty('uuid', uuid);\n        if (target !== undefined) {\n          child.target = target;\n        } else {\n          child.target = new Object3D();\n        }\n      }\n    });\n  }\n}\nconst TEXTURE_MAPPING = {\n  UVMapping: UVMapping,\n  CubeReflectionMapping: CubeReflectionMapping,\n  CubeRefractionMapping: CubeRefractionMapping,\n  EquirectangularReflectionMapping: EquirectangularReflectionMapping,\n  EquirectangularRefractionMapping: EquirectangularRefractionMapping,\n  CubeUVReflectionMapping: CubeUVReflectionMapping\n};\nconst TEXTURE_WRAPPING = {\n  RepeatWrapping: RepeatWrapping,\n  ClampToEdgeWrapping: ClampToEdgeWrapping,\n  MirroredRepeatWrapping: MirroredRepeatWrapping\n};\nconst TEXTURE_FILTER = {\n  NearestFilter: NearestFilter,\n  NearestMipmapNearestFilter: NearestMipmapNearestFilter,\n  NearestMipmapLinearFilter: NearestMipmapLinearFilter,\n  LinearFilter: LinearFilter,\n  LinearMipmapNearestFilter: LinearMipmapNearestFilter,\n  LinearMipmapLinearFilter: LinearMipmapLinearFilter\n};\n\n/**\n * A loader for loading images as an [ImageBitmap]{@link https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap}.\n * An `ImageBitmap` provides an asynchronous and resource efficient pathway to prepare\n * textures for rendering.\n *\n * Note that {@link Texture#flipY} and {@link Texture#premultiplyAlpha} are ignored with image bitmaps.\n * They needs these configuration on bitmap creation unlike regular images need them on uploading to GPU.\n *\n * You need to set the equivalent options via {@link ImageBitmapLoader#setOptions} instead.\n *\n * Also note that unlike {@link FileLoader}, this loader does not avoid multiple concurrent requests to the same URL.\n *\n * ```js\n * const loader = new THREE.ImageBitmapLoader();\n * loader.setOptions( { imageOrientation: 'flipY' } ); // set options if needed\n * const imageBitmap = await loader.loadAsync( 'image.png' );\n *\n * const texture = new THREE.Texture( imageBitmap );\n * texture.needsUpdate = true;\n * ```\n *\n * @augments Loader\n */\nclass ImageBitmapLoader extends Loader {\n  /**\n   * Constructs a new image bitmap loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isImageBitmapLoader = true;\n    if (typeof createImageBitmap === 'undefined') {\n      console.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.');\n    }\n    if (typeof fetch === 'undefined') {\n      console.warn('THREE.ImageBitmapLoader: fetch() not supported.');\n    }\n\n    /**\n     * Represents the loader options.\n     *\n     * @type {Object}\n     * @default {premultiplyAlpha:'none'}\n     */\n    this.options = {\n      premultiplyAlpha: 'none'\n    };\n  }\n\n  /**\n   * Sets the given loader options. The structure of the object must match the `options` parameter of\n   * [createImageBitmap]{@link https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap}.\n   *\n   * @param {Object} options - The loader options to set.\n   * @return {ImageBitmapLoader} A reference to this image bitmap loader.\n   */\n  setOptions(options) {\n    this.options = options;\n    return this;\n  }\n\n  /**\n   * Starts loading from the given URL and pass the loaded image bitmap to the `onLoad()` callback.\n   *\n   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n   * @param {function(ImageBitmap)} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} onProgress - Unsupported in this loader.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   * @return {ImageBitmap|undefined} The image bitmap.\n   */\n  load(url, onLoad, onProgress, onError) {\n    if (url === undefined) url = '';\n    if (this.path !== undefined) url = this.path + url;\n    url = this.manager.resolveURL(url);\n    const scope = this;\n    const cached = Cache.get(url);\n    if (cached !== undefined) {\n      scope.manager.itemStart(url);\n\n      // If cached is a promise, wait for it to resolve\n      if (cached.then) {\n        cached.then(imageBitmap => {\n          if (onLoad) onLoad(imageBitmap);\n          scope.manager.itemEnd(url);\n        }).catch(e => {\n          if (onError) onError(e);\n        });\n        return;\n      }\n\n      // If cached is not a promise (i.e., it's already an imageBitmap)\n      setTimeout(function () {\n        if (onLoad) onLoad(cached);\n        scope.manager.itemEnd(url);\n      }, 0);\n      return cached;\n    }\n    const fetchOptions = {};\n    fetchOptions.credentials = this.crossOrigin === 'anonymous' ? 'same-origin' : 'include';\n    fetchOptions.headers = this.requestHeader;\n    const promise = fetch(url, fetchOptions).then(function (res) {\n      return res.blob();\n    }).then(function (blob) {\n      return createImageBitmap(blob, Object.assign(scope.options, {\n        colorSpaceConversion: 'none'\n      }));\n    }).then(function (imageBitmap) {\n      Cache.add(url, imageBitmap);\n      if (onLoad) onLoad(imageBitmap);\n      scope.manager.itemEnd(url);\n      return imageBitmap;\n    }).catch(function (e) {\n      if (onError) onError(e);\n      Cache.remove(url);\n      scope.manager.itemError(url);\n      scope.manager.itemEnd(url);\n    });\n    Cache.add(url, promise);\n    scope.manager.itemStart(url);\n  }\n}\nlet _context;\n\n/**\n * Manages the global audio context in the engine.\n *\n * @hideconstructor\n */\nclass AudioContext {\n  /**\n   * Returns the global native audio context.\n   *\n   * @return {AudioContext} The native audio context.\n   */\n  static getContext() {\n    if (_context === undefined) {\n      _context = new (window.AudioContext || window.webkitAudioContext)();\n    }\n    return _context;\n  }\n\n  /**\n   * Allows to set the global native audio context from outside.\n   *\n   * @param {AudioContext} value - The native context to set.\n   */\n  static setContext(value) {\n    _context = value;\n  }\n}\n\n/**\n * Class for loading audio buffers. Audios are internally\n * loaded via {@link FileLoader}.\n *\n * ```js\n * const audioListener = new THREE.AudioListener();\n * const ambientSound = new THREE.Audio( audioListener );\n *\n * const loader = new THREE.AudioLoader();\n * const audioBuffer = await loader.loadAsync( 'audio/ambient_ocean.ogg' );\n *\n * ambientSound.setBuffer( audioBuffer );\n * ambientSound.play();\n * ```\n *\n * @augments Loader\n */\nclass AudioLoader extends Loader {\n  /**\n   * Constructs a new audio loader.\n   *\n   * @param {LoadingManager} [manager] - The loading manager.\n   */\n  constructor(manager) {\n    super(manager);\n  }\n\n  /**\n   * Starts loading from the given URL and passes the loaded audio buffer\n   * to the `onLoad()` callback.\n   *\n   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n   * @param {function(AudioBuffer)} onLoad - Executed when the loading process has been finished.\n   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n   * @param {onErrorCallback} onError - Executed when errors occur.\n   */\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType('arraybuffer');\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        // Create a copy of the buffer. The `decodeAudioData` method\n        // detaches the buffer when complete, preventing reuse.\n        const bufferCopy = buffer.slice(0);\n        const context = AudioContext.getContext();\n        context.decodeAudioData(bufferCopy, function (audioBuffer) {\n          onLoad(audioBuffer);\n        }).catch(handleError);\n      } catch (e) {\n        handleError(e);\n      }\n    }, onProgress, onError);\n    function handleError(e) {\n      if (onError) {\n        onError(e);\n      } else {\n        console.error(e);\n      }\n      scope.manager.itemError(url);\n    }\n  }\n}\nconst _eyeRight = /*@__PURE__*/new Matrix4();\nconst _eyeLeft = /*@__PURE__*/new Matrix4();\nconst _projectionMatrix = /*@__PURE__*/new Matrix4();\n\n/**\n * A special type of camera that uses two perspective cameras with\n * stereoscopic projection. Can be used for rendering stereo effects\n * like [3D Anaglyph]{@link https://en.wikipedia.org/wiki/Anaglyph_3D} or\n * [Parallax Barrier]{@link https://en.wikipedia.org/wiki/parallax_barrier}.\n */\nclass StereoCamera {\n  /**\n   * Constructs a new stereo camera.\n   */\n  constructor() {\n    /**\n     * The type property is used for detecting the object type\n     * in context of serialization/deserialization.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.type = 'StereoCamera';\n\n    /**\n     * The aspect.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.aspect = 1;\n\n    /**\n     * The eye separation which represents the distance\n     * between the left and right camera.\n     *\n     * @type {number}\n     * @default 0.064\n     */\n    this.eyeSep = 0.064;\n\n    /**\n     * The camera representing the left eye. This is added to layer `1` so objects to be\n     * rendered by the left camera must also be added to this layer.\n     *\n     * @type {PerspectiveCamera}\n     */\n    this.cameraL = new PerspectiveCamera();\n    this.cameraL.layers.enable(1);\n    this.cameraL.matrixAutoUpdate = false;\n\n    /**\n     * The camera representing the right eye. This is added to layer `2` so objects to be\n     * rendered by the right camera must also be added to this layer.\n     *\n     * @type {PerspectiveCamera}\n     */\n    this.cameraR = new PerspectiveCamera();\n    this.cameraR.layers.enable(2);\n    this.cameraR.matrixAutoUpdate = false;\n    this._cache = {\n      focus: null,\n      fov: null,\n      aspect: null,\n      near: null,\n      far: null,\n      zoom: null,\n      eyeSep: null\n    };\n  }\n\n  /**\n   * Updates the stereo camera based on the given perspective camera.\n   *\n   * @param {PerspectiveCamera} camera - The perspective camera.\n   */\n  update(camera) {\n    const cache = this._cache;\n    const needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov || cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near || cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n    if (needsUpdate) {\n      cache.focus = camera.focus;\n      cache.fov = camera.fov;\n      cache.aspect = camera.aspect * this.aspect;\n      cache.near = camera.near;\n      cache.far = camera.far;\n      cache.zoom = camera.zoom;\n      cache.eyeSep = this.eyeSep;\n\n      // Off-axis stereoscopic effect based on\n      // http://paulbourke.net/stereographics/stereorender/\n\n      _projectionMatrix.copy(camera.projectionMatrix);\n      const eyeSepHalf = cache.eyeSep / 2;\n      const eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n      const ymax = cache.near * Math.tan(DEG2RAD * cache.fov * 0.5) / cache.zoom;\n      let xmin, xmax;\n\n      // translate xOffset\n\n      _eyeLeft.elements[12] = -eyeSepHalf;\n      _eyeRight.elements[12] = eyeSepHalf;\n\n      // for left eye\n\n      xmin = -ymax * cache.aspect + eyeSepOnProjection;\n      xmax = ymax * cache.aspect + eyeSepOnProjection;\n      _projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n      _projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n      this.cameraL.projectionMatrix.copy(_projectionMatrix);\n\n      // for right eye\n\n      xmin = -ymax * cache.aspect - eyeSepOnProjection;\n      xmax = ymax * cache.aspect - eyeSepOnProjection;\n      _projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n      _projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n      this.cameraR.projectionMatrix.copy(_projectionMatrix);\n    }\n    this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft);\n    this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight);\n  }\n}\n\n/**\n * This type of camera can be used in order to efficiently render a scene with a\n * predefined set of cameras. This is an important performance aspect for\n * rendering VR scenes.\n *\n * An instance of `ArrayCamera` always has an array of sub cameras. It's mandatory\n * to define for each sub camera the `viewport` property which determines the\n * part of the viewport that is rendered with this camera.\n *\n * @augments PerspectiveCamera\n */\nclass ArrayCamera extends PerspectiveCamera {\n  /**\n   * Constructs a new array camera.\n   *\n   * @param {Array<PerspectiveCamera>} [array=[]] - An array of perspective sub cameras.\n   */\n  constructor() {\n    let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isArrayCamera = true;\n\n    /**\n     * Whether this camera is used with multiview rendering or not.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default false\n     */\n    this.isMultiViewCamera = false;\n\n    /**\n     * An array of perspective sub cameras.\n     *\n     * @type {Array<PerspectiveCamera>}\n     */\n    this.cameras = array;\n  }\n}\n\n/**\n * Class for keeping track of time.\n */\nclass Clock {\n  /**\n   * Constructs a new clock.\n   *\n   * @param {boolean} [autoStart=true] - Whether to automatically start the clock when\n   * `getDelta()` is called for the first time.\n   */\n  constructor() {\n    let autoStart = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    /**\n     * If set to `true`, the clock starts automatically when `getDelta()` is called\n     * for the first time.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.autoStart = autoStart;\n\n    /**\n     * Holds the time at which the clock's `start()` method was last called.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.startTime = 0;\n\n    /**\n     * Holds the time at which the clock's `start()`, `getElapsedTime()` or\n     * `getDelta()` methods were last called.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.oldTime = 0;\n\n    /**\n     * Keeps track of the total time that the clock has been running.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.elapsedTime = 0;\n\n    /**\n     * Whether the clock is running or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.running = false;\n  }\n\n  /**\n   * Starts the clock. When `autoStart` is set to `true`, the method is automatically\n   * called by the class.\n   */\n  start() {\n    this.startTime = now();\n    this.oldTime = this.startTime;\n    this.elapsedTime = 0;\n    this.running = true;\n  }\n\n  /**\n   * Stops the clock.\n   */\n  stop() {\n    this.getElapsedTime();\n    this.running = false;\n    this.autoStart = false;\n  }\n\n  /**\n   * Returns the elapsed time in seconds.\n   *\n   * @return {number} The elapsed time.\n   */\n  getElapsedTime() {\n    this.getDelta();\n    return this.elapsedTime;\n  }\n\n  /**\n   * Returns the delta time in seconds.\n   *\n   * @return {number} The delta time.\n   */\n  getDelta() {\n    let diff = 0;\n    if (this.autoStart && !this.running) {\n      this.start();\n      return 0;\n    }\n    if (this.running) {\n      const newTime = now();\n      diff = (newTime - this.oldTime) / 1000;\n      this.oldTime = newTime;\n      this.elapsedTime += diff;\n    }\n    return diff;\n  }\n}\nfunction now() {\n  return performance.now();\n}\nconst _position$1 = /*@__PURE__*/new Vector3();\nconst _quaternion$1 = /*@__PURE__*/new Quaternion();\nconst _scale$1 = /*@__PURE__*/new Vector3();\nconst _orientation$1 = /*@__PURE__*/new Vector3();\n\n/**\n * The class represents a virtual listener of the all positional and non-positional audio effects\n * in the scene. A three.js application usually creates a single listener. It is a mandatory\n * constructor parameter for audios entities like {@link Audio} and {@link PositionalAudio}.\n *\n * In most cases, the listener object is a child of the camera. So the 3D transformation of the\n * camera represents the 3D transformation of the listener.\n *\n * @augments Object3D\n */\nclass AudioListener extends Object3D {\n  /**\n   * Constructs a new audio listener.\n   */\n  constructor() {\n    super();\n    this.type = 'AudioListener';\n\n    /**\n     * The native audio context.\n     *\n     * @type {AudioContext}\n     * @readonly\n     */\n    this.context = AudioContext.getContext();\n\n    /**\n     * The gain node used for volume control.\n     *\n     * @type {GainNode}\n     * @readonly\n     */\n    this.gain = this.context.createGain();\n    this.gain.connect(this.context.destination);\n\n    /**\n     * An optional filter.\n     *\n     * Defined via {@link AudioListener#setFilter}.\n     *\n     * @type {?AudioNode}\n     * @default null\n     * @readonly\n     */\n    this.filter = null;\n\n    /**\n     * Time delta values required for `linearRampToValueAtTime()` usage.\n     *\n     * @type {number}\n     * @default 0\n     * @readonly\n     */\n    this.timeDelta = 0;\n\n    // private\n\n    this._clock = new Clock();\n  }\n\n  /**\n   * Returns the listener's input node.\n   *\n   * This method is used by other audio nodes to connect to this listener.\n   *\n   * @return {GainNode} The input node.\n   */\n  getInput() {\n    return this.gain;\n  }\n\n  /**\n   * Removes the current filter from this listener.\n   *\n   * @return {AudioListener} A reference to this listener.\n   */\n  removeFilter() {\n    if (this.filter !== null) {\n      this.gain.disconnect(this.filter);\n      this.filter.disconnect(this.context.destination);\n      this.gain.connect(this.context.destination);\n      this.filter = null;\n    }\n    return this;\n  }\n\n  /**\n   * Returns the current set filter.\n   *\n   * @return {?AudioNode} The filter.\n   */\n  getFilter() {\n    return this.filter;\n  }\n\n  /**\n   * Sets the given filter to this listener.\n   *\n   * @param {AudioNode} value - The filter to set.\n   * @return {AudioListener} A reference to this listener.\n   */\n  setFilter(value) {\n    if (this.filter !== null) {\n      this.gain.disconnect(this.filter);\n      this.filter.disconnect(this.context.destination);\n    } else {\n      this.gain.disconnect(this.context.destination);\n    }\n    this.filter = value;\n    this.gain.connect(this.filter);\n    this.filter.connect(this.context.destination);\n    return this;\n  }\n\n  /**\n   * Returns the applications master volume.\n   *\n   * @return {number} The master volume.\n   */\n  getMasterVolume() {\n    return this.gain.gain.value;\n  }\n\n  /**\n   * Sets the applications master volume. This volume setting affects\n   * all audio nodes in the scene.\n   *\n   * @param {number} value - The master volume to set.\n   * @return {AudioListener} A reference to this listener.\n   */\n  setMasterVolume(value) {\n    this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n    return this;\n  }\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    const listener = this.context.listener;\n    const up = this.up;\n    this.timeDelta = this._clock.getDelta();\n    this.matrixWorld.decompose(_position$1, _quaternion$1, _scale$1);\n    _orientation$1.set(0, 0, -1).applyQuaternion(_quaternion$1);\n    if (listener.positionX) {\n      // code path for Chrome (see #14393)\n\n      const endTime = this.context.currentTime + this.timeDelta;\n      listener.positionX.linearRampToValueAtTime(_position$1.x, endTime);\n      listener.positionY.linearRampToValueAtTime(_position$1.y, endTime);\n      listener.positionZ.linearRampToValueAtTime(_position$1.z, endTime);\n      listener.forwardX.linearRampToValueAtTime(_orientation$1.x, endTime);\n      listener.forwardY.linearRampToValueAtTime(_orientation$1.y, endTime);\n      listener.forwardZ.linearRampToValueAtTime(_orientation$1.z, endTime);\n      listener.upX.linearRampToValueAtTime(up.x, endTime);\n      listener.upY.linearRampToValueAtTime(up.y, endTime);\n      listener.upZ.linearRampToValueAtTime(up.z, endTime);\n    } else {\n      listener.setPosition(_position$1.x, _position$1.y, _position$1.z);\n      listener.setOrientation(_orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z);\n    }\n  }\n}\n\n/**\n * Represents a non-positional ( global ) audio object.\n *\n * This and related audio modules make use of the [Web Audio API]{@link https://www.w3.org/TR/webaudio-1.1/}.\n *\n * ```js\n * // create an AudioListener and add it to the camera\n * const listener = new THREE.AudioListener();\n * camera.add( listener );\n *\n * // create a global audio source\n * const sound = new THREE.Audio( listener );\n *\n * // load a sound and set it as the Audio object's buffer\n * const audioLoader = new THREE.AudioLoader();\n * audioLoader.load( 'sounds/ambient.ogg', function( buffer ) {\n * \tsound.setBuffer( buffer );\n * \tsound.setLoop( true );\n * \tsound.setVolume( 0.5 );\n * \tsound.play();\n * });\n * ```\n *\n * @augments Object3D\n */\nclass Audio extends Object3D {\n  /**\n   * Constructs a new audio.\n   *\n   * @param {AudioListener} listener - The global audio listener.\n   */\n  constructor(listener) {\n    super();\n    this.type = 'Audio';\n\n    /**\n     * The global audio listener.\n     *\n     * @type {AudioListener}\n     * @readonly\n     */\n    this.listener = listener;\n\n    /**\n     * The audio context.\n     *\n     * @type {AudioContext}\n     * @readonly\n     */\n    this.context = listener.context;\n\n    /**\n     * The gain node used for volume control.\n     *\n     * @type {GainNode}\n     * @readonly\n     */\n    this.gain = this.context.createGain();\n    this.gain.connect(listener.getInput());\n\n    /**\n     * Whether to start playback automatically or not.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.autoplay = false;\n\n    /**\n     * A reference to an audio buffer.\n     *\n     * Defined via {@link Audio#setBuffer}.\n     *\n     * @type {?AudioBuffer}\n     * @default null\n     * @readonly\n     */\n    this.buffer = null;\n\n    /**\n     * Modify pitch, measured in cents. +/- 100 is a semitone.\n     * +/- 1200 is an octave.\n     *\n     * Defined via {@link Audio#setDetune}.\n     *\n     * @type {number}\n     * @default 0\n     * @readonly\n     */\n    this.detune = 0;\n\n    /**\n     * Whether the audio should loop or not.\n     *\n     * Defined via {@link Audio#setLoop}.\n     *\n     * @type {boolean}\n     * @default false\n     * @readonly\n     */\n    this.loop = false;\n\n    /**\n     * Defines where in the audio buffer the replay should\n     * start, in seconds.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.loopStart = 0;\n\n    /**\n     * Defines where in the audio buffer the replay should\n     * stop, in seconds.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.loopEnd = 0;\n\n    /**\n     * An offset to the time within the audio buffer the playback\n     * should begin, in seconds.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.offset = 0;\n\n    /**\n     * Overrides the default duration of the audio.\n     *\n     * @type {undefined|number}\n     * @default undefined\n     */\n    this.duration = undefined;\n\n    /**\n     * The playback speed.\n     *\n     * Defined via {@link Audio#setPlaybackRate}.\n     *\n     * @type {number}\n     * @readonly\n     * @default 1\n     */\n    this.playbackRate = 1;\n\n    /**\n     * Indicates whether the audio is playing or not.\n     *\n     * This flag will be automatically set when using {@link Audio#play},\n     * {@link Audio#pause}, {@link Audio#stop}.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default false\n     */\n    this.isPlaying = false;\n\n    /**\n     * Indicates whether the audio playback can be controlled\n     * with method like {@link Audio#play} or {@link Audio#pause}.\n     *\n     * This flag will be automatically set when audio sources are\n     * defined.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.hasPlaybackControl = true;\n\n    /**\n     * Holds a reference to the current audio source.\n     *\n     * The property is automatically by one of the `set*()` methods.\n     *\n     * @type {?AudioNode}\n     * @readonly\n     * @default null\n     */\n    this.source = null;\n\n    /**\n     * Defines the source type.\n     *\n     * The property is automatically by one of the `set*()` methods.\n     *\n     * @type {('empty'|'audioNode'|'mediaNode'|'mediaStreamNode'|'buffer')}\n     * @readonly\n     * @default 'empty'\n     */\n    this.sourceType = 'empty';\n    this._startedAt = 0;\n    this._progress = 0;\n    this._connected = false;\n\n    /**\n     * Can be used to apply a variety of low-order filters to create\n     * more complex sound effects e.g. via `BiquadFilterNode`.\n     *\n     * The property is automatically set by {@link Audio#setFilters}.\n     *\n     * @type {Array<AudioNode>}\n     * @readonly\n     */\n    this.filters = [];\n  }\n\n  /**\n   * Returns the output audio node.\n   *\n   * @return {GainNode} The output node.\n   */\n  getOutput() {\n    return this.gain;\n  }\n\n  /**\n   * Sets the given audio node as the source of this instance.\n   *\n   * {@link Audio#sourceType} is set to `audioNode` and {@link Audio#hasPlaybackControl} to `false`.\n   *\n   * @param {AudioNode} audioNode - The audio node like an instance of `OscillatorNode`.\n   * @return {Audio} A reference to this instance.\n   */\n  setNodeSource(audioNode) {\n    this.hasPlaybackControl = false;\n    this.sourceType = 'audioNode';\n    this.source = audioNode;\n    this.connect();\n    return this;\n  }\n\n  /**\n   * Sets the given media element as the source of this instance.\n   *\n   * {@link Audio#sourceType} is set to `mediaNode` and {@link Audio#hasPlaybackControl} to `false`.\n   *\n   * @param {HTMLMediaElement} mediaElement - The media element.\n   * @return {Audio} A reference to this instance.\n   */\n  setMediaElementSource(mediaElement) {\n    this.hasPlaybackControl = false;\n    this.sourceType = 'mediaNode';\n    this.source = this.context.createMediaElementSource(mediaElement);\n    this.connect();\n    return this;\n  }\n\n  /**\n   * Sets the given media stream as the source of this instance.\n   *\n   * {@link Audio#sourceType} is set to `mediaStreamNode` and {@link Audio#hasPlaybackControl} to `false`.\n   *\n   * @param {MediaStream} mediaStream - The media stream.\n   * @return {Audio} A reference to this instance.\n   */\n  setMediaStreamSource(mediaStream) {\n    this.hasPlaybackControl = false;\n    this.sourceType = 'mediaStreamNode';\n    this.source = this.context.createMediaStreamSource(mediaStream);\n    this.connect();\n    return this;\n  }\n\n  /**\n   * Sets the given audio buffer as the source of this instance.\n   *\n   * {@link Audio#sourceType} is set to `buffer` and {@link Audio#hasPlaybackControl} to `true`.\n   *\n   * @param {AudioBuffer} audioBuffer - The audio buffer.\n   * @return {Audio} A reference to this instance.\n   */\n  setBuffer(audioBuffer) {\n    this.buffer = audioBuffer;\n    this.sourceType = 'buffer';\n    if (this.autoplay) this.play();\n    return this;\n  }\n\n  /**\n   * Starts the playback of the audio.\n   *\n   * Can only be used with compatible audio sources that allow playback control.\n   *\n   * @param {number} [delay=0] - The delay, in seconds, at which the audio should start playing.\n   * @return {Audio|undefined} A reference to this instance.\n   */\n  play() {\n    let delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    if (this.isPlaying === true) {\n      console.warn('THREE.Audio: Audio is already playing.');\n      return;\n    }\n    if (this.hasPlaybackControl === false) {\n      console.warn('THREE.Audio: this Audio has no playback control.');\n      return;\n    }\n    this._startedAt = this.context.currentTime + delay;\n    const source = this.context.createBufferSource();\n    source.buffer = this.buffer;\n    source.loop = this.loop;\n    source.loopStart = this.loopStart;\n    source.loopEnd = this.loopEnd;\n    source.onended = this.onEnded.bind(this);\n    source.start(this._startedAt, this._progress + this.offset, this.duration);\n    this.isPlaying = true;\n    this.source = source;\n    this.setDetune(this.detune);\n    this.setPlaybackRate(this.playbackRate);\n    return this.connect();\n  }\n\n  /**\n   * Pauses the playback of the audio.\n   *\n   * Can only be used with compatible audio sources that allow playback control.\n   *\n   * @return {Audio|undefined} A reference to this instance.\n   */\n  pause() {\n    if (this.hasPlaybackControl === false) {\n      console.warn('THREE.Audio: this Audio has no playback control.');\n      return;\n    }\n    if (this.isPlaying === true) {\n      // update current progress\n\n      this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;\n      if (this.loop === true) {\n        // ensure _progress does not exceed duration with looped audios\n\n        this._progress = this._progress % (this.duration || this.buffer.duration);\n      }\n      this.source.stop();\n      this.source.onended = null;\n      this.isPlaying = false;\n    }\n    return this;\n  }\n\n  /**\n   * Stops the playback of the audio.\n   *\n   * Can only be used with compatible audio sources that allow playback control.\n   *\n   * @param {number} [delay=0] - The delay, in seconds, at which the audio should stop playing.\n   * @return {Audio|undefined} A reference to this instance.\n   */\n  stop() {\n    let delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    if (this.hasPlaybackControl === false) {\n      console.warn('THREE.Audio: this Audio has no playback control.');\n      return;\n    }\n    this._progress = 0;\n    if (this.source !== null) {\n      this.source.stop(this.context.currentTime + delay);\n      this.source.onended = null;\n    }\n    this.isPlaying = false;\n    return this;\n  }\n\n  /**\n   * Connects to the audio source. This is used internally on\n   * initialisation and when setting / removing filters.\n   *\n   * @return {Audio} A reference to this instance.\n   */\n  connect() {\n    if (this.filters.length > 0) {\n      this.source.connect(this.filters[0]);\n      for (let i = 1, l = this.filters.length; i < l; i++) {\n        this.filters[i - 1].connect(this.filters[i]);\n      }\n      this.filters[this.filters.length - 1].connect(this.getOutput());\n    } else {\n      this.source.connect(this.getOutput());\n    }\n    this._connected = true;\n    return this;\n  }\n\n  /**\n   * Disconnects to the audio source. This is used internally on\n   * initialisation and when setting / removing filters.\n   *\n   * @return {Audio|undefined} A reference to this instance.\n   */\n  disconnect() {\n    if (this._connected === false) {\n      return;\n    }\n    if (this.filters.length > 0) {\n      this.source.disconnect(this.filters[0]);\n      for (let i = 1, l = this.filters.length; i < l; i++) {\n        this.filters[i - 1].disconnect(this.filters[i]);\n      }\n      this.filters[this.filters.length - 1].disconnect(this.getOutput());\n    } else {\n      this.source.disconnect(this.getOutput());\n    }\n    this._connected = false;\n    return this;\n  }\n\n  /**\n   * Returns the current set filters.\n   *\n   * @return {Array<AudioNode>} The list of filters.\n   */\n  getFilters() {\n    return this.filters;\n  }\n\n  /**\n   * Sets an array of filters and connects them with the audio source.\n   *\n   * @param {Array<AudioNode>} [value] - A list of filters.\n   * @return {Audio} A reference to this instance.\n   */\n  setFilters(value) {\n    if (!value) value = [];\n    if (this._connected === true) {\n      this.disconnect();\n      this.filters = value.slice();\n      this.connect();\n    } else {\n      this.filters = value.slice();\n    }\n    return this;\n  }\n\n  /**\n   * Defines the detuning of oscillation in cents.\n   *\n   * @param {number} value - The detuning of oscillation in cents.\n   * @return {Audio} A reference to this instance.\n   */\n  setDetune(value) {\n    this.detune = value;\n    if (this.isPlaying === true && this.source.detune !== undefined) {\n      this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);\n    }\n    return this;\n  }\n\n  /**\n   * Returns the detuning of oscillation in cents.\n   *\n   * @return {number} The detuning of oscillation in cents.\n   */\n  getDetune() {\n    return this.detune;\n  }\n\n  /**\n   * Returns the first filter in the list of filters.\n   *\n   * @return {AudioNode|undefined} The first filter in the list of filters.\n   */\n  getFilter() {\n    return this.getFilters()[0];\n  }\n\n  /**\n   * Applies a single filter node to the audio.\n   *\n   * @param {AudioNode} [filter] - The filter to set.\n   * @return {Audio} A reference to this instance.\n   */\n  setFilter(filter) {\n    return this.setFilters(filter ? [filter] : []);\n  }\n\n  /**\n   * Sets the playback rate.\n   *\n   * Can only be used with compatible audio sources that allow playback control.\n   *\n   * @param {number} [value] - The playback rate to set.\n   * @return {Audio|undefined} A reference to this instance.\n   */\n  setPlaybackRate(value) {\n    if (this.hasPlaybackControl === false) {\n      console.warn('THREE.Audio: this Audio has no playback control.');\n      return;\n    }\n    this.playbackRate = value;\n    if (this.isPlaying === true) {\n      this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);\n    }\n    return this;\n  }\n\n  /**\n   * Returns the current playback rate.\n  \t * @return {number} The playback rate.\n   */\n  getPlaybackRate() {\n    return this.playbackRate;\n  }\n\n  /**\n   * Automatically called when playback finished.\n   */\n  onEnded() {\n    this.isPlaying = false;\n    this._progress = 0;\n  }\n\n  /**\n   * Returns the loop flag.\n   *\n   * Can only be used with compatible audio sources that allow playback control.\n   *\n   * @return {boolean} Whether the audio should loop or not.\n   */\n  getLoop() {\n    if (this.hasPlaybackControl === false) {\n      console.warn('THREE.Audio: this Audio has no playback control.');\n      return false;\n    }\n    return this.loop;\n  }\n\n  /**\n   * Sets the loop flag.\n   *\n   * Can only be used with compatible audio sources that allow playback control.\n   *\n   * @param {boolean} value - Whether the audio should loop or not.\n   * @return {Audio|undefined} A reference to this instance.\n   */\n  setLoop(value) {\n    if (this.hasPlaybackControl === false) {\n      console.warn('THREE.Audio: this Audio has no playback control.');\n      return;\n    }\n    this.loop = value;\n    if (this.isPlaying === true) {\n      this.source.loop = this.loop;\n    }\n    return this;\n  }\n\n  /**\n   * Sets the loop start value which defines where in the audio buffer the replay should\n   * start, in seconds.\n   *\n   * @param {number} value - The loop start value.\n   * @return {Audio} A reference to this instance.\n   */\n  setLoopStart(value) {\n    this.loopStart = value;\n    return this;\n  }\n\n  /**\n   * Sets the loop end value which defines where in the audio buffer the replay should\n   * stop, in seconds.\n   *\n   * @param {number} value - The loop end value.\n   * @return {Audio} A reference to this instance.\n   */\n  setLoopEnd(value) {\n    this.loopEnd = value;\n    return this;\n  }\n\n  /**\n   * Returns the volume.\n   *\n   * @return {number} The volume.\n   */\n  getVolume() {\n    return this.gain.gain.value;\n  }\n\n  /**\n   * Sets the volume.\n   *\n   * @param {number} value - The volume to set.\n   * @return {Audio} A reference to this instance.\n   */\n  setVolume(value) {\n    this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n    return this;\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    if (source.sourceType !== 'buffer') {\n      console.warn('THREE.Audio: Audio source type cannot be copied.');\n      return this;\n    }\n    this.autoplay = source.autoplay;\n    this.buffer = source.buffer;\n    this.detune = source.detune;\n    this.loop = source.loop;\n    this.loopStart = source.loopStart;\n    this.loopEnd = source.loopEnd;\n    this.offset = source.offset;\n    this.duration = source.duration;\n    this.playbackRate = source.playbackRate;\n    this.hasPlaybackControl = source.hasPlaybackControl;\n    this.sourceType = source.sourceType;\n    this.filters = source.filters.slice();\n    return this;\n  }\n  clone(recursive) {\n    return new this.constructor(this.listener).copy(this, recursive);\n  }\n}\nconst _position = /*@__PURE__*/new Vector3();\nconst _quaternion = /*@__PURE__*/new Quaternion();\nconst _scale = /*@__PURE__*/new Vector3();\nconst _orientation = /*@__PURE__*/new Vector3();\n\n/**\n * Represents a positional audio object.\n *\n * ```js\n * // create an AudioListener and add it to the camera\n * const listener = new THREE.AudioListener();\n * camera.add( listener );\n *\n * // create the PositionalAudio object (passing in the listener)\n * const sound = new THREE.PositionalAudio( listener );\n *\n * // load a sound and set it as the PositionalAudio object's buffer\n * const audioLoader = new THREE.AudioLoader();\n * audioLoader.load( 'sounds/song.ogg', function( buffer ) {\n * \tsound.setBuffer( buffer );\n * \tsound.setRefDistance( 20 );\n * \tsound.play();\n * });\n *\n * // create an object for the sound to play from\n * const sphere = new THREE.SphereGeometry( 20, 32, 16 );\n * const material = new THREE.MeshPhongMaterial( { color: 0xff2200 } );\n * const mesh = new THREE.Mesh( sphere, material );\n * scene.add( mesh );\n *\n * // finally add the sound to the mesh\n * mesh.add( sound );\n *\n * @augments Audio\n */\nclass PositionalAudio extends Audio {\n  /**\n   * Constructs a positional audio.\n   *\n   * @param {AudioListener} listener - The global audio listener.\n   */\n  constructor(listener) {\n    super(listener);\n\n    /**\n     * The panner node represents the location, direction, and behavior of an audio\n     * source in 3D space.\n     *\n     * @type {PannerNode}\n     * @readonly\n     */\n    this.panner = this.context.createPanner();\n    this.panner.panningModel = 'HRTF';\n    this.panner.connect(this.gain);\n  }\n  connect() {\n    super.connect();\n    this.panner.connect(this.gain);\n    return this;\n  }\n  disconnect() {\n    super.disconnect();\n    this.panner.disconnect(this.gain);\n    return this;\n  }\n  getOutput() {\n    return this.panner;\n  }\n\n  /**\n   * Returns the current reference distance.\n   *\n   * @return {number} The reference distance.\n   */\n  getRefDistance() {\n    return this.panner.refDistance;\n  }\n\n  /**\n   * Defines the reference distance for reducing volume as the audio source moves\n   * further from the listener – i.e. the distance at which the volume reduction\n   * starts taking effect.\n   *\n   * @param {number} value - The reference distance to set.\n   * @return {PositionalAudio} A reference to this instance.\n   */\n  setRefDistance(value) {\n    this.panner.refDistance = value;\n    return this;\n  }\n\n  /**\n   * Returns the current rolloff factor.\n   *\n   * @return {number} The rolloff factor.\n   */\n  getRolloffFactor() {\n    return this.panner.rolloffFactor;\n  }\n\n  /**\n   * Defines how quickly the volume is reduced as the source moves away from the listener.\n   *\n   * @param {number} value - The rolloff factor.\n   * @return {PositionalAudio} A reference to this instance.\n   */\n  setRolloffFactor(value) {\n    this.panner.rolloffFactor = value;\n    return this;\n  }\n\n  /**\n   * Returns the current distance model.\n   *\n   * @return {('linear'|'inverse'|'exponential')} The distance model.\n   */\n  getDistanceModel() {\n    return this.panner.distanceModel;\n  }\n\n  /**\n   * Defines which algorithm to use to reduce the volume of the audio source\n   * as it moves away from the listener.\n   *\n   * Read [the spec]{@link https://www.w3.org/TR/webaudio-1.1/#enumdef-distancemodeltype}\n   * for more details.\n   *\n   * @param {('linear'|'inverse'|'exponential')} value - The distance model to set.\n   * @return {PositionalAudio} A reference to this instance.\n   */\n  setDistanceModel(value) {\n    this.panner.distanceModel = value;\n    return this;\n  }\n\n  /**\n   * Returns the current max distance.\n   *\n   * @return {number} The max distance.\n   */\n  getMaxDistance() {\n    return this.panner.maxDistance;\n  }\n\n  /**\n   * Defines the maximum distance between the audio source and the listener,\n   * after which the volume is not reduced any further.\n   *\n   * This value is used only by the `linear` distance model.\n   *\n   * @param {number} value - The max distance.\n   * @return {PositionalAudio} A reference to this instance.\n   */\n  setMaxDistance(value) {\n    this.panner.maxDistance = value;\n    return this;\n  }\n\n  /**\n   * Sets the directional cone in which the audio can be listened.\n   *\n   * @param {number} coneInnerAngle - An angle, in degrees, of a cone inside of which there will be no volume reduction.\n   * @param {number} coneOuterAngle - An angle, in degrees, of a cone outside of which the volume will be reduced by a constant value, defined by the `coneOuterGain` parameter.\n   * @param {number} coneOuterGain - The amount of volume reduction outside the cone defined by the `coneOuterAngle`. When set to `0`, no sound can be heard.\n   * @return {PositionalAudio} A reference to this instance.\n   */\n  setDirectionalCone(coneInnerAngle, coneOuterAngle, coneOuterGain) {\n    this.panner.coneInnerAngle = coneInnerAngle;\n    this.panner.coneOuterAngle = coneOuterAngle;\n    this.panner.coneOuterGain = coneOuterGain;\n    return this;\n  }\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (this.hasPlaybackControl === true && this.isPlaying === false) return;\n    this.matrixWorld.decompose(_position, _quaternion, _scale);\n    _orientation.set(0, 0, 1).applyQuaternion(_quaternion);\n    const panner = this.panner;\n    if (panner.positionX) {\n      // code path for Chrome and Firefox (see #14393)\n\n      const endTime = this.context.currentTime + this.listener.timeDelta;\n      panner.positionX.linearRampToValueAtTime(_position.x, endTime);\n      panner.positionY.linearRampToValueAtTime(_position.y, endTime);\n      panner.positionZ.linearRampToValueAtTime(_position.z, endTime);\n      panner.orientationX.linearRampToValueAtTime(_orientation.x, endTime);\n      panner.orientationY.linearRampToValueAtTime(_orientation.y, endTime);\n      panner.orientationZ.linearRampToValueAtTime(_orientation.z, endTime);\n    } else {\n      panner.setPosition(_position.x, _position.y, _position.z);\n      panner.setOrientation(_orientation.x, _orientation.y, _orientation.z);\n    }\n  }\n}\n\n/**\n * This class can be used to analyse audio data.\n *\n * ```js\n * // create an AudioListener and add it to the camera\n * const listener = new THREE.AudioListener();\n * camera.add( listener );\n *\n * // create an Audio source\n * const sound = new THREE.Audio( listener );\n *\n * // load a sound and set it as the Audio object's buffer\n * const audioLoader = new THREE.AudioLoader();\n * audioLoader.load( 'sounds/ambient.ogg', function( buffer ) {\n * \tsound.setBuffer( buffer );\n * \tsound.setLoop(true);\n * \tsound.setVolume(0.5);\n * \tsound.play();\n * });\n *\n * // create an AudioAnalyser, passing in the sound and desired fftSize\n * const analyser = new THREE.AudioAnalyser( sound, 32 );\n *\n * // get the average frequency of the sound\n * const data = analyser.getAverageFrequency();\n * ```\n */\nclass AudioAnalyser {\n  /**\n   * Constructs a new audio analyzer.\n   *\n   * @param {Audio} audio - The audio to analyze.\n   * @param {number} [fftSize=2048] - The window size in samples that is used when performing a Fast Fourier Transform (FFT) to get frequency domain data.\n   */\n  constructor(audio) {\n    let fftSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2048;\n    /**\n     * The global audio listener.\n     *\n     * @type {AnalyserNode}\n     */\n    this.analyser = audio.context.createAnalyser();\n    this.analyser.fftSize = fftSize;\n\n    /**\n     * Holds the analyzed data.\n     *\n     * @type {Uint8Array}\n     */\n    this.data = new Uint8Array(this.analyser.frequencyBinCount);\n    audio.getOutput().connect(this.analyser);\n  }\n\n  /**\n   * Returns an array with frequency data of the audio.\n   *\n   * Each item in the array represents the decibel value for a specific frequency.\n   * The frequencies are spread linearly from 0 to 1/2 of the sample rate.\n   * For example, for 48000 sample rate, the last item of the array will represent\n   * the decibel value for 24000 Hz.\n   *\n   * @return {Uint8Array} The frequency data.\n   */\n  getFrequencyData() {\n    this.analyser.getByteFrequencyData(this.data);\n    return this.data;\n  }\n\n  /**\n   * Returns the average of the frequencies returned by {@link AudioAnalyser#getFrequencyData}.\n   *\n   * @return {number} The average frequency.\n   */\n  getAverageFrequency() {\n    let value = 0;\n    const data = this.getFrequencyData();\n    for (let i = 0; i < data.length; i++) {\n      value += data[i];\n    }\n    return value / data.length;\n  }\n}\n\n/**\n * Buffered scene graph property that allows weighted accumulation; used internally.\n */\nclass PropertyMixer {\n  /**\n   * Constructs a new property mixer.\n   *\n   * @param {PropertyBinding} binding - The property binding.\n   * @param {string} typeName - The keyframe track type name.\n   * @param {number} valueSize - The keyframe track value size.\n   */\n  constructor(binding, typeName, valueSize) {\n    /**\n     * The property binding.\n     *\n     * @type {PropertyBinding}\n     */\n    this.binding = binding;\n\n    /**\n     * The keyframe track value size.\n     *\n     * @type {number}\n     */\n    this.valueSize = valueSize;\n    let mixFunction, mixFunctionAdditive, setIdentity;\n\n    // buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]\n    //\n    // interpolators can use .buffer as their .result\n    // the data then goes to 'incoming'\n    //\n    // 'accu0' and 'accu1' are used frame-interleaved for\n    // the cumulative result and are compared to detect\n    // changes\n    //\n    // 'orig' stores the original state of the property\n    //\n    // 'add' is used for additive cumulative results\n    //\n    // 'work' is optional and is only present for quaternion types. It is used\n    // to store intermediate quaternion multiplication results\n\n    switch (typeName) {\n      case 'quaternion':\n        mixFunction = this._slerp;\n        mixFunctionAdditive = this._slerpAdditive;\n        setIdentity = this._setAdditiveIdentityQuaternion;\n        this.buffer = new Float64Array(valueSize * 6);\n        this._workIndex = 5;\n        break;\n      case 'string':\n      case 'bool':\n        mixFunction = this._select;\n\n        // Use the regular mix function and for additive on these types,\n        // additive is not relevant for non-numeric types\n        mixFunctionAdditive = this._select;\n        setIdentity = this._setAdditiveIdentityOther;\n        this.buffer = new Array(valueSize * 5);\n        break;\n      default:\n        mixFunction = this._lerp;\n        mixFunctionAdditive = this._lerpAdditive;\n        setIdentity = this._setAdditiveIdentityNumeric;\n        this.buffer = new Float64Array(valueSize * 5);\n    }\n    this._mixBufferRegion = mixFunction;\n    this._mixBufferRegionAdditive = mixFunctionAdditive;\n    this._setIdentity = setIdentity;\n    this._origIndex = 3;\n    this._addIndex = 4;\n\n    /**\n     * TODO\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.cumulativeWeight = 0;\n\n    /**\n     * TODO\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.cumulativeWeightAdditive = 0;\n\n    /**\n     * TODO\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.useCount = 0;\n\n    /**\n     * TODO\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.referenceCount = 0;\n  }\n\n  /**\n   * Accumulates data in the `incoming` region into `accu<i>`.\n   *\n   * @param {number} accuIndex - The accumulation index.\n   * @param {number} weight - The weight.\n   */\n  accumulate(accuIndex, weight) {\n    // note: happily accumulating nothing when weight = 0, the caller knows\n    // the weight and shouldn't have made the call in the first place\n\n    const buffer = this.buffer,\n      stride = this.valueSize,\n      offset = accuIndex * stride + stride;\n    let currentWeight = this.cumulativeWeight;\n    if (currentWeight === 0) {\n      // accuN := incoming * weight\n\n      for (let i = 0; i !== stride; ++i) {\n        buffer[offset + i] = buffer[i];\n      }\n      currentWeight = weight;\n    } else {\n      // accuN := accuN + incoming * weight\n\n      currentWeight += weight;\n      const mix = weight / currentWeight;\n      this._mixBufferRegion(buffer, offset, 0, mix, stride);\n    }\n    this.cumulativeWeight = currentWeight;\n  }\n\n  /**\n   * Accumulates data in the `incoming` region into `add`.\n   *\n   * @param {number} weight - The weight.\n   */\n  accumulateAdditive(weight) {\n    const buffer = this.buffer,\n      stride = this.valueSize,\n      offset = stride * this._addIndex;\n    if (this.cumulativeWeightAdditive === 0) {\n      // add = identity\n\n      this._setIdentity();\n    }\n\n    // add := add + incoming * weight\n\n    this._mixBufferRegionAdditive(buffer, offset, 0, weight, stride);\n    this.cumulativeWeightAdditive += weight;\n  }\n\n  /**\n   * Applies the state of `accu<i>` to the binding when accus differ.\n   *\n   * @param {number} accuIndex - The accumulation index.\n   */\n  apply(accuIndex) {\n    const stride = this.valueSize,\n      buffer = this.buffer,\n      offset = accuIndex * stride + stride,\n      weight = this.cumulativeWeight,\n      weightAdditive = this.cumulativeWeightAdditive,\n      binding = this.binding;\n    this.cumulativeWeight = 0;\n    this.cumulativeWeightAdditive = 0;\n    if (weight < 1) {\n      // accuN := accuN + original * ( 1 - cumulativeWeight )\n\n      const originalValueOffset = stride * this._origIndex;\n      this._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);\n    }\n    if (weightAdditive > 0) {\n      // accuN := accuN + additive accuN\n\n      this._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);\n    }\n    for (let i = stride, e = stride + stride; i !== e; ++i) {\n      if (buffer[i] !== buffer[i + stride]) {\n        // value has changed -> update scene graph\n\n        binding.setValue(buffer, offset);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Remembers the state of the bound property and copy it to both accus.\n   */\n  saveOriginalState() {\n    const binding = this.binding;\n    const buffer = this.buffer,\n      stride = this.valueSize,\n      originalValueOffset = stride * this._origIndex;\n    binding.getValue(buffer, originalValueOffset);\n\n    // accu[0..1] := orig -- initially detect changes against the original\n    for (let i = stride, e = originalValueOffset; i !== e; ++i) {\n      buffer[i] = buffer[originalValueOffset + i % stride];\n    }\n\n    // Add to identity for additive\n    this._setIdentity();\n    this.cumulativeWeight = 0;\n    this.cumulativeWeightAdditive = 0;\n  }\n\n  /**\n   * Applies the state previously taken via {@link PropertyMixer#saveOriginalState} to the binding.\n   */\n  restoreOriginalState() {\n    const originalValueOffset = this.valueSize * 3;\n    this.binding.setValue(this.buffer, originalValueOffset);\n  }\n\n  // internals\n\n  _setAdditiveIdentityNumeric() {\n    const startIndex = this._addIndex * this.valueSize;\n    const endIndex = startIndex + this.valueSize;\n    for (let i = startIndex; i < endIndex; i++) {\n      this.buffer[i] = 0;\n    }\n  }\n  _setAdditiveIdentityQuaternion() {\n    this._setAdditiveIdentityNumeric();\n    this.buffer[this._addIndex * this.valueSize + 3] = 1;\n  }\n  _setAdditiveIdentityOther() {\n    const startIndex = this._origIndex * this.valueSize;\n    const targetIndex = this._addIndex * this.valueSize;\n    for (let i = 0; i < this.valueSize; i++) {\n      this.buffer[targetIndex + i] = this.buffer[startIndex + i];\n    }\n  }\n\n  // mix functions\n\n  _select(buffer, dstOffset, srcOffset, t, stride) {\n    if (t >= 0.5) {\n      for (let i = 0; i !== stride; ++i) {\n        buffer[dstOffset + i] = buffer[srcOffset + i];\n      }\n    }\n  }\n  _slerp(buffer, dstOffset, srcOffset, t) {\n    Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);\n  }\n  _slerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\n    const workOffset = this._workIndex * stride;\n\n    // Store result in intermediate buffer offset\n    Quaternion.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset);\n\n    // Slerp to the intermediate result\n    Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t);\n  }\n  _lerp(buffer, dstOffset, srcOffset, t, stride) {\n    const s = 1 - t;\n    for (let i = 0; i !== stride; ++i) {\n      const j = dstOffset + i;\n      buffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;\n    }\n  }\n  _lerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\n    for (let i = 0; i !== stride; ++i) {\n      const j = dstOffset + i;\n      buffer[j] = buffer[j] + buffer[srcOffset + i] * t;\n    }\n  }\n}\n\n// Characters [].:/ are reserved for track binding syntax.\nconst _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\nconst _reservedRe = new RegExp('[' + _RESERVED_CHARS_RE + ']', 'g');\n\n// Attempts to allow node names from any language. ES5's `\\w` regexp matches\n// only latin characters, and the unicode \\p{L} is not yet supported. So\n// instead, we exclude reserved characters and match everything else.\nconst _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\nconst _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace('\\\\.', '') + ']';\n\n// Parent directories, delimited by '/' or ':'. Currently unused, but must\n// be matched to parse the rest of the track name.\nconst _directoryRe = /*@__PURE__*//((?:WC+[\\/:])*)/.source.replace('WC', _wordChar);\n\n// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\nconst _nodeRe = /*@__PURE__*//(WCOD+)?/.source.replace('WCOD', _wordCharOrDot);\n\n// Object on target node, and accessor. May not contain reserved\n// characters. Accessor may contain any character except closing bracket.\nconst _objectRe = /*@__PURE__*//(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace('WC', _wordChar);\n\n// Property and accessor. May not contain reserved characters. Accessor may\n// contain any non-bracket characters.\nconst _propertyRe = /*@__PURE__*//\\.(WC+)(?:\\[(.+)\\])?/.source.replace('WC', _wordChar);\nconst _trackRe = new RegExp('' + '^' + _directoryRe + _nodeRe + _objectRe + _propertyRe + '$');\nconst _supportedObjectNames = ['material', 'materials', 'bones', 'map'];\nclass Composite {\n  constructor(targetGroup, path, optionalParsedPath) {\n    const parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);\n    this._targetGroup = targetGroup;\n    this._bindings = targetGroup.subscribe_(path, parsedPath);\n  }\n  getValue(array, offset) {\n    this.bind(); // bind all binding\n\n    const firstValidIndex = this._targetGroup.nCachedObjects_,\n      binding = this._bindings[firstValidIndex];\n\n    // and only call .getValue on the first\n    if (binding !== undefined) binding.getValue(array, offset);\n  }\n  setValue(array, offset) {\n    const bindings = this._bindings;\n    for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n      bindings[i].setValue(array, offset);\n    }\n  }\n  bind() {\n    const bindings = this._bindings;\n    for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n      bindings[i].bind();\n    }\n  }\n  unbind() {\n    const bindings = this._bindings;\n    for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n      bindings[i].unbind();\n    }\n  }\n}\n\n// Note: This class uses a State pattern on a per-method basis:\n// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n// prototype version of these methods with one that represents\n// the bound state. When the property is not found, the methods\n// become no-ops.\n\n/**\n * This holds a reference to a real property in the scene graph; used internally.\n */\nclass PropertyBinding {\n  /**\n   * Constructs a new property binding.\n   *\n   * @param {Object} rootNode - The root node.\n   * @param {string} path - The path.\n   * @param {?Object} [parsedPath] - The parsed path.\n   */\n  constructor(rootNode, path, parsedPath) {\n    /**\n     * The object path to the animated property.\n     *\n     * @type {string}\n     */\n    this.path = path;\n\n    /**\n     * An object holding information about the path.\n     *\n     * @type {Object}\n     */\n    this.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);\n\n    /**\n     * The object owns the animated property.\n     *\n     * @type {?Object}\n     */\n    this.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName);\n\n    /**\n     * The root node.\n     *\n     * @type {Object3D|Skeleton}\n     */\n    this.rootNode = rootNode;\n\n    // initial state of these methods that calls 'bind'\n    this.getValue = this._getValue_unbound;\n    this.setValue = this._setValue_unbound;\n  }\n\n  /**\n   * Factory method for creating a property binding from the given parameters.\n   *\n   * @static\n   * @param {Object} root - The root node.\n   * @param {string} path - The path.\n   * @param {?Object} [parsedPath] - The parsed path.\n   * @return {PropertyBinding|Composite} The created property binding or composite.\n   */\n  static create(root, path, parsedPath) {\n    if (!(root && root.isAnimationObjectGroup)) {\n      return new PropertyBinding(root, path, parsedPath);\n    } else {\n      return new PropertyBinding.Composite(root, path, parsedPath);\n    }\n  }\n\n  /**\n   * Replaces spaces with underscores and removes unsupported characters from\n   * node names, to ensure compatibility with parseTrackName().\n   *\n   * @param {string} name - Node name to be sanitized.\n   * @return {string} The sanitized node name.\n   */\n  static sanitizeNodeName(name) {\n    return name.replace(/\\s/g, '_').replace(_reservedRe, '');\n  }\n\n  /**\n   * Parses the given track name (an object path to an animated property) and\n   * returns an object with information about the path. Matches strings in the following forms:\n   *\n   * - nodeName.property\n   * - nodeName.property[accessor]\n   * - nodeName.material.property[accessor]\n   * - uuid.property[accessor]\n   * - uuid.objectName[objectIndex].propertyName[propertyIndex]\n   * - parentName/nodeName.property\n   * - parentName/parentName/nodeName.property[index]\n   * - .bone[Armature.DEF_cog].position\n   * - scene:helium_balloon_model:helium_balloon_model.position\n   *\n   * @static\n   * @param {string} trackName - The track name to parse.\n   * @return {Object} The parsed track name as an object.\n   */\n  static parseTrackName(trackName) {\n    const matches = _trackRe.exec(trackName);\n    if (matches === null) {\n      throw new Error('PropertyBinding: Cannot parse trackName: ' + trackName);\n    }\n    const results = {\n      // directoryName: matches[ 1 ], // (tschw) currently unused\n      nodeName: matches[2],\n      objectName: matches[3],\n      objectIndex: matches[4],\n      propertyName: matches[5],\n      // required\n      propertyIndex: matches[6]\n    };\n    const lastDot = results.nodeName && results.nodeName.lastIndexOf('.');\n    if (lastDot !== undefined && lastDot !== -1) {\n      const objectName = results.nodeName.substring(lastDot + 1);\n\n      // Object names must be checked against an allowlist. Otherwise, there\n      // is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n      // 'bar' could be the objectName, or part of a nodeName (which can\n      // include '.' characters).\n      if (_supportedObjectNames.indexOf(objectName) !== -1) {\n        results.nodeName = results.nodeName.substring(0, lastDot);\n        results.objectName = objectName;\n      }\n    }\n    if (results.propertyName === null || results.propertyName.length === 0) {\n      throw new Error('PropertyBinding: can not parse propertyName from trackName: ' + trackName);\n    }\n    return results;\n  }\n\n  /**\n   * Searches for a node in the hierarchy of the given root object by the given\n   * node name.\n   *\n   * @static\n   * @param {Object} root - The root object.\n   * @param {string|number} nodeName - The name of the node.\n   * @return {?Object} The found node. Returns `null` if no object was found.\n   */\n  static findNode(root, nodeName) {\n    if (nodeName === undefined || nodeName === '' || nodeName === '.' || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {\n      return root;\n    }\n\n    // search into skeleton bones.\n    if (root.skeleton) {\n      const bone = root.skeleton.getBoneByName(nodeName);\n      if (bone !== undefined) {\n        return bone;\n      }\n    }\n\n    // search into node subtree.\n    if (root.children) {\n      const searchNodeSubtree = function (children) {\n        for (let i = 0; i < children.length; i++) {\n          const childNode = children[i];\n          if (childNode.name === nodeName || childNode.uuid === nodeName) {\n            return childNode;\n          }\n          const result = searchNodeSubtree(childNode.children);\n          if (result) return result;\n        }\n        return null;\n      };\n      const subTreeNode = searchNodeSubtree(root.children);\n      if (subTreeNode) {\n        return subTreeNode;\n      }\n    }\n    return null;\n  }\n\n  // these are used to \"bind\" a nonexistent property\n  _getValue_unavailable() {}\n  _setValue_unavailable() {}\n\n  // Getters\n\n  _getValue_direct(buffer, offset) {\n    buffer[offset] = this.targetObject[this.propertyName];\n  }\n  _getValue_array(buffer, offset) {\n    const source = this.resolvedProperty;\n    for (let i = 0, n = source.length; i !== n; ++i) {\n      buffer[offset++] = source[i];\n    }\n  }\n  _getValue_arrayElement(buffer, offset) {\n    buffer[offset] = this.resolvedProperty[this.propertyIndex];\n  }\n  _getValue_toArray(buffer, offset) {\n    this.resolvedProperty.toArray(buffer, offset);\n  }\n\n  // Direct\n\n  _setValue_direct(buffer, offset) {\n    this.targetObject[this.propertyName] = buffer[offset];\n  }\n  _setValue_direct_setNeedsUpdate(buffer, offset) {\n    this.targetObject[this.propertyName] = buffer[offset];\n    this.targetObject.needsUpdate = true;\n  }\n  _setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {\n    this.targetObject[this.propertyName] = buffer[offset];\n    this.targetObject.matrixWorldNeedsUpdate = true;\n  }\n\n  // EntireArray\n\n  _setValue_array(buffer, offset) {\n    const dest = this.resolvedProperty;\n    for (let i = 0, n = dest.length; i !== n; ++i) {\n      dest[i] = buffer[offset++];\n    }\n  }\n  _setValue_array_setNeedsUpdate(buffer, offset) {\n    const dest = this.resolvedProperty;\n    for (let i = 0, n = dest.length; i !== n; ++i) {\n      dest[i] = buffer[offset++];\n    }\n    this.targetObject.needsUpdate = true;\n  }\n  _setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {\n    const dest = this.resolvedProperty;\n    for (let i = 0, n = dest.length; i !== n; ++i) {\n      dest[i] = buffer[offset++];\n    }\n    this.targetObject.matrixWorldNeedsUpdate = true;\n  }\n\n  // ArrayElement\n\n  _setValue_arrayElement(buffer, offset) {\n    this.resolvedProperty[this.propertyIndex] = buffer[offset];\n  }\n  _setValue_arrayElement_setNeedsUpdate(buffer, offset) {\n    this.resolvedProperty[this.propertyIndex] = buffer[offset];\n    this.targetObject.needsUpdate = true;\n  }\n  _setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {\n    this.resolvedProperty[this.propertyIndex] = buffer[offset];\n    this.targetObject.matrixWorldNeedsUpdate = true;\n  }\n\n  // HasToFromArray\n\n  _setValue_fromArray(buffer, offset) {\n    this.resolvedProperty.fromArray(buffer, offset);\n  }\n  _setValue_fromArray_setNeedsUpdate(buffer, offset) {\n    this.resolvedProperty.fromArray(buffer, offset);\n    this.targetObject.needsUpdate = true;\n  }\n  _setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {\n    this.resolvedProperty.fromArray(buffer, offset);\n    this.targetObject.matrixWorldNeedsUpdate = true;\n  }\n  _getValue_unbound(targetArray, offset) {\n    this.bind();\n    this.getValue(targetArray, offset);\n  }\n  _setValue_unbound(sourceArray, offset) {\n    this.bind();\n    this.setValue(sourceArray, offset);\n  }\n\n  /**\n   * Creates a getter / setter pair for the property tracked by this binding.\n   */\n  bind() {\n    let targetObject = this.node;\n    const parsedPath = this.parsedPath;\n    const objectName = parsedPath.objectName;\n    const propertyName = parsedPath.propertyName;\n    let propertyIndex = parsedPath.propertyIndex;\n    if (!targetObject) {\n      targetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName);\n      this.node = targetObject;\n    }\n\n    // set fail state so we can just 'return' on error\n    this.getValue = this._getValue_unavailable;\n    this.setValue = this._setValue_unavailable;\n\n    // ensure there is a value node\n    if (!targetObject) {\n      console.warn('THREE.PropertyBinding: No target node found for track: ' + this.path + '.');\n      return;\n    }\n    if (objectName) {\n      let objectIndex = parsedPath.objectIndex;\n\n      // special cases were we need to reach deeper into the hierarchy to get the face materials....\n      switch (objectName) {\n        case 'materials':\n          if (!targetObject.material) {\n            console.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.', this);\n            return;\n          }\n          if (!targetObject.material.materials) {\n            console.error('THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this);\n            return;\n          }\n          targetObject = targetObject.material.materials;\n          break;\n        case 'bones':\n          if (!targetObject.skeleton) {\n            console.error('THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this);\n            return;\n          }\n\n          // potential future optimization: skip this if propertyIndex is already an integer\n          // and convert the integer string to a true integer.\n\n          targetObject = targetObject.skeleton.bones;\n\n          // support resolving morphTarget names into indices.\n          for (let i = 0; i < targetObject.length; i++) {\n            if (targetObject[i].name === objectIndex) {\n              objectIndex = i;\n              break;\n            }\n          }\n          break;\n        case 'map':\n          if ('map' in targetObject) {\n            targetObject = targetObject.map;\n            break;\n          }\n          if (!targetObject.material) {\n            console.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.', this);\n            return;\n          }\n          if (!targetObject.material.map) {\n            console.error('THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.', this);\n            return;\n          }\n          targetObject = targetObject.material.map;\n          break;\n        default:\n          if (targetObject[objectName] === undefined) {\n            console.error('THREE.PropertyBinding: Can not bind to objectName of node undefined.', this);\n            return;\n          }\n          targetObject = targetObject[objectName];\n      }\n      if (objectIndex !== undefined) {\n        if (targetObject[objectIndex] === undefined) {\n          console.error('THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject);\n          return;\n        }\n        targetObject = targetObject[objectIndex];\n      }\n    }\n\n    // resolve property\n    const nodeProperty = targetObject[propertyName];\n    if (nodeProperty === undefined) {\n      const nodeName = parsedPath.nodeName;\n      console.error('THREE.PropertyBinding: Trying to update property for track: ' + nodeName + '.' + propertyName + ' but it wasn\\'t found.', targetObject);\n      return;\n    }\n\n    // determine versioning scheme\n    let versioning = this.Versioning.None;\n    this.targetObject = targetObject;\n    if (targetObject.isMaterial === true) {\n      versioning = this.Versioning.NeedsUpdate;\n    } else if (targetObject.isObject3D === true) {\n      versioning = this.Versioning.MatrixWorldNeedsUpdate;\n    }\n\n    // determine how the property gets bound\n    let bindingType = this.BindingType.Direct;\n    if (propertyIndex !== undefined) {\n      // access a sub element of the property array (only primitives are supported right now)\n\n      if (propertyName === 'morphTargetInfluences') {\n        // potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n        // support resolving morphTarget names into indices.\n        if (!targetObject.geometry) {\n          console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this);\n          return;\n        }\n        if (!targetObject.geometry.morphAttributes) {\n          console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this);\n          return;\n        }\n        if (targetObject.morphTargetDictionary[propertyIndex] !== undefined) {\n          propertyIndex = targetObject.morphTargetDictionary[propertyIndex];\n        }\n      }\n      bindingType = this.BindingType.ArrayElement;\n      this.resolvedProperty = nodeProperty;\n      this.propertyIndex = propertyIndex;\n    } else if (nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined) {\n      // must use copy for Object3D.Euler/Quaternion\n\n      bindingType = this.BindingType.HasFromToArray;\n      this.resolvedProperty = nodeProperty;\n    } else if (Array.isArray(nodeProperty)) {\n      bindingType = this.BindingType.EntireArray;\n      this.resolvedProperty = nodeProperty;\n    } else {\n      this.propertyName = propertyName;\n    }\n\n    // select getter / setter\n    this.getValue = this.GetterByBindingType[bindingType];\n    this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];\n  }\n\n  /**\n   * Unbinds the property.\n   */\n  unbind() {\n    this.node = null;\n\n    // back to the prototype version of getValue / setValue\n    // note: avoiding to mutate the shape of 'this' via 'delete'\n    this.getValue = this._getValue_unbound;\n    this.setValue = this._setValue_unbound;\n  }\n}\nPropertyBinding.Composite = Composite;\nPropertyBinding.prototype.BindingType = {\n  Direct: 0,\n  EntireArray: 1,\n  ArrayElement: 2,\n  HasFromToArray: 3\n};\nPropertyBinding.prototype.Versioning = {\n  None: 0,\n  NeedsUpdate: 1,\n  MatrixWorldNeedsUpdate: 2\n};\nPropertyBinding.prototype.GetterByBindingType = [PropertyBinding.prototype._getValue_direct, PropertyBinding.prototype._getValue_array, PropertyBinding.prototype._getValue_arrayElement, PropertyBinding.prototype._getValue_toArray];\nPropertyBinding.prototype.SetterByBindingTypeAndVersioning = [[\n// Direct\nPropertyBinding.prototype._setValue_direct, PropertyBinding.prototype._setValue_direct_setNeedsUpdate, PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate], [\n// EntireArray\n\nPropertyBinding.prototype._setValue_array, PropertyBinding.prototype._setValue_array_setNeedsUpdate, PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate], [\n// ArrayElement\nPropertyBinding.prototype._setValue_arrayElement, PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate, PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate], [\n// HasToFromArray\nPropertyBinding.prototype._setValue_fromArray, PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate, PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];\n\n/**\n * A group of objects that receives a shared animation state.\n *\n * Usage:\n *\n * - Add objects you would otherwise pass as 'root' to the\n * constructor or the .clipAction method of AnimationMixer.\n * - Instead pass this object as 'root'.\n * - You can also add and remove objects later when the mixer is running.\n *\n * Note:\n *\n * - Objects of this class appear as one object to the mixer,\n * so cache control of the individual objects must be done on the group.\n *\n * Limitation:\n *\n * - The animated properties must be compatible among the all objects in the group.\n * - A single property can either be controlled through a target group or directly, but not both.\n */\nclass AnimationObjectGroup {\n  /**\n   * Constructs a new animation group.\n   *\n   * @param {...Object3D} arguments - An arbitrary number of 3D objects that share the same animation state.\n   */\n  constructor() {\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isAnimationObjectGroup = true;\n\n    /**\n     * The UUID of the 3D object.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.uuid = generateUUID();\n\n    // cached objects followed by the active ones\n    this._objects = Array.prototype.slice.call(arguments);\n    this.nCachedObjects_ = 0; // threshold\n    // note: read by PropertyBinding.Composite\n\n    const indices = {};\n    this._indicesByUUID = indices; // for bookkeeping\n\n    for (let i = 0, n = arguments.length; i !== n; ++i) {\n      indices[arguments[i].uuid] = i;\n    }\n    this._paths = []; // inside: string\n    this._parsedPaths = []; // inside: { we don't care, here }\n    this._bindings = []; // inside: Array< PropertyBinding >\n    this._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n    const scope = this;\n    this.stats = {\n      objects: {\n        get total() {\n          return scope._objects.length;\n        },\n        get inUse() {\n          return this.total - scope.nCachedObjects_;\n        }\n      },\n      get bindingsPerObject() {\n        return scope._bindings.length;\n      }\n    };\n  }\n\n  /**\n   * Adds an arbitrary number of objects to this animation group.\n   *\n   * @param {...Object3D} arguments - The 3D objects to add.\n   */\n  add() {\n    const objects = this._objects,\n      indicesByUUID = this._indicesByUUID,\n      paths = this._paths,\n      parsedPaths = this._parsedPaths,\n      bindings = this._bindings,\n      nBindings = bindings.length;\n    let knownObject = undefined,\n      nObjects = objects.length,\n      nCachedObjects = this.nCachedObjects_;\n    for (let i = 0, n = arguments.length; i !== n; ++i) {\n      const object = arguments[i],\n        uuid = object.uuid;\n      let index = indicesByUUID[uuid];\n      if (index === undefined) {\n        // unknown object -> add it to the ACTIVE region\n\n        index = nObjects++;\n        indicesByUUID[uuid] = index;\n        objects.push(object);\n\n        // accounting is done, now do the same for all bindings\n\n        for (let j = 0, m = nBindings; j !== m; ++j) {\n          bindings[j].push(new PropertyBinding(object, paths[j], parsedPaths[j]));\n        }\n      } else if (index < nCachedObjects) {\n        knownObject = objects[index];\n\n        // move existing object to the ACTIVE region\n\n        const firstActiveIndex = --nCachedObjects,\n          lastCachedObject = objects[firstActiveIndex];\n        indicesByUUID[lastCachedObject.uuid] = index;\n        objects[index] = lastCachedObject;\n        indicesByUUID[uuid] = firstActiveIndex;\n        objects[firstActiveIndex] = object;\n\n        // accounting is done, now do the same for all bindings\n\n        for (let j = 0, m = nBindings; j !== m; ++j) {\n          const bindingsForPath = bindings[j],\n            lastCached = bindingsForPath[firstActiveIndex];\n          let binding = bindingsForPath[index];\n          bindingsForPath[index] = lastCached;\n          if (binding === undefined) {\n            // since we do not bother to create new bindings\n            // for objects that are cached, the binding may\n            // or may not exist\n\n            binding = new PropertyBinding(object, paths[j], parsedPaths[j]);\n          }\n          bindingsForPath[firstActiveIndex] = binding;\n        }\n      } else if (objects[index] !== knownObject) {\n        console.error('THREE.AnimationObjectGroup: Different objects with the same UUID ' + 'detected. Clean the caches or recreate your infrastructure when reloading scenes.');\n      } // else the object is already where we want it to be\n    } // for arguments\n\n    this.nCachedObjects_ = nCachedObjects;\n  }\n\n  /**\n   * Removes an arbitrary number of objects to this animation group\n   *\n   * @param {...Object3D} arguments - The 3D objects to remove.\n   */\n  remove() {\n    const objects = this._objects,\n      indicesByUUID = this._indicesByUUID,\n      bindings = this._bindings,\n      nBindings = bindings.length;\n    let nCachedObjects = this.nCachedObjects_;\n    for (let i = 0, n = arguments.length; i !== n; ++i) {\n      const object = arguments[i],\n        uuid = object.uuid,\n        index = indicesByUUID[uuid];\n      if (index !== undefined && index >= nCachedObjects) {\n        // move existing object into the CACHED region\n\n        const lastCachedIndex = nCachedObjects++,\n          firstActiveObject = objects[lastCachedIndex];\n        indicesByUUID[firstActiveObject.uuid] = index;\n        objects[index] = firstActiveObject;\n        indicesByUUID[uuid] = lastCachedIndex;\n        objects[lastCachedIndex] = object;\n\n        // accounting is done, now do the same for all bindings\n\n        for (let j = 0, m = nBindings; j !== m; ++j) {\n          const bindingsForPath = bindings[j],\n            firstActive = bindingsForPath[lastCachedIndex],\n            binding = bindingsForPath[index];\n          bindingsForPath[index] = firstActive;\n          bindingsForPath[lastCachedIndex] = binding;\n        }\n      }\n    } // for arguments\n\n    this.nCachedObjects_ = nCachedObjects;\n  }\n\n  /**\n   * Deallocates all memory resources for the passed 3D objects of this animation group.\n   *\n   * @param {...Object3D} arguments - The 3D objects to uncache.\n   */\n  uncache() {\n    const objects = this._objects,\n      indicesByUUID = this._indicesByUUID,\n      bindings = this._bindings,\n      nBindings = bindings.length;\n    let nCachedObjects = this.nCachedObjects_,\n      nObjects = objects.length;\n    for (let i = 0, n = arguments.length; i !== n; ++i) {\n      const object = arguments[i],\n        uuid = object.uuid,\n        index = indicesByUUID[uuid];\n      if (index !== undefined) {\n        delete indicesByUUID[uuid];\n        if (index < nCachedObjects) {\n          // object is cached, shrink the CACHED region\n\n          const firstActiveIndex = --nCachedObjects,\n            lastCachedObject = objects[firstActiveIndex],\n            lastIndex = --nObjects,\n            lastObject = objects[lastIndex];\n\n          // last cached object takes this object's place\n          indicesByUUID[lastCachedObject.uuid] = index;\n          objects[index] = lastCachedObject;\n\n          // last object goes to the activated slot and pop\n          indicesByUUID[lastObject.uuid] = firstActiveIndex;\n          objects[firstActiveIndex] = lastObject;\n          objects.pop();\n\n          // accounting is done, now do the same for all bindings\n\n          for (let j = 0, m = nBindings; j !== m; ++j) {\n            const bindingsForPath = bindings[j],\n              lastCached = bindingsForPath[firstActiveIndex],\n              last = bindingsForPath[lastIndex];\n            bindingsForPath[index] = lastCached;\n            bindingsForPath[firstActiveIndex] = last;\n            bindingsForPath.pop();\n          }\n        } else {\n          // object is active, just swap with the last and pop\n\n          const lastIndex = --nObjects,\n            lastObject = objects[lastIndex];\n          if (lastIndex > 0) {\n            indicesByUUID[lastObject.uuid] = index;\n          }\n          objects[index] = lastObject;\n          objects.pop();\n\n          // accounting is done, now do the same for all bindings\n\n          for (let j = 0, m = nBindings; j !== m; ++j) {\n            const bindingsForPath = bindings[j];\n            bindingsForPath[index] = bindingsForPath[lastIndex];\n            bindingsForPath.pop();\n          }\n        } // cached or active\n      } // if object is known\n    } // for arguments\n\n    this.nCachedObjects_ = nCachedObjects;\n  }\n\n  // Internal interface used by befriended PropertyBinding.Composite:\n\n  subscribe_(path, parsedPath) {\n    // returns an array of bindings for the given path that is changed\n    // according to the contained objects in the group\n\n    const indicesByPath = this._bindingsIndicesByPath;\n    let index = indicesByPath[path];\n    const bindings = this._bindings;\n    if (index !== undefined) return bindings[index];\n    const paths = this._paths,\n      parsedPaths = this._parsedPaths,\n      objects = this._objects,\n      nObjects = objects.length,\n      nCachedObjects = this.nCachedObjects_,\n      bindingsForPath = new Array(nObjects);\n    index = bindings.length;\n    indicesByPath[path] = index;\n    paths.push(path);\n    parsedPaths.push(parsedPath);\n    bindings.push(bindingsForPath);\n    for (let i = nCachedObjects, n = objects.length; i !== n; ++i) {\n      const object = objects[i];\n      bindingsForPath[i] = new PropertyBinding(object, path, parsedPath);\n    }\n    return bindingsForPath;\n  }\n  unsubscribe_(path) {\n    // tells the group to forget about a property path and no longer\n    // update the array previously obtained with 'subscribe_'\n\n    const indicesByPath = this._bindingsIndicesByPath,\n      index = indicesByPath[path];\n    if (index !== undefined) {\n      const paths = this._paths,\n        parsedPaths = this._parsedPaths,\n        bindings = this._bindings,\n        lastBindingsIndex = bindings.length - 1,\n        lastBindings = bindings[lastBindingsIndex],\n        lastBindingsPath = path[lastBindingsIndex];\n      indicesByPath[lastBindingsPath] = index;\n      bindings[index] = lastBindings;\n      bindings.pop();\n      parsedPaths[index] = parsedPaths[lastBindingsIndex];\n      parsedPaths.pop();\n      paths[index] = paths[lastBindingsIndex];\n      paths.pop();\n    }\n  }\n}\n\n/**\n * An instance of `AnimationAction` schedules the playback of an animation which is\n * stored in {@link AnimationClip}.\n */\nclass AnimationAction {\n  /**\n   * Constructs a new animation action.\n   *\n   * @param {AnimationMixer} mixer - The mixer that is controlled by this action.\n   * @param {AnimationClip} clip - The animation clip that holds the actual keyframes.\n   * @param {?Object3D} [localRoot=null] - The root object on which this action is performed.\n   * @param {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)} [blendMode] - The blend mode.\n   */\n  constructor(mixer, clip) {\n    let localRoot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let blendMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : clip.blendMode;\n    this._mixer = mixer;\n    this._clip = clip;\n    this._localRoot = localRoot;\n\n    /**\n     * Defines how the animation is blended/combined when two or more animations\n     * are simultaneously played.\n     *\n     * @type {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)}\n     */\n    this.blendMode = blendMode;\n    const tracks = clip.tracks,\n      nTracks = tracks.length,\n      interpolants = new Array(nTracks);\n    const interpolantSettings = {\n      endingStart: ZeroCurvatureEnding,\n      endingEnd: ZeroCurvatureEnding\n    };\n    for (let i = 0; i !== nTracks; ++i) {\n      const interpolant = tracks[i].createInterpolant(null);\n      interpolants[i] = interpolant;\n      interpolant.settings = interpolantSettings;\n    }\n    this._interpolantSettings = interpolantSettings;\n    this._interpolants = interpolants; // bound by the mixer\n\n    // inside: PropertyMixer (managed by the mixer)\n    this._propertyBindings = new Array(nTracks);\n    this._cacheIndex = null; // for the memory manager\n    this._byClipCacheIndex = null; // for the memory manager\n\n    this._timeScaleInterpolant = null;\n    this._weightInterpolant = null;\n\n    /**\n     * The loop mode, set via {@link AnimationAction#setLoop}.\n     *\n     * @type {(LoopRepeat|LoopOnce|LoopPingPong)}\n     * @default LoopRepeat\n     */\n    this.loop = LoopRepeat;\n    this._loopCount = -1;\n\n    // global mixer time when the action is to be started\n    // it's set back to 'null' upon start of the action\n    this._startTime = null;\n\n    /**\n     * The local time of this action (in seconds, starting with `0`).\n     *\n     * The value gets clamped or wrapped to `[0,clip.duration]` (according to the\n     * loop state).\n     *\n     * @type {number}\n     * @default Infinity\n     */\n    this.time = 0;\n\n    /**\n     * Scaling factor for the {@link AnimationAction#time}. A value of `0` causes the\n     * animation to pause. Negative values cause the animation to play backwards.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.timeScale = 1;\n    this._effectiveTimeScale = 1;\n\n    /**\n     * The degree of influence of this action (in the interval `[0, 1]`). Values\n     * between `0` (no impact) and `1` (full impact) can be used to blend between\n     * several actions.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.weight = 1;\n    this._effectiveWeight = 1;\n\n    /**\n     * The number of repetitions of the performed clip over the course of this action.\n     * Can be set via {@link AnimationAction#setLoop}.\n     *\n     * Setting this number has no effect if {@link AnimationAction#loop} is set to\n     * `THREE:LoopOnce`.\n     *\n     * @type {number}\n     * @default Infinity\n     */\n    this.repetitions = Infinity;\n\n    /**\n     * If set to `true`, the playback of the action is paused.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.paused = false;\n\n    /**\n     * If set to `false`, the action is disabled so it has no impact.\n     *\n     * When the action is re-enabled, the animation continues from its current\n     * time (setting `enabled` to `false` doesn't reset the action).\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.enabled = true;\n\n    /**\n     * If set to true the animation will automatically be paused on its last frame.\n     *\n     * If set to false, {@link AnimationAction#enabled} will automatically be switched\n     * to `false` when the last loop of the action has finished, so that this action has\n     * no further impact.\n     *\n     * Note: This member has no impact if the action is interrupted (it\n     * has only an effect if its last loop has really finished).\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.clampWhenFinished = false;\n\n    /**\n     * Enables smooth interpolation without separate clips for start, loop and end.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.zeroSlopeAtStart = true;\n\n    /**\n     * Enables smooth interpolation without separate clips for start, loop and end.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.zeroSlopeAtEnd = true;\n  }\n\n  /**\n   * Starts the playback of the animation.\n   *\n   * @return {AnimationAction} A reference to this animation action.\n   */\n  play() {\n    this._mixer._activateAction(this);\n    return this;\n  }\n\n  /**\n   * Stops the playback of the animation.\n   *\n   * @return {AnimationAction} A reference to this animation action.\n   */\n  stop() {\n    this._mixer._deactivateAction(this);\n    return this.reset();\n  }\n\n  /**\n   * Resets the playback of the animation.\n   *\n   * @return {AnimationAction} A reference to this animation action.\n   */\n  reset() {\n    this.paused = false;\n    this.enabled = true;\n    this.time = 0; // restart clip\n    this._loopCount = -1; // forget previous loops\n    this._startTime = null; // forget scheduling\n\n    return this.stopFading().stopWarping();\n  }\n\n  /**\n   * Returns `true` if the animation is running.\n   *\n   * @return {boolean} Whether the animation is running or not.\n   */\n  isRunning() {\n    return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);\n  }\n\n  /**\n   * Returns `true` when {@link AnimationAction#play} has been called.\n   *\n   * @return {boolean} Whether the animation is scheduled or not.\n   */\n  isScheduled() {\n    return this._mixer._isActiveAction(this);\n  }\n\n  /**\n   * Defines the time when the animation should start.\n   *\n   * @param {number} time - The start time in seconds.\n   * @return {AnimationAction} A reference to this animation action.\n   */\n  startAt(time) {\n    this._startTime = time;\n    return this;\n  }\n\n  /**\n   * Configures the loop settings for this action.\n   *\n   * @param {(LoopRepeat|LoopOnce|LoopPingPong)} mode - The loop mode.\n   * @param {number} repetitions - The number of repetitions.\n   * @return {AnimationAction} A reference to this animation action.\n   */\n  setLoop(mode, repetitions) {\n    this.loop = mode;\n    this.repetitions = repetitions;\n    return this;\n  }\n\n  /**\n   * Sets the effective weight of this action.\n   *\n   * An action has no effect and thus an effective weight of zero when the\n   * action is disabled.\n   *\n   * @param {number} weight - The weight to set.\n   * @return {AnimationAction} A reference to this animation action.\n   */\n  setEffectiveWeight(weight) {\n    this.weight = weight;\n\n    // note: same logic as when updated at runtime\n    this._effectiveWeight = this.enabled ? weight : 0;\n    return this.stopFading();\n  }\n\n  /**\n   * Returns the effective weight of this action.\n   *\n   * @return {number} The effective weight.\n   */\n  getEffectiveWeight() {\n    return this._effectiveWeight;\n  }\n\n  /**\n   * Fades the animation in by increasing its weight gradually from `0` to `1`,\n   * within the passed time interval.\n   *\n   * @param {number} duration - The duration of the fade.\n   * @return {AnimationAction} A reference to this animation action.\n   */\n  fadeIn(duration) {\n    return this._scheduleFading(duration, 0, 1);\n  }\n\n  /**\n   * Fades the animation out by decreasing its weight gradually from `1` to `0`,\n   * within the passed time interval.\n   *\n   * @param {number} duration - The duration of the fade.\n   * @return {AnimationAction} A reference to this animation action.\n   */\n  fadeOut(duration) {\n    return this._scheduleFading(duration, 1, 0);\n  }\n\n  /**\n   * Causes this action to fade in and the given action to fade out,\n   * within the passed time interval.\n   *\n   * @param {AnimationAction} fadeOutAction - The animation action to fade out.\n   * @param {number} duration - The duration of the fade.\n   * @param {boolean} [warp=false] - Whether warping should be used or not.\n   * @return {AnimationAction} A reference to this animation action.\n   */\n  crossFadeFrom(fadeOutAction, duration) {\n    let warp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    fadeOutAction.fadeOut(duration);\n    this.fadeIn(duration);\n    if (warp === true) {\n      const fadeInDuration = this._clip.duration,\n        fadeOutDuration = fadeOutAction._clip.duration,\n        startEndRatio = fadeOutDuration / fadeInDuration,\n        endStartRatio = fadeInDuration / fadeOutDuration;\n      fadeOutAction.warp(1.0, startEndRatio, duration);\n      this.warp(endStartRatio, 1.0, duration);\n    }\n    return this;\n  }\n\n  /**\n   * Causes this action to fade out and the given action to fade in,\n   * within the passed time interval.\n   *\n   * @param {AnimationAction} fadeInAction - The animation action to fade in.\n   * @param {number} duration - The duration of the fade.\n   * @param {boolean} [warp=false] - Whether warping should be used or not.\n   * @return {AnimationAction} A reference to this animation action.\n   */\n  crossFadeTo(fadeInAction, duration) {\n    let warp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    return fadeInAction.crossFadeFrom(this, duration, warp);\n  }\n\n  /**\n   * Stops any fading which is applied to this action.\n   *\n   * @return {AnimationAction} A reference to this animation action.\n   */\n  stopFading() {\n    const weightInterpolant = this._weightInterpolant;\n    if (weightInterpolant !== null) {\n      this._weightInterpolant = null;\n      this._mixer._takeBackControlInterpolant(weightInterpolant);\n    }\n    return this;\n  }\n\n  /**\n   * Sets the effective time scale of this action.\n   *\n   * An action has no effect and thus an effective time scale of zero when the\n   * action is paused.\n   *\n   * @param {number} timeScale - The time scale to set.\n   * @return {AnimationAction} A reference to this animation action.\n   */\n  setEffectiveTimeScale(timeScale) {\n    this.timeScale = timeScale;\n    this._effectiveTimeScale = this.paused ? 0 : timeScale;\n    return this.stopWarping();\n  }\n\n  /**\n   * Returns the effective time scale of this action.\n   *\n   * @return {number} The effective time scale.\n   */\n  getEffectiveTimeScale() {\n    return this._effectiveTimeScale;\n  }\n\n  /**\n   * Sets the duration for a single loop of this action.\n   *\n   * @param {number} duration - The duration to set.\n   * @return {AnimationAction} A reference to this animation action.\n   */\n  setDuration(duration) {\n    this.timeScale = this._clip.duration / duration;\n    return this.stopWarping();\n  }\n\n  /**\n   * Synchronizes this action with the passed other action.\n   *\n   * @param {AnimationAction} action - The action to sync with.\n   * @return {AnimationAction} A reference to this animation action.\n   */\n  syncWith(action) {\n    this.time = action.time;\n    this.timeScale = action.timeScale;\n    return this.stopWarping();\n  }\n\n  /**\n   * Decelerates this animation's speed to `0` within the passed time interval.\n   *\n   * @param {number} duration - The duration.\n   * @return {AnimationAction} A reference to this animation action.\n   */\n  halt(duration) {\n    return this.warp(this._effectiveTimeScale, 0, duration);\n  }\n\n  /**\n   * Changes the playback speed, within the passed time interval, by modifying\n   * {@link AnimationAction#timeScale} gradually from `startTimeScale` to\n   * `endTimeScale`.\n   *\n   * @param {number} startTimeScale - The start time scale.\n   * @param {number} endTimeScale - The end time scale.\n   * @param {number} duration - The duration.\n   * @return {AnimationAction} A reference to this animation action.\n   */\n  warp(startTimeScale, endTimeScale, duration) {\n    const mixer = this._mixer,\n      now = mixer.time,\n      timeScale = this.timeScale;\n    let interpolant = this._timeScaleInterpolant;\n    if (interpolant === null) {\n      interpolant = mixer._lendControlInterpolant();\n      this._timeScaleInterpolant = interpolant;\n    }\n    const times = interpolant.parameterPositions,\n      values = interpolant.sampleValues;\n    times[0] = now;\n    times[1] = now + duration;\n    values[0] = startTimeScale / timeScale;\n    values[1] = endTimeScale / timeScale;\n    return this;\n  }\n\n  /**\n   * Stops any scheduled warping which is applied to this action.\n   *\n   * @return {AnimationAction} A reference to this animation action.\n   */\n  stopWarping() {\n    const timeScaleInterpolant = this._timeScaleInterpolant;\n    if (timeScaleInterpolant !== null) {\n      this._timeScaleInterpolant = null;\n      this._mixer._takeBackControlInterpolant(timeScaleInterpolant);\n    }\n    return this;\n  }\n\n  /**\n   * Returns the animation mixer of this animation action.\n   *\n   * @return {AnimationMixer} The animation mixer.\n   */\n  getMixer() {\n    return this._mixer;\n  }\n\n  /**\n   * Returns the animation clip of this animation action.\n   *\n   * @return {AnimationClip} The animation clip.\n   */\n  getClip() {\n    return this._clip;\n  }\n\n  /**\n   * Returns the root object of this animation action.\n   *\n   * @return {Object3D} The root object.\n   */\n  getRoot() {\n    return this._localRoot || this._mixer._root;\n  }\n\n  // Interna\n\n  _update(time, deltaTime, timeDirection, accuIndex) {\n    // called by the mixer\n\n    if (!this.enabled) {\n      // call ._updateWeight() to update ._effectiveWeight\n\n      this._updateWeight(time);\n      return;\n    }\n    const startTime = this._startTime;\n    if (startTime !== null) {\n      // check for scheduled start of action\n\n      const timeRunning = (time - startTime) * timeDirection;\n      if (timeRunning < 0 || timeDirection === 0) {\n        deltaTime = 0;\n      } else {\n        this._startTime = null; // unschedule\n        deltaTime = timeDirection * timeRunning;\n      }\n    }\n\n    // apply time scale and advance time\n\n    deltaTime *= this._updateTimeScale(time);\n    const clipTime = this._updateTime(deltaTime);\n\n    // note: _updateTime may disable the action resulting in\n    // an effective weight of 0\n\n    const weight = this._updateWeight(time);\n    if (weight > 0) {\n      const interpolants = this._interpolants;\n      const propertyMixers = this._propertyBindings;\n      switch (this.blendMode) {\n        case AdditiveAnimationBlendMode:\n          for (let j = 0, m = interpolants.length; j !== m; ++j) {\n            interpolants[j].evaluate(clipTime);\n            propertyMixers[j].accumulateAdditive(weight);\n          }\n          break;\n        case NormalAnimationBlendMode:\n        default:\n          for (let j = 0, m = interpolants.length; j !== m; ++j) {\n            interpolants[j].evaluate(clipTime);\n            propertyMixers[j].accumulate(accuIndex, weight);\n          }\n      }\n    }\n  }\n  _updateWeight(time) {\n    let weight = 0;\n    if (this.enabled) {\n      weight = this.weight;\n      const interpolant = this._weightInterpolant;\n      if (interpolant !== null) {\n        const interpolantValue = interpolant.evaluate(time)[0];\n        weight *= interpolantValue;\n        if (time > interpolant.parameterPositions[1]) {\n          this.stopFading();\n          if (interpolantValue === 0) {\n            // faded out, disable\n            this.enabled = false;\n          }\n        }\n      }\n    }\n    this._effectiveWeight = weight;\n    return weight;\n  }\n  _updateTimeScale(time) {\n    let timeScale = 0;\n    if (!this.paused) {\n      timeScale = this.timeScale;\n      const interpolant = this._timeScaleInterpolant;\n      if (interpolant !== null) {\n        const interpolantValue = interpolant.evaluate(time)[0];\n        timeScale *= interpolantValue;\n        if (time > interpolant.parameterPositions[1]) {\n          this.stopWarping();\n          if (timeScale === 0) {\n            // motion has halted, pause\n            this.paused = true;\n          } else {\n            // warp done - apply final time scale\n            this.timeScale = timeScale;\n          }\n        }\n      }\n    }\n    this._effectiveTimeScale = timeScale;\n    return timeScale;\n  }\n  _updateTime(deltaTime) {\n    const duration = this._clip.duration;\n    const loop = this.loop;\n    let time = this.time + deltaTime;\n    let loopCount = this._loopCount;\n    const pingPong = loop === LoopPingPong;\n    if (deltaTime === 0) {\n      if (loopCount === -1) return time;\n      return pingPong && (loopCount & 1) === 1 ? duration - time : time;\n    }\n    if (loop === LoopOnce) {\n      if (loopCount === -1) {\n        // just started\n\n        this._loopCount = 0;\n        this._setEndings(true, true, false);\n      }\n      handle_stop: {\n        if (time >= duration) {\n          time = duration;\n        } else if (time < 0) {\n          time = 0;\n        } else {\n          this.time = time;\n          break handle_stop;\n        }\n        if (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n        this.time = time;\n        this._mixer.dispatchEvent({\n          type: 'finished',\n          action: this,\n          direction: deltaTime < 0 ? -1 : 1\n        });\n      }\n    } else {\n      // repetitive Repeat or PingPong\n\n      if (loopCount === -1) {\n        // just started\n\n        if (deltaTime >= 0) {\n          loopCount = 0;\n          this._setEndings(true, this.repetitions === 0, pingPong);\n        } else {\n          // when looping in reverse direction, the initial\n          // transition through zero counts as a repetition,\n          // so leave loopCount at -1\n\n          this._setEndings(this.repetitions === 0, true, pingPong);\n        }\n      }\n      if (time >= duration || time < 0) {\n        // wrap around\n\n        const loopDelta = Math.floor(time / duration); // signed\n        time -= duration * loopDelta;\n        loopCount += Math.abs(loopDelta);\n        const pending = this.repetitions - loopCount;\n        if (pending <= 0) {\n          // have to stop (switch state, clamp time, fire event)\n\n          if (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n          time = deltaTime > 0 ? duration : 0;\n          this.time = time;\n          this._mixer.dispatchEvent({\n            type: 'finished',\n            action: this,\n            direction: deltaTime > 0 ? 1 : -1\n          });\n        } else {\n          // keep running\n\n          if (pending === 1) {\n            // entering the last round\n\n            const atStart = deltaTime < 0;\n            this._setEndings(atStart, !atStart, pingPong);\n          } else {\n            this._setEndings(false, false, pingPong);\n          }\n          this._loopCount = loopCount;\n          this.time = time;\n          this._mixer.dispatchEvent({\n            type: 'loop',\n            action: this,\n            loopDelta: loopDelta\n          });\n        }\n      } else {\n        this.time = time;\n      }\n      if (pingPong && (loopCount & 1) === 1) {\n        // invert time for the \"pong round\"\n\n        return duration - time;\n      }\n    }\n    return time;\n  }\n  _setEndings(atStart, atEnd, pingPong) {\n    const settings = this._interpolantSettings;\n    if (pingPong) {\n      settings.endingStart = ZeroSlopeEnding;\n      settings.endingEnd = ZeroSlopeEnding;\n    } else {\n      // assuming for LoopOnce atStart == atEnd == true\n\n      if (atStart) {\n        settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n      } else {\n        settings.endingStart = WrapAroundEnding;\n      }\n      if (atEnd) {\n        settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n      } else {\n        settings.endingEnd = WrapAroundEnding;\n      }\n    }\n  }\n  _scheduleFading(duration, weightNow, weightThen) {\n    const mixer = this._mixer,\n      now = mixer.time;\n    let interpolant = this._weightInterpolant;\n    if (interpolant === null) {\n      interpolant = mixer._lendControlInterpolant();\n      this._weightInterpolant = interpolant;\n    }\n    const times = interpolant.parameterPositions,\n      values = interpolant.sampleValues;\n    times[0] = now;\n    values[0] = weightNow;\n    times[1] = now + duration;\n    values[1] = weightThen;\n    return this;\n  }\n}\nconst _controlInterpolantsResultBuffer = new Float32Array(1);\n\n/**\n * `AnimationMixer` is a player for animations on a particular object in\n * the scene. When multiple objects in the scene are animated independently,\n * one `AnimationMixer` may be used for each object.\n */\nclass AnimationMixer extends EventDispatcher {\n  /**\n   * Constructs a new animation mixer.\n   *\n   * @param {Object3D} root - The object whose animations shall be played by this mixer.\n   */\n  constructor(root) {\n    super();\n    this._root = root;\n    this._initMemoryManager();\n    this._accuIndex = 0;\n\n    /**\n     * The global mixer time (in seconds; starting with `0` on the mixer's creation).\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.time = 0;\n\n    /**\n     * A scaling factor for the global time.\n     *\n     * Note: Setting this member to `0` and later back to `1` is a\n     * possibility to pause/unpause all actions that are controlled by this\n     * mixer.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.timeScale = 1.0;\n  }\n  _bindAction(action, prototypeAction) {\n    const root = action._localRoot || this._root,\n      tracks = action._clip.tracks,\n      nTracks = tracks.length,\n      bindings = action._propertyBindings,\n      interpolants = action._interpolants,\n      rootUuid = root.uuid,\n      bindingsByRoot = this._bindingsByRootAndName;\n    let bindingsByName = bindingsByRoot[rootUuid];\n    if (bindingsByName === undefined) {\n      bindingsByName = {};\n      bindingsByRoot[rootUuid] = bindingsByName;\n    }\n    for (let i = 0; i !== nTracks; ++i) {\n      const track = tracks[i],\n        trackName = track.name;\n      let binding = bindingsByName[trackName];\n      if (binding !== undefined) {\n        ++binding.referenceCount;\n        bindings[i] = binding;\n      } else {\n        binding = bindings[i];\n        if (binding !== undefined) {\n          // existing binding, make sure the cache knows\n\n          if (binding._cacheIndex === null) {\n            ++binding.referenceCount;\n            this._addInactiveBinding(binding, rootUuid, trackName);\n          }\n          continue;\n        }\n        const path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;\n        binding = new PropertyMixer(PropertyBinding.create(root, trackName, path), track.ValueTypeName, track.getValueSize());\n        ++binding.referenceCount;\n        this._addInactiveBinding(binding, rootUuid, trackName);\n        bindings[i] = binding;\n      }\n      interpolants[i].resultBuffer = binding.buffer;\n    }\n  }\n  _activateAction(action) {\n    if (!this._isActiveAction(action)) {\n      if (action._cacheIndex === null) {\n        // this action has been forgotten by the cache, but the user\n        // appears to be still using it -> rebind\n\n        const rootUuid = (action._localRoot || this._root).uuid,\n          clipUuid = action._clip.uuid,\n          actionsForClip = this._actionsByClip[clipUuid];\n        this._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);\n        this._addInactiveAction(action, clipUuid, rootUuid);\n      }\n      const bindings = action._propertyBindings;\n\n      // increment reference counts / sort out state\n      for (let i = 0, n = bindings.length; i !== n; ++i) {\n        const binding = bindings[i];\n        if (binding.useCount++ === 0) {\n          this._lendBinding(binding);\n          binding.saveOriginalState();\n        }\n      }\n      this._lendAction(action);\n    }\n  }\n  _deactivateAction(action) {\n    if (this._isActiveAction(action)) {\n      const bindings = action._propertyBindings;\n\n      // decrement reference counts / sort out state\n      for (let i = 0, n = bindings.length; i !== n; ++i) {\n        const binding = bindings[i];\n        if (--binding.useCount === 0) {\n          binding.restoreOriginalState();\n          this._takeBackBinding(binding);\n        }\n      }\n      this._takeBackAction(action);\n    }\n  }\n\n  // Memory manager\n\n  _initMemoryManager() {\n    this._actions = []; // 'nActiveActions' followed by inactive ones\n    this._nActiveActions = 0;\n    this._actionsByClip = {};\n    // inside:\n    // {\n    // \tknownActions: Array< AnimationAction > - used as prototypes\n    // \tactionByRoot: AnimationAction - lookup\n    // }\n\n    this._bindings = []; // 'nActiveBindings' followed by inactive ones\n    this._nActiveBindings = 0;\n    this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n    this._controlInterpolants = []; // same game as above\n    this._nActiveControlInterpolants = 0;\n    const scope = this;\n    this.stats = {\n      actions: {\n        get total() {\n          return scope._actions.length;\n        },\n        get inUse() {\n          return scope._nActiveActions;\n        }\n      },\n      bindings: {\n        get total() {\n          return scope._bindings.length;\n        },\n        get inUse() {\n          return scope._nActiveBindings;\n        }\n      },\n      controlInterpolants: {\n        get total() {\n          return scope._controlInterpolants.length;\n        },\n        get inUse() {\n          return scope._nActiveControlInterpolants;\n        }\n      }\n    };\n  }\n\n  // Memory management for AnimationAction objects\n\n  _isActiveAction(action) {\n    const index = action._cacheIndex;\n    return index !== null && index < this._nActiveActions;\n  }\n  _addInactiveAction(action, clipUuid, rootUuid) {\n    const actions = this._actions,\n      actionsByClip = this._actionsByClip;\n    let actionsForClip = actionsByClip[clipUuid];\n    if (actionsForClip === undefined) {\n      actionsForClip = {\n        knownActions: [action],\n        actionByRoot: {}\n      };\n      action._byClipCacheIndex = 0;\n      actionsByClip[clipUuid] = actionsForClip;\n    } else {\n      const knownActions = actionsForClip.knownActions;\n      action._byClipCacheIndex = knownActions.length;\n      knownActions.push(action);\n    }\n    action._cacheIndex = actions.length;\n    actions.push(action);\n    actionsForClip.actionByRoot[rootUuid] = action;\n  }\n  _removeInactiveAction(action) {\n    const actions = this._actions,\n      lastInactiveAction = actions[actions.length - 1],\n      cacheIndex = action._cacheIndex;\n    lastInactiveAction._cacheIndex = cacheIndex;\n    actions[cacheIndex] = lastInactiveAction;\n    actions.pop();\n    action._cacheIndex = null;\n    const clipUuid = action._clip.uuid,\n      actionsByClip = this._actionsByClip,\n      actionsForClip = actionsByClip[clipUuid],\n      knownActionsForClip = actionsForClip.knownActions,\n      lastKnownAction = knownActionsForClip[knownActionsForClip.length - 1],\n      byClipCacheIndex = action._byClipCacheIndex;\n    lastKnownAction._byClipCacheIndex = byClipCacheIndex;\n    knownActionsForClip[byClipCacheIndex] = lastKnownAction;\n    knownActionsForClip.pop();\n    action._byClipCacheIndex = null;\n    const actionByRoot = actionsForClip.actionByRoot,\n      rootUuid = (action._localRoot || this._root).uuid;\n    delete actionByRoot[rootUuid];\n    if (knownActionsForClip.length === 0) {\n      delete actionsByClip[clipUuid];\n    }\n    this._removeInactiveBindingsForAction(action);\n  }\n  _removeInactiveBindingsForAction(action) {\n    const bindings = action._propertyBindings;\n    for (let i = 0, n = bindings.length; i !== n; ++i) {\n      const binding = bindings[i];\n      if (--binding.referenceCount === 0) {\n        this._removeInactiveBinding(binding);\n      }\n    }\n  }\n  _lendAction(action) {\n    // [ active actions |  inactive actions  ]\n    // [  active actions >| inactive actions ]\n    //                 s        a\n    //                  <-swap->\n    //                 a        s\n\n    const actions = this._actions,\n      prevIndex = action._cacheIndex,\n      lastActiveIndex = this._nActiveActions++,\n      firstInactiveAction = actions[lastActiveIndex];\n    action._cacheIndex = lastActiveIndex;\n    actions[lastActiveIndex] = action;\n    firstInactiveAction._cacheIndex = prevIndex;\n    actions[prevIndex] = firstInactiveAction;\n  }\n  _takeBackAction(action) {\n    // [  active actions  | inactive actions ]\n    // [ active actions |< inactive actions  ]\n    //        a        s\n    //         <-swap->\n    //        s        a\n\n    const actions = this._actions,\n      prevIndex = action._cacheIndex,\n      firstInactiveIndex = --this._nActiveActions,\n      lastActiveAction = actions[firstInactiveIndex];\n    action._cacheIndex = firstInactiveIndex;\n    actions[firstInactiveIndex] = action;\n    lastActiveAction._cacheIndex = prevIndex;\n    actions[prevIndex] = lastActiveAction;\n  }\n\n  // Memory management for PropertyMixer objects\n\n  _addInactiveBinding(binding, rootUuid, trackName) {\n    const bindingsByRoot = this._bindingsByRootAndName,\n      bindings = this._bindings;\n    let bindingByName = bindingsByRoot[rootUuid];\n    if (bindingByName === undefined) {\n      bindingByName = {};\n      bindingsByRoot[rootUuid] = bindingByName;\n    }\n    bindingByName[trackName] = binding;\n    binding._cacheIndex = bindings.length;\n    bindings.push(binding);\n  }\n  _removeInactiveBinding(binding) {\n    const bindings = this._bindings,\n      propBinding = binding.binding,\n      rootUuid = propBinding.rootNode.uuid,\n      trackName = propBinding.path,\n      bindingsByRoot = this._bindingsByRootAndName,\n      bindingByName = bindingsByRoot[rootUuid],\n      lastInactiveBinding = bindings[bindings.length - 1],\n      cacheIndex = binding._cacheIndex;\n    lastInactiveBinding._cacheIndex = cacheIndex;\n    bindings[cacheIndex] = lastInactiveBinding;\n    bindings.pop();\n    delete bindingByName[trackName];\n    if (Object.keys(bindingByName).length === 0) {\n      delete bindingsByRoot[rootUuid];\n    }\n  }\n  _lendBinding(binding) {\n    const bindings = this._bindings,\n      prevIndex = binding._cacheIndex,\n      lastActiveIndex = this._nActiveBindings++,\n      firstInactiveBinding = bindings[lastActiveIndex];\n    binding._cacheIndex = lastActiveIndex;\n    bindings[lastActiveIndex] = binding;\n    firstInactiveBinding._cacheIndex = prevIndex;\n    bindings[prevIndex] = firstInactiveBinding;\n  }\n  _takeBackBinding(binding) {\n    const bindings = this._bindings,\n      prevIndex = binding._cacheIndex,\n      firstInactiveIndex = --this._nActiveBindings,\n      lastActiveBinding = bindings[firstInactiveIndex];\n    binding._cacheIndex = firstInactiveIndex;\n    bindings[firstInactiveIndex] = binding;\n    lastActiveBinding._cacheIndex = prevIndex;\n    bindings[prevIndex] = lastActiveBinding;\n  }\n\n  // Memory management of Interpolants for weight and time scale\n\n  _lendControlInterpolant() {\n    const interpolants = this._controlInterpolants,\n      lastActiveIndex = this._nActiveControlInterpolants++;\n    let interpolant = interpolants[lastActiveIndex];\n    if (interpolant === undefined) {\n      interpolant = new LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, _controlInterpolantsResultBuffer);\n      interpolant.__cacheIndex = lastActiveIndex;\n      interpolants[lastActiveIndex] = interpolant;\n    }\n    return interpolant;\n  }\n  _takeBackControlInterpolant(interpolant) {\n    const interpolants = this._controlInterpolants,\n      prevIndex = interpolant.__cacheIndex,\n      firstInactiveIndex = --this._nActiveControlInterpolants,\n      lastActiveInterpolant = interpolants[firstInactiveIndex];\n    interpolant.__cacheIndex = firstInactiveIndex;\n    interpolants[firstInactiveIndex] = interpolant;\n    lastActiveInterpolant.__cacheIndex = prevIndex;\n    interpolants[prevIndex] = lastActiveInterpolant;\n  }\n\n  /**\n   * Returns an instance of {@link AnimationAction} for the passed clip.\n   *\n   * If an action fitting the clip and root parameters doesn't yet exist, it\n   * will be created by this method. Calling this method several times with the\n   * same clip and root parameters always returns the same action.\n   *\n   * @param {AnimationClip|string} clip - An animation clip or alternatively the name of the animation clip.\n   * @param {Object3D} [optionalRoot] - An alternative root object.\n   * @param {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)} [blendMode] - The blend mode.\n   * @return {?AnimationAction} The animation action.\n   */\n  clipAction(clip, optionalRoot, blendMode) {\n    const root = optionalRoot || this._root,\n      rootUuid = root.uuid;\n    let clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip;\n    const clipUuid = clipObject !== null ? clipObject.uuid : clip;\n    const actionsForClip = this._actionsByClip[clipUuid];\n    let prototypeAction = null;\n    if (blendMode === undefined) {\n      if (clipObject !== null) {\n        blendMode = clipObject.blendMode;\n      } else {\n        blendMode = NormalAnimationBlendMode;\n      }\n    }\n    if (actionsForClip !== undefined) {\n      const existingAction = actionsForClip.actionByRoot[rootUuid];\n      if (existingAction !== undefined && existingAction.blendMode === blendMode) {\n        return existingAction;\n      }\n\n      // we know the clip, so we don't have to parse all\n      // the bindings again but can just copy\n      prototypeAction = actionsForClip.knownActions[0];\n\n      // also, take the clip from the prototype action\n      if (clipObject === null) clipObject = prototypeAction._clip;\n    }\n\n    // clip must be known when specified via string\n    if (clipObject === null) return null;\n\n    // allocate all resources required to run it\n    const newAction = new AnimationAction(this, clipObject, optionalRoot, blendMode);\n    this._bindAction(newAction, prototypeAction);\n\n    // and make the action known to the memory manager\n    this._addInactiveAction(newAction, clipUuid, rootUuid);\n    return newAction;\n  }\n\n  /**\n   * Returns an existing animation action for the passed clip.\n   *\n   * @param {AnimationClip|string} clip - An animation clip or alternatively the name of the animation clip.\n   * @param {Object3D} [optionalRoot] - An alternative root object.\n   * @return {?AnimationAction} The animation action. Returns `null` if no action was found.\n   */\n  existingAction(clip, optionalRoot) {\n    const root = optionalRoot || this._root,\n      rootUuid = root.uuid,\n      clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip,\n      clipUuid = clipObject ? clipObject.uuid : clip,\n      actionsForClip = this._actionsByClip[clipUuid];\n    if (actionsForClip !== undefined) {\n      return actionsForClip.actionByRoot[rootUuid] || null;\n    }\n    return null;\n  }\n\n  /**\n   * Deactivates all previously scheduled actions on this mixer.\n   *\n   * @return {AnimationMixer} A reference to thi animation mixer.\n   */\n  stopAllAction() {\n    const actions = this._actions,\n      nActions = this._nActiveActions;\n    for (let i = nActions - 1; i >= 0; --i) {\n      actions[i].stop();\n    }\n    return this;\n  }\n\n  /**\n   * Advances the global mixer time and updates the animation.\n   *\n   * This is usually done in the render loop by passing the delta\n   * time from {@link Clock} or {@link Timer}.\n   *\n   * @param {number} deltaTime - The delta time in seconds.\n   * @return {AnimationMixer} A reference to thi animation mixer.\n   */\n  update(deltaTime) {\n    deltaTime *= this.timeScale;\n    const actions = this._actions,\n      nActions = this._nActiveActions,\n      time = this.time += deltaTime,\n      timeDirection = Math.sign(deltaTime),\n      accuIndex = this._accuIndex ^= 1;\n\n    // run active actions\n\n    for (let i = 0; i !== nActions; ++i) {\n      const action = actions[i];\n      action._update(time, deltaTime, timeDirection, accuIndex);\n    }\n\n    // update scene graph\n\n    const bindings = this._bindings,\n      nBindings = this._nActiveBindings;\n    for (let i = 0; i !== nBindings; ++i) {\n      bindings[i].apply(accuIndex);\n    }\n    return this;\n  }\n\n  /**\n   * Sets the global mixer to a specific time and updates the animation accordingly.\n   *\n   * This is useful when you need to jump to an exact time in an animation. The\n   * input parameter will be scaled by {@link AnimationMixer#timeScale}\n   *\n   * @param {number} time - The time to set in seconds.\n   * @return {AnimationMixer} A reference to thi animation mixer.\n   */\n  setTime(time) {\n    this.time = 0; // Zero out time attribute for AnimationMixer object;\n    for (let i = 0; i < this._actions.length; i++) {\n      this._actions[i].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n    }\n    return this.update(time); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n  }\n\n  /**\n   * Returns this mixer's root object.\n   *\n   * @return {Object3D} The mixer's root object.\n   */\n  getRoot() {\n    return this._root;\n  }\n\n  /**\n   * Deallocates all memory resources for a clip. Before using this method make\n   * sure to call {@link AnimationAction#stop} for all related actions.\n   *\n   * @param {AnimationClip} clip - The clip to uncache.\n   */\n  uncacheClip(clip) {\n    const actions = this._actions,\n      clipUuid = clip.uuid,\n      actionsByClip = this._actionsByClip,\n      actionsForClip = actionsByClip[clipUuid];\n    if (actionsForClip !== undefined) {\n      // note: just calling _removeInactiveAction would mess up the\n      // iteration state and also require updating the state we can\n      // just throw away\n\n      const actionsToRemove = actionsForClip.knownActions;\n      for (let i = 0, n = actionsToRemove.length; i !== n; ++i) {\n        const action = actionsToRemove[i];\n        this._deactivateAction(action);\n        const cacheIndex = action._cacheIndex,\n          lastInactiveAction = actions[actions.length - 1];\n        action._cacheIndex = null;\n        action._byClipCacheIndex = null;\n        lastInactiveAction._cacheIndex = cacheIndex;\n        actions[cacheIndex] = lastInactiveAction;\n        actions.pop();\n        this._removeInactiveBindingsForAction(action);\n      }\n      delete actionsByClip[clipUuid];\n    }\n  }\n\n  /**\n   * Deallocates all memory resources for a root object. Before using this\n   * method make sure to call {@link AnimationAction#stop} for all related\n   * actions or alternatively {@link AnimationMixer#stopAllAction} when the\n   * mixer operates on a single root.\n   *\n   * @param {Object3D} root - The root object to uncache.\n   */\n  uncacheRoot(root) {\n    const rootUuid = root.uuid,\n      actionsByClip = this._actionsByClip;\n    for (const clipUuid in actionsByClip) {\n      const actionByRoot = actionsByClip[clipUuid].actionByRoot,\n        action = actionByRoot[rootUuid];\n      if (action !== undefined) {\n        this._deactivateAction(action);\n        this._removeInactiveAction(action);\n      }\n    }\n    const bindingsByRoot = this._bindingsByRootAndName,\n      bindingByName = bindingsByRoot[rootUuid];\n    if (bindingByName !== undefined) {\n      for (const trackName in bindingByName) {\n        const binding = bindingByName[trackName];\n        binding.restoreOriginalState();\n        this._removeInactiveBinding(binding);\n      }\n    }\n  }\n\n  /**\n   * Deallocates all memory resources for an action. The action is identified by the\n   * given clip and an optional root object. Before using this method make\n   * sure to call {@link AnimationAction#stop} to deactivate the action.\n   *\n   * @param {AnimationClip|string} clip - An animation clip or alternatively the name of the animation clip.\n   * @param {Object3D} [optionalRoot] - An alternative root object.\n   */\n  uncacheAction(clip, optionalRoot) {\n    const action = this.existingAction(clip, optionalRoot);\n    if (action !== null) {\n      this._deactivateAction(action);\n      this._removeInactiveAction(action);\n    }\n  }\n}\n\n/**\n * Represents a 3D render target.\n *\n * @augments RenderTarget\n */\nclass RenderTarget3D extends RenderTarget {\n  /**\n   * Constructs a new 3D render target.\n   *\n   * @param {number} [width=1] - The width of the render target.\n   * @param {number} [height=1] - The height of the render target.\n   * @param {number} [depth=1] - The height of the render target.\n   * @param {RenderTarget~Options} [options] - The configuration object.\n   */\n  constructor() {\n    let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    super(width, height, options);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isRenderTarget3D = true;\n    this.depth = depth;\n\n    /**\n     * Overwritten with a different texture type.\n     *\n     * @type {Data3DTexture}\n     */\n    this.texture = new Data3DTexture(null, width, height, depth);\n    this.texture.isRenderTargetTexture = true;\n  }\n}\n\n/**\n * Represents an array render target.\n *\n * @augments RenderTarget\n */\nclass RenderTargetArray extends RenderTarget {\n  /**\n   * Constructs a new 3D render target.\n   *\n   * @param {number} [width=1] - The width of the render target.\n   * @param {number} [height=1] - The height of the render target.\n   * @param {number} [depth=1] - The height of the render target.\n   * @param {RenderTarget~Options} [options] - The configuration object.\n   */\n  constructor() {\n    let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    super(width, height, options);\n    this.isRenderTargetArray = true;\n    this.depth = depth;\n\n    /**\n     * Overwritten with a different texture type.\n     *\n     * @type {DataArrayTexture}\n     */\n    this.texture = new DataArrayTexture(null, width, height, depth);\n    this.texture.isRenderTargetTexture = true;\n  }\n}\n\n/**\n * Represents a uniform which is a global shader variable. They are passed to shader programs.\n *\n * When declaring a uniform of a {@link ShaderMaterial}, it is declared by value or by object.\n * ```js\n * uniforms: {\n * \ttime: { value: 1.0 },\n * \tresolution: new Uniform( new Vector2() )\n * };\n * ```\n * Since this class can only be used in context of {@link ShaderMaterial}, it is only supported\n * in {@link WebGLRenderer}.\n */\nclass Uniform {\n  /**\n   * Constructs a new uniform.\n   *\n   * @param {any} value - The uniform value.\n   */\n  constructor(value) {\n    /**\n     * The uniform value.\n     *\n     * @type {any}\n     */\n    this.value = value;\n  }\n\n  /**\n   * Returns a new uniform with copied values from this instance.\n   * If the value has a `clone()` method, the value is cloned as well.\n   *\n   * @return {Uniform} A clone of this instance.\n   */\n  clone() {\n    return new Uniform(this.value.clone === undefined ? this.value : this.value.clone());\n  }\n}\nlet _id = 0;\n\n/**\n * A class for managing multiple uniforms in a single group. The renderer will process\n * such a definition as a single UBO.\n *\n * Since this class can only be used in context of {@link ShaderMaterial}, it is only supported\n * in {@link WebGLRenderer}.\n *\n * @augments EventDispatcher\n */\nclass UniformsGroup extends EventDispatcher {\n  /**\n   * Constructs a new uniforms group.\n   */\n  constructor() {\n    super();\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isUniformsGroup = true;\n\n    /**\n     * The ID of the 3D object.\n     *\n     * @name UniformsGroup#id\n     * @type {number}\n     * @readonly\n     */\n    Object.defineProperty(this, 'id', {\n      value: _id++\n    });\n\n    /**\n     * The name of the uniforms group.\n     *\n     * @type {string}\n     */\n    this.name = '';\n\n    /**\n     * The buffer usage.\n     *\n     * @type {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)}\n     * @default StaticDrawUsage\n     */\n    this.usage = StaticDrawUsage;\n\n    /**\n     * An array holding the uniforms.\n     *\n     * @type {Array<Uniform>}\n     */\n    this.uniforms = [];\n  }\n\n  /**\n   * Adds the given uniform to this uniforms group.\n   *\n   * @param {Uniform} uniform - The uniform to add.\n   * @return {UniformsGroup} A reference to this uniforms group.\n   */\n  add(uniform) {\n    this.uniforms.push(uniform);\n    return this;\n  }\n\n  /**\n   * Removes the given uniform from this uniforms group.\n   *\n   * @param {Uniform} uniform - The uniform to remove.\n   * @return {UniformsGroup} A reference to this uniforms group.\n   */\n  remove(uniform) {\n    const index = this.uniforms.indexOf(uniform);\n    if (index !== -1) this.uniforms.splice(index, 1);\n    return this;\n  }\n\n  /**\n   * Sets the name of this uniforms group.\n   *\n   * @param {string} name - The name to set.\n   * @return {UniformsGroup} A reference to this uniforms group.\n   */\n  setName(name) {\n    this.name = name;\n    return this;\n  }\n\n  /**\n   * Sets the usage of this uniforms group.\n   *\n   * @param {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)} value - The usage to set.\n   * @return {UniformsGroup} A reference to this uniforms group.\n   */\n  setUsage(value) {\n    this.usage = value;\n    return this;\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   *\n   * @fires Texture#dispose\n   */\n  dispose() {\n    this.dispatchEvent({\n      type: 'dispose'\n    });\n  }\n\n  /**\n   * Copies the values of the given uniforms group to this instance.\n   *\n   * @param {UniformsGroup} source - The uniforms group to copy.\n   * @return {UniformsGroup} A reference to this uniforms group.\n   */\n  copy(source) {\n    this.name = source.name;\n    this.usage = source.usage;\n    const uniformsSource = source.uniforms;\n    this.uniforms.length = 0;\n    for (let i = 0, l = uniformsSource.length; i < l; i++) {\n      const uniforms = Array.isArray(uniformsSource[i]) ? uniformsSource[i] : [uniformsSource[i]];\n      for (let j = 0; j < uniforms.length; j++) {\n        this.uniforms.push(uniforms[j].clone());\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Returns a new uniforms group with copied values from this instance.\n   *\n   * @return {UniformsGroup} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n}\n\n/**\n * An instanced version of an interleaved buffer.\n *\n * @augments InterleavedBuffer\n */\nclass InstancedInterleavedBuffer extends InterleavedBuffer {\n  /**\n   * Constructs a new instanced interleaved buffer.\n   *\n   * @param {TypedArray} array - A typed array with a shared buffer storing attribute data.\n   * @param {number} stride - The number of typed-array elements per vertex.\n   * @param {number} [meshPerAttribute=1] - Defines how often a value of this interleaved buffer should be repeated.\n   */\n  constructor(array, stride) {\n    let meshPerAttribute = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    super(array, stride);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isInstancedInterleavedBuffer = true;\n\n    /**\n     * Defines how often a value of this buffer attribute should be repeated,\n     * see {@link InstancedBufferAttribute#meshPerAttribute}.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.meshPerAttribute = meshPerAttribute;\n  }\n  copy(source) {\n    super.copy(source);\n    this.meshPerAttribute = source.meshPerAttribute;\n    return this;\n  }\n  clone(data) {\n    const ib = super.clone(data);\n    ib.meshPerAttribute = this.meshPerAttribute;\n    return ib;\n  }\n  toJSON(data) {\n    const json = super.toJSON(data);\n    json.isInstancedInterleavedBuffer = true;\n    json.meshPerAttribute = this.meshPerAttribute;\n    return json;\n  }\n}\n\n/**\n * An alternative version of a buffer attribute with more control over the VBO.\n *\n * The renderer does not construct a VBO for this kind of attribute. Instead, it uses\n * whatever VBO is passed in constructor and can later be altered via the `buffer` property.\n *\n * The most common use case for this class is when some kind of GPGPU calculation interferes\n * or even produces the VBOs in question.\n *\n * Notice that this class can only be used with {@link WebGLRenderer}.\n */\nclass GLBufferAttribute {\n  /**\n   * Constructs a new GL buffer attribute.\n   *\n   * @param {WebGLBuffer} buffer - The native WebGL buffer.\n   * @param {number} type - The native data type (e.g. `gl.FLOAT`).\n   * @param {number} itemSize - The item size.\n   * @param {number} elementSize - The corresponding size (in bytes) for the given `type` parameter.\n   * @param {number} count - The expected number of vertices in VBO.\n   */\n  constructor(buffer, type, itemSize, elementSize, count) {\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isGLBufferAttribute = true;\n\n    /**\n     * The name of the buffer attribute.\n     *\n     * @type {string}\n     */\n    this.name = '';\n\n    /**\n     * The native WebGL buffer.\n     *\n     * @type {WebGLBuffer}\n     */\n    this.buffer = buffer;\n\n    /**\n     * The native data type.\n     *\n     * @type {number}\n     */\n    this.type = type;\n\n    /**\n     * The item size, see {@link BufferAttribute#itemSize}.\n     *\n     * @type {number}\n     */\n    this.itemSize = itemSize;\n\n    /**\n     * The corresponding size (in bytes) for the given `type` parameter.\n     *\n     * @type {number}\n     */\n    this.elementSize = elementSize;\n\n    /**\n     * The expected number of vertices in VBO.\n     *\n     * @type {number}\n     */\n    this.count = count;\n\n    /**\n     * A version number, incremented every time the `needsUpdate` is set to `true`.\n     *\n     * @type {number}\n     */\n    this.version = 0;\n  }\n\n  /**\n   * Flag to indicate that this attribute has changed and should be re-sent to\n   * the GPU. Set this to `true` when you modify the value of the array.\n   *\n   * @type {number}\n   * @default false\n   * @param {boolean} value\n   */\n  set needsUpdate(value) {\n    if (value === true) this.version++;\n  }\n\n  /**\n   * Sets the given native WebGL buffer.\n   *\n   * @param {WebGLBuffer} buffer - The buffer to set.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  setBuffer(buffer) {\n    this.buffer = buffer;\n    return this;\n  }\n\n  /**\n   * Sets the given native data type and element size.\n   *\n   * @param {number} type - The native data type (e.g. `gl.FLOAT`).\n   * @param {number} elementSize - The corresponding size (in bytes) for the given `type` parameter.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  setType(type, elementSize) {\n    this.type = type;\n    this.elementSize = elementSize;\n    return this;\n  }\n\n  /**\n   * Sets the item size.\n   *\n   * @param {number} itemSize - The item size.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  setItemSize(itemSize) {\n    this.itemSize = itemSize;\n    return this;\n  }\n\n  /**\n   * Sets the count (the expected number of vertices in VBO).\n   *\n   * @param {number} count - The count.\n   * @return {BufferAttribute} A reference to this instance.\n   */\n  setCount(count) {\n    this.count = count;\n    return this;\n  }\n}\nconst _matrix = /*@__PURE__*/new Matrix4();\n\n/**\n * This class is designed to assist with raycasting. Raycasting is used for\n * mouse picking (working out what objects in the 3d space the mouse is over)\n * amongst other things.\n */\nclass Raycaster {\n  /**\n   * Constructs a new raycaster.\n   *\n   * @param {Vector3} origin - The origin vector where the ray casts from.\n   * @param {Vector3} direction - The (normalized) direction vector that gives direction to the ray.\n   * @param {number} [near=0] - All results returned are further away than near. Near can't be negative.\n   * @param {number} [far=Infinity] - All results returned are closer than far. Far can't be lower than near.\n   */\n  constructor(origin, direction) {\n    let near = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let far = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Infinity;\n    /**\n     * The ray used for raycasting.\n     *\n     * @type {Ray}\n     */\n    this.ray = new Ray(origin, direction);\n\n    /**\n     * All results returned are further away than near. Near can't be negative.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.near = near;\n\n    /**\n     * All results returned are further away than near. Near can't be negative.\n     *\n     * @type {number}\n     * @default Infinity\n     */\n    this.far = far;\n\n    /**\n     * The camera to use when raycasting against view-dependent objects such as\n     * billboarded objects like sprites. This field can be set manually or\n     * is set when calling `setFromCamera()`.\n     *\n     * @type {?Camera}\n     * @default null\n     */\n    this.camera = null;\n\n    /**\n     * Allows to selectively ignore 3D objects when performing intersection tests.\n     * The following code example ensures that only 3D objects on layer `1` will be\n     * honored by raycaster.\n     * ```js\n     * raycaster.layers.set( 1 );\n     * object.layers.enable( 1 );\n     * ```\n     *\n     * @type {Layers}\n     */\n    this.layers = new Layers();\n\n    /**\n     * A parameter object that configures the raycasting. It has the structure:\n     *\n     * ```\n     * {\n     * \tMesh: {},\n     * \tLine: { threshold: 1 },\n     * \tLOD: {},\n     * \tPoints: { threshold: 1 },\n     * \tSprite: {}\n     * }\n     * ```\n     * Where `threshold` is the precision of the raycaster when intersecting objects, in world units.\n     *\n     * @type {Object}\n     */\n    this.params = {\n      Mesh: {},\n      Line: {\n        threshold: 1\n      },\n      LOD: {},\n      Points: {\n        threshold: 1\n      },\n      Sprite: {}\n    };\n  }\n\n  /**\n   * Updates the ray with a new origin and direction by copying the values from the arguments.\n   *\n   * @param {Vector3} origin - The origin vector where the ray casts from.\n   * @param {Vector3} direction - The (normalized) direction vector that gives direction to the ray.\n   */\n  set(origin, direction) {\n    // direction is assumed to be normalized (for accurate distance calculations)\n\n    this.ray.set(origin, direction);\n  }\n\n  /**\n   * Uses the given coordinates and camera to compute a new origin and direction for the internal ray.\n   *\n   * @param {Vector2} coords - 2D coordinates of the mouse, in normalized device coordinates (NDC).\n   * X and Y components should be between `-1` and `1`.\n   * @param {Camera} camera - The camera from which the ray should originate.\n   */\n  setFromCamera(coords, camera) {\n    if (camera.isPerspectiveCamera) {\n      this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n      this.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();\n      this.camera = camera;\n    } else if (camera.isOrthographicCamera) {\n      this.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); // set origin in plane of camera\n      this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n      this.camera = camera;\n    } else {\n      console.error('THREE.Raycaster: Unsupported camera type: ' + camera.type);\n    }\n  }\n\n  /**\n   * Uses the given WebXR controller to compute a new origin and direction for the internal ray.\n   *\n   * @param {WebXRController} controller - The controller to copy the position and direction from.\n   * @return {Raycaster} A reference to this raycaster.\n   */\n  setFromXRController(controller) {\n    _matrix.identity().extractRotation(controller.matrixWorld);\n    this.ray.origin.setFromMatrixPosition(controller.matrixWorld);\n    this.ray.direction.set(0, 0, -1).applyMatrix4(_matrix);\n    return this;\n  }\n\n  /**\n   * The intersection point of a raycaster intersection test.\n   * @typedef {Object} Raycaster~Intersection\n   * @property {number} distance - The distance from the ray's origin to the intersection point.\n   * @property {number} distanceToRay -  Some 3D objects e.g. {@link Points} provide the distance of the\n   * intersection to the nearest point on the ray. For other objects it will be `undefined`.\n   * @property {Vector3} point - The intersection point, in world coordinates.\n   * @property {Object} face - The face that has been intersected.\n   * @property {number} faceIndex - The face index.\n   * @property {Object3D} object - The 3D object that has been intersected.\n   * @property {Vector2} uv - U,V coordinates at point of intersection.\n   * @property {Vector2} uv1 - Second set of U,V coordinates at point of intersection.\n   * @property {Vector3} uv1 - Interpolated normal vector at point of intersection.\n   * @property {number} instanceId - The index number of the instance where the ray\n   * intersects the {@link InstancedMesh}.\n   */\n\n  /**\n   * Checks all intersection between the ray and the object with or without the\n   * descendants. Intersections are returned sorted by distance, closest first.\n   *\n   * `Raycaster` delegates to the `raycast()` method of the passed 3D object, when\n   * evaluating whether the ray intersects the object or not. This allows meshes to respond\n   * differently to ray casting than lines or points.\n   *\n   * Note that for meshes, faces must be pointed towards the origin of the ray in order\n   * to be detected; intersections of the ray passing through the back of a face will not\n   * be detected. To raycast against both faces of an object, you'll want to set  {@link Material#side}\n   * to `THREE.DoubleSide`.\n   *\n   * @param {Object3D} object - The 3D object to check for intersection with the ray.\n   * @param {boolean} [recursive=true] - If set to `true`, it also checks all descendants.\n   * Otherwise it only checks intersection with the object.\n   * @param {Array<Raycaster~Intersection>} [intersects=[]] The target array that holds the result of the method.\n   * @return {Array<Raycaster~Intersection>} An array holding the intersection points.\n   */\n  intersectObject(object) {\n    let recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let intersects = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    intersect(object, this, intersects, recursive);\n    intersects.sort(ascSort);\n    return intersects;\n  }\n\n  /**\n   * Checks all intersection between the ray and the objects with or without\n   * the descendants. Intersections are returned sorted by distance, closest first.\n   *\n   * @param {Array<Object3D>} objects - The 3D objects to check for intersection with the ray.\n   * @param {boolean} [recursive=true] - If set to `true`, it also checks all descendants.\n   * Otherwise it only checks intersection with the object.\n   * @param {Array<Raycaster~Intersection>} [intersects=[]] The target array that holds the result of the method.\n   * @return {Array<Raycaster~Intersection>} An array holding the intersection points.\n   */\n  intersectObjects(objects) {\n    let recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let intersects = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    for (let i = 0, l = objects.length; i < l; i++) {\n      intersect(objects[i], this, intersects, recursive);\n    }\n    intersects.sort(ascSort);\n    return intersects;\n  }\n}\nfunction ascSort(a, b) {\n  return a.distance - b.distance;\n}\nfunction intersect(object, raycaster, intersects, recursive) {\n  let propagate = true;\n  if (object.layers.test(raycaster.layers)) {\n    const result = object.raycast(raycaster, intersects);\n    if (result === false) propagate = false;\n  }\n  if (propagate === true && recursive === true) {\n    const children = object.children;\n    for (let i = 0, l = children.length; i < l; i++) {\n      intersect(children[i], raycaster, intersects, true);\n    }\n  }\n}\n\n/**\n * This class can be used to represent points in 3D space as\n * [Spherical coordinates]{@link https://en.wikipedia.org/wiki/Spherical_coordinate_system}.\n */\nclass Spherical {\n  /**\n   * Constructs a new spherical.\n   *\n   * @param {number} [radius=1] - The radius, or the Euclidean distance (straight-line distance) from the point to the origin.\n   * @param {number} [phi=0] - The polar angle in radians from the y (up) axis.\n   * @param {number} [theta=0] - The equator/azimuthal angle in radians around the y (up) axis.\n   */\n  constructor() {\n    let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let phi = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let theta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    /**\n     * The radius, or the Euclidean distance (straight-line distance) from the point to the origin.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.radius = radius;\n\n    /**\n     * The polar angle in radians from the y (up) axis.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.phi = phi;\n\n    /**\n     * The equator/azimuthal angle in radians around the y (up) axis.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.theta = theta;\n  }\n\n  /**\n   * Sets the spherical components by copying the given values.\n   *\n   * @param {number} radius - The radius.\n   * @param {number} phi - The polar angle.\n   * @param {number} theta - The azimuthal angle.\n   * @return {Spherical} A reference to this spherical.\n   */\n  set(radius, phi, theta) {\n    this.radius = radius;\n    this.phi = phi;\n    this.theta = theta;\n    return this;\n  }\n\n  /**\n   * Copies the values of the given spherical to this instance.\n   *\n   * @param {Spherical} other - The spherical to copy.\n   * @return {Spherical} A reference to this spherical.\n   */\n  copy(other) {\n    this.radius = other.radius;\n    this.phi = other.phi;\n    this.theta = other.theta;\n    return this;\n  }\n\n  /**\n   * Restricts the polar angle [page:.phi phi] to be between `0.000001` and pi -\n   * `0.000001`.\n   *\n   * @return {Spherical} A reference to this spherical.\n   */\n  makeSafe() {\n    const EPS = 0.000001;\n    this.phi = clamp(this.phi, EPS, Math.PI - EPS);\n    return this;\n  }\n\n  /**\n   * Sets the spherical components from the given vector which is assumed to hold\n   * Cartesian coordinates.\n   *\n   * @param {Vector3} v - The vector to set.\n   * @return {Spherical} A reference to this spherical.\n   */\n  setFromVector3(v) {\n    return this.setFromCartesianCoords(v.x, v.y, v.z);\n  }\n\n  /**\n   * Sets the spherical components from the given Cartesian coordinates.\n   *\n   * @param {number} x - The x value.\n   * @param {number} y - The x value.\n   * @param {number} z - The x value.\n   * @return {Spherical} A reference to this spherical.\n   */\n  setFromCartesianCoords(x, y, z) {\n    this.radius = Math.sqrt(x * x + y * y + z * z);\n    if (this.radius === 0) {\n      this.theta = 0;\n      this.phi = 0;\n    } else {\n      this.theta = Math.atan2(x, z);\n      this.phi = Math.acos(clamp(y / this.radius, -1, 1));\n    }\n    return this;\n  }\n\n  /**\n   * Returns a new spherical with copied values from this instance.\n   *\n   * @return {Spherical} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n}\n\n/**\n * This class can be used to represent points in 3D space as\n * [Cylindrical coordinates]{@link https://en.wikipedia.org/wiki/Cylindrical_coordinate_system}.\n */\nclass Cylindrical {\n  /**\n   * Constructs a new cylindrical.\n   *\n   * @param {number} [radius=1] - The distance from the origin to a point in the x-z plane.\n   * @param {number} [theta=0] - A counterclockwise angle in the x-z plane measured in radians from the positive z-axis.\n   * @param {number} [y=0] - The height above the x-z plane.\n   */\n  constructor() {\n    let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let theta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    /**\n     * The distance from the origin to a point in the x-z plane.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.radius = radius;\n\n    /**\n     * A counterclockwise angle in the x-z plane measured in radians from the positive z-axis.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.theta = theta;\n\n    /**\n     * The height above the x-z plane.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.y = y;\n  }\n\n  /**\n   * Sets the cylindrical components by copying the given values.\n   *\n   * @param {number} radius - The radius.\n   * @param {number} theta - The theta angle.\n   * @param {number} y - The height value.\n   * @return {Cylindrical} A reference to this cylindrical.\n   */\n  set(radius, theta, y) {\n    this.radius = radius;\n    this.theta = theta;\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * Copies the values of the given cylindrical to this instance.\n   *\n   * @param {Cylindrical} other - The cylindrical to copy.\n   * @return {Cylindrical} A reference to this cylindrical.\n   */\n  copy(other) {\n    this.radius = other.radius;\n    this.theta = other.theta;\n    this.y = other.y;\n    return this;\n  }\n\n  /**\n   * Sets the cylindrical components from the given vector which is assumed to hold\n   * Cartesian coordinates.\n   *\n   * @param {Vector3} v - The vector to set.\n   * @return {Cylindrical} A reference to this cylindrical.\n   */\n  setFromVector3(v) {\n    return this.setFromCartesianCoords(v.x, v.y, v.z);\n  }\n\n  /**\n   * Sets the cylindrical components from the given Cartesian coordinates.\n   *\n   * @param {number} x - The x value.\n   * @param {number} y - The x value.\n   * @param {number} z - The x value.\n   * @return {Cylindrical} A reference to this cylindrical.\n   */\n  setFromCartesianCoords(x, y, z) {\n    this.radius = Math.sqrt(x * x + z * z);\n    this.theta = Math.atan2(x, z);\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * Returns a new cylindrical with copied values from this instance.\n   *\n   * @return {Cylindrical} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n}\n\n/**\n * Represents a 2x2 matrix.\n *\n * A Note on Row-Major and Column-Major Ordering:\n *\n * The constructor and {@link Matrix2#set} method take arguments in\n * [row-major]{@link https://en.wikipedia.org/wiki/Row-_and_column-major_order#Column-major_order}\n * order, while internally they are stored in the {@link Matrix2#elements} array in column-major order.\n * This means that calling:\n * ```js\n * const m = new THREE.Matrix2();\n * m.set( 11, 12,\n *        21, 22 );\n * ```\n * will result in the elements array containing:\n * ```js\n * m.elements = [ 11, 21,\n *                12, 22 ];\n * ```\n * and internally all calculations are performed using column-major ordering.\n * However, as the actual ordering makes no difference mathematically and\n * most people are used to thinking about matrices in row-major order, the\n * three.js documentation shows matrices in row-major order. Just bear in\n * mind that if you are reading the source code, you'll have to take the\n * transpose of any matrices outlined here to make sense of the calculations.\n */\nclass Matrix2 {\n  /**\n   * Constructs a new 2x2 matrix. The arguments are supposed to be\n   * in row-major order. If no arguments are provided, the constructor\n   * initializes the matrix as an identity matrix.\n   *\n   * @param {number} [n11] - 1-1 matrix element.\n   * @param {number} [n12] - 1-2 matrix element.\n   * @param {number} [n21] - 2-1 matrix element.\n   * @param {number} [n22] - 2-2 matrix element.\n   */\n  constructor(n11, n12, n21, n22) {\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    Matrix2.prototype.isMatrix2 = true;\n\n    /**\n     * A column-major list of matrix values.\n     *\n     * @type {Array<number>}\n     */\n    this.elements = [1, 0, 0, 1];\n    if (n11 !== undefined) {\n      this.set(n11, n12, n21, n22);\n    }\n  }\n\n  /**\n   * Sets this matrix to the 2x2 identity matrix.\n   *\n   * @return {Matrix2} A reference to this matrix.\n   */\n  identity() {\n    this.set(1, 0, 0, 1);\n    return this;\n  }\n\n  /**\n   * Sets the elements of the matrix from the given array.\n   *\n   * @param {Array<number>} array - The matrix elements in column-major order.\n   * @param {number} [offset=0] - Index of the first element in the array.\n   * @return {Matrix2} A reference to this matrix.\n   */\n  fromArray(array) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    for (let i = 0; i < 4; i++) {\n      this.elements[i] = array[i + offset];\n    }\n    return this;\n  }\n\n  /**\n   * Sets the elements of the matrix.The arguments are supposed to be\n   * in row-major order.\n   *\n   * @param {number} n11 - 1-1 matrix element.\n   * @param {number} n12 - 1-2 matrix element.\n   * @param {number} n21 - 2-1 matrix element.\n   * @param {number} n22 - 2-2 matrix element.\n   * @return {Matrix2} A reference to this matrix.\n   */\n  set(n11, n12, n21, n22) {\n    const te = this.elements;\n    te[0] = n11;\n    te[2] = n12;\n    te[1] = n21;\n    te[3] = n22;\n    return this;\n  }\n}\nconst _vector$4 = /*@__PURE__*/new Vector2();\n\n/**\n * Represents an axis-aligned bounding box (AABB) in 2D space.\n */\nclass Box2 {\n  /**\n   * Constructs a new bounding box.\n   *\n   * @param {Vector2} [min=(Infinity,Infinity)] - A vector representing the lower boundary of the box.\n   * @param {Vector2} [max=(-Infinity,-Infinity)] - A vector representing the upper boundary of the box.\n   */\n  constructor() {\n    let min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector2(+Infinity, +Infinity);\n    let max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2(-Infinity, -Infinity);\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isBox2 = true;\n\n    /**\n     * The lower boundary of the box.\n     *\n     * @type {Vector2}\n     */\n    this.min = min;\n\n    /**\n     * The upper boundary of the box.\n     *\n     * @type {Vector2}\n     */\n    this.max = max;\n  }\n\n  /**\n   * Sets the lower and upper boundaries of this box.\n   * Please note that this method only copies the values from the given objects.\n   *\n   * @param {Vector2} min - The lower boundary of the box.\n   * @param {Vector2} max - The upper boundary of the box.\n   * @return {Box2} A reference to this bounding box.\n   */\n  set(min, max) {\n    this.min.copy(min);\n    this.max.copy(max);\n    return this;\n  }\n\n  /**\n   * Sets the upper and lower bounds of this box so it encloses the position data\n   * in the given array.\n   *\n   * @param {Array<Vector2>} points - An array holding 2D position data as instances of {@link Vector2}.\n   * @return {Box2} A reference to this bounding box.\n   */\n  setFromPoints(points) {\n    this.makeEmpty();\n    for (let i = 0, il = points.length; i < il; i++) {\n      this.expandByPoint(points[i]);\n    }\n    return this;\n  }\n\n  /**\n   * Centers this box on the given center vector and sets this box's width, height and\n   * depth to the given size values.\n   *\n   * @param {Vector2} center - The center of the box.\n   * @param {Vector2} size - The x and y dimensions of the box.\n   * @return {Box2} A reference to this bounding box.\n   */\n  setFromCenterAndSize(center, size) {\n    const halfSize = _vector$4.copy(size).multiplyScalar(0.5);\n    this.min.copy(center).sub(halfSize);\n    this.max.copy(center).add(halfSize);\n    return this;\n  }\n\n  /**\n   * Returns a new box with copied values from this instance.\n   *\n   * @return {Box2} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  /**\n   * Copies the values of the given box to this instance.\n   *\n   * @param {Box2} box - The box to copy.\n   * @return {Box2} A reference to this bounding box.\n   */\n  copy(box) {\n    this.min.copy(box.min);\n    this.max.copy(box.max);\n    return this;\n  }\n\n  /**\n   * Makes this box empty which means in encloses a zero space in 2D.\n   *\n   * @return {Box2} A reference to this bounding box.\n   */\n  makeEmpty() {\n    this.min.x = this.min.y = +Infinity;\n    this.max.x = this.max.y = -Infinity;\n    return this;\n  }\n\n  /**\n   * Returns true if this box includes zero points within its bounds.\n   * Note that a box with equal lower and upper bounds still includes one\n   * point, the one both bounds share.\n   *\n   * @return {boolean} Whether this box is empty or not.\n   */\n  isEmpty() {\n    // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n    return this.max.x < this.min.x || this.max.y < this.min.y;\n  }\n\n  /**\n   * Returns the center point of this box.\n   *\n   * @param {Vector2} target - The target vector that is used to store the method's result.\n   * @return {Vector2} The center point.\n   */\n  getCenter(target) {\n    return this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n  }\n\n  /**\n   * Returns the dimensions of this box.\n   *\n   * @param {Vector2} target - The target vector that is used to store the method's result.\n   * @return {Vector2} The size.\n   */\n  getSize(target) {\n    return this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);\n  }\n\n  /**\n   * Expands the boundaries of this box to include the given point.\n   *\n   * @param {Vector2} point - The point that should be included by the bounding box.\n   * @return {Box2} A reference to this bounding box.\n   */\n  expandByPoint(point) {\n    this.min.min(point);\n    this.max.max(point);\n    return this;\n  }\n\n  /**\n   * Expands this box equilaterally by the given vector. The width of this\n   * box will be expanded by the x component of the vector in both\n   * directions. The height of this box will be expanded by the y component of\n   * the vector in both directions.\n   *\n   * @param {Vector2} vector - The vector that should expand the bounding box.\n   * @return {Box2} A reference to this bounding box.\n   */\n  expandByVector(vector) {\n    this.min.sub(vector);\n    this.max.add(vector);\n    return this;\n  }\n\n  /**\n   * Expands each dimension of the box by the given scalar. If negative, the\n   * dimensions of the box will be contracted.\n   *\n   * @param {number} scalar - The scalar value that should expand the bounding box.\n   * @return {Box2} A reference to this bounding box.\n   */\n  expandByScalar(scalar) {\n    this.min.addScalar(-scalar);\n    this.max.addScalar(scalar);\n    return this;\n  }\n\n  /**\n   * Returns `true` if the given point lies within or on the boundaries of this box.\n   *\n   * @param {Vector2} point - The point to test.\n   * @return {boolean} Whether the bounding box contains the given point or not.\n   */\n  containsPoint(point) {\n    return point.x >= this.min.x && point.x <= this.max.x && point.y >= this.min.y && point.y <= this.max.y;\n  }\n\n  /**\n   * Returns `true` if this bounding box includes the entirety of the given bounding box.\n   * If this box and the given one are identical, this function also returns `true`.\n   *\n   * @param {Box2} box - The bounding box to test.\n   * @return {boolean} Whether the bounding box contains the given bounding box or not.\n   */\n  containsBox(box) {\n    return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;\n  }\n\n  /**\n   * Returns a point as a proportion of this box's width and height.\n   *\n   * @param {Vector2} point - A point in 2D space.\n   * @param {Vector2} target - The target vector that is used to store the method's result.\n   * @return {Vector2} A point as a proportion of this box's width and height.\n   */\n  getParameter(point, target) {\n    // This can potentially have a divide by zero if the box\n    // has a size dimension of 0.\n\n    return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));\n  }\n\n  /**\n   * Returns `true` if the given bounding box intersects with this bounding box.\n   *\n   * @param {Box2} box - The bounding box to test.\n   * @return {boolean} Whether the given bounding box intersects with this bounding box.\n   */\n  intersectsBox(box) {\n    // using 4 splitting planes to rule out intersections\n\n    return box.max.x >= this.min.x && box.min.x <= this.max.x && box.max.y >= this.min.y && box.min.y <= this.max.y;\n  }\n\n  /**\n   * Clamps the given point within the bounds of this box.\n   *\n   * @param {Vector2} point - The point to clamp.\n   * @param {Vector2} target - The target vector that is used to store the method's result.\n   * @return {Vector2} The clamped point.\n   */\n  clampPoint(point, target) {\n    return target.copy(point).clamp(this.min, this.max);\n  }\n\n  /**\n   * Returns the euclidean distance from any edge of this box to the specified point. If\n   * the given point lies inside of this box, the distance will be `0`.\n   *\n   * @param {Vector2} point - The point to compute the distance to.\n   * @return {number} The euclidean distance.\n   */\n  distanceToPoint(point) {\n    return this.clampPoint(point, _vector$4).distanceTo(point);\n  }\n\n  /**\n   * Computes the intersection of this bounding box and the given one, setting the upper\n   * bound of this box to the lesser of the two boxes' upper bounds and the\n   * lower bound of this box to the greater of the two boxes' lower bounds. If\n   * there's no overlap, makes this box empty.\n   *\n   * @param {Box2} box - The bounding box to intersect with.\n   * @return {Box2} A reference to this bounding box.\n   */\n  intersect(box) {\n    this.min.max(box.min);\n    this.max.min(box.max);\n    if (this.isEmpty()) this.makeEmpty();\n    return this;\n  }\n\n  /**\n   * Computes the union of this box and another and the given one, setting the upper\n   * bound of this box to the greater of the two boxes' upper bounds and the\n   * lower bound of this box to the lesser of the two boxes' lower bounds.\n   *\n   * @param {Box2} box - The bounding box that will be unioned with this instance.\n   * @return {Box2} A reference to this bounding box.\n   */\n  union(box) {\n    this.min.min(box.min);\n    this.max.max(box.max);\n    return this;\n  }\n\n  /**\n   * Adds the given offset to both the upper and lower bounds of this bounding box,\n   * effectively moving it in 2D space.\n   *\n   * @param {Vector2} offset - The offset that should be used to translate the bounding box.\n   * @return {Box2} A reference to this bounding box.\n   */\n  translate(offset) {\n    this.min.add(offset);\n    this.max.add(offset);\n    return this;\n  }\n\n  /**\n   * Returns `true` if this bounding box is equal with the given one.\n   *\n   * @param {Box2} box - The box to test for equality.\n   * @return {boolean} Whether this bounding box is equal with the given one.\n   */\n  equals(box) {\n    return box.min.equals(this.min) && box.max.equals(this.max);\n  }\n}\nconst _startP = /*@__PURE__*/new Vector3();\nconst _startEnd = /*@__PURE__*/new Vector3();\n\n/**\n * An analytical line segment in 3D space represented by a start and end point.\n */\nclass Line3 {\n  /**\n   * Constructs a new line segment.\n   *\n   * @param {Vector3} [start=(0,0,0)] - Start of the line segment.\n   * @param {Vector3} [end=(0,0,0)] - End of the line segment.\n   */\n  constructor() {\n    let start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n    let end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n    /**\n     * Start of the line segment.\n     *\n     * @type {Vector3}\n     */\n    this.start = start;\n\n    /**\n     * End of the line segment.\n     *\n     * @type {Vector3}\n     */\n    this.end = end;\n  }\n\n  /**\n   * Sets the start and end values by copying the given vectors.\n   *\n   * @param {Vector3} start - The start point.\n   * @param {Vector3} end - The end point.\n   * @return {Line3} A reference to this line segment.\n   */\n  set(start, end) {\n    this.start.copy(start);\n    this.end.copy(end);\n    return this;\n  }\n\n  /**\n   * Copies the values of the given line segment to this instance.\n   *\n   * @param {Line3} line - The line segment to copy.\n   * @return {Line3} A reference to this line segment.\n   */\n  copy(line) {\n    this.start.copy(line.start);\n    this.end.copy(line.end);\n    return this;\n  }\n\n  /**\n   * Returns the center of the line segment.\n   *\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} The center point.\n   */\n  getCenter(target) {\n    return target.addVectors(this.start, this.end).multiplyScalar(0.5);\n  }\n\n  /**\n   * Returns the delta vector of the line segment's start and end point.\n   *\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} The delta vector.\n   */\n  delta(target) {\n    return target.subVectors(this.end, this.start);\n  }\n\n  /**\n   * Returns the squared Euclidean distance between the line' start and end point.\n   *\n   * @return {number} The squared Euclidean distance.\n   */\n  distanceSq() {\n    return this.start.distanceToSquared(this.end);\n  }\n\n  /**\n   * Returns the Euclidean distance between the line' start and end point.\n   *\n   * @return {number} The Euclidean distance.\n   */\n  distance() {\n    return this.start.distanceTo(this.end);\n  }\n\n  /**\n   * Returns a vector at a certain position along the line segment.\n   *\n   * @param {number} t - A value between `[0,1]` to represent a position along the line segment.\n   * @param {Vector3} target - The target vector that is used to store the method's result.\n   * @return {Vector3} The delta vector.\n   */\n  at(t, target) {\n    return this.delta(target).multiplyScalar(t).add(this.start);\n  }\n\n  /**\n   * Returns a point parameter based on the closest point as projected on the line segment.\n   *\n   * @param {Vector3} point - The point for which to return a point parameter.\n   * @param {boolean} clampToLine - Whether to clamp the result to the range `[0,1]` or not.\n   * @return {number} The point parameter.\n   */\n  closestPointToPointParameter(point, clampToLine) {\n    _startP.subVectors(point, this.start);\n    _startEnd.subVectors(this.end, this.start);\n    const startEnd2 = _startEnd.dot(_startEnd);\n    const startEnd_startP = _startEnd.dot(_startP);\n    let t = startEnd_startP / startEnd2;\n    if (clampToLine) {\n      t = clamp(t, 0, 1);\n    }\n    return t;\n  }\n\n  /**\n   * Returns the closets point on the line for a given point.\n   *\n   * @param {Vector3} point - The point to compute the closest point on the line for.\n   * @param {boolean} clampToLine - Whether to clamp the result to the range `[0,1]` or not.\n   * @param {Vector3} target -  The target vector that is used to store the method's result.\n   * @return {Vector3} The closest point on the line.\n   */\n  closestPointToPoint(point, clampToLine, target) {\n    const t = this.closestPointToPointParameter(point, clampToLine);\n    return this.delta(target).multiplyScalar(t).add(this.start);\n  }\n\n  /**\n   * Applies a 4x4 transformation matrix to this line segment.\n   *\n   * @param {Matrix4} matrix - The transformation matrix.\n   * @return {Line3} A reference to this line segment.\n   */\n  applyMatrix4(matrix) {\n    this.start.applyMatrix4(matrix);\n    this.end.applyMatrix4(matrix);\n    return this;\n  }\n\n  /**\n   * Returns `true` if this line segment is equal with the given one.\n   *\n   * @param {Line3} line - The line segment to test for equality.\n   * @return {boolean} Whether this line segment is equal with the given one.\n   */\n  equals(line) {\n    return line.start.equals(this.start) && line.end.equals(this.end);\n  }\n\n  /**\n   * Returns a new line segment with copied values from this instance.\n   *\n   * @return {Line3} A clone of this instance.\n   */\n  clone() {\n    return new this.constructor().copy(this);\n  }\n}\nconst _vector$3 = /*@__PURE__*/new Vector3();\n\n/**\n * This displays a cone shaped helper object for a {@link SpotLight}.\n *\n * ```js\n * const spotLight = new THREE.SpotLight( 0xffffff );\n * spotLight.position.set( 10, 10, 10 );\n * scene.add( spotLight );\n *\n * const spotLightHelper = new THREE.SpotLightHelper( spotLight );\n * scene.add( spotLightHelper );\n * ```\n *\n * @augments Object3D\n */\nclass SpotLightHelper extends Object3D {\n  /**\n   * Constructs a new spot light helper.\n   *\n   * @param {HemisphereLight} light - The light to be visualized.\n   * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take\n   * the color of the light.\n   */\n  constructor(light, color) {\n    super();\n\n    /**\n     * The light being visualized.\n     *\n     * @type {SpotLight}\n     */\n    this.light = light;\n    this.matrixAutoUpdate = false;\n\n    /**\n     * The color parameter passed in the constructor.\n     * If not set, the helper will take the color of the light.\n     *\n     * @type {number|Color|string}\n     */\n    this.color = color;\n    this.type = 'SpotLightHelper';\n    const geometry = new BufferGeometry();\n    const positions = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];\n    for (let i = 0, j = 1, l = 32; i < l; i++, j++) {\n      const p1 = i / l * Math.PI * 2;\n      const p2 = j / l * Math.PI * 2;\n      positions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);\n    }\n    geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n    const material = new LineBasicMaterial({\n      fog: false,\n      toneMapped: false\n    });\n    this.cone = new LineSegments(geometry, material);\n    this.add(this.cone);\n    this.update();\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    this.cone.geometry.dispose();\n    this.cone.material.dispose();\n  }\n\n  /**\n   * Updates the helper to match the position and direction of the\n   * light being visualized.\n   */\n  update() {\n    this.light.updateWorldMatrix(true, false);\n    this.light.target.updateWorldMatrix(true, false);\n\n    // update the local matrix based on the parent and light target transforms\n    if (this.parent) {\n      this.parent.updateWorldMatrix(true);\n      this.matrix.copy(this.parent.matrixWorld).invert().multiply(this.light.matrixWorld);\n    } else {\n      this.matrix.copy(this.light.matrixWorld);\n    }\n    this.matrixWorld.copy(this.light.matrixWorld);\n    const coneLength = this.light.distance ? this.light.distance : 1000;\n    const coneWidth = coneLength * Math.tan(this.light.angle);\n    this.cone.scale.set(coneWidth, coneWidth, coneLength);\n    _vector$3.setFromMatrixPosition(this.light.target.matrixWorld);\n    this.cone.lookAt(_vector$3);\n    if (this.color !== undefined) {\n      this.cone.material.color.set(this.color);\n    } else {\n      this.cone.material.color.copy(this.light.color);\n    }\n  }\n}\nconst _vector$2 = /*@__PURE__*/new Vector3();\nconst _boneMatrix = /*@__PURE__*/new Matrix4();\nconst _matrixWorldInv = /*@__PURE__*/new Matrix4();\n\n/**\n * A helper object to assist with visualizing a {@link Skeleton}.\n *\n * ```js\n * const helper = new THREE.SkeletonHelper( skinnedMesh );\n * scene.add( helper );\n * ```\n *\n * @augments LineSegments\n */\nclass SkeletonHelper extends LineSegments {\n  /**\n   * Constructs a new hemisphere light helper.\n   *\n   * @param {Object3D} object -  Usually an instance of {@link SkinnedMesh}. However, any 3D object\n   * can be used if it represents a hierarchy of bones (see {@link Bone}).\n   */\n  constructor(object) {\n    const bones = getBoneList(object);\n    const geometry = new BufferGeometry();\n    const vertices = [];\n    const colors = [];\n    const color1 = new Color(0, 0, 1);\n    const color2 = new Color(0, 1, 0);\n    for (let i = 0; i < bones.length; i++) {\n      const bone = bones[i];\n      if (bone.parent && bone.parent.isBone) {\n        vertices.push(0, 0, 0);\n        vertices.push(0, 0, 0);\n        colors.push(color1.r, color1.g, color1.b);\n        colors.push(color2.r, color2.g, color2.b);\n      }\n    }\n    geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n    const material = new LineBasicMaterial({\n      vertexColors: true,\n      depthTest: false,\n      depthWrite: false,\n      toneMapped: false,\n      transparent: true\n    });\n    super(geometry, material);\n\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isSkeletonHelper = true;\n    this.type = 'SkeletonHelper';\n\n    /**\n     * The object being visualized.\n     *\n     * @type {Object3D}\n     */\n    this.root = object;\n\n    /**\n     * he list of bones that the helper visualizes.\n     *\n     * @type {Array<Bone>}\n     */\n    this.bones = bones;\n    this.matrix = object.matrixWorld;\n    this.matrixAutoUpdate = false;\n  }\n  updateMatrixWorld(force) {\n    const bones = this.bones;\n    const geometry = this.geometry;\n    const position = geometry.getAttribute('position');\n    _matrixWorldInv.copy(this.root.matrixWorld).invert();\n    for (let i = 0, j = 0; i < bones.length; i++) {\n      const bone = bones[i];\n      if (bone.parent && bone.parent.isBone) {\n        _boneMatrix.multiplyMatrices(_matrixWorldInv, bone.matrixWorld);\n        _vector$2.setFromMatrixPosition(_boneMatrix);\n        position.setXYZ(j, _vector$2.x, _vector$2.y, _vector$2.z);\n        _boneMatrix.multiplyMatrices(_matrixWorldInv, bone.parent.matrixWorld);\n        _vector$2.setFromMatrixPosition(_boneMatrix);\n        position.setXYZ(j + 1, _vector$2.x, _vector$2.y, _vector$2.z);\n        j += 2;\n      }\n    }\n    geometry.getAttribute('position').needsUpdate = true;\n    super.updateMatrixWorld(force);\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n  }\n}\nfunction getBoneList(object) {\n  const boneList = [];\n  if (object.isBone === true) {\n    boneList.push(object);\n  }\n  for (let i = 0; i < object.children.length; i++) {\n    boneList.push(...getBoneList(object.children[i]));\n  }\n  return boneList;\n}\n\n/**\n * This displays a helper object consisting of a spherical mesh for\n * visualizing an instance of {@link PointLight}.\n *\n * ```js\n * const pointLight = new THREE.PointLight( 0xff0000, 1, 100 );\n * pointLight.position.set( 10, 10, 10 );\n * scene.add( pointLight );\n *\n * const sphereSize = 1;\n * const pointLightHelper = new THREE.PointLightHelper( pointLight, sphereSize );\n * scene.add( pointLightHelper );\n * ```\n *\n * @augments Mesh\n */\nclass PointLightHelper extends Mesh {\n  /**\n   * Constructs a new point light helper.\n   *\n   * @param {PointLight} light - The light to be visualized.\n   * @param {number} [sphereSize=1] - The size of the sphere helper.\n   * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take\n   * the color of the light.\n   */\n  constructor(light, sphereSize, color) {\n    const geometry = new SphereGeometry(sphereSize, 4, 2);\n    const material = new MeshBasicMaterial({\n      wireframe: true,\n      fog: false,\n      toneMapped: false\n    });\n    super(geometry, material);\n\n    /**\n     * The light being visualized.\n     *\n     * @type {HemisphereLight}\n     */\n    this.light = light;\n\n    /**\n     * The color parameter passed in the constructor.\n     * If not set, the helper will take the color of the light.\n     *\n     * @type {number|Color|string}\n     */\n    this.color = color;\n    this.type = 'PointLightHelper';\n    this.matrix = this.light.matrixWorld;\n    this.matrixAutoUpdate = false;\n    this.update();\n\n    /*\n    // TODO: delete this comment?\n    const distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n    const distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n    this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n    this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n    const d = light.distance;\n    if ( d === 0.0 ) {\n    \tthis.lightDistance.visible = false;\n    } else {\n    \tthis.lightDistance.scale.set( d, d, d );\n    }\n    this.add( this.lightDistance );\n    */\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n  }\n\n  /**\n   * Updates the helper to match the position of the\n   * light being visualized.\n   */\n  update() {\n    this.light.updateWorldMatrix(true, false);\n    if (this.color !== undefined) {\n      this.material.color.set(this.color);\n    } else {\n      this.material.color.copy(this.light.color);\n    }\n\n    /*\n    const d = this.light.distance;\n    \tif ( d === 0.0 ) {\n    \t\tthis.lightDistance.visible = false;\n    \t} else {\n    \t\tthis.lightDistance.visible = true;\n    \tthis.lightDistance.scale.set( d, d, d );\n    \t}\n    */\n  }\n}\nconst _vector$1 = /*@__PURE__*/new Vector3();\nconst _color1 = /*@__PURE__*/new Color();\nconst _color2 = /*@__PURE__*/new Color();\n\n/**\n * Creates a visual aid consisting of a spherical mesh for a\n * given {@link HemisphereLight}.\n *\n * ```js\n * const light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 );\n * const helper = new THREE.HemisphereLightHelper( light, 5 );\n * scene.add( helper );\n * ```\n *\n * @augments Object3D\n */\nclass HemisphereLightHelper extends Object3D {\n  /**\n   * Constructs a new hemisphere light helper.\n   *\n   * @param {HemisphereLight} light - The light to be visualized.\n   * @param {number} [size=1] - The size of the mesh used to visualize the light.\n   * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take\n   * the color of the light.\n   */\n  constructor(light, size, color) {\n    super();\n\n    /**\n     * The light being visualized.\n     *\n     * @type {HemisphereLight}\n     */\n    this.light = light;\n    this.matrix = light.matrixWorld;\n    this.matrixAutoUpdate = false;\n\n    /**\n     * The color parameter passed in the constructor.\n     * If not set, the helper will take the color of the light.\n     *\n     * @type {number|Color|string}\n     */\n    this.color = color;\n    this.type = 'HemisphereLightHelper';\n    const geometry = new OctahedronGeometry(size);\n    geometry.rotateY(Math.PI * 0.5);\n    this.material = new MeshBasicMaterial({\n      wireframe: true,\n      fog: false,\n      toneMapped: false\n    });\n    if (this.color === undefined) this.material.vertexColors = true;\n    const position = geometry.getAttribute('position');\n    const colors = new Float32Array(position.count * 3);\n    geometry.setAttribute('color', new BufferAttribute(colors, 3));\n    this.add(new Mesh(geometry, this.material));\n    this.update();\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    this.children[0].geometry.dispose();\n    this.children[0].material.dispose();\n  }\n\n  /**\n   * Updates the helper to match the position and direction of the\n   * light being visualized.\n   */\n  update() {\n    const mesh = this.children[0];\n    if (this.color !== undefined) {\n      this.material.color.set(this.color);\n    } else {\n      const colors = mesh.geometry.getAttribute('color');\n      _color1.copy(this.light.color);\n      _color2.copy(this.light.groundColor);\n      for (let i = 0, l = colors.count; i < l; i++) {\n        const color = i < l / 2 ? _color1 : _color2;\n        colors.setXYZ(i, color.r, color.g, color.b);\n      }\n      colors.needsUpdate = true;\n    }\n    this.light.updateWorldMatrix(true, false);\n    mesh.lookAt(_vector$1.setFromMatrixPosition(this.light.matrixWorld).negate());\n  }\n}\n\n/**\n * The helper is an object to define grids. Grids are two-dimensional\n * arrays of lines.\n *\n * ```js\n * const size = 10;\n * const divisions = 10;\n *\n * const gridHelper = new THREE.GridHelper( size, divisions );\n * scene.add( gridHelper );\n * ```\n *\n * @augments LineSegments\n */\nclass GridHelper extends LineSegments {\n  /**\n   * Constructs a new grid helper.\n   *\n   * @param {number} [size=10] - The size of the grid.\n   * @param {number} [divisions=10] - The number of divisions across the grid.\n   * @param {number|Color|string} [color1=0x444444] - The color of the center line.\n   * @param {number|Color|string} [color2=0x888888] - The color of the lines of the grid.\n   */\n  constructor() {\n    let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    let divisions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n    let color1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0x444444;\n    let color2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0x888888;\n    color1 = new Color(color1);\n    color2 = new Color(color2);\n    const center = divisions / 2;\n    const step = size / divisions;\n    const halfSize = size / 2;\n    const vertices = [],\n      colors = [];\n    for (let i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {\n      vertices.push(-halfSize, 0, k, halfSize, 0, k);\n      vertices.push(k, 0, -halfSize, k, 0, halfSize);\n      const color = i === center ? color1 : color2;\n      color.toArray(colors, j);\n      j += 3;\n      color.toArray(colors, j);\n      j += 3;\n      color.toArray(colors, j);\n      j += 3;\n      color.toArray(colors, j);\n      j += 3;\n    }\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n    const material = new LineBasicMaterial({\n      vertexColors: true,\n      toneMapped: false\n    });\n    super(geometry, material);\n    this.type = 'GridHelper';\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n  }\n}\n\n/**\n * This helper is an object to define polar grids. Grids are\n * two-dimensional arrays of lines.\n *\n * ```js\n * const radius = 10;\n * const sectors = 16;\n * const rings = 8;\n * const divisions = 64;\n *\n * const helper = new THREE.PolarGridHelper( radius, sectors, rings, divisions );\n * scene.add( helper );\n * ```\n *\n * @augments LineSegments\n */\nclass PolarGridHelper extends LineSegments {\n  /**\n   * Constructs a new polar grid helper.\n   *\n   * @param {number} [radius=10] - The radius of the polar grid. This can be any positive number.\n   * @param {number} [sectors=16] - The number of sectors the grid will be divided into. This can be any positive integer.\n   * @param {number} [rings=16] - The number of rings. This can be any positive integer.\n   * @param {number} [divisions=64] - The number of line segments used for each circle. This can be any positive integer.\n   * @param {number|Color|string} [color1=0x444444] - The first color used for grid elements.\n   * @param {number|Color|string} [color2=0x888888] -  The second color used for grid elements.\n   */\n  constructor() {\n    let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    let sectors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\n    let rings = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 8;\n    let divisions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 64;\n    let color1 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0x444444;\n    let color2 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0x888888;\n    color1 = new Color(color1);\n    color2 = new Color(color2);\n    const vertices = [];\n    const colors = [];\n\n    // create the sectors\n\n    if (sectors > 1) {\n      for (let i = 0; i < sectors; i++) {\n        const v = i / sectors * (Math.PI * 2);\n        const x = Math.sin(v) * radius;\n        const z = Math.cos(v) * radius;\n        vertices.push(0, 0, 0);\n        vertices.push(x, 0, z);\n        const color = i & 1 ? color1 : color2;\n        colors.push(color.r, color.g, color.b);\n        colors.push(color.r, color.g, color.b);\n      }\n    }\n\n    // create the rings\n\n    for (let i = 0; i < rings; i++) {\n      const color = i & 1 ? color1 : color2;\n      const r = radius - radius / rings * i;\n      for (let j = 0; j < divisions; j++) {\n        // first vertex\n\n        let v = j / divisions * (Math.PI * 2);\n        let x = Math.sin(v) * r;\n        let z = Math.cos(v) * r;\n        vertices.push(x, 0, z);\n        colors.push(color.r, color.g, color.b);\n\n        // second vertex\n\n        v = (j + 1) / divisions * (Math.PI * 2);\n        x = Math.sin(v) * r;\n        z = Math.cos(v) * r;\n        vertices.push(x, 0, z);\n        colors.push(color.r, color.g, color.b);\n      }\n    }\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n    const material = new LineBasicMaterial({\n      vertexColors: true,\n      toneMapped: false\n    });\n    super(geometry, material);\n    this.type = 'PolarGridHelper';\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n  }\n}\nconst _v1 = /*@__PURE__*/new Vector3();\nconst _v2 = /*@__PURE__*/new Vector3();\nconst _v3 = /*@__PURE__*/new Vector3();\n\n/**\n * Helper object to assist with visualizing a {@link DirectionalLight}'s\n * effect on the scene. This consists of plane and a line representing the\n * light's position and direction.\n *\n * ```js\n * const light = new THREE.DirectionalLight( 0xFFFFFF );\n * scene.add( light );\n *\n * const helper = new THREE.DirectionalLightHelper( light, 5 );\n * scene.add( helper );\n * ```\n *\n * @augments Object3D\n */\nclass DirectionalLightHelper extends Object3D {\n  /**\n   * Constructs a new directional light helper.\n   *\n   * @param {DirectionalLight} light - The light to be visualized.\n   * @param {number} [size=1] - The dimensions of the plane.\n   * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take\n   * the color of the light.\n   */\n  constructor(light, size, color) {\n    super();\n\n    /**\n     * The light being visualized.\n     *\n     * @type {DirectionalLight}\n     */\n    this.light = light;\n    this.matrix = light.matrixWorld;\n    this.matrixAutoUpdate = false;\n\n    /**\n     * The color parameter passed in the constructor.\n     * If not set, the helper will take the color of the light.\n     *\n     * @type {number|Color|string}\n     */\n    this.color = color;\n    this.type = 'DirectionalLightHelper';\n    if (size === undefined) size = 1;\n    let geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute([-size, size, 0, size, size, 0, size, -size, 0, -size, -size, 0, -size, size, 0], 3));\n    const material = new LineBasicMaterial({\n      fog: false,\n      toneMapped: false\n    });\n\n    /**\n     * Contains the line showing the location of the directional light.\n     *\n     * @type {Line}\n     */\n    this.lightPlane = new Line(geometry, material);\n    this.add(this.lightPlane);\n    geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 0, 1], 3));\n\n    /**\n     * Represents the target line of the directional light.\n     *\n     * @type {Line}\n     */\n    this.targetLine = new Line(geometry, material);\n    this.add(this.targetLine);\n    this.update();\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    this.lightPlane.geometry.dispose();\n    this.lightPlane.material.dispose();\n    this.targetLine.geometry.dispose();\n    this.targetLine.material.dispose();\n  }\n\n  /**\n   * Updates the helper to match the position and direction of the\n   * light being visualized.\n   */\n  update() {\n    this.light.updateWorldMatrix(true, false);\n    this.light.target.updateWorldMatrix(true, false);\n    _v1.setFromMatrixPosition(this.light.matrixWorld);\n    _v2.setFromMatrixPosition(this.light.target.matrixWorld);\n    _v3.subVectors(_v2, _v1);\n    this.lightPlane.lookAt(_v2);\n    if (this.color !== undefined) {\n      this.lightPlane.material.color.set(this.color);\n      this.targetLine.material.color.set(this.color);\n    } else {\n      this.lightPlane.material.color.copy(this.light.color);\n      this.targetLine.material.color.copy(this.light.color);\n    }\n    this.targetLine.lookAt(_v2);\n    this.targetLine.scale.z = _v3.length();\n  }\n}\nconst _vector = /*@__PURE__*/new Vector3();\nconst _camera = /*@__PURE__*/new Camera();\n\n/**\n * This helps with visualizing what a camera contains in its frustum. It\n * visualizes the frustum of a camera using a line segments.\n *\n * Based on frustum visualization in [lightgl.js shadowmap example]{@link https://github.com/evanw/lightgl.js/blob/master/tests/shadowmap.html}.\n *\n * `CameraHelper` must be a child of the scene.\n *\n * ```js\n * const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n * const helper = new THREE.CameraHelper( camera );\n * scene.add( helper );\n * ```\n *\n * @augments LineSegments\n */\nclass CameraHelper extends LineSegments {\n  /**\n   * Constructs a new arrow helper.\n   *\n   * @param {Camera} camera - The camera to visualize.\n   */\n  constructor(camera) {\n    const geometry = new BufferGeometry();\n    const material = new LineBasicMaterial({\n      color: 0xffffff,\n      vertexColors: true,\n      toneMapped: false\n    });\n    const vertices = [];\n    const colors = [];\n    const pointMap = {};\n\n    // near\n\n    addLine('n1', 'n2');\n    addLine('n2', 'n4');\n    addLine('n4', 'n3');\n    addLine('n3', 'n1');\n\n    // far\n\n    addLine('f1', 'f2');\n    addLine('f2', 'f4');\n    addLine('f4', 'f3');\n    addLine('f3', 'f1');\n\n    // sides\n\n    addLine('n1', 'f1');\n    addLine('n2', 'f2');\n    addLine('n3', 'f3');\n    addLine('n4', 'f4');\n\n    // cone\n\n    addLine('p', 'n1');\n    addLine('p', 'n2');\n    addLine('p', 'n3');\n    addLine('p', 'n4');\n\n    // up\n\n    addLine('u1', 'u2');\n    addLine('u2', 'u3');\n    addLine('u3', 'u1');\n\n    // target\n\n    addLine('c', 't');\n    addLine('p', 'c');\n\n    // cross\n\n    addLine('cn1', 'cn2');\n    addLine('cn3', 'cn4');\n    addLine('cf1', 'cf2');\n    addLine('cf3', 'cf4');\n    function addLine(a, b) {\n      addPoint(a);\n      addPoint(b);\n    }\n    function addPoint(id) {\n      vertices.push(0, 0, 0);\n      colors.push(0, 0, 0);\n      if (pointMap[id] === undefined) {\n        pointMap[id] = [];\n      }\n      pointMap[id].push(vertices.length / 3 - 1);\n    }\n    geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n    super(geometry, material);\n    this.type = 'CameraHelper';\n\n    /**\n     * The camera being visualized.\n     *\n     * @type {Camera}\n     */\n    this.camera = camera;\n    if (this.camera.updateProjectionMatrix) this.camera.updateProjectionMatrix();\n    this.matrix = camera.matrixWorld;\n    this.matrixAutoUpdate = false;\n\n    /**\n     * This contains the points used to visualize the camera.\n     *\n     * @type {Object<string,Array<number>>}\n     */\n    this.pointMap = pointMap;\n    this.update();\n\n    // colors\n\n    const colorFrustum = new Color(0xffaa00);\n    const colorCone = new Color(0xff0000);\n    const colorUp = new Color(0x00aaff);\n    const colorTarget = new Color(0xffffff);\n    const colorCross = new Color(0x333333);\n    this.setColors(colorFrustum, colorCone, colorUp, colorTarget, colorCross);\n  }\n\n  /**\n   * Defines the colors of the helper.\n   *\n   * @param {Color} frustum - The frustum line color.\n   * @param {Color} cone - The cone line color.\n   * @param {Color} up - The up line color.\n   * @param {Color} target - The target line color.\n   * @param {Color} cross - The cross line color.\n   */\n  setColors(frustum, cone, up, target, cross) {\n    const geometry = this.geometry;\n    const colorAttribute = geometry.getAttribute('color');\n\n    // near\n\n    colorAttribute.setXYZ(0, frustum.r, frustum.g, frustum.b);\n    colorAttribute.setXYZ(1, frustum.r, frustum.g, frustum.b); // n1, n2\n    colorAttribute.setXYZ(2, frustum.r, frustum.g, frustum.b);\n    colorAttribute.setXYZ(3, frustum.r, frustum.g, frustum.b); // n2, n4\n    colorAttribute.setXYZ(4, frustum.r, frustum.g, frustum.b);\n    colorAttribute.setXYZ(5, frustum.r, frustum.g, frustum.b); // n4, n3\n    colorAttribute.setXYZ(6, frustum.r, frustum.g, frustum.b);\n    colorAttribute.setXYZ(7, frustum.r, frustum.g, frustum.b); // n3, n1\n\n    // far\n\n    colorAttribute.setXYZ(8, frustum.r, frustum.g, frustum.b);\n    colorAttribute.setXYZ(9, frustum.r, frustum.g, frustum.b); // f1, f2\n    colorAttribute.setXYZ(10, frustum.r, frustum.g, frustum.b);\n    colorAttribute.setXYZ(11, frustum.r, frustum.g, frustum.b); // f2, f4\n    colorAttribute.setXYZ(12, frustum.r, frustum.g, frustum.b);\n    colorAttribute.setXYZ(13, frustum.r, frustum.g, frustum.b); // f4, f3\n    colorAttribute.setXYZ(14, frustum.r, frustum.g, frustum.b);\n    colorAttribute.setXYZ(15, frustum.r, frustum.g, frustum.b); // f3, f1\n\n    // sides\n\n    colorAttribute.setXYZ(16, frustum.r, frustum.g, frustum.b);\n    colorAttribute.setXYZ(17, frustum.r, frustum.g, frustum.b); // n1, f1\n    colorAttribute.setXYZ(18, frustum.r, frustum.g, frustum.b);\n    colorAttribute.setXYZ(19, frustum.r, frustum.g, frustum.b); // n2, f2\n    colorAttribute.setXYZ(20, frustum.r, frustum.g, frustum.b);\n    colorAttribute.setXYZ(21, frustum.r, frustum.g, frustum.b); // n3, f3\n    colorAttribute.setXYZ(22, frustum.r, frustum.g, frustum.b);\n    colorAttribute.setXYZ(23, frustum.r, frustum.g, frustum.b); // n4, f4\n\n    // cone\n\n    colorAttribute.setXYZ(24, cone.r, cone.g, cone.b);\n    colorAttribute.setXYZ(25, cone.r, cone.g, cone.b); // p, n1\n    colorAttribute.setXYZ(26, cone.r, cone.g, cone.b);\n    colorAttribute.setXYZ(27, cone.r, cone.g, cone.b); // p, n2\n    colorAttribute.setXYZ(28, cone.r, cone.g, cone.b);\n    colorAttribute.setXYZ(29, cone.r, cone.g, cone.b); // p, n3\n    colorAttribute.setXYZ(30, cone.r, cone.g, cone.b);\n    colorAttribute.setXYZ(31, cone.r, cone.g, cone.b); // p, n4\n\n    // up\n\n    colorAttribute.setXYZ(32, up.r, up.g, up.b);\n    colorAttribute.setXYZ(33, up.r, up.g, up.b); // u1, u2\n    colorAttribute.setXYZ(34, up.r, up.g, up.b);\n    colorAttribute.setXYZ(35, up.r, up.g, up.b); // u2, u3\n    colorAttribute.setXYZ(36, up.r, up.g, up.b);\n    colorAttribute.setXYZ(37, up.r, up.g, up.b); // u3, u1\n\n    // target\n\n    colorAttribute.setXYZ(38, target.r, target.g, target.b);\n    colorAttribute.setXYZ(39, target.r, target.g, target.b); // c, t\n    colorAttribute.setXYZ(40, cross.r, cross.g, cross.b);\n    colorAttribute.setXYZ(41, cross.r, cross.g, cross.b); // p, c\n\n    // cross\n\n    colorAttribute.setXYZ(42, cross.r, cross.g, cross.b);\n    colorAttribute.setXYZ(43, cross.r, cross.g, cross.b); // cn1, cn2\n    colorAttribute.setXYZ(44, cross.r, cross.g, cross.b);\n    colorAttribute.setXYZ(45, cross.r, cross.g, cross.b); // cn3, cn4\n\n    colorAttribute.setXYZ(46, cross.r, cross.g, cross.b);\n    colorAttribute.setXYZ(47, cross.r, cross.g, cross.b); // cf1, cf2\n    colorAttribute.setXYZ(48, cross.r, cross.g, cross.b);\n    colorAttribute.setXYZ(49, cross.r, cross.g, cross.b); // cf3, cf4\n\n    colorAttribute.needsUpdate = true;\n  }\n\n  /**\n   * Updates the helper based on the projection matrix of the camera.\n   */\n  update() {\n    const geometry = this.geometry;\n    const pointMap = this.pointMap;\n    const w = 1,\n      h = 1;\n\n    // we need just camera projection matrix inverse\n    // world matrix must be identity\n\n    _camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse);\n\n    // Adjust z values based on coordinate system\n    const nearZ = this.camera.coordinateSystem === WebGLCoordinateSystem ? -1 : 0;\n\n    // center / target\n    setPoint('c', pointMap, geometry, _camera, 0, 0, nearZ);\n    setPoint('t', pointMap, geometry, _camera, 0, 0, 1);\n\n    // near\n\n    setPoint('n1', pointMap, geometry, _camera, -1, -1, nearZ);\n    setPoint('n2', pointMap, geometry, _camera, w, -1, nearZ);\n    setPoint('n3', pointMap, geometry, _camera, -1, h, nearZ);\n    setPoint('n4', pointMap, geometry, _camera, w, h, nearZ);\n\n    // far\n\n    setPoint('f1', pointMap, geometry, _camera, -1, -1, 1);\n    setPoint('f2', pointMap, geometry, _camera, w, -1, 1);\n    setPoint('f3', pointMap, geometry, _camera, -1, h, 1);\n    setPoint('f4', pointMap, geometry, _camera, w, h, 1);\n\n    // up\n\n    setPoint('u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, nearZ);\n    setPoint('u2', pointMap, geometry, _camera, -1 * 0.7, h * 1.1, nearZ);\n    setPoint('u3', pointMap, geometry, _camera, 0, h * 2, nearZ);\n\n    // cross\n\n    setPoint('cf1', pointMap, geometry, _camera, -1, 0, 1);\n    setPoint('cf2', pointMap, geometry, _camera, w, 0, 1);\n    setPoint('cf3', pointMap, geometry, _camera, 0, -1, 1);\n    setPoint('cf4', pointMap, geometry, _camera, 0, h, 1);\n    setPoint('cn1', pointMap, geometry, _camera, -1, 0, nearZ);\n    setPoint('cn2', pointMap, geometry, _camera, w, 0, nearZ);\n    setPoint('cn3', pointMap, geometry, _camera, 0, -1, nearZ);\n    setPoint('cn4', pointMap, geometry, _camera, 0, h, nearZ);\n    geometry.getAttribute('position').needsUpdate = true;\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n  }\n}\nfunction setPoint(point, pointMap, geometry, camera, x, y, z) {\n  _vector.set(x, y, z).unproject(camera);\n  const points = pointMap[point];\n  if (points !== undefined) {\n    const position = geometry.getAttribute('position');\n    for (let i = 0, l = points.length; i < l; i++) {\n      position.setXYZ(points[i], _vector.x, _vector.y, _vector.z);\n    }\n  }\n}\nconst _box = /*@__PURE__*/new Box3();\n\n/**\n * Helper object to graphically show the world-axis-aligned bounding box\n * around an object. The actual bounding box is handled with {@link Box3},\n * this is just a visual helper for debugging. It can be automatically\n * resized with {@link BoxHelper#update} when the object it's created from\n * is transformed. Note that the object must have a geometry for this to work,\n * so it won't work with sprites.\n *\n * ```js\n * const sphere = new THREE.SphereGeometry();\n * const object = new THREE.Mesh( sphere, new THREE.MeshBasicMaterial( 0xff0000 ) );\n * const box = new THREE.BoxHelper( object, 0xffff00 );\n * scene.add( box );\n * ```\n *\n * @augments LineSegments\n */\nclass BoxHelper extends LineSegments {\n  /**\n   * Constructs a new box helper.\n   *\n   * @param {Object3D} [object] - The 3D object to show the world-axis-aligned bounding box.\n   * @param {number|Color|string} [color=0xffff00] - The box's color.\n   */\n  constructor(object) {\n    let color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0xffff00;\n    const indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n    const positions = new Float32Array(8 * 3);\n    const geometry = new BufferGeometry();\n    geometry.setIndex(new BufferAttribute(indices, 1));\n    geometry.setAttribute('position', new BufferAttribute(positions, 3));\n    super(geometry, new LineBasicMaterial({\n      color: color,\n      toneMapped: false\n    }));\n\n    /**\n     * The 3D object being visualized.\n     *\n     * @type {Object3D}\n     */\n    this.object = object;\n    this.type = 'BoxHelper';\n    this.matrixAutoUpdate = false;\n    this.update();\n  }\n\n  /**\n   * Updates the helper's geometry to match the dimensions of the object,\n   * including any children.\n   */\n  update() {\n    if (this.object !== undefined) {\n      _box.setFromObject(this.object);\n    }\n    if (_box.isEmpty()) return;\n    const min = _box.min;\n    const max = _box.max;\n\n    /*\n    \t5____4\n    1/___0/|\n    | 6__|_7\n    2/___3/\n    \t0: max.x, max.y, max.z\n    1: min.x, max.y, max.z\n    2: min.x, min.y, max.z\n    3: max.x, min.y, max.z\n    4: max.x, max.y, min.z\n    5: min.x, max.y, min.z\n    6: min.x, min.y, min.z\n    7: max.x, min.y, min.z\n    */\n\n    const position = this.geometry.attributes.position;\n    const array = position.array;\n    array[0] = max.x;\n    array[1] = max.y;\n    array[2] = max.z;\n    array[3] = min.x;\n    array[4] = max.y;\n    array[5] = max.z;\n    array[6] = min.x;\n    array[7] = min.y;\n    array[8] = max.z;\n    array[9] = max.x;\n    array[10] = min.y;\n    array[11] = max.z;\n    array[12] = max.x;\n    array[13] = max.y;\n    array[14] = min.z;\n    array[15] = min.x;\n    array[16] = max.y;\n    array[17] = min.z;\n    array[18] = min.x;\n    array[19] = min.y;\n    array[20] = min.z;\n    array[21] = max.x;\n    array[22] = min.y;\n    array[23] = min.z;\n    position.needsUpdate = true;\n    this.geometry.computeBoundingSphere();\n  }\n\n  /**\n   * Updates the wireframe box for the passed object.\n   *\n   * @param {Object3D} object - The 3D object to create the helper for.\n   * @return {BoxHelper} A reference to this instance.\n   */\n  setFromObject(object) {\n    this.object = object;\n    this.update();\n    return this;\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.object = source.object;\n    return this;\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n  }\n}\n\n/**\n * A helper object to visualize an instance of {@link Box3}.\n *\n * ```js\n * const box = new THREE.Box3();\n * box.setFromCenterAndSize( new THREE.Vector3( 1, 1, 1 ), new THREE.Vector3( 2, 1, 3 ) );\n *\n * const helper = new THREE.Box3Helper( box, 0xffff00 );\n * scene.add( helper )\n * ```\n *\n * @augments LineSegments\n */\nclass Box3Helper extends LineSegments {\n  /**\n   * Constructs a new box3 helper.\n   *\n   * @param {Box3} box - The box to visualize.\n   * @param {number|Color|string} [color=0xffff00] - The box's color.\n   */\n  constructor(box) {\n    let color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0xffff00;\n    const indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n    const positions = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1];\n    const geometry = new BufferGeometry();\n    geometry.setIndex(new BufferAttribute(indices, 1));\n    geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n    super(geometry, new LineBasicMaterial({\n      color: color,\n      toneMapped: false\n    }));\n\n    /**\n     * The box being visualized.\n     *\n     * @type {Box3}\n     */\n    this.box = box;\n    this.type = 'Box3Helper';\n    this.geometry.computeBoundingSphere();\n  }\n  updateMatrixWorld(force) {\n    const box = this.box;\n    if (box.isEmpty()) return;\n    box.getCenter(this.position);\n    box.getSize(this.scale);\n    this.scale.multiplyScalar(0.5);\n    super.updateMatrixWorld(force);\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n  }\n}\n\n/**\n * A helper object to visualize an instance of {@link Plane}.\n *\n * ```js\n * const plane = new THREE.Plane( new THREE.Vector3( 1, 1, 0.2 ), 3 );\n * const helper = new THREE.PlaneHelper( plane, 1, 0xffff00 );\n * scene.add( helper );\n * ```\n *\n * @augments Line\n */\nclass PlaneHelper extends Line {\n  /**\n   * Constructs a new plane helper.\n   *\n   * @param {Plane} plane - The plane to be visualized.\n   * @param {number} [size=1] - The side length of plane helper.\n   * @param {number|Color|string} [hex=0xffff00] - The helper's color.\n   */\n  constructor(plane) {\n    let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let hex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0xffff00;\n    const color = hex;\n    const positions = [1, -1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0];\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n    geometry.computeBoundingSphere();\n    super(geometry, new LineBasicMaterial({\n      color: color,\n      toneMapped: false\n    }));\n    this.type = 'PlaneHelper';\n\n    /**\n     * The plane being visualized.\n     *\n     * @type {Plane}\n     */\n    this.plane = plane;\n\n    /**\n     * The side length of plane helper.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.size = size;\n    const positions2 = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0];\n    const geometry2 = new BufferGeometry();\n    geometry2.setAttribute('position', new Float32BufferAttribute(positions2, 3));\n    geometry2.computeBoundingSphere();\n    this.add(new Mesh(geometry2, new MeshBasicMaterial({\n      color: color,\n      opacity: 0.2,\n      transparent: true,\n      depthWrite: false,\n      toneMapped: false\n    })));\n  }\n  updateMatrixWorld(force) {\n    this.position.set(0, 0, 0);\n    this.scale.set(0.5 * this.size, 0.5 * this.size, 1);\n    this.lookAt(this.plane.normal);\n    this.translateZ(-this.plane.constant);\n    super.updateMatrixWorld(force);\n  }\n\n  /**\n   * Updates the helper to match the position and direction of the\n   * light being visualized.\n   */\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n    this.children[0].geometry.dispose();\n    this.children[0].material.dispose();\n  }\n}\nconst _axis = /*@__PURE__*/new Vector3();\nlet _lineGeometry, _coneGeometry;\n\n/**\n * An 3D arrow object for visualizing directions.\n *\n * ```js\n * const dir = new THREE.Vector3( 1, 2, 0 );\n *\n * //normalize the direction vector (convert to vector of length 1)\n * dir.normalize();\n *\n * const origin = new THREE.Vector3( 0, 0, 0 );\n * const length = 1;\n * const hex = 0xffff00;\n *\n * const arrowHelper = new THREE.ArrowHelper( dir, origin, length, hex );\n * scene.add( arrowHelper );\n * ```\n *\n * @augments Object3D\n */\nclass ArrowHelper extends Object3D {\n  /**\n   * Constructs a new arrow helper.\n   *\n   * @param {Vector3} [dir=(0, 0, 1)] - The (normalized) direction vector.\n   * @param {Vector3} [origin=(0, 0, 0)] - Point at which the arrow starts.\n   * @param {number} [length=1] - Length of the arrow in world units.\n   * @param {(number|Color|string)} [color=0xffff00] - Color of the arrow.\n   * @param {number} [headLength=length*0.2] - The length of the head of the arrow.\n   * @param {number} [headWidth=headLength*0.2] - The width of the head of the arrow.\n   */\n  constructor() {\n    let dir = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3(0, 0, 1);\n    let origin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3(0, 0, 0);\n    let length = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let color = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0xffff00;\n    let headLength = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : length * 0.2;\n    let headWidth = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : headLength * 0.2;\n    super();\n    this.type = 'ArrowHelper';\n    if (_lineGeometry === undefined) {\n      _lineGeometry = new BufferGeometry();\n      _lineGeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3));\n      _coneGeometry = new ConeGeometry(0.5, 1, 5, 1);\n      _coneGeometry.translate(0, -0.5, 0);\n    }\n    this.position.copy(origin);\n\n    /**\n     * The line part of the arrow helper.\n     *\n     * @type {Line}\n     */\n    this.line = new Line(_lineGeometry, new LineBasicMaterial({\n      color: color,\n      toneMapped: false\n    }));\n    this.line.matrixAutoUpdate = false;\n    this.add(this.line);\n\n    /**\n     * The cone part of the arrow helper.\n     *\n     * @type {Mesh}\n     */\n    this.cone = new Mesh(_coneGeometry, new MeshBasicMaterial({\n      color: color,\n      toneMapped: false\n    }));\n    this.cone.matrixAutoUpdate = false;\n    this.add(this.cone);\n    this.setDirection(dir);\n    this.setLength(length, headLength, headWidth);\n  }\n\n  /**\n   * Sets the direction of the helper.\n   *\n   * @param {Vector3} dir - The normalized direction vector.\n   */\n  setDirection(dir) {\n    // dir is assumed to be normalized\n\n    if (dir.y > 0.99999) {\n      this.quaternion.set(0, 0, 0, 1);\n    } else if (dir.y < -0.99999) {\n      this.quaternion.set(1, 0, 0, 0);\n    } else {\n      _axis.set(dir.z, 0, -dir.x).normalize();\n      const radians = Math.acos(dir.y);\n      this.quaternion.setFromAxisAngle(_axis, radians);\n    }\n  }\n\n  /**\n   * Sets the length of the helper.\n   *\n   * @param {number} length - Length of the arrow in world units.\n   * @param {number} [headLength=length*0.2] - The length of the head of the arrow.\n   * @param {number} [headWidth=headLength*0.2] - The width of the head of the arrow.\n   */\n  setLength(length) {\n    let headLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : length * 0.2;\n    let headWidth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : headLength * 0.2;\n    this.line.scale.set(1, Math.max(0.0001, length - headLength), 1); // see #17458\n    this.line.updateMatrix();\n    this.cone.scale.set(headWidth, headLength, headWidth);\n    this.cone.position.y = length;\n    this.cone.updateMatrix();\n  }\n\n  /**\n   * Sets the color of the helper.\n   *\n   * @param {number|Color|string} color - The color to set.\n   */\n  setColor(color) {\n    this.line.material.color.set(color);\n    this.cone.material.color.set(color);\n  }\n  copy(source) {\n    super.copy(source, false);\n    this.line.copy(source.line);\n    this.cone.copy(source.cone);\n    return this;\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    this.line.geometry.dispose();\n    this.line.material.dispose();\n    this.cone.geometry.dispose();\n    this.cone.material.dispose();\n  }\n}\n\n/**\n * An axis object to visualize the 3 axes in a simple way.\n * The X axis is red. The Y axis is green. The Z axis is blue.\n *\n * ```js\n * const axesHelper = new THREE.AxesHelper( 5 );\n * scene.add( axesHelper );\n * ```\n *\n * @augments LineSegments\n */\nclass AxesHelper extends LineSegments {\n  /**\n   * Constructs a new axes helper.\n   *\n   * @param {number} [size=1] - Size of the lines representing the axes.\n   */\n  constructor() {\n    let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    const vertices = [0, 0, 0, size, 0, 0, 0, 0, 0, 0, size, 0, 0, 0, 0, 0, 0, size];\n    const colors = [1, 0, 0, 1, 0.6, 0, 0, 1, 0, 0.6, 1, 0, 0, 0, 1, 0, 0.6, 1];\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n    const material = new LineBasicMaterial({\n      vertexColors: true,\n      toneMapped: false\n    });\n    super(geometry, material);\n    this.type = 'AxesHelper';\n  }\n\n  /**\n   * Defines the colors of the axes helper.\n   *\n   * @param {number|Color|string} xAxisColor - The color for the x axis.\n   * @param {number|Color|string} yAxisColor - The color for the y axis.\n   * @param {number|Color|string} zAxisColor - The color for the z axis.\n   * @return {AxesHelper} A reference to this axes helper.\n   */\n  setColors(xAxisColor, yAxisColor, zAxisColor) {\n    const color = new Color();\n    const array = this.geometry.attributes.color.array;\n    color.set(xAxisColor);\n    color.toArray(array, 0);\n    color.toArray(array, 3);\n    color.set(yAxisColor);\n    color.toArray(array, 6);\n    color.toArray(array, 9);\n    color.set(zAxisColor);\n    color.toArray(array, 12);\n    color.toArray(array, 15);\n    this.geometry.attributes.color.needsUpdate = true;\n    return this;\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n  }\n}\n\n/**\n * This class is used to convert a series of paths to an array of\n * shapes. It is specifically used in context of fonts and SVG.\n */\nclass ShapePath {\n  /**\n   * Constructs a new shape path.\n   */\n  constructor() {\n    this.type = 'ShapePath';\n\n    /**\n     * The color of the shape.\n     *\n     * @type {Color}\n     */\n    this.color = new Color();\n\n    /**\n     * The paths that have been generated for this shape.\n     *\n     * @type {Array<Path>}\n     * @default null\n     */\n    this.subPaths = [];\n\n    /**\n     * The current path that is being generated.\n     *\n     * @type {?Path}\n     * @default null\n     */\n    this.currentPath = null;\n  }\n\n  /**\n   * Creates a new path and moves it current point to the given one.\n   *\n   * @param {number} x - The x coordinate.\n   * @param {number} y - The y coordinate.\n   * @return {ShapePath} A reference to this shape path.\n   */\n  moveTo(x, y) {\n    this.currentPath = new Path();\n    this.subPaths.push(this.currentPath);\n    this.currentPath.moveTo(x, y);\n    return this;\n  }\n\n  /**\n   * Adds an instance of {@link LineCurve} to the path by connecting\n   * the current point with the given one.\n   *\n   * @param {number} x - The x coordinate of the end point.\n   * @param {number} y - The y coordinate of the end point.\n   * @return {ShapePath} A reference to this shape path.\n   */\n  lineTo(x, y) {\n    this.currentPath.lineTo(x, y);\n    return this;\n  }\n\n  /**\n   * Adds an instance of {@link QuadraticBezierCurve} to the path by connecting\n   * the current point with the given one.\n   *\n   * @param {number} aCPx - The x coordinate of the control point.\n   * @param {number} aCPy - The y coordinate of the control point.\n   * @param {number} aX - The x coordinate of the end point.\n   * @param {number} aY - The y coordinate of the end point.\n   * @return {ShapePath} A reference to this shape path.\n   */\n  quadraticCurveTo(aCPx, aCPy, aX, aY) {\n    this.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);\n    return this;\n  }\n\n  /**\n   * Adds an instance of {@link CubicBezierCurve} to the path by connecting\n   * the current point with the given one.\n   *\n   * @param {number} aCP1x - The x coordinate of the first control point.\n   * @param {number} aCP1y - The y coordinate of the first control point.\n   * @param {number} aCP2x - The x coordinate of the second control point.\n   * @param {number} aCP2y - The y coordinate of the second control point.\n   * @param {number} aX - The x coordinate of the end point.\n   * @param {number} aY - The y coordinate of the end point.\n   * @return {ShapePath} A reference to this shape path.\n   */\n  bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n    this.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);\n    return this;\n  }\n\n  /**\n   * Adds an instance of {@link SplineCurve} to the path by connecting\n   * the current point with the given list of points.\n   *\n   * @param {Array<Vector2>} pts - An array of points in 2D space.\n   * @return {ShapePath} A reference to this shape path.\n   */\n  splineThru(pts) {\n    this.currentPath.splineThru(pts);\n    return this;\n  }\n\n  /**\n   * Converts the paths into an array of shapes.\n   *\n   * @param {boolean} isCCW - By default solid shapes are  defined clockwise (CW) and holes are defined counterclockwise (CCW).\n   * If this flag is set to `true`, then those are flipped.\n   * @return {Array<Shape>} An array of shapes.\n   */\n  toShapes(isCCW) {\n    function toShapesNoHoles(inSubpaths) {\n      const shapes = [];\n      for (let i = 0, l = inSubpaths.length; i < l; i++) {\n        const tmpPath = inSubpaths[i];\n        const tmpShape = new Shape();\n        tmpShape.curves = tmpPath.curves;\n        shapes.push(tmpShape);\n      }\n      return shapes;\n    }\n    function isPointInsidePolygon(inPt, inPolygon) {\n      const polyLen = inPolygon.length;\n\n      // inPt on polygon contour => immediate success    or\n      // toggling of inside/outside at every single! intersection point of an edge\n      //  with the horizontal line through inPt, left of inPt\n      //  not counting lowerY endpoints of edges and whole edges on that line\n      let inside = false;\n      for (let p = polyLen - 1, q = 0; q < polyLen; p = q++) {\n        let edgeLowPt = inPolygon[p];\n        let edgeHighPt = inPolygon[q];\n        let edgeDx = edgeHighPt.x - edgeLowPt.x;\n        let edgeDy = edgeHighPt.y - edgeLowPt.y;\n        if (Math.abs(edgeDy) > Number.EPSILON) {\n          // not parallel\n          if (edgeDy < 0) {\n            edgeLowPt = inPolygon[q];\n            edgeDx = -edgeDx;\n            edgeHighPt = inPolygon[p];\n            edgeDy = -edgeDy;\n          }\n          if (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;\n          if (inPt.y === edgeLowPt.y) {\n            if (inPt.x === edgeLowPt.x) return true; // inPt is on contour ?\n            // continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n          } else {\n            const perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);\n            if (perpEdge === 0) return true; // inPt is on contour ?\n            if (perpEdge < 0) continue;\n            inside = !inside; // true intersection left of inPt\n          }\n        } else {\n          // parallel or collinear\n          if (inPt.y !== edgeLowPt.y) continue; // parallel\n          // edge lies on the same horizontal line as inPt\n          if (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x) return true; // inPt: Point on contour !\n          // continue;\n        }\n      }\n      return inside;\n    }\n    const isClockWise = ShapeUtils.isClockWise;\n    const subPaths = this.subPaths;\n    if (subPaths.length === 0) return [];\n    let solid, tmpPath, tmpShape;\n    const shapes = [];\n    if (subPaths.length === 1) {\n      tmpPath = subPaths[0];\n      tmpShape = new Shape();\n      tmpShape.curves = tmpPath.curves;\n      shapes.push(tmpShape);\n      return shapes;\n    }\n    let holesFirst = !isClockWise(subPaths[0].getPoints());\n    holesFirst = isCCW ? !holesFirst : holesFirst;\n\n    // console.log(\"Holes first\", holesFirst);\n\n    const betterShapeHoles = [];\n    const newShapes = [];\n    let newShapeHoles = [];\n    let mainIdx = 0;\n    let tmpPoints;\n    newShapes[mainIdx] = undefined;\n    newShapeHoles[mainIdx] = [];\n    for (let i = 0, l = subPaths.length; i < l; i++) {\n      tmpPath = subPaths[i];\n      tmpPoints = tmpPath.getPoints();\n      solid = isClockWise(tmpPoints);\n      solid = isCCW ? !solid : solid;\n      if (solid) {\n        if (!holesFirst && newShapes[mainIdx]) mainIdx++;\n        newShapes[mainIdx] = {\n          s: new Shape(),\n          p: tmpPoints\n        };\n        newShapes[mainIdx].s.curves = tmpPath.curves;\n        if (holesFirst) mainIdx++;\n        newShapeHoles[mainIdx] = [];\n\n        //console.log('cw', i);\n      } else {\n        newShapeHoles[mainIdx].push({\n          h: tmpPath,\n          p: tmpPoints[0]\n        });\n\n        //console.log('ccw', i);\n      }\n    }\n\n    // only Holes? -> probably all Shapes with wrong orientation\n    if (!newShapes[0]) return toShapesNoHoles(subPaths);\n    if (newShapes.length > 1) {\n      let ambiguous = false;\n      let toChange = 0;\n      for (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n        betterShapeHoles[sIdx] = [];\n      }\n      for (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n        const sho = newShapeHoles[sIdx];\n        for (let hIdx = 0; hIdx < sho.length; hIdx++) {\n          const ho = sho[hIdx];\n          let hole_unassigned = true;\n          for (let s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {\n            if (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {\n              if (sIdx !== s2Idx) toChange++;\n              if (hole_unassigned) {\n                hole_unassigned = false;\n                betterShapeHoles[s2Idx].push(ho);\n              } else {\n                ambiguous = true;\n              }\n            }\n          }\n          if (hole_unassigned) {\n            betterShapeHoles[sIdx].push(ho);\n          }\n        }\n      }\n      if (toChange > 0 && ambiguous === false) {\n        newShapeHoles = betterShapeHoles;\n      }\n    }\n    let tmpHoles;\n    for (let i = 0, il = newShapes.length; i < il; i++) {\n      tmpShape = newShapes[i].s;\n      shapes.push(tmpShape);\n      tmpHoles = newShapeHoles[i];\n      for (let j = 0, jl = tmpHoles.length; j < jl; j++) {\n        tmpShape.holes.push(tmpHoles[j].h);\n      }\n    }\n\n    //console.log(\"shape\", shapes);\n\n    return shapes;\n  }\n}\n\n/**\n * Abstract base class for controls.\n *\n * @abstract\n * @augments EventDispatcher\n */\nclass Controls extends EventDispatcher {\n  /**\n   * Constructs a new controls instance.\n   *\n   * @param {Object3D} object - The object that is managed by the controls.\n   * @param {?HTMLDOMElement} domElement - The HTML element used for event listeners.\n   */\n  constructor(object) {\n    let domElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    super();\n\n    /**\n     * The object that is managed by the controls.\n     *\n     * @type {Object3D}\n     */\n    this.object = object;\n\n    /**\n     * The HTML element used for event listeners.\n     *\n     * @type {?HTMLDOMElement}\n     * @default null\n     */\n    this.domElement = domElement;\n\n    /**\n     * Whether the controls responds to user input or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.enabled = true;\n\n    /**\n     * The internal state of the controls.\n     *\n     * @type {number}\n     * @default -1\n     */\n    this.state = -1;\n\n    /**\n     * This object defines the keyboard input of the controls.\n     *\n     * @type {Object}\n     */\n    this.keys = {};\n\n    /**\n     * This object defines what type of actions are assigned to the available mouse buttons.\n     * It depends on the control implementation what kind of mouse buttons and actions are supported.\n     *\n     * @type {{LEFT: ?number, MIDDLE: ?number, RIGHT: ?number}}\n     */\n    this.mouseButtons = {\n      LEFT: null,\n      MIDDLE: null,\n      RIGHT: null\n    };\n\n    /**\n     * This object defines what type of actions are assigned to what kind of touch interaction.\n     * It depends on the control implementation what kind of touch interaction and actions are supported.\n     *\n     * @type {{ONE: ?number, TWO: ?number}}\n     */\n    this.touches = {\n      ONE: null,\n      TWO: null\n    };\n  }\n\n  /**\n   * Connects the controls to the DOM. This method has so called \"side effects\" since\n   * it adds the module's event listeners to the DOM.\n   *\n   * @param {HTMLDOMElement} element - The DOM element to connect to.\n   */\n  connect(element) {\n    if (element === undefined) {\n      console.warn('THREE.Controls: connect() now requires an element.'); // @deprecated, the warning can be removed with r185\n      return;\n    }\n    if (this.domElement !== null) this.disconnect();\n    this.domElement = element;\n  }\n\n  /**\n   * Disconnects the controls from the DOM.\n   */\n  disconnect() {}\n\n  /**\n   * Call this method if you no longer want use to the controls. It frees all internal\n   * resources and removes all event listeners.\n   */\n  dispose() {}\n\n  /**\n   * Controls should implement this method if they have to update their internal state\n   * per simulation step.\n   *\n   * @param {number} [delta] - The time delta in seconds.\n   */\n  update(/* delta */) {}\n}\n\n/**\n * Scales the texture as large as possible within its surface without cropping\n * or stretching the texture. The method preserves the original aspect ratio of\n * the texture. Akin to CSS `object-fit: contain`\n *\n * @param {Texture} texture - The texture.\n * @param {number} aspect - The texture's aspect ratio.\n * @return {Texture} The updated texture.\n */\nfunction contain(texture, aspect) {\n  const imageAspect = texture.image && texture.image.width ? texture.image.width / texture.image.height : 1;\n  if (imageAspect > aspect) {\n    texture.repeat.x = 1;\n    texture.repeat.y = imageAspect / aspect;\n    texture.offset.x = 0;\n    texture.offset.y = (1 - texture.repeat.y) / 2;\n  } else {\n    texture.repeat.x = aspect / imageAspect;\n    texture.repeat.y = 1;\n    texture.offset.x = (1 - texture.repeat.x) / 2;\n    texture.offset.y = 0;\n  }\n  return texture;\n}\n\n/**\n * Scales the texture to the smallest possible size to fill the surface, leaving\n * no empty space. The method preserves the original aspect ratio of the texture.\n * Akin to CSS `object-fit: cover`.\n *\n * @param {Texture} texture - The texture.\n * @param {number} aspect - The texture's aspect ratio.\n * @return {Texture} The updated texture.\n */\nfunction cover(texture, aspect) {\n  const imageAspect = texture.image && texture.image.width ? texture.image.width / texture.image.height : 1;\n  if (imageAspect > aspect) {\n    texture.repeat.x = aspect / imageAspect;\n    texture.repeat.y = 1;\n    texture.offset.x = (1 - texture.repeat.x) / 2;\n    texture.offset.y = 0;\n  } else {\n    texture.repeat.x = 1;\n    texture.repeat.y = imageAspect / aspect;\n    texture.offset.x = 0;\n    texture.offset.y = (1 - texture.repeat.y) / 2;\n  }\n  return texture;\n}\n\n/**\n * Configures the texture to the default transformation. Akin to CSS `object-fit: fill`.\n *\n * @param {Texture} texture - The texture.\n * @return {Texture} The updated texture.\n */\nfunction fill(texture) {\n  texture.repeat.x = 1;\n  texture.repeat.y = 1;\n  texture.offset.x = 0;\n  texture.offset.y = 0;\n  return texture;\n}\n\n/**\n * Determines how many bytes must be used to represent the texture.\n *\n * @param {number} width - The width of the texture.\n * @param {number} height - The height of the texture.\n * @param {number} format - The texture's format.\n * @param {number} type - The texture's type.\n * @return {number} The byte length.\n */\nfunction getByteLength(width, height, format, type) {\n  const typeByteLength = getTextureTypeByteLength(type);\n  switch (format) {\n    // https://registry.khronos.org/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml\n    case AlphaFormat:\n      return width * height;\n    case RedFormat:\n      return width * height / typeByteLength.components * typeByteLength.byteLength;\n    case RedIntegerFormat:\n      return width * height / typeByteLength.components * typeByteLength.byteLength;\n    case RGFormat:\n      return width * height * 2 / typeByteLength.components * typeByteLength.byteLength;\n    case RGIntegerFormat:\n      return width * height * 2 / typeByteLength.components * typeByteLength.byteLength;\n    case RGBFormat:\n      return width * height * 3 / typeByteLength.components * typeByteLength.byteLength;\n    case RGBAFormat:\n      return width * height * 4 / typeByteLength.components * typeByteLength.byteLength;\n    case RGBAIntegerFormat:\n      return width * height * 4 / typeByteLength.components * typeByteLength.byteLength;\n\n    // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_s3tc_srgb/\n    case RGB_S3TC_DXT1_Format:\n    case RGBA_S3TC_DXT1_Format:\n      return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 8;\n    case RGBA_S3TC_DXT3_Format:\n    case RGBA_S3TC_DXT5_Format:\n      return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;\n\n    // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_pvrtc/\n    case RGB_PVRTC_2BPPV1_Format:\n    case RGBA_PVRTC_2BPPV1_Format:\n      return Math.max(width, 16) * Math.max(height, 8) / 4;\n    case RGB_PVRTC_4BPPV1_Format:\n    case RGBA_PVRTC_4BPPV1_Format:\n      return Math.max(width, 8) * Math.max(height, 8) / 2;\n\n    // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_etc/\n    case RGB_ETC1_Format:\n    case RGB_ETC2_Format:\n      return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 8;\n    case RGBA_ETC2_EAC_Format:\n      return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;\n\n    // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_astc/\n    case RGBA_ASTC_4x4_Format:\n      return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;\n    case RGBA_ASTC_5x4_Format:\n      return Math.floor((width + 4) / 5) * Math.floor((height + 3) / 4) * 16;\n    case RGBA_ASTC_5x5_Format:\n      return Math.floor((width + 4) / 5) * Math.floor((height + 4) / 5) * 16;\n    case RGBA_ASTC_6x5_Format:\n      return Math.floor((width + 5) / 6) * Math.floor((height + 4) / 5) * 16;\n    case RGBA_ASTC_6x6_Format:\n      return Math.floor((width + 5) / 6) * Math.floor((height + 5) / 6) * 16;\n    case RGBA_ASTC_8x5_Format:\n      return Math.floor((width + 7) / 8) * Math.floor((height + 4) / 5) * 16;\n    case RGBA_ASTC_8x6_Format:\n      return Math.floor((width + 7) / 8) * Math.floor((height + 5) / 6) * 16;\n    case RGBA_ASTC_8x8_Format:\n      return Math.floor((width + 7) / 8) * Math.floor((height + 7) / 8) * 16;\n    case RGBA_ASTC_10x5_Format:\n      return Math.floor((width + 9) / 10) * Math.floor((height + 4) / 5) * 16;\n    case RGBA_ASTC_10x6_Format:\n      return Math.floor((width + 9) / 10) * Math.floor((height + 5) / 6) * 16;\n    case RGBA_ASTC_10x8_Format:\n      return Math.floor((width + 9) / 10) * Math.floor((height + 7) / 8) * 16;\n    case RGBA_ASTC_10x10_Format:\n      return Math.floor((width + 9) / 10) * Math.floor((height + 9) / 10) * 16;\n    case RGBA_ASTC_12x10_Format:\n      return Math.floor((width + 11) / 12) * Math.floor((height + 9) / 10) * 16;\n    case RGBA_ASTC_12x12_Format:\n      return Math.floor((width + 11) / 12) * Math.floor((height + 11) / 12) * 16;\n\n    // https://registry.khronos.org/webgl/extensions/EXT_texture_compression_bptc/\n    case RGBA_BPTC_Format:\n    case RGB_BPTC_SIGNED_Format:\n    case RGB_BPTC_UNSIGNED_Format:\n      return Math.ceil(width / 4) * Math.ceil(height / 4) * 16;\n\n    // https://registry.khronos.org/webgl/extensions/EXT_texture_compression_rgtc/\n    case RED_RGTC1_Format:\n    case SIGNED_RED_RGTC1_Format:\n      return Math.ceil(width / 4) * Math.ceil(height / 4) * 8;\n    case RED_GREEN_RGTC2_Format:\n    case SIGNED_RED_GREEN_RGTC2_Format:\n      return Math.ceil(width / 4) * Math.ceil(height / 4) * 16;\n  }\n  throw new Error(`Unable to determine texture byte length for ${format} format.`);\n}\nfunction getTextureTypeByteLength(type) {\n  switch (type) {\n    case UnsignedByteType:\n    case ByteType:\n      return {\n        byteLength: 1,\n        components: 1\n      };\n    case UnsignedShortType:\n    case ShortType:\n    case HalfFloatType:\n      return {\n        byteLength: 2,\n        components: 1\n      };\n    case UnsignedShort4444Type:\n    case UnsignedShort5551Type:\n      return {\n        byteLength: 2,\n        components: 4\n      };\n    case UnsignedIntType:\n    case IntType:\n    case FloatType:\n      return {\n        byteLength: 4,\n        components: 1\n      };\n    case UnsignedInt5999Type:\n      return {\n        byteLength: 4,\n        components: 3\n      };\n  }\n  throw new Error(`Unknown texture type ${type}.`);\n}\n\n/**\n * A class containing utility functions for textures.\n *\n * @hideconstructor\n */\nclass TextureUtils {\n  /**\n   * Scales the texture as large as possible within its surface without cropping\n   * or stretching the texture. The method preserves the original aspect ratio of\n   * the texture. Akin to CSS `object-fit: contain`\n   *\n   * @param {Texture} texture - The texture.\n   * @param {number} aspect - The texture's aspect ratio.\n   * @return {Texture} The updated texture.\n   */\n  static contain(texture, aspect) {\n    return contain(texture, aspect);\n  }\n\n  /**\n   * Scales the texture to the smallest possible size to fill the surface, leaving\n   * no empty space. The method preserves the original aspect ratio of the texture.\n   * Akin to CSS `object-fit: cover`.\n   *\n   * @param {Texture} texture - The texture.\n   * @param {number} aspect - The texture's aspect ratio.\n   * @return {Texture} The updated texture.\n   */\n  static cover(texture, aspect) {\n    return cover(texture, aspect);\n  }\n\n  /**\n   * Configures the texture to the default transformation. Akin to CSS `object-fit: fill`.\n   *\n   * @param {Texture} texture - The texture.\n   * @return {Texture} The updated texture.\n   */\n  static fill(texture) {\n    return fill(texture);\n  }\n\n  /**\n   * Determines how many bytes must be used to represent the texture.\n   *\n   * @param {number} width - The width of the texture.\n   * @param {number} height - The height of the texture.\n   * @param {number} format - The texture's format.\n   * @param {number} type - The texture's type.\n   * @return {number} The byte length.\n   */\n  static getByteLength(width, height, format, type) {\n    return getByteLength(width, height, format, type);\n  }\n}\nif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n  __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('register', {\n    detail: {\n      revision: REVISION\n    }\n  }));\n}\nif (typeof window !== 'undefined') {\n  if (window.__THREE__) {\n    console.warn('WARNING: Multiple instances of Three.js being imported.');\n  } else {\n    window.__THREE__ = REVISION;\n  }\n}\nexport { ACESFilmicToneMapping, AddEquation, AddOperation, AdditiveAnimationBlendMode, AdditiveBlending, AgXToneMapping, AlphaFormat, AlwaysCompare, AlwaysDepth, AlwaysStencilFunc, AmbientLight, AnimationAction, AnimationClip, AnimationLoader, AnimationMixer, AnimationObjectGroup, AnimationUtils, ArcCurve, ArrayCamera, ArrowHelper, AttachedBindMode, Audio, AudioAnalyser, AudioContext, AudioListener, AudioLoader, AxesHelper, BackSide, BasicDepthPacking, BasicShadowMap, BatchedMesh, Bone, BooleanKeyframeTrack, Box2, Box3, Box3Helper, BoxGeometry, BoxHelper, BufferAttribute, BufferGeometry, BufferGeometryLoader, ByteType, Cache, Camera, CameraHelper, CanvasTexture, CapsuleGeometry, CatmullRomCurve3, CineonToneMapping, CircleGeometry, ClampToEdgeWrapping, Clock, Color, ColorKeyframeTrack, ColorManagement, CompressedArrayTexture, CompressedCubeTexture, CompressedTexture, CompressedTextureLoader, ConeGeometry, ConstantAlphaFactor, ConstantColorFactor, Controls, CubeCamera, CubeReflectionMapping, CubeRefractionMapping, CubeTexture, CubeTextureLoader, CubeUVReflectionMapping, CubicBezierCurve, CubicBezierCurve3, CubicInterpolant, CullFaceBack, CullFaceFront, CullFaceFrontBack, CullFaceNone, Curve, CurvePath, CustomBlending, CustomToneMapping, CylinderGeometry, Cylindrical, Data3DTexture, DataArrayTexture, DataTexture, DataTextureLoader, DataUtils, DecrementStencilOp, DecrementWrapStencilOp, DefaultLoadingManager, DepthArrayTexture, DepthFormat, DepthStencilFormat, DepthTexture, DetachedBindMode, DirectionalLight, DirectionalLightHelper, DiscreteInterpolant, DodecahedronGeometry, DoubleSide, DstAlphaFactor, DstColorFactor, DynamicCopyUsage, DynamicDrawUsage, DynamicReadUsage, EdgesGeometry, EllipseCurve, EqualCompare, EqualDepth, EqualStencilFunc, EquirectangularReflectionMapping, EquirectangularRefractionMapping, Euler, EventDispatcher, ExtrudeGeometry, FileLoader, Float16BufferAttribute, Float32BufferAttribute, FloatType, Fog, FogExp2, FramebufferTexture, FrontSide, Frustum, FrustumArray, GLBufferAttribute, GLSL1, GLSL3, GreaterCompare, GreaterDepth, GreaterEqualCompare, GreaterEqualDepth, GreaterEqualStencilFunc, GreaterStencilFunc, GridHelper, Group, HalfFloatType, HemisphereLight, HemisphereLightHelper, IcosahedronGeometry, ImageBitmapLoader, ImageLoader, ImageUtils, IncrementStencilOp, IncrementWrapStencilOp, InstancedBufferAttribute, InstancedBufferGeometry, InstancedInterleavedBuffer, InstancedMesh, Int16BufferAttribute, Int32BufferAttribute, Int8BufferAttribute, IntType, InterleavedBuffer, InterleavedBufferAttribute, Interpolant, InterpolateDiscrete, InterpolateLinear, InterpolateSmooth, InterpolationSamplingMode, InterpolationSamplingType, InvertStencilOp, KeepStencilOp, KeyframeTrack, LOD, LatheGeometry, Layers, LessCompare, LessDepth, LessEqualCompare, LessEqualDepth, LessEqualStencilFunc, LessStencilFunc, Light, LightProbe, Line, Line3, LineBasicMaterial, LineCurve, LineCurve3, LineDashedMaterial, LineLoop, LineSegments, LinearFilter, LinearInterpolant, LinearMipMapLinearFilter, LinearMipMapNearestFilter, LinearMipmapLinearFilter, LinearMipmapNearestFilter, LinearSRGBColorSpace, LinearToneMapping, LinearTransfer, Loader, LoaderUtils, LoadingManager, LoopOnce, LoopPingPong, LoopRepeat, MOUSE, Material, MaterialLoader, MathUtils, Matrix2, Matrix3, Matrix4, MaxEquation, Mesh, MeshBasicMaterial, MeshDepthMaterial, MeshDistanceMaterial, MeshLambertMaterial, MeshMatcapMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshPhysicalMaterial, MeshStandardMaterial, MeshToonMaterial, MinEquation, MirroredRepeatWrapping, MixOperation, MultiplyBlending, MultiplyOperation, NearestFilter, NearestMipMapLinearFilter, NearestMipMapNearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, NeutralToneMapping, NeverCompare, NeverDepth, NeverStencilFunc, NoBlending, NoColorSpace, NoToneMapping, NormalAnimationBlendMode, NormalBlending, NotEqualCompare, NotEqualDepth, NotEqualStencilFunc, NumberKeyframeTrack, Object3D, ObjectLoader, ObjectSpaceNormalMap, OctahedronGeometry, OneFactor, OneMinusConstantAlphaFactor, OneMinusConstantColorFactor, OneMinusDstAlphaFactor, OneMinusDstColorFactor, OneMinusSrcAlphaFactor, OneMinusSrcColorFactor, OrthographicCamera, PCFShadowMap, PCFSoftShadowMap, Path, PerspectiveCamera, Plane, PlaneGeometry, PlaneHelper, PointLight, PointLightHelper, Points, PointsMaterial, PolarGridHelper, PolyhedronGeometry, PositionalAudio, PropertyBinding, PropertyMixer, QuadraticBezierCurve, QuadraticBezierCurve3, Quaternion, QuaternionKeyframeTrack, QuaternionLinearInterpolant, RAD2DEG, RED_GREEN_RGTC2_Format, RED_RGTC1_Format, REVISION, RGBADepthPacking, RGBAFormat, RGBAIntegerFormat, RGBA_ASTC_10x10_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_2BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, RGBDepthPacking, RGBFormat, RGBIntegerFormat, RGB_BPTC_SIGNED_Format, RGB_BPTC_UNSIGNED_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_2BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, RGDepthPacking, RGFormat, RGIntegerFormat, RawShaderMaterial, Ray, Raycaster, RectAreaLight, RedFormat, RedIntegerFormat, ReinhardToneMapping, RenderTarget, RenderTarget3D, RenderTargetArray, RepeatWrapping, ReplaceStencilOp, ReverseSubtractEquation, RingGeometry, SIGNED_RED_GREEN_RGTC2_Format, SIGNED_RED_RGTC1_Format, SRGBColorSpace, SRGBTransfer, Scene, ShaderMaterial, ShadowMaterial, Shape, ShapeGeometry, ShapePath, ShapeUtils, ShortType, Skeleton, SkeletonHelper, SkinnedMesh, Source, Sphere, SphereGeometry, Spherical, SphericalHarmonics3, SplineCurve, SpotLight, SpotLightHelper, Sprite, SpriteMaterial, SrcAlphaFactor, SrcAlphaSaturateFactor, SrcColorFactor, StaticCopyUsage, StaticDrawUsage, StaticReadUsage, StereoCamera, StreamCopyUsage, StreamDrawUsage, StreamReadUsage, StringKeyframeTrack, SubtractEquation, SubtractiveBlending, TOUCH, TangentSpaceNormalMap, TetrahedronGeometry, Texture, TextureLoader, TextureUtils, TimestampQuery, TorusGeometry, TorusKnotGeometry, Triangle, TriangleFanDrawMode, TriangleStripDrawMode, TrianglesDrawMode, TubeGeometry, UVMapping, Uint16BufferAttribute, Uint32BufferAttribute, Uint8BufferAttribute, Uint8ClampedBufferAttribute, Uniform, UniformsGroup, UniformsUtils, UnsignedByteType, UnsignedInt248Type, UnsignedInt5999Type, UnsignedIntType, UnsignedShort4444Type, UnsignedShort5551Type, UnsignedShortType, VSMShadowMap, Vector2, Vector3, Vector4, VectorKeyframeTrack, VideoFrameTexture, VideoTexture, WebGL3DRenderTarget, WebGLArrayRenderTarget, WebGLCoordinateSystem, WebGLCubeRenderTarget, WebGLRenderTarget, WebGPUCoordinateSystem, WebXRController, WireframeGeometry, WrapAroundEnding, ZeroCurvatureEnding, ZeroFactor, ZeroSlopeEnding, ZeroStencilOp, arrayNeedsUint32, cloneUniforms, createCanvasElement, createElementNS, getByteLength, getUnlitUniformColorSpace, mergeUniforms, probeAsync, toNormalizedProjectionMatrix, toReversedProjectionMatrix, warnOnce };","map":{"version":3,"names":["REVISION","MOUSE","LEFT","MIDDLE","RIGHT","ROTATE","DOLLY","PAN","TOUCH","DOLLY_PAN","DOLLY_ROTATE","CullFaceNone","CullFaceBack","CullFaceFront","CullFaceFrontBack","BasicShadowMap","PCFShadowMap","PCFSoftShadowMap","VSMShadowMap","FrontSide","BackSide","DoubleSide","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","ConstantColorFactor","OneMinusConstantColorFactor","ConstantAlphaFactor","OneMinusConstantAlphaFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","CineonToneMapping","ACESFilmicToneMapping","CustomToneMapping","AgXToneMapping","NeutralToneMapping","AttachedBindMode","DetachedBindMode","UVMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","CubeUVReflectionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipmapNearestFilter","NearestMipMapNearestFilter","NearestMipmapLinearFilter","NearestMipMapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipMapNearestFilter","LinearMipmapLinearFilter","LinearMipMapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedInt248Type","UnsignedInt5999Type","AlphaFormat","RGBFormat","RGBAFormat","DepthFormat","DepthStencilFormat","RedFormat","RedIntegerFormat","RGFormat","RGIntegerFormat","RGBIntegerFormat","RGBAIntegerFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGBA_ETC2_EAC_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","RGBA_BPTC_Format","RGB_BPTC_SIGNED_Format","RGB_BPTC_UNSIGNED_Format","RED_RGTC1_Format","SIGNED_RED_RGTC1_Format","RED_GREEN_RGTC2_Format","SIGNED_RED_GREEN_RGTC2_Format","LoopOnce","LoopRepeat","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroCurvatureEnding","ZeroSlopeEnding","WrapAroundEnding","NormalAnimationBlendMode","AdditiveAnimationBlendMode","TrianglesDrawMode","TriangleStripDrawMode","TriangleFanDrawMode","BasicDepthPacking","RGBADepthPacking","RGBDepthPacking","RGDepthPacking","TangentSpaceNormalMap","ObjectSpaceNormalMap","NoColorSpace","SRGBColorSpace","LinearSRGBColorSpace","LinearTransfer","SRGBTransfer","ZeroStencilOp","KeepStencilOp","ReplaceStencilOp","IncrementStencilOp","DecrementStencilOp","IncrementWrapStencilOp","DecrementWrapStencilOp","InvertStencilOp","NeverStencilFunc","LessStencilFunc","EqualStencilFunc","LessEqualStencilFunc","GreaterStencilFunc","NotEqualStencilFunc","GreaterEqualStencilFunc","AlwaysStencilFunc","NeverCompare","LessCompare","EqualCompare","LessEqualCompare","GreaterCompare","NotEqualCompare","GreaterEqualCompare","AlwaysCompare","StaticDrawUsage","DynamicDrawUsage","StreamDrawUsage","StaticReadUsage","DynamicReadUsage","StreamReadUsage","StaticCopyUsage","DynamicCopyUsage","StreamCopyUsage","GLSL1","GLSL3","WebGLCoordinateSystem","WebGPUCoordinateSystem","TimestampQuery","COMPUTE","RENDER","InterpolationSamplingType","PERSPECTIVE","LINEAR","FLAT","InterpolationSamplingMode","NORMAL","CENTROID","SAMPLE","FLAT_FIRST","FLAT_EITHER","EventDispatcher","addEventListener","type","listener","_listeners","undefined","listeners","indexOf","push","hasEventListener","removeEventListener","listenerArray","index","splice","dispatchEvent","event","target","array","slice","i","l","length","call","_lut","_seed","DEG2RAD","Math","PI","RAD2DEG","generateUUID","d0","random","d1","d2","d3","uuid","toLowerCase","clamp","value","min","max","euclideanModulo","n","m","mapLinear","x","a1","a2","b1","b2","inverseLerp","y","lerp","t","damp","lambda","dt","exp","pingpong","arguments","abs","smoothstep","smootherstep","randInt","low","high","floor","randFloat","randFloatSpread","range","seededRandom","s","imul","degToRad","degrees","radToDeg","radians","isPowerOfTwo","ceilPowerOfTwo","pow","ceil","log","LN2","floorPowerOfTwo","setQuaternionFromProperEuler","q","a","b","c","order","cos","sin","c2","s2","c13","s13","c1_3","s1_3","c3_1","s3_1","set","console","warn","denormalize","constructor","Float32Array","Uint32Array","Uint16Array","Uint8Array","Int32Array","Int16Array","Int8Array","Error","normalize","round","MathUtils","Vector2","prototype","isVector2","width","height","setScalar","scalar","setX","setY","setComponent","getComponent","clone","copy","v","add","addScalar","addVectors","addScaledVector","sub","subScalar","subVectors","multiply","multiplyScalar","divide","divideScalar","applyMatrix3","e","elements","clampScalar","minVal","maxVal","clampLength","roundToZero","trunc","negate","dot","cross","lengthSq","sqrt","manhattanLength","angle","atan2","angleTo","denominator","theta","acos","distanceTo","distanceToSquared","dx","dy","manhattanDistanceTo","setLength","alpha","lerpVectors","v1","v2","equals","fromArray","offset","toArray","fromBufferAttribute","attribute","getX","getY","rotateAround","center","Symbol","iterator","Matrix3","n11","n12","n13","n21","n22","n23","n31","n32","n33","isMatrix3","te","identity","me","extractBasis","xAxis","yAxis","zAxis","setFromMatrix3Column","setFromMatrix4","multiplyMatrices","premultiply","ae","be","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","determinant","d","f","g","h","invert","t11","t12","t13","det","detInv","transpose","tmp","getNormalMatrix","matrix4","transposeIntoArray","r","setUvTransform","tx","ty","sx","sy","rotation","cx","cy","scale","_m3","makeScale","rotate","makeRotation","translate","makeTranslation","matrix","arrayNeedsUint32","TYPED_ARRAYS","Uint8ClampedArray","Float64Array","getTypedArray","buffer","createElementNS","name","document","createCanvasElement","canvas","style","display","_cache","warnOnce","message","probeAsync","gl","sync","interval","Promise","resolve","reject","probe","clientWaitSync","SYNC_FLUSH_COMMANDS_BIT","WAIT_FAILED","TIMEOUT_EXPIRED","setTimeout","toNormalizedProjectionMatrix","projectionMatrix","toReversedProjectionMatrix","isPerspectiveMatrix","LINEAR_REC709_TO_XYZ","XYZ_TO_LINEAR_REC709","createColorManagement","ColorManagement","enabled","workingColorSpace","spaces","convert","color","sourceColorSpace","targetColorSpace","transfer","SRGBToLinear","primaries","toXYZ","fromXYZ","LinearToSRGB","fromWorkingColorSpace","toWorkingColorSpace","getPrimaries","colorSpace","getTransfer","getLuminanceCoefficients","luminanceCoefficients","define","colorSpaces","Object","assign","_getMatrix","targetMatrix","_getDrawingBufferColorSpace","outputColorSpaceConfig","drawingBufferColorSpace","_getUnpackColorSpace","workingColorSpaceConfig","unpackColorSpace","REC709_PRIMARIES","REC709_LUMINANCE_COEFFICIENTS","D65","whitePoint","_canvas","ImageUtils","getDataURL","image","test","src","HTMLCanvasElement","context","getContext","ImageData","putImageData","drawImage","toDataURL","sRGBToLinear","HTMLImageElement","ImageBitmap","imageData","getImageData","data","_sourceId","Source","isSource","defineProperty","dataReady","version","needsUpdate","toJSON","meta","isRootObject","images","output","url","Array","isArray","isDataTexture","serializeImage","from","_textureId","Texture","DEFAULT_IMAGE","mapping","DEFAULT_MAPPING","wrapS","wrapT","magFilter","minFilter","format","anisotropy","DEFAULT_ANISOTROPY","isTexture","source","mipmaps","channel","internalFormat","repeat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","userData","onUpdate","renderTarget","isRenderTargetTexture","isTextureArray","pmremVersion","updateMatrix","JSON","parse","stringify","textures","metadata","generator","wrap","keys","dispose","transformUv","uv","needsPMREMUpdate","Vector4","z","w","isVector4","setZ","setW","applyMatrix4","setAxisAngleFromQuaternion","setAxisAngleFromRotationMatrix","epsilon","epsilon2","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","yy","zz","xy","xz","yz","setFromMatrixPosition","getZ","getW","RenderTarget","options","isRenderTarget","depth","scissor","scissorTest","viewport","depthBuffer","stencilBuffer","resolveDepthBuffer","resolveStencilBuffer","depthTexture","samples","count","multiview","texture","_depthTexture","current","setSize","il","WebGLRenderTarget","isWebGLRenderTarget","DataArrayTexture","isDataArrayTexture","wrapR","layerUpdates","Set","addLayerUpdate","layerIndex","clearLayerUpdates","clear","WebGLArrayRenderTarget","isWebGLArrayRenderTarget","Data3DTexture","isData3DTexture","WebGL3DRenderTarget","isWebGL3DRenderTarget","Quaternion","isQuaternion","_x","_y","_z","_w","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","Number","EPSILON","len","tDir","multiplyQuaternionsFlat","_onChangeCallback","quaternion","setFromEuler","euler","update","_order","c1","c3","s1","s3","setFromAxisAngle","axis","halfAngle","setFromRotationMatrix","trace","setFromUnitVectors","vFrom","vTo","rotateTowards","step","slerp","conjugate","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","qb","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","slerpQuaternions","qa","theta1","theta2","r1","r2","_onChange","callback","Vector3","isVector3","multiplyVectors","applyEuler","applyQuaternion","_quaternion$4","applyAxisAngle","applyNormalMatrix","vx","vy","vz","qx","qy","qz","qw","tz","project","camera","matrixWorldInverse","unproject","projectionMatrixInverse","matrixWorld","transformDirection","crossVectors","ax","ay","az","bx","by","bz","projectOnVector","projectOnPlane","planeNormal","_vector$c","reflect","normal","dz","setFromSpherical","setFromSphericalCoords","radius","phi","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixScale","setFromMatrixColumn","sz","setFromColor","randomDirection","u","Box3","Infinity","isBox3","setFromArray","makeEmpty","expandByPoint","_vector$b","setFromBufferAttribute","setFromPoints","points","setFromCenterAndSize","size","halfSize","setFromObject","object","precise","expandByObject","box","isEmpty","getCenter","getSize","point","expandByVector","vector","expandByScalar","updateWorldMatrix","geometry","positionAttribute","getAttribute","isInstancedMesh","isMesh","getVertexPosition","boundingBox","computeBoundingBox","_box$4","union","children","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","sphere","clampPoint","intersectsPlane","plane","constant","intersectsTriangle","triangle","_center","_extents","_v0$2","_v1$7","_v2$4","_f0","_f1","_f2","axes","satForAxes","_triangleNormal","distanceToPoint","getBoundingSphere","intersect","_points","_testAxis","v0","extents","j","p0","p1","p2","_box$3","_v1$6","_v2$3","Sphere","isSphere","optionalCenter","maxRadiusSq","radiusSum","deltaLengthSq","getBoundingBox","getMaxScaleOnAxis","delta","_vector$a","_segCenter","_segDir","_diff","_edge1","_edge2","_normal$1","Ray","origin","direction","ray","at","lookAt","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","optionalPointOnRay","optionalPointOnSegment","segExtent","a01","b0","s0","sqrDist","extDet","invDet","intersectSphere","tca","radius2","thc","t0","t1","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","isNaN","intersectTriangle","backfaceCulling","DdN","sign","DdQxE2","DdE1xQ","QdN","Matrix4","n14","n24","n34","n41","n42","n43","n44","isMatrix4","copyPosition","setFromMatrix3","makeBasis","extractRotation","scaleX","_v1$5","scaleY","scaleZ","makeRotationFromEuler","af","bf","ce","cf","de","df","ac","ad","bc","bd","makeRotationFromQuaternion","compose","_zero","_one","eye","up","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","setPosition","t14","scaleXSq","scaleYSq","scaleZSq","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","makeShear","yx","zx","zy","position","x2","y2","z2","wx","wy","wz","decompose","_m1$2","invSX","invSY","invSZ","makePerspective","left","right","top","bottom","near","far","coordinateSystem","makeOrthographic","p","zInv","_matrix$2","_quaternion$3","Euler","DEFAULT_ORDER","isEuler","asin","setFromQuaternion","setFromVector3","reorder","newOrder","Layers","mask","layer","enable","enableAll","toggle","disable","disableAll","layers","isEnabled","_object3DId","_v1$4","_q1","_m1$1","_target","_position$3","_scale$2","_quaternion$2","_xAxis","_yAxis","_zAxis","_addedEvent","_removedEvent","_childaddedEvent","child","_childremovedEvent","Object3D","isObject3D","parent","DEFAULT_UP","onRotationChange","onQuaternionChange","defineProperties","configurable","enumerable","modelViewMatrix","normalMatrix","DEFAULT_MATRIX_AUTO_UPDATE","matrixWorldAutoUpdate","DEFAULT_MATRIX_WORLD_AUTO_UPDATE","matrixWorldNeedsUpdate","visible","castShadow","receiveShadow","frustumCulled","renderOrder","animations","customDepthMaterial","customDistanceMaterial","onBeforeShadow","onAfterShadow","onBeforeRender","onAfterRender","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateOnWorldAxis","rotateX","rotateY","rotateZ","translateOnAxis","distance","translateX","translateY","translateZ","localToWorld","worldToLocal","isCamera","isLight","error","removeFromParent","remove","attach","getObjectById","id","getObjectByProperty","getObjectByName","getObjectsByProperty","result","getWorldPosition","getWorldQuaternion","getWorldScale","getWorldDirection","raycast","traverse","traverseVisible","traverseAncestors","updateMatrixWorld","force","updateParents","updateChildren","geometries","materials","shapes","skeletons","nodes","instanceMatrix","instanceColor","isBatchedMesh","perObjectFrustumCulled","sortObjects","drawRanges","_drawRanges","reservedRanges","_reservedRanges","geometryInfo","_geometryInfo","map","info","boundingSphere","instanceInfo","_instanceInfo","availableInstanceIds","_availableInstanceIds","availableGeometryIds","_availableGeometryIds","nextIndexStart","_nextIndexStart","nextVertexStart","_nextVertexStart","geometryCount","_geometryCount","maxInstanceCount","_maxInstanceCount","maxVertexCount","_maxVertexCount","maxIndexCount","_maxIndexCount","geometryInitialized","_geometryInitialized","matricesTexture","_matricesTexture","indirectTexture","_indirectTexture","_colorsTexture","colorsTexture","serialize","library","element","isScene","background","isColor","environment","isLine","isPoints","parameters","shape","isSkinnedMesh","bindMode","bindMatrix","skeleton","material","uuids","animation","extractFromCache","cache","values","key","recursive","_v0$1","_v1$3","_v2$2","_v3$2","_vab","_vac","_vbc","_vap","_vbp","_vcp","_v40","_v41","_v42","Triangle","getNormal","targetLengthSq","getBarycoord","dot00","dot01","dot02","dot11","dot12","denom","invDenom","getInterpolation","p3","v3","getInterpolatedAttribute","attr","i1","i2","i3","barycoord","isFrontFacing","setFromPointsAndIndices","i0","setFromAttributeAndIndices","getArea","getMidpoint","getPlane","setFromCoplanarPoints","d4","vc","d5","d6","vb","va","_colorKeywords","_hslA","_hslB","hue2rgb","Color","setHex","setStyle","setRGB","hex","setHSL","handleAlpha","string","parseFloat","exec","components","parseInt","charAt","setColorName","copySRGBToLinear","copyLinearToSRGB","convertSRGBToLinear","convertLinearToSRGB","getHex","_color","getHexString","toString","getHSL","hue","saturation","lightness","getRGB","getStyle","toFixed","offsetHSL","addColors","color1","color2","lerpColors","lerpHSL","NAMES","_materialId","Material","isMaterial","blending","side","vertexColors","opacity","transparent","alphaHash","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","blendColor","blendAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaToCoverage","premultipliedAlpha","forceSinglePass","allowOverride","toneMapped","_alphaTest","alphaTest","onBeforeCompile","customProgramCacheKey","setValues","newValue","currentValue","roughness","metalness","sheen","sheenColor","sheenRoughness","emissive","emissiveIntensity","specular","specularIntensity","specularColor","shininess","clearcoat","clearcoatRoughness","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","clearcoatNormalScale","dispersion","iridescence","iridescenceIOR","iridescenceThicknessRange","iridescenceMap","iridescenceThicknessMap","anisotropyRotation","anisotropyMap","matcap","alphaMap","lightMap","lightMapIntensity","aoMap","aoMapIntensity","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","specularMap","specularIntensityMap","specularColorMap","envMap","combine","envMapRotation","envMapIntensity","reflectivity","refractionRatio","gradientMap","transmission","transmissionMap","thickness","thicknessMap","attenuationDistance","attenuationColor","sizeAttenuation","linewidth","dashSize","gapSize","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","flatShading","fog","srcPlanes","dstPlanes","MeshBasicMaterial","isMeshBasicMaterial","_tables","_generateTables","ArrayBuffer","floatView","uint32View","baseTable","shiftTable","mantissaTable","exponentTable","offsetTable","toHalfFloat","val","fromHalfFloat","DataUtils","_vector$9","_vector2$1","_id$2","BufferAttribute","itemSize","normalized","TypeError","isBufferAttribute","usage","updateRanges","gpuType","onUploadCallback","setUsage","addUpdateRange","start","clearUpdateRanges","copyAt","index1","index2","copyArray","setXY","setXYZ","component","setXYZW","onUpload","Int8BufferAttribute","Uint8BufferAttribute","Uint8ClampedBufferAttribute","Int16BufferAttribute","Uint16BufferAttribute","Int32BufferAttribute","Uint32BufferAttribute","Float16BufferAttribute","isFloat16BufferAttribute","Float32BufferAttribute","_id$1","_m1","_obj","_offset","_box$2","_boxMorphTargets","_vector$8","BufferGeometry","isBufferGeometry","indirect","attributes","morphAttributes","morphTargetsRelative","groups","drawRange","getIndex","setIndex","setIndirect","getIndirect","setAttribute","deleteAttribute","hasAttribute","addGroup","materialIndex","clearGroups","setDrawRange","tangent","computeBoundingSphere","morphAttributesPosition","isGLBufferAttribute","morphAttribute","jl","computeTangents","normalAttribute","uvAttribute","tangentAttribute","tan1","tan2","vA","vB","vC","uvA","uvB","uvC","sdir","tdir","handleTriangle","isFinite","group","tmp2","n2","handleVertex","computeVertexNormals","pA","pB","pC","nA","nB","nC","cb","ab","normalizeNormals","normals","toNonIndexed","convertBufferAttribute","indices","array2","isInterleavedBufferAttribute","stride","geometry2","newAttribute","morphArray","hasMorphAttributes","attributeArray","_inverseMatrix$3","_ray$3","_sphere$6","_sphereHitAt","_vA$1","_vB$1","_vC$1","_tempA","_morphA","_intersectionPoint","_intersectionPointWorld","Mesh","morphTargetDictionary","morphTargetInfluences","updateMorphTargets","ml","String","morphPosition","morphInfluences","influence","raycaster","intersects","_computeIntersections","rayLocalSpace","intersection","uv1","groupMaterial","end","checkGeometryIntersection","faceIndex","face","checkIntersection$1","BoxGeometry","widthSegments","heightSegments","depthSegments","scope","vertices","uvs","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","iy","ix","fromJSON","cloneUniforms","property","mergeUniforms","uniforms","merged","cloneUniformsGroups","getUnlitUniformColorSpace","renderer","currentRenderTarget","getRenderTarget","outputColorSpace","isXRRenderTarget","UniformsUtils","merge","default_vertex","default_fragment","ShaderMaterial","isShaderMaterial","defines","uniformsGroups","vertexShader","fragmentShader","lights","clipping","extensions","clipCullDistance","multiDraw","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","glslVersion","uniform","Camera","_v3$1","_minTarget","_maxTarget","PerspectiveCamera","fov","aspect","isPerspectiveCamera","zoom","focus","view","filmGauge","filmOffset","updateProjectionMatrix","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","tan","getEffectiveFOV","getFilmWidth","getViewBounds","minTarget","maxTarget","getViewSize","setViewOffset","fullWidth","fullHeight","offsetX","offsetY","clearViewOffset","skew","CubeCamera","activeMipmapLevel","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","updateCoordinateSystem","cameras","concat","scene","currentActiveCubeFace","getActiveCubeFace","currentActiveMipmapLevel","getActiveMipmapLevel","currentXrEnabled","xr","setRenderTarget","render","CubeTexture","isCubeTexture","WebGLCubeRenderTarget","isWebGLCubeRenderTarget","fromEquirectangularTexture","shader","tEquirect","mesh","currentMinFilter","stencil","Group","isGroup","_moveEvent","WebXRController","_targetRay","_grip","_hand","getHandSpace","joints","inputState","pinching","getTargetRaySpace","hasLinearVelocity","linearVelocity","hasAngularVelocity","angularVelocity","getGripSpace","connect","inputSource","hand","inputjoint","_getHandJoint","disconnect","frame","referenceSpace","inputPose","gripPose","handPose","targetRay","grip","session","visibilityState","jointPose","getJointPose","joint","transform","jointRadius","indexTip","thumbTip","distanceToPinch","threshold","handedness","gripSpace","getPose","targetRaySpace","jointName","FogExp2","density","isFogExp2","Fog","isFog","Scene","backgroundBlurriness","backgroundIntensity","backgroundRotation","environmentIntensity","environmentRotation","overrideMaterial","__THREE_DEVTOOLS__","CustomEvent","detail","InterleavedBuffer","isInterleavedBuffer","interleavedBuffer","arrayBuffers","_uuid","ib","_vector$7","InterleavedBufferAttribute","interleavedBuffers","SpriteMaterial","isSpriteMaterial","_geometry","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA","_vB","_vC","_uvA","_uvB","_uvC","Sprite","isSprite","float32Array","transformVertex","vertexPosition","mvPosition","_v1$2","_v2$1","LOD","isLOD","_currentLevel","levels","autoUpdate","level","addLevel","hysteresis","removeLevel","removedElements","getCurrentLevel","getObjectForDistance","levelDistance","_basePosition","_skinIndex","_skinWeight","_vector3","_matrix4","_vertex","_sphere$5","_inverseMatrix$2","_ray$2","SkinnedMesh","bindMatrixInverse","applyBoneTransform","bind","calculateInverses","pose","normalizeSkinWeights","skinWeight","skinIndex","weight","boneIndex","bones","boneInverses","Bone","isBone","DataTexture","_offsetMatrix","_identityMatrix","Skeleton","boneMatrices","boneTexture","init","inverse","bone","computeBoneTexture","getBoneByName","json","boneInverse","InstancedBufferAttribute","meshPerAttribute","isInstancedBufferAttribute","_instanceLocalMatrix","_instanceWorldMatrix","_instanceIntersects","_box3","_identity","_mesh$1","_sphere$4","InstancedMesh","morphTexture","setMatrixAt","getMatrixAt","getColorAt","getMorphAt","objectInfluences","dataIndex","raycastTimes","instanceId","setColorAt","fill","setMorphAt","morphInfluencesSum","morphBaseInfluence","_vector1","_vector2","_normalMatrix","Plane","isPlane","setComponents","setFromNormalAndCoplanarPoint","inverseNormalLength","distanceToSphere","projectPoint","intersectLine","line","intersectsLine","startSign","endSign","coplanarPoint","optionalNormalMatrix","referencePoint","_sphere$3","_vector$6","Frustum","p4","p5","planes","frustum","setFromProjectionMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","intersectsObject","intersectsSprite","sprite","negRadius","_projScreenMatrix$2","_frustum$1","FrustumArray","cameraArray","isArrayCamera","ascIdSort","sortOpaque","sortTransparent","MultiDrawRenderList","pool","list","item","reset","_matrix$1","_whiteColor","_frustum","_frustumArray","_box$1","_sphere$2","_vector$5","_forward","_temp","_renderList","_mesh","_batchIntersects","copyAttributeData","targetOffset","vertexCount","copyArrayContents","BatchedMesh","customSort","_visibilityChanged","_multiDrawCounts","_multiDrawStarts","_multiDrawCount","_multiDrawInstances","_initMatricesTexture","_initIndirectTexture","instanceCount","unusedVertexCount","unusedIndexCount","matricesArray","indirectArray","_initColorsTexture","colorsArray","_initializeGeometry","reference","attributeName","srcAttribute","dstArray","dstAttribute","indexArray","_validateGeometry","batchGeometry","Boolean","validateInstanceId","active","validateGeometryId","geometryId","geometryInfoList","setCustomSort","func","geometryIndex","getBoundingBoxAt","getBoundingSphereAt","addInstance","atCapacity","drawId","sort","shift","addGeometry","reservedVertexCount","reservedIndexCount","vertexStart","indexStart","indexCount","hasIndex","setGeometryAt","dstIndex","srcIndex","deleteGeometry","deleteInstance","optimize","elementDelta","copyWithin","iv","setVisibleAt","getVisibleAt","setGeometryIdAt","getGeometryIdAt","getGeometryRangeAt","setInstanceCount","pop","multiDrawCounts","multiDrawStarts","setGeometrySize","validRanges","filter","requiredVertexLength","requiredIndexLength","oldGeometry","batchId","bytesPerElement","BYTES_PER_ELEMENT","multiDrawCount","culled","shadowCamera","depthMaterial","LineBasicMaterial","isLineBasicMaterial","linecap","linejoin","_vStart","_vEnd","_inverseMatrix$1","_ray$1","_sphere$1","_intersectPointOnRay","_intersectPointOnSegment","Line","computeLineDistances","lineDistances","params","localThreshold","localThresholdSq","isLineSegments","checkIntersection","isLineLoop","thresholdSq","distSq","_start","_end","LineSegments","LineLoop","PointsMaterial","isPointsMaterial","_inverseMatrix","_ray","_sphere","_position$2","Points","testPoint","rayPointDistanceSq","intersectPoint","distanceToRay","VideoTexture","video","isVideoTexture","updateVideo","requestVideoFrameCallback","hasVideoFrameCallback","readyState","HAVE_CURRENT_DATA","VideoFrameTexture","isVideoFrameTexture","setFrame","FramebufferTexture","isFramebufferTexture","CompressedTexture","isCompressedTexture","CompressedArrayTexture","isCompressedArrayTexture","CompressedCubeTexture","isCompressedCubeTexture","CanvasTexture","isCanvasTexture","DepthTexture","isDepthTexture","compareFunction","DepthArrayTexture","isDepthArrayTexture","CapsuleGeometry","capSegments","radialSegments","halfHeight","capArcLength","cylinderPartLength","totalArcLength","numVerticalSegments","verticesPerRow","vertex","currentArcLength","profileY","profileRadius","normalYComponent","segmentProgress","uOffset","sinTheta","cosTheta","prevIndexRow","i4","CircleGeometry","segments","thetaStart","thetaLength","segment","CylinderGeometry","radiusTop","radiusBottom","openEnded","generateTorso","generateCap","slope","indexRow","centerIndexStart","centerIndexEnd","ConeGeometry","PolyhedronGeometry","vertexBuffer","uvBuffer","subdivide","applyRadius","generateUVs","getVertexByIndex","subdivideFace","cols","aj","bj","rows","k","pushVertex","azimuth","inclination","correctUVs","correctSeam","centroid","azi","correctUV","details","DodecahedronGeometry","_v0","_v1$1","_normal","_triangle","EdgesGeometry","thresholdAngle","precisionPoints","thresholdDot","indexAttr","positionAttr","indexArr","vertKeys","hashes","edgeData","jNext","vecHash0","vecHash1","hash","reverseHash","index0","Curve","arcLengthDivisions","cacheArcLengths","getPoint","getPointAt","optionalTarget","getUtoTmapping","getPoints","divisions","getSpacedPoints","getLength","lengths","getLengths","last","sum","updateArcLengths","arcLengths","targetArcLength","comparison","lengthBefore","lengthAfter","segmentLength","segmentFraction","getTangent","t2","pt1","pt2","getTangentAt","computeFrenetFrames","closed","tangents","binormals","vec","mat","MAX_VALUE","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","isEllipseCurve","twoPi","deltaAngle","samePoints","ArcCurve","aRadius","isArcCurve","CubicPoly","c0","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","calc","t3","px","py","pz","CatmullRomCurve3","curveType","isCatmullRomCurve3","intPoint","CatmullRom","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","QuadraticBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","CubicBezier","CubicBezierCurve","isCubicBezierCurve","CubicBezierCurve3","isCubicBezierCurve3","LineCurve","isLineCurve","LineCurve3","isLineCurve3","QuadraticBezierCurve","isQuadraticBezierCurve","QuadraticBezierCurve3","isQuadraticBezierCurve3","SplineCurve","isSplineCurve","Curves","freeze","__proto__","CurvePath","curves","autoClose","curve","closePath","startPoint","endPoint","lineType","curveLengths","getCurveLengths","diff","lens","cacheLengths","sums","resolution","pts","Path","currentPoint","moveTo","lineTo","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","npts","arc","absarc","absellipse","ellipse","firstPoint","lastPoint","Shape","holes","getPointsHoles","holesPts","extractPoints","hole","earcut","holeIndices","dim","hasHoles","outerLen","outerNode","linkedList","triangles","next","prev","minX","minY","invSize","eliminateHoles","maxX","maxY","earcutLinked","clockwise","signedArea","insertNode","removeNode","filterPoints","again","steiner","area","ear","pass","indexCurve","stop","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangleExceptFirst","minZ","zOrder","maxZ","prevZ","nextZ","locallyInside","isValidDiagonal","splitPolygon","queue","getLeftmost","compareXYSlope","eliminateHole","aSlope","bSlope","bridge","findHoleBridge","bridgeReverse","hx","hy","mx","my","tanMin","pointInTriangle","sectorContainsSector","sortLinked","numMerges","inSize","tail","pSize","qSize","leftmost","intersectsPolygon","middleInside","q1","q2","o1","o2","o3","o4","onSegment","num","inside","createNode","an","bp","Earcut","triangulate","ShapeUtils","contour","isClockWise","triangulateShape","faces","removeDupEndPts","addContour","holeIndex","forEach","ExtrudeGeometry","verticesArray","uvArray","addShape","placeholder","curveSegments","steps","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","extrudePath","uvgen","UVGenerator","WorldUVGenerator","extrudePts","extrudeByPath","splineTube","binormal","position2","shapePoints","reverse","hl","ahole","mergeOverlappingPoints","THRESHOLD","THRESHOLD_SQ","prevPos","currentIndex","currentPos","scalingFactorSqrt","thresholdSqScaled","numHoles","scalePt2","pt","vlen","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","ptNextShift_x","ptNextShift_y","sf","v_trans_lensq","direction_eq","contourMovements","holesMovements","oneHoleMovements","verticesMovements","contractedContourVertices","expandedHoleVertices","bs","vert","oneHoleVertices","flen","buildLidFaces","buildSideFaces","f3","layeroffset","sidewalls","sl","slen1","slen2","f4","addVertex","nextIndex","generateTopUV","addUV","generateSideWallUV","vector2","toJSON$1","geometryShapes","indexA","indexB","indexC","a_x","a_y","b_x","b_y","c_x","c_y","indexD","a_z","b_z","c_z","d_x","d_y","d_z","IcosahedronGeometry","LatheGeometry","phiStart","phiLength","initNormals","inverseSegments","curNormal","prevNormal","base","OctahedronGeometry","PlaneGeometry","width_half","height_half","segment_width","segment_height","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","radiusStep","thetaSegmentLevel","ShapeGeometry","indexOffset","shapeVertices","shapeHoles","shapeHole","SphereGeometry","thetaEnd","grid","verticesRow","TetrahedronGeometry","TorusGeometry","tube","tubularSegments","TorusKnotGeometry","P1","P2","B","T","N","calculatePositionOnCurve","cu","su","quOverP","cs","TubeGeometry","path","frames","P","generateBufferData","generateSegment","generateIndices","WireframeGeometry","edges","o","ol","isUniqueEdge","hash1","hash2","has","Geometries","ShadowMaterial","isShadowMaterial","RawShaderMaterial","isRawShaderMaterial","MeshStandardMaterial","isMeshStandardMaterial","MeshPhysicalMaterial","isMeshPhysicalMaterial","ior","get","sheenColorMap","sheenRoughnessMap","_anisotropy","_clearcoat","_dispersion","_iridescence","_sheen","_transmission","MeshPhongMaterial","isMeshPhongMaterial","MeshToonMaterial","isMeshToonMaterial","MeshNormalMaterial","isMeshNormalMaterial","MeshLambertMaterial","isMeshLambertMaterial","MeshDepthMaterial","isMeshDepthMaterial","depthPacking","MeshDistanceMaterial","isMeshDistanceMaterial","MeshMatcapMaterial","isMeshMatcapMaterial","LineDashedMaterial","isLineDashedMaterial","convertArray","isTypedArray","isView","DataView","getKeyframeOrder","times","compareTime","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","time","subclip","sourceClip","startFrame","endFrame","fps","clip","tracks","track","valueSize","getValueSize","minStartTime","resetDuration","makeClipAdditive","targetClip","referenceFrame","referenceClip","numTracks","referenceTime","referenceTrack","referenceTrackType","ValueTypeName","targetTrack","find","referenceOffset","referenceValueSize","createInterpolant","isInterpolantFactoryMethodGLTFCubicSpline","targetValueSize","lastIndex","referenceValue","startIndex","endIndex","interpolant","evaluate","resultBuffer","referenceQuat","numTimes","valueStart","valueEnd","blendMode","AnimationUtils","Interpolant","parameterPositions","sampleValues","sampleSize","_cachedIndex","settings","DefaultSettings_","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","copySampleValue_","t1global","mid","intervalChanged_","interpolate_","getSettings_","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o0","oP","oN","wP","wN","ppp","sP","sN","LinearInterpolant","offset1","offset0","weight1","weight0","DiscreteInterpolant","KeyframeTrack","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","trackType","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","timeOffset","timeScale","trim","startTime","endTime","nKeys","to","validate","valid","prevTime","currTime","smoothInterpolation","writeIndex","keep","timeNext","offsetP","offsetN","readOffset","writeOffset","TypedKeyframeTrack","BooleanKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","AnimationClip","duration","jsonTracks","frameTime","parseKeyframeTrack","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","findByName","objectOrClipArray","clipArray","CreateClipsFromMorphTargetSequences","morphTargets","animationToMorphTargets","pattern","morphTarget","parts","match","animationMorphTargets","clips","parseAnimation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","getTrackTypeForValueTypeName","typeName","Cache","files","file","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","handlers","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","addHandler","regex","loader","removeHandler","getHandler","global","DefaultLoadingManager","Loader","manager","crossOrigin","withCredentials","resourcePath","requestHeader","load","loadAsync","setCrossOrigin","setWithCredentials","setPath","setResourcePath","setRequestHeader","DEFAULT_MATERIAL_NAME","loading","HttpError","response","FileLoader","mimeType","responseType","cached","req","Request","headers","Headers","credentials","fetch","then","status","ReadableStream","body","getReader","callbacks","reader","contentLength","total","lengthComputable","loaded","stream","controller","readData","read","_ref","done","close","byteLength","ProgressEvent","enqueue","Response","statusText","arrayBuffer","blob","text","parser","DOMParser","parseFromString","re","label","decoder","TextDecoder","decode","catch","err","finally","setResponseType","setMimeType","AnimationLoader","CompressedTextureLoader","loadTexture","texDatas","mipmapCount","isCubemap","ImageLoader","onImageLoad","removeEventListeners","onImageError","CubeTextureLoader","urls","DataTextureLoader","texData","TextureLoader","Light","intensity","groundColor","decay","penumbra","shadow","HemisphereLight","skyColor","isHemisphereLight","_projScreenMatrix$1","_lightPositionWorld$1","_lookTarget$1","LightShadow","bias","normalBias","blurSamples","mapSize","mapType","mapPass","_frameExtents","_viewportCount","_viewports","getViewportCount","getFrustum","updateMatrices","light","shadowMatrix","getViewport","viewportIndex","getFrameExtents","SpotLightShadow","isSpotLightShadow","SpotLight","isSpotLight","power","_projScreenMatrix","_lightPositionWorld","_lookTarget","PointLightShadow","isPointLightShadow","_cubeDirections","_cubeUps","PointLight","isPointLight","OrthographicCamera","isOrthographicCamera","scaleW","scaleH","DirectionalLightShadow","isDirectionalLightShadow","DirectionalLight","isDirectionalLight","AmbientLight","isAmbientLight","RectAreaLight","isRectAreaLight","SphericalHarmonics3","isSphericalHarmonics3","coefficients","zero","getAt","coeff","getIrradianceAt","sh","addScaledSH","getBasisAt","shBasis","LightProbe","isLightProbe","MaterialLoader","getTexture","createMaterialFromType","setTextures","materialLib","LoaderUtils","extractUrlBase","lastIndexOf","replace","InstancedBufferGeometry","isInstancedBufferGeometry","BufferGeometryLoader","interleavedBufferMap","arrayBufferMap","getInterleavedBuffer","getArrayBuffer","typedArray","bufferAttribute","bufferAttributeConstr","drawcalls","offsets","ObjectLoader","parseAsync","parseAnimations","parseShapes","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","parseSkeletons","bindSkeletons","bindLightTargets","hasImages","parseImagesAsync","bufferGeometryLoader","loadImage","deserializeImage","imageArray","currentUrl","deserializedImage","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","isInteger","objectAnimations","ImageBitmapLoader","isImageBitmapLoader","createImageBitmap","setOptions","imageBitmap","fetchOptions","promise","res","colorSpaceConversion","_context","AudioContext","window","webkitAudioContext","setContext","AudioLoader","bufferCopy","decodeAudioData","audioBuffer","handleError","_eyeRight","_eyeLeft","_projectionMatrix","StereoCamera","eyeSep","cameraL","cameraR","eyeSepHalf","eyeSepOnProjection","ymax","xmin","xmax","ArrayCamera","isMultiViewCamera","Clock","autoStart","oldTime","elapsedTime","running","now","getElapsedTime","getDelta","newTime","performance","_position$1","_quaternion$1","_scale$1","_orientation$1","AudioListener","gain","createGain","destination","timeDelta","_clock","getInput","removeFilter","getFilter","setFilter","getMasterVolume","setMasterVolume","setTargetAtTime","currentTime","positionX","linearRampToValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","Audio","autoplay","detune","loop","loopStart","loopEnd","playbackRate","isPlaying","hasPlaybackControl","sourceType","_startedAt","_progress","_connected","filters","getOutput","setNodeSource","audioNode","setMediaElementSource","mediaElement","createMediaElementSource","setMediaStreamSource","mediaStream","createMediaStreamSource","setBuffer","play","delay","createBufferSource","onended","onEnded","setDetune","setPlaybackRate","pause","getFilters","setFilters","getDetune","getPlaybackRate","getLoop","setLoop","setLoopStart","setLoopEnd","getVolume","setVolume","_position","_quaternion","_scale","_orientation","PositionalAudio","panner","createPanner","panningModel","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","setDirectionalCone","coneInnerAngle","coneOuterAngle","coneOuterGain","orientationX","orientationY","orientationZ","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getFrequencyData","getByteFrequencyData","getAverageFrequency","PropertyMixer","binding","mixFunction","mixFunctionAdditive","setIdentity","_slerp","_slerpAdditive","_setAdditiveIdentityQuaternion","_workIndex","_select","_setAdditiveIdentityOther","_lerp","_lerpAdditive","_setAdditiveIdentityNumeric","_mixBufferRegion","_mixBufferRegionAdditive","_setIdentity","_origIndex","_addIndex","cumulativeWeight","cumulativeWeightAdditive","useCount","referenceCount","accumulate","accuIndex","currentWeight","mix","accumulateAdditive","apply","weightAdditive","originalValueOffset","setValue","saveOriginalState","getValue","restoreOriginalState","targetIndex","workOffset","_RESERVED_CHARS_RE","_reservedRe","RegExp","_wordChar","_wordCharOrDot","_directoryRe","_nodeRe","_objectRe","_propertyRe","_trackRe","_supportedObjectNames","Composite","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","firstValidIndex","nCachedObjects_","bindings","unbind","rootNode","node","findNode","nodeName","_getValue_unbound","_setValue_unbound","create","root","isAnimationObjectGroup","sanitizeNodeName","matches","results","objectName","objectIndex","propertyIndex","lastDot","substring","searchNodeSubtree","childNode","subTreeNode","_getValue_unavailable","_setValue_unavailable","_getValue_direct","targetObject","_getValue_array","resolvedProperty","_getValue_arrayElement","_getValue_toArray","_setValue_direct","_setValue_direct_setNeedsUpdate","_setValue_direct_setMatrixWorldNeedsUpdate","_setValue_array","dest","_setValue_array_setNeedsUpdate","_setValue_array_setMatrixWorldNeedsUpdate","_setValue_arrayElement","_setValue_arrayElement_setNeedsUpdate","_setValue_arrayElement_setMatrixWorldNeedsUpdate","_setValue_fromArray","_setValue_fromArray_setNeedsUpdate","_setValue_fromArray_setMatrixWorldNeedsUpdate","targetArray","sourceArray","nodeProperty","versioning","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","bindingType","BindingType","Direct","ArrayElement","HasFromToArray","EntireArray","GetterByBindingType","SetterByBindingTypeAndVersioning","AnimationObjectGroup","_objects","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","objects","inUse","bindingsPerObject","indicesByUUID","paths","parsedPaths","nBindings","knownObject","nObjects","nCachedObjects","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","lastBindingsPath","AnimationAction","mixer","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_startTime","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","mode","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","action","halt","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_root","_update","deltaTime","timeDirection","_updateWeight","timeRunning","_updateTimeScale","clipTime","_updateTime","propertyMixers","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","_controlInterpolantsResultBuffer","AnimationMixer","_initMemoryManager","_accuIndex","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","firstInactiveBinding","lastActiveBinding","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","stopAllAction","nActions","setTime","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","RenderTarget3D","isRenderTarget3D","RenderTargetArray","isRenderTargetArray","Uniform","_id","UniformsGroup","isUniformsGroup","setName","uniformsSource","InstancedInterleavedBuffer","isInstancedInterleavedBuffer","GLBufferAttribute","elementSize","setType","setItemSize","setCount","_matrix","Raycaster","setFromCamera","coords","setFromXRController","intersectObject","ascSort","intersectObjects","propagate","Spherical","other","makeSafe","EPS","setFromCartesianCoords","Cylindrical","Matrix2","isMatrix2","_vector$4","Box2","isBox2","_startP","_startEnd","Line3","distanceSq","closestPointToPointParameter","clampToLine","startEnd2","startEnd_startP","_vector$3","SpotLightHelper","positions","cone","coneLength","coneWidth","_vector$2","_boneMatrix","_matrixWorldInv","SkeletonHelper","getBoneList","colors","isSkeletonHelper","boneList","PointLightHelper","sphereSize","_vector$1","_color1","_color2","HemisphereLightHelper","GridHelper","PolarGridHelper","sectors","rings","_v1","_v2","_v3","DirectionalLightHelper","lightPlane","targetLine","_vector","_camera","CameraHelper","pointMap","addLine","addPoint","colorFrustum","colorCone","colorUp","colorTarget","colorCross","setColors","colorAttribute","nearZ","setPoint","_box","BoxHelper","Box3Helper","PlaneHelper","positions2","_axis","_lineGeometry","_coneGeometry","ArrowHelper","headLength","headWidth","setDirection","setColor","AxesHelper","xAxisColor","yAxisColor","zAxisColor","ShapePath","subPaths","currentPath","toShapes","isCCW","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","isPointInsidePolygon","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","betterShapeHoles","newShapes","newShapeHoles","mainIdx","tmpPoints","ambiguous","toChange","sIdx","sLen","sho","hIdx","ho","hole_unassigned","s2Idx","tmpHoles","Controls","domElement","state","mouseButtons","touches","ONE","TWO","contain","imageAspect","cover","getByteLength","typeByteLength","getTextureTypeByteLength","TextureUtils","revision","__THREE__"],"sources":["C:/MyPortfolioWeb/portfolio/node_modules/three/build/three.core.js"],"sourcesContent":["/**\n * @license\n * Copyright 2010-2025 Three.js Authors\n * SPDX-License-Identifier: MIT\n */\nconst REVISION = '176';\n\n/**\n * Represents mouse buttons and interaction types in context of controls.\n *\n * @type {ConstantsMouse}\n * @constant\n */\nconst MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };\n\n/**\n * Represents touch interaction types in context of controls.\n *\n * @type {ConstantsTouch}\n * @constant\n */\nconst TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };\n\n/**\n * Disables face culling.\n *\n * @type {number}\n * @constant\n */\nconst CullFaceNone = 0;\n\n/**\n * Culls back faces.\n *\n * @type {number}\n * @constant\n */\nconst CullFaceBack = 1;\n\n/**\n * Culls front faces.\n *\n * @type {number}\n * @constant\n */\nconst CullFaceFront = 2;\n\n/**\n * Culls both front and back faces.\n *\n * @type {number}\n * @constant\n */\nconst CullFaceFrontBack = 3;\n\n/**\n * Gives unfiltered shadow maps - fastest, but lowest quality.\n *\n * @type {number}\n * @constant\n */\nconst BasicShadowMap = 0;\n\n/**\n * Filters shadow maps using the Percentage-Closer Filtering (PCF) algorithm.\n *\n * @type {number}\n * @constant\n */\nconst PCFShadowMap = 1;\n\n/**\n * Filters shadow maps using the Percentage-Closer Filtering (PCF) algorithm with\n * better soft shadows especially when using low-resolution shadow maps.\n *\n * @type {number}\n * @constant\n */\nconst PCFSoftShadowMap = 2;\n\n/**\n * Filters shadow maps using the Variance Shadow Map (VSM) algorithm.\n * When using VSMShadowMap all shadow receivers will also cast shadows.\n *\n * @type {number}\n * @constant\n */\nconst VSMShadowMap = 3;\n\n/**\n * Only front faces are rendered.\n *\n * @type {number}\n * @constant\n */\nconst FrontSide = 0;\n\n/**\n * Only back faces are rendered.\n *\n * @type {number}\n * @constant\n */\nconst BackSide = 1;\n\n/**\n * Both front and back faces are rendered.\n *\n * @type {number}\n * @constant\n */\nconst DoubleSide = 2;\n\n/**\n * No blending is performed which effectively disables\n * alpha transparency.\n *\n * @type {number}\n * @constant\n */\nconst NoBlending = 0;\n\n/**\n * The default blending.\n *\n * @type {number}\n * @constant\n */\nconst NormalBlending = 1;\n\n/**\n * Represents additive blending.\n *\n * @type {number}\n * @constant\n */\nconst AdditiveBlending = 2;\n\n/**\n * Represents subtractive blending.\n *\n * @type {number}\n * @constant\n */\nconst SubtractiveBlending = 3;\n\n/**\n * Represents multiply blending.\n *\n * @type {number}\n * @constant\n */\nconst MultiplyBlending = 4;\n\n/**\n * Represents custom blending.\n *\n * @type {number}\n * @constant\n */\nconst CustomBlending = 5;\n\n/**\n * A `source + destination` blending equation.\n *\n * @type {number}\n * @constant\n */\nconst AddEquation = 100;\n\n/**\n * A `source - destination` blending equation.\n *\n * @type {number}\n * @constant\n */\nconst SubtractEquation = 101;\n\n/**\n * A `destination - source` blending equation.\n *\n * @type {number}\n * @constant\n */\nconst ReverseSubtractEquation = 102;\n\n/**\n * A blend equation that uses the minimum of source and destination.\n *\n * @type {number}\n * @constant\n */\nconst MinEquation = 103;\n\n/**\n * A blend equation that uses the maximum of source and destination.\n *\n * @type {number}\n * @constant\n */\nconst MaxEquation = 104;\n\n/**\n * Multiplies all colors by `0`.\n *\n * @type {number}\n * @constant\n */\nconst ZeroFactor = 200;\n\n/**\n * Multiplies all colors by `1`.\n *\n * @type {number}\n * @constant\n */\nconst OneFactor = 201;\n\n/**\n * Multiplies all colors by the source colors.\n *\n * @type {number}\n * @constant\n */\nconst SrcColorFactor = 202;\n\n/**\n * Multiplies all colors by `1` minus each source color.\n *\n * @type {number}\n * @constant\n */\nconst OneMinusSrcColorFactor = 203;\n\n/**\n * Multiplies all colors by the source alpha value.\n *\n * @type {number}\n * @constant\n */\nconst SrcAlphaFactor = 204;\n\n/**\n * Multiplies all colors by 1 minus the source alpha value.\n *\n * @type {number}\n * @constant\n */\nconst OneMinusSrcAlphaFactor = 205;\n\n/**\n * Multiplies all colors by the destination alpha value.\n *\n * @type {number}\n * @constant\n */\nconst DstAlphaFactor = 206;\n\n/**\n * Multiplies all colors by `1` minus the destination alpha value.\n *\n * @type {number}\n * @constant\n */\nconst OneMinusDstAlphaFactor = 207;\n\n/**\n * Multiplies all colors by the destination color.\n *\n * @type {number}\n * @constant\n */\nconst DstColorFactor = 208;\n\n/**\n * Multiplies all colors by `1` minus each destination color.\n *\n * @type {number}\n * @constant\n */\nconst OneMinusDstColorFactor = 209;\n\n/**\n * Multiplies the RGB colors by the smaller of either the source alpha\n * value or the value of `1` minus the destination alpha value. The alpha\n * value is multiplied by `1`.\n *\n * @type {number}\n * @constant\n */\nconst SrcAlphaSaturateFactor = 210;\n\n/**\n * Multiplies all colors by a constant color.\n *\n * @type {number}\n * @constant\n */\nconst ConstantColorFactor = 211;\n\n/**\n * Multiplies all colors by `1` minus a constant color.\n *\n * @type {number}\n * @constant\n */\nconst OneMinusConstantColorFactor = 212;\n\n/**\n * Multiplies all colors by a constant alpha value.\n *\n * @type {number}\n * @constant\n */\nconst ConstantAlphaFactor = 213;\n\n/**\n * Multiplies all colors by 1 minus a constant alpha value.\n *\n * @type {number}\n * @constant\n */\nconst OneMinusConstantAlphaFactor = 214;\n\n/**\n * Never pass.\n *\n * @type {number}\n * @constant\n */\nconst NeverDepth = 0;\n\n/**\n * Always pass.\n *\n * @type {number}\n * @constant\n */\nconst AlwaysDepth = 1;\n\n/**\n * Pass if the incoming value is less than the depth buffer value.\n *\n * @type {number}\n * @constant\n */\nconst LessDepth = 2;\n\n/**\n * Pass if the incoming value is less than or equal to the depth buffer value.\n *\n * @type {number}\n * @constant\n */\nconst LessEqualDepth = 3;\n\n/**\n * Pass if the incoming value equals the depth buffer value.\n *\n * @type {number}\n * @constant\n */\nconst EqualDepth = 4;\n\n/**\n * Pass if the incoming value is greater than or equal to the depth buffer value.\n *\n * @type {number}\n * @constant\n */\nconst GreaterEqualDepth = 5;\n\n/**\n * Pass if the incoming value is greater than the depth buffer value.\n *\n * @type {number}\n * @constant\n */\nconst GreaterDepth = 6;\n\n/**\n * Pass if the incoming value is not equal to the depth buffer value.\n *\n * @type {number}\n * @constant\n */\nconst NotEqualDepth = 7;\n\n/**\n * Multiplies the environment map color with the surface color.\n *\n * @type {number}\n * @constant\n */\nconst MultiplyOperation = 0;\n\n/**\n * Uses reflectivity to blend between the two colors.\n *\n * @type {number}\n * @constant\n */\nconst MixOperation = 1;\n\n/**\n * Adds the two colors.\n *\n * @type {number}\n * @constant\n */\nconst AddOperation = 2;\n\n/**\n * No tone mapping is applied.\n *\n * @type {number}\n * @constant\n */\nconst NoToneMapping = 0;\n\n/**\n * Linear tone mapping.\n *\n * @type {number}\n * @constant\n */\nconst LinearToneMapping = 1;\n\n/**\n * Reinhard tone mapping.\n *\n * @type {number}\n * @constant\n */\nconst ReinhardToneMapping = 2;\n\n/**\n * Cineon tone mapping.\n *\n * @type {number}\n * @constant\n */\nconst CineonToneMapping = 3;\n\n/**\n * ACES Filmic tone mapping.\n *\n * @type {number}\n * @constant\n */\nconst ACESFilmicToneMapping = 4;\n\n/**\n * Custom tone mapping.\n *\n * Expects a custom implementation by modifying shader code of the material's fragment shader.\n *\n * @type {number}\n * @constant\n */\nconst CustomToneMapping = 5;\n\n/**\n * AgX tone mapping.\n *\n * @type {number}\n * @constant\n */\nconst AgXToneMapping = 6;\n\n/**\n * Neutral tone mapping.\n *\n * Implementation based on the Khronos 3D Commerce Group standard tone mapping.\n *\n * @type {number}\n * @constant\n */\nconst NeutralToneMapping = 7;\n\n/**\n * The skinned mesh shares the same world space as the skeleton.\n *\n * @type {string}\n * @constant\n */\nconst AttachedBindMode = 'attached';\n\n/**\n * The skinned mesh does not share the same world space as the skeleton.\n * This is useful when a skeleton is shared across multiple skinned meshes.\n *\n * @type {string}\n * @constant\n */\nconst DetachedBindMode = 'detached';\n\n/**\n * Maps textures using the geometry's UV coordinates.\n *\n * @type {number}\n * @constant\n */\nconst UVMapping = 300;\n\n/**\n * Reflection mapping for cube textures.\n *\n * @type {number}\n * @constant\n */\nconst CubeReflectionMapping = 301;\n\n/**\n * Refraction mapping for cube textures.\n *\n * @type {number}\n * @constant\n */\nconst CubeRefractionMapping = 302;\n\n/**\n * Reflection mapping for equirectangular textures.\n *\n * @type {number}\n * @constant\n */\nconst EquirectangularReflectionMapping = 303;\n\n/**\n * Refraction mapping for equirectangular textures.\n *\n * @type {number}\n * @constant\n */\nconst EquirectangularRefractionMapping = 304;\n\n/**\n * Reflection mapping for PMREM textures.\n *\n * @type {number}\n * @constant\n */\nconst CubeUVReflectionMapping = 306;\n\n/**\n * The texture will simply repeat to infinity.\n *\n * @type {number}\n * @constant\n */\nconst RepeatWrapping = 1000;\n\n/**\n * The last pixel of the texture stretches to the edge of the mesh.\n *\n * @type {number}\n * @constant\n */\nconst ClampToEdgeWrapping = 1001;\n\n/**\n * The texture will repeats to infinity, mirroring on each repeat.\n *\n * @type {number}\n * @constant\n */\nconst MirroredRepeatWrapping = 1002;\n\n/**\n * Returns the value of the texture element that is nearest (in Manhattan distance)\n * to the specified texture coordinates.\n *\n * @type {number}\n * @constant\n */\nconst NearestFilter = 1003;\n\n/**\n * Chooses the mipmap that most closely matches the size of the pixel being textured\n * and uses the `NearestFilter` criterion (the texel nearest to the center of the pixel)\n * to produce a texture value.\n *\n * @type {number}\n * @constant\n */\nconst NearestMipmapNearestFilter = 1004;\nconst NearestMipMapNearestFilter = 1004; // legacy\n\n/**\n * Chooses the two mipmaps that most closely match the size of the pixel being textured and\n * uses the `NearestFilter` criterion to produce a texture value from each mipmap.\n * The final texture value is a weighted average of those two values.\n *\n * @type {number}\n * @constant\n */\nconst NearestMipmapLinearFilter = 1005;\nconst NearestMipMapLinearFilter = 1005; // legacy\n\n/**\n * Returns the weighted average of the four texture elements that are closest to the specified\n * texture coordinates, and can include items wrapped or repeated from other parts of a texture,\n * depending on the values of `wrapS` and `wrapT`, and on the exact mapping.\n *\n * @type {number}\n * @constant\n */\nconst LinearFilter = 1006;\n\n/**\n * Chooses the mipmap that most closely matches the size of the pixel being textured and uses\n * the `LinearFilter` criterion (a weighted average of the four texels that are closest to the\n * center of the pixel) to produce a texture value.\n *\n * @type {number}\n * @constant\n */\nconst LinearMipmapNearestFilter = 1007;\nconst LinearMipMapNearestFilter = 1007; // legacy\n\n/**\n * Chooses the two mipmaps that most closely match the size of the pixel being textured and uses\n * the `LinearFilter` criterion to produce a texture value from each mipmap. The final texture value\n * is a weighted average of those two values.\n *\n * @type {number}\n * @constant\n */\nconst LinearMipmapLinearFilter = 1008;\nconst LinearMipMapLinearFilter = 1008; // legacy\n\n/**\n * An unsigned byte data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst UnsignedByteType = 1009;\n\n/**\n * A byte data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst ByteType = 1010;\n\n/**\n * A short data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst ShortType = 1011;\n\n/**\n * An unsigned short data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst UnsignedShortType = 1012;\n\n/**\n * An int data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst IntType = 1013;\n\n/**\n * An unsigned int data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst UnsignedIntType = 1014;\n\n/**\n * A float data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst FloatType = 1015;\n\n/**\n * A half float data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst HalfFloatType = 1016;\n\n/**\n * An unsigned short 4_4_4_4 (packed) data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst UnsignedShort4444Type = 1017;\n\n/**\n * An unsigned short 5_5_5_1 (packed) data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst UnsignedShort5551Type = 1018;\n\n/**\n * An unsigned int 24_8 data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst UnsignedInt248Type = 1020;\n\n/**\n * An unsigned int 5_9_9_9 (packed) data type for textures.\n *\n * @type {number}\n * @constant\n */\nconst UnsignedInt5999Type = 35902;\n\n/**\n * Discards the red, green and blue components and reads just the alpha component.\n *\n * @type {number}\n * @constant\n */\nconst AlphaFormat = 1021;\n\n/**\n * Discards the alpha component and reads the red, green and blue component.\n *\n * @type {number}\n * @constant\n */\nconst RGBFormat = 1022;\n\n/**\n * Reads the red, green, blue and alpha components.\n *\n * @type {number}\n * @constant\n */\nconst RGBAFormat = 1023;\n\n/**\n * Reads each element as a single depth value, converts it to floating point, and clamps to the range `[0,1]`.\n *\n * @type {number}\n * @constant\n */\nconst DepthFormat = 1026;\n\n/**\n * Reads each element is a pair of depth and stencil values. The depth component of the pair is interpreted as\n * in `DepthFormat`. The stencil component is interpreted based on the depth + stencil internal format.\n *\n * @type {number}\n * @constant\n */\nconst DepthStencilFormat = 1027;\n\n/**\n * Discards the green, blue and alpha components and reads just the red component.\n *\n * @type {number}\n * @constant\n */\nconst RedFormat = 1028;\n\n/**\n * Discards the green, blue and alpha components and reads just the red component. The texels are read as integers instead of floating point.\n *\n * @type {number}\n * @constant\n */\nconst RedIntegerFormat = 1029;\n\n/**\n * Discards the alpha, and blue components and reads the red, and green components.\n *\n * @type {number}\n * @constant\n */\nconst RGFormat = 1030;\n\n/**\n * Discards the alpha, and blue components and reads the red, and green components. The texels are read as integers instead of floating point.\n *\n * @type {number}\n * @constant\n */\nconst RGIntegerFormat = 1031;\n\n/**\n * Discards the alpha component and reads the red, green and blue component. The texels are read as integers instead of floating point.\n *\n * @type {number}\n * @constant\n */\nconst RGBIntegerFormat = 1032;\n\n/**\n * Reads the red, green, blue and alpha components. The texels are read as integers instead of floating point.\n *\n * @type {number}\n * @constant\n */\nconst RGBAIntegerFormat = 1033;\n\n/**\n * A DXT1-compressed image in an RGB image format.\n *\n * @type {number}\n * @constant\n */\nconst RGB_S3TC_DXT1_Format = 33776;\n\n/**\n * A DXT1-compressed image in an RGB image format with a simple on/off alpha value.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_S3TC_DXT1_Format = 33777;\n\n/**\n * A DXT3-compressed image in an RGBA image format. Compared to a 32-bit RGBA texture, it offers 4:1 compression.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_S3TC_DXT3_Format = 33778;\n\n/**\n * A DXT5-compressed image in an RGBA image format. It also provides a 4:1 compression, but differs to the DXT3\n * compression in how the alpha compression is done.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_S3TC_DXT5_Format = 33779;\n\n/**\n * PVRTC RGB compression in 4-bit mode. One block for each 4×4 pixels.\n *\n * @type {number}\n * @constant\n */\nconst RGB_PVRTC_4BPPV1_Format = 35840;\n\n/**\n * PVRTC RGB compression in 2-bit mode. One block for each 8×4 pixels.\n *\n * @type {number}\n * @constant\n */\nconst RGB_PVRTC_2BPPV1_Format = 35841;\n\n/**\n * PVRTC RGBA compression in 4-bit mode. One block for each 4×4 pixels.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_PVRTC_4BPPV1_Format = 35842;\n\n/**\n * PVRTC RGBA compression in 2-bit mode. One block for each 8×4 pixels.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_PVRTC_2BPPV1_Format = 35843;\n\n/**\n * ETC1 RGB format.\n *\n * @type {number}\n * @constant\n */\nconst RGB_ETC1_Format = 36196;\n\n/**\n * ETC2 RGB format.\n *\n * @type {number}\n * @constant\n */\nconst RGB_ETC2_Format = 37492;\n\n/**\n * ETC2 RGBA format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ETC2_EAC_Format = 37496;\n\n/**\n * ASTC RGBA 4x4 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_4x4_Format = 37808;\n\n/**\n * ASTC RGBA 5x4 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_5x4_Format = 37809;\n\n/**\n * ASTC RGBA 5x5 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_5x5_Format = 37810;\n\n/**\n * ASTC RGBA 6x5 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_6x5_Format = 37811;\n\n/**\n * ASTC RGBA 6x6 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_6x6_Format = 37812;\n\n/**\n * ASTC RGBA 8x5 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_8x5_Format = 37813;\n\n/**\n * ASTC RGBA 8x6 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_8x6_Format = 37814;\n\n/**\n * ASTC RGBA 8x8 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_8x8_Format = 37815;\n\n/**\n * ASTC RGBA 10x5 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_10x5_Format = 37816;\n\n/**\n * ASTC RGBA 10x6 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_10x6_Format = 37817;\n\n/**\n * ASTC RGBA 10x8 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_10x8_Format = 37818;\n\n/**\n * ASTC RGBA 10x10 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_10x10_Format = 37819;\n\n/**\n * ASTC RGBA 12x10 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_12x10_Format = 37820;\n\n/**\n * ASTC RGBA 12x12 format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_ASTC_12x12_Format = 37821;\n\n/**\n * BPTC RGBA format.\n *\n * @type {number}\n * @constant\n */\nconst RGBA_BPTC_Format = 36492;\n\n/**\n * BPTC Signed RGB format.\n *\n * @type {number}\n * @constant\n */\nconst RGB_BPTC_SIGNED_Format = 36494;\n\n/**\n * BPTC Unsigned RGB format.\n *\n * @type {number}\n * @constant\n */\nconst RGB_BPTC_UNSIGNED_Format = 36495;\n\n/**\n * RGTC1 Red format.\n *\n * @type {number}\n * @constant\n */\nconst RED_RGTC1_Format = 36283;\n\n/**\n * RGTC1 Signed Red format.\n *\n * @type {number}\n * @constant\n */\nconst SIGNED_RED_RGTC1_Format = 36284;\n\n/**\n * RGTC2 Red Green format.\n *\n * @type {number}\n * @constant\n */\nconst RED_GREEN_RGTC2_Format = 36285;\n\n/**\n * RGTC2 Signed Red Green format.\n *\n * @type {number}\n * @constant\n */\nconst SIGNED_RED_GREEN_RGTC2_Format = 36286;\n\n/**\n * Animations are played once.\n *\n * @type {number}\n * @constant\n */\nconst LoopOnce = 2200;\n\n/**\n * Animations are played with a chosen number of repetitions, each time jumping from\n * the end of the clip directly to its beginning.\n *\n * @type {number}\n * @constant\n */\nconst LoopRepeat = 2201;\n\n/**\n * Animations are played with a chosen number of repetitions, alternately playing forward\n * and backward.\n *\n * @type {number}\n * @constant\n */\nconst LoopPingPong = 2202;\n\n/**\n * Discrete interpolation mode for keyframe tracks.\n *\n * @type {number}\n * @constant\n */\nconst InterpolateDiscrete = 2300;\n\n/**\n * Linear interpolation mode for keyframe tracks.\n *\n * @type {number}\n * @constant\n */\nconst InterpolateLinear = 2301;\n\n/**\n * Smooth interpolation mode for keyframe tracks.\n *\n * @type {number}\n * @constant\n */\nconst InterpolateSmooth = 2302;\n\n/**\n * Zero curvature ending for animations.\n *\n * @type {number}\n * @constant\n */\nconst ZeroCurvatureEnding = 2400;\n\n/**\n * Zero slope ending for animations.\n *\n * @type {number}\n * @constant\n */\nconst ZeroSlopeEnding = 2401;\n\n/**\n * Wrap around ending for animations.\n *\n * @type {number}\n * @constant\n */\nconst WrapAroundEnding = 2402;\n\n/**\n * Default animation blend mode.\n *\n * @type {number}\n * @constant\n */\nconst NormalAnimationBlendMode = 2500;\n\n/**\n * Additive animation blend mode. Can be used to layer motions on top of\n * each other to build complex performances from smaller re-usable assets.\n *\n * @type {number}\n * @constant\n */\nconst AdditiveAnimationBlendMode = 2501;\n\n/**\n * For every three vertices draw a single triangle.\n *\n * @type {number}\n * @constant\n */\nconst TrianglesDrawMode = 0;\n\n/**\n * For each vertex draw a triangle from the last three vertices.\n *\n * @type {number}\n * @constant\n */\nconst TriangleStripDrawMode = 1;\n\n/**\n * For each vertex draw a triangle from the first vertex and the last two vertices.\n *\n * @type {number}\n * @constant\n */\nconst TriangleFanDrawMode = 2;\n\n/**\n * Basic depth packing.\n *\n * @type {number}\n * @constant\n */\nconst BasicDepthPacking = 3200;\n\n/**\n * A depth value is packed into 32 bit RGBA.\n *\n * @type {number}\n * @constant\n */\nconst RGBADepthPacking = 3201;\n\n/**\n * A depth value is packed into 24 bit RGB.\n *\n * @type {number}\n * @constant\n */\nconst RGBDepthPacking = 3202;\n\n/**\n * A depth value is packed into 16 bit RG.\n *\n * @type {number}\n * @constant\n */\nconst RGDepthPacking = 3203;\n\n/**\n * Normal information is relative to the underlying surface.\n *\n * @type {number}\n * @constant\n */\nconst TangentSpaceNormalMap = 0;\n\n/**\n * Normal information is relative to the object orientation.\n *\n * @type {number}\n * @constant\n */\nconst ObjectSpaceNormalMap = 1;\n\n// Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.\n\n/**\n * No color space.\n *\n * @type {string}\n * @constant\n */\nconst NoColorSpace = '';\n\n/**\n * sRGB color space.\n *\n * @type {string}\n * @constant\n */\nconst SRGBColorSpace = 'srgb';\n\n/**\n * sRGB-linear color space.\n *\n * @type {string}\n * @constant\n */\nconst LinearSRGBColorSpace = 'srgb-linear';\n\n/**\n * Linear transfer function.\n *\n * @type {string}\n * @constant\n */\nconst LinearTransfer = 'linear';\n\n/**\n * sRGB transfer function.\n *\n * @type {string}\n * @constant\n */\nconst SRGBTransfer = 'srgb';\n\n/**\n * Sets the stencil buffer value to `0`.\n *\n * @type {number}\n * @constant\n */\nconst ZeroStencilOp = 0;\n\n/**\n * Keeps the current value.\n *\n * @type {number}\n * @constant\n */\nconst KeepStencilOp = 7680;\n\n/**\n * Sets the stencil buffer value to the specified reference value.\n *\n * @type {number}\n * @constant\n */\nconst ReplaceStencilOp = 7681;\n\n/**\n * Increments the current stencil buffer value. Clamps to the maximum representable unsigned value.\n *\n * @type {number}\n * @constant\n */\nconst IncrementStencilOp = 7682;\n\n/**\n * Decrements the current stencil buffer value. Clamps to `0`.\n *\n * @type {number}\n * @constant\n */\nconst DecrementStencilOp = 7683;\n\n/**\n * Increments the current stencil buffer value. Wraps stencil buffer value to zero when incrementing\n * the maximum representable unsigned value.\n *\n * @type {number}\n * @constant\n */\nconst IncrementWrapStencilOp = 34055;\n\n/**\n * Decrements the current stencil buffer value. Wraps stencil buffer value to the maximum representable\n * unsigned value when decrementing a stencil buffer value of `0`.\n *\n * @type {number}\n * @constant\n */\nconst DecrementWrapStencilOp = 34056;\n\n/**\n * Inverts the current stencil buffer value bitwise.\n *\n * @type {number}\n * @constant\n */\nconst InvertStencilOp = 5386;\n\n/**\n * Will never return true.\n *\n * @type {number}\n * @constant\n */\nconst NeverStencilFunc = 512;\n\n/**\n * Will return true if the stencil reference value is less than the current stencil value.\n *\n * @type {number}\n * @constant\n */\nconst LessStencilFunc = 513;\n\n/**\n * Will return true if the stencil reference value is equal to the current stencil value.\n *\n * @type {number}\n * @constant\n */\nconst EqualStencilFunc = 514;\n\n/**\n * Will return true if the stencil reference value is less than or equal to the current stencil value.\n *\n * @type {number}\n * @constant\n */\nconst LessEqualStencilFunc = 515;\n\n/**\n * Will return true if the stencil reference value is greater than the current stencil value.\n *\n * @type {number}\n * @constant\n */\nconst GreaterStencilFunc = 516;\n\n/**\n * Will return true if the stencil reference value is not equal to the current stencil value.\n *\n * @type {number}\n * @constant\n */\nconst NotEqualStencilFunc = 517;\n\n/**\n * Will return true if the stencil reference value is greater than or equal to the current stencil value.\n *\n * @type {number}\n * @constant\n */\nconst GreaterEqualStencilFunc = 518;\n\n/**\n * Will always return true.\n *\n * @type {number}\n * @constant\n */\nconst AlwaysStencilFunc = 519;\n\n/**\n * Never pass.\n *\n * @type {number}\n * @constant\n */\nconst NeverCompare = 512;\n\n/**\n * Pass if the incoming value is less than the texture value.\n *\n * @type {number}\n * @constant\n */\nconst LessCompare = 513;\n\n/**\n * Pass if the incoming value equals the texture value.\n *\n * @type {number}\n * @constant\n */\nconst EqualCompare = 514;\n\n/**\n * Pass if the incoming value is less than or equal to the texture value.\n *\n * @type {number}\n * @constant\n */\nconst LessEqualCompare = 515;\n\n/**\n * Pass if the incoming value is greater than the texture value.\n *\n * @type {number}\n * @constant\n */\nconst GreaterCompare = 516;\n\n/**\n * Pass if the incoming value is not equal to the texture value.\n *\n * @type {number}\n * @constant\n */\nconst NotEqualCompare = 517;\n\n/**\n * Pass if the incoming value is greater than or equal to the texture value.\n *\n * @type {number}\n * @constant\n */\nconst GreaterEqualCompare = 518;\n\n/**\n * Always pass.\n *\n * @type {number}\n * @constant\n */\nconst AlwaysCompare = 519;\n\n/**\n * The contents are intended to be specified once by the application, and used many\n * times as the source for drawing and image specification commands.\n *\n * @type {number}\n * @constant\n */\nconst StaticDrawUsage = 35044;\n\n/**\n * The contents are intended to be respecified repeatedly by the application, and\n * used many times as the source for drawing and image specification commands.\n *\n * @type {number}\n * @constant\n */\nconst DynamicDrawUsage = 35048;\n\n/**\n * The contents are intended to be specified once by the application, and used at most\n * a few times as the source for drawing and image specification commands.\n *\n * @type {number}\n * @constant\n */\nconst StreamDrawUsage = 35040;\n\n/**\n * The contents are intended to be specified once by reading data from the 3D API, and queried\n * many times by the application.\n *\n * @type {number}\n * @constant\n */\nconst StaticReadUsage = 35045;\n\n/**\n * The contents are intended to be respecified repeatedly by reading data from the 3D API, and queried\n * many times by the application.\n *\n * @type {number}\n * @constant\n */\nconst DynamicReadUsage = 35049;\n\n/**\n * The contents are intended to be specified once by reading data from the 3D API, and queried at most\n * a few times by the application\n *\n * @type {number}\n * @constant\n */\nconst StreamReadUsage = 35041;\n\n/**\n * The contents are intended to be specified once by reading data from the 3D API, and used many times as\n * the source for WebGL drawing and image specification commands.\n *\n * @type {number}\n * @constant\n */\nconst StaticCopyUsage = 35046;\n\n/**\n * The contents are intended to be respecified repeatedly by reading data from the 3D API, and used many times\n * as the source for WebGL drawing and image specification commands.\n *\n * @type {number}\n * @constant\n */\nconst DynamicCopyUsage = 35050;\n\n/**\n * The contents are intended to be specified once by reading data from the 3D API, and used at most a few times\n * as the source for WebGL drawing and image specification commands.\n *\n * @type {number}\n * @constant\n */\nconst StreamCopyUsage = 35042;\n\n/**\n * GLSL 1 shader code.\n *\n * @type {string}\n * @constant\n */\nconst GLSL1 = '100';\n\n/**\n * GLSL 3 shader code.\n *\n * @type {string}\n * @constant\n */\nconst GLSL3 = '300 es';\n\n/**\n * WebGL coordinate system.\n *\n * @type {number}\n * @constant\n */\nconst WebGLCoordinateSystem = 2000;\n\n/**\n * WebGPU coordinate system.\n *\n * @type {number}\n * @constant\n */\nconst WebGPUCoordinateSystem = 2001;\n\n/**\n * Represents the different timestamp query types.\n *\n * @type {ConstantsTimestampQuery}\n * @constant\n */\nconst TimestampQuery = {\n\tCOMPUTE: 'compute',\n\tRENDER: 'render'\n};\n\n/**\n * Represents mouse buttons and interaction types in context of controls.\n *\n * @type {ConstantsInterpolationSamplingType}\n * @constant\n */\nconst InterpolationSamplingType = {\n\tPERSPECTIVE: 'perspective',\n\tLINEAR: 'linear',\n\tFLAT: 'flat'\n};\n\n/**\n * Represents the different interpolation sampling modes.\n *\n * @type {ConstantsInterpolationSamplingMode}\n * @constant\n */\nconst InterpolationSamplingMode = {\n\tNORMAL: 'normal',\n\tCENTROID: 'centroid',\n\tSAMPLE: 'sample',\n\tFLAT_FIRST: 'flat first',\n\tFLAT_EITHER: 'flat either'\n};\n\n/**\n * This type represents mouse buttons and interaction types in context of controls.\n *\n * @typedef {Object} ConstantsMouse\n * @property {number} MIDDLE - The left mouse button.\n * @property {number} LEFT - The middle mouse button.\n * @property {number} RIGHT - The right mouse button.\n * @property {number} ROTATE - A rotate interaction.\n * @property {number} DOLLY - A dolly interaction.\n * @property {number} PAN - A pan interaction.\n **/\n\n/**\n * This type represents touch interaction types in context of controls.\n *\n * @typedef {Object} ConstantsTouch\n * @property {number} ROTATE - A rotate interaction.\n * @property {number} PAN - A pan interaction.\n * @property {number} DOLLY_PAN - The dolly-pan interaction.\n * @property {number} DOLLY_ROTATE - A dolly-rotate interaction.\n **/\n\n/**\n * This type represents the different timestamp query types.\n *\n * @typedef {Object} ConstantsTimestampQuery\n * @property {string} COMPUTE - A `compute` timestamp query.\n * @property {string} RENDER - A `render` timestamp query.\n **/\n\n/**\n * Represents the different interpolation sampling types.\n *\n * @typedef {Object} ConstantsInterpolationSamplingType\n * @property {string} PERSPECTIVE - Perspective-correct interpolation.\n * @property {string} LINEAR - Linear interpolation.\n * @property {string} FLAT - Flat interpolation.\n */\n\n/**\n * Represents the different interpolation sampling modes.\n *\n * @typedef {Object} ConstantsInterpolationSamplingMode\n * @property {string} NORMAL - Normal sampling mode.\n * @property {string} CENTROID - Centroid sampling mode.\n * @property {string} SAMPLE - Sample-specific sampling mode.\n * @property {string} FLAT_FIRST - Flat interpolation using the first vertex.\n * @property {string} FLAT_EITHER - Flat interpolation using either vertex.\n */\n\n/**\n * This modules allows to dispatch event objects on custom JavaScript objects.\n *\n * Main repository: [eventdispatcher.js]{@link https://github.com/mrdoob/eventdispatcher.js/}\n *\n * Code Example:\n * ```js\n * class Car extends EventDispatcher {\n * \tstart() {\n *\t\tthis.dispatchEvent( { type: 'start', message: 'vroom vroom!' } );\n *\t}\n *};\n *\n * // Using events with the custom object\n * const car = new Car();\n * car.addEventListener( 'start', function ( event ) {\n * \talert( event.message );\n * } );\n *\n * car.start();\n * ```\n */\nclass EventDispatcher {\n\n\t/**\n\t * Adds the given event listener to the given event type.\n\t *\n\t * @param {string} type - The type of event to listen to.\n\t * @param {Function} listener - The function that gets called when the event is fired.\n\t */\n\taddEventListener( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) this._listeners = {};\n\n\t\tconst listeners = this._listeners;\n\n\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\tlisteners[ type ] = [];\n\n\t\t}\n\n\t\tif ( listeners[ type ].indexOf( listener ) === -1 ) {\n\n\t\t\tlisteners[ type ].push( listener );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns `true` if the given event listener has been added to the given event type.\n\t *\n\t * @param {string} type - The type of event.\n\t * @param {Function} listener - The listener to check.\n\t * @return {boolean} Whether the given event listener has been added to the given event type.\n\t */\n\thasEventListener( type, listener ) {\n\n\t\tconst listeners = this._listeners;\n\n\t\tif ( listeners === undefined ) return false;\n\n\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== -1;\n\n\t}\n\n\t/**\n\t * Removes the given event listener from the given event type.\n\t *\n\t * @param {string} type - The type of event.\n\t * @param {Function} listener - The listener to remove.\n\t */\n\tremoveEventListener( type, listener ) {\n\n\t\tconst listeners = this._listeners;\n\n\t\tif ( listeners === undefined ) return;\n\n\t\tconst listenerArray = listeners[ type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tconst index = listenerArray.indexOf( listener );\n\n\t\t\tif ( index !== -1 ) {\n\n\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Dispatches an event object.\n\t *\n\t * @param {Object} event - The event that gets fired.\n\t */\n\tdispatchEvent( event ) {\n\n\t\tconst listeners = this._listeners;\n\n\t\tif ( listeners === undefined ) return;\n\n\t\tconst listenerArray = listeners[ event.type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tevent.target = this;\n\n\t\t\t// Make a copy, in case listeners are removed while iterating.\n\t\t\tconst array = listenerArray.slice( 0 );\n\n\t\t\tfor ( let i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t}\n\n\t\t\tevent.target = null;\n\n\t\t}\n\n\t}\n\n}\n\nconst _lut = [ '00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0a', '0b', '0c', '0d', '0e', '0f', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df', 'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff' ];\n\nlet _seed = 1234567;\n\n\nconst DEG2RAD = Math.PI / 180;\nconst RAD2DEG = 180 / Math.PI;\n\n/**\n * Generate a [UUID]{@link https://en.wikipedia.org/wiki/Universally_unique_identifier}\n * (universally unique identifier).\n *\n * @return {string} The UUID.\n */\nfunction generateUUID() {\n\n\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n\tconst d0 = Math.random() * 0xffffffff | 0;\n\tconst d1 = Math.random() * 0xffffffff | 0;\n\tconst d2 = Math.random() * 0xffffffff | 0;\n\tconst d3 = Math.random() * 0xffffffff | 0;\n\tconst uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +\n\t\t\t_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +\n\t\t\t_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +\n\t\t\t_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];\n\n\t// .toLowerCase() here flattens concatenated strings to save heap memory space.\n\treturn uuid.toLowerCase();\n\n}\n\n/**\n * Clamps the given value between min and max.\n *\n * @param {number} value - The value to clamp.\n * @param {number} min - The min value.\n * @param {number} max - The max value.\n * @return {number} The clamped value.\n */\nfunction clamp( value, min, max ) {\n\n\treturn Math.max( min, Math.min( max, value ) );\n\n}\n\n/**\n * Computes the Euclidean modulo of the given parameters that\n * is `( ( n % m ) + m ) % m`.\n *\n * @param {number} n - The first parameter.\n * @param {number} m - The second parameter.\n * @return {number} The Euclidean modulo.\n */\nfunction euclideanModulo( n, m ) {\n\n\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\treturn ( ( n % m ) + m ) % m;\n\n}\n\n/**\n * Performs a linear mapping from range `<a1, a2>` to range `<b1, b2>`\n * for the given value.\n *\n * @param {number} x - The value to be mapped.\n * @param {number} a1 - Minimum value for range A.\n * @param {number} a2 - Maximum value for range A.\n * @param {number} b1 - Minimum value for range B.\n * @param {number} b2 - Maximum value for range B.\n * @return {number} The mapped value.\n */\nfunction mapLinear( x, a1, a2, b1, b2 ) {\n\n\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n}\n\n/**\n * Returns the percentage in the closed interval `[0, 1]` of the given value\n * between the start and end point.\n *\n * @param {number} x - The start point\n * @param {number} y - The end point.\n * @param {number} value - A value between start and end.\n * @return {number} The interpolation factor.\n */\nfunction inverseLerp( x, y, value ) {\n\n\t// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/\n\n\tif ( x !== y ) {\n\n\t\treturn ( value - x ) / ( y - x );\n\n\t} else {\n\n\t\treturn 0;\n\n\t}\n\n}\n\n/**\n * Returns a value linearly interpolated from two known points based on the given interval -\n * `t = 0` will return `x` and `t = 1` will return `y`.\n *\n * @param {number} x - The start point\n * @param {number} y - The end point.\n * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.\n * @return {number} The interpolated value.\n */\nfunction lerp( x, y, t ) {\n\n\treturn ( 1 - t ) * x + t * y;\n\n}\n\n/**\n * Smoothly interpolate a number from `x` to `y` in  a spring-like manner using a delta\n * time to maintain frame rate independent movement. For details, see\n * [Frame rate independent damping using lerp]{@link http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/}.\n *\n * @param {number} x - The current point.\n * @param {number} y - The target point.\n * @param {number} lambda - A higher lambda value will make the movement more sudden,\n * and a lower value will make the movement more gradual.\n * @param {number} dt - Delta time in seconds.\n * @return {number} The interpolated value.\n */\nfunction damp( x, y, lambda, dt ) {\n\n\treturn lerp( x, y, 1 - Math.exp( - lambda * dt ) );\n\n}\n\n/**\n * Returns a value that alternates between `0` and the given `length` parameter.\n *\n * @param {number} x - The value to pingpong.\n * @param {number} [length=1] - The positive value the function will pingpong to.\n * @return {number} The alternated value.\n */\nfunction pingpong( x, length = 1 ) {\n\n\t// https://www.desmos.com/calculator/vcsjnyz7x4\n\n\treturn length - Math.abs( euclideanModulo( x, length * 2 ) - length );\n\n}\n\n/**\n * Returns a value in the range `[0,1]` that represents the percentage that `x` has\n * moved between `min` and `max`, but smoothed or slowed down the closer `x` is to\n * the `min` and `max`.\n *\n * See [Smoothstep]{@link http://en.wikipedia.org/wiki/Smoothstep} for more details.\n *\n * @param {number} x - The value to evaluate based on its position between min and max.\n * @param {number} min - The min value. Any x value below min will be `0`.\n * @param {number} max - The max value. Any x value above max will be `1`.\n * @return {number} The alternated value.\n */\nfunction smoothstep( x, min, max ) {\n\n\tif ( x <= min ) return 0;\n\tif ( x >= max ) return 1;\n\n\tx = ( x - min ) / ( max - min );\n\n\treturn x * x * ( 3 - 2 * x );\n\n}\n\n/**\n * A [variation on smoothstep]{@link https://en.wikipedia.org/wiki/Smoothstep#Variations}\n * that has zero 1st and 2nd order derivatives at x=0 and x=1.\n *\n * @param {number} x - The value to evaluate based on its position between min and max.\n * @param {number} min - The min value. Any x value below min will be `0`.\n * @param {number} max - The max value. Any x value above max will be `1`.\n * @return {number} The alternated value.\n */\nfunction smootherstep( x, min, max ) {\n\n\tif ( x <= min ) return 0;\n\tif ( x >= max ) return 1;\n\n\tx = ( x - min ) / ( max - min );\n\n\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n}\n\n/**\n * Returns a random integer from `<low, high>` interval.\n *\n * @param {number} low - The lower value boundary.\n * @param {number} high - The upper value boundary\n * @return {number} A random integer.\n */\nfunction randInt( low, high ) {\n\n\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n}\n\n/**\n * Returns a random float from `<low, high>` interval.\n *\n * @param {number} low - The lower value boundary.\n * @param {number} high - The upper value boundary\n * @return {number} A random float.\n */\nfunction randFloat( low, high ) {\n\n\treturn low + Math.random() * ( high - low );\n\n}\n\n/**\n * Returns a random integer from `<-range/2, range/2>` interval.\n *\n * @param {number} range - Defines the value range.\n * @return {number} A random float.\n */\nfunction randFloatSpread( range ) {\n\n\treturn range * ( 0.5 - Math.random() );\n\n}\n\n/**\n * Returns a deterministic pseudo-random float in the interval `[0, 1]`.\n *\n * @param {number} [s] - The integer seed.\n * @return {number} A random float.\n */\nfunction seededRandom( s ) {\n\n\tif ( s !== undefined ) _seed = s;\n\n\t// Mulberry32 generator\n\n\tlet t = _seed += 0x6D2B79F5;\n\n\tt = Math.imul( t ^ t >>> 15, t | 1 );\n\n\tt ^= t + Math.imul( t ^ t >>> 7, t | 61 );\n\n\treturn ( ( t ^ t >>> 14 ) >>> 0 ) / 4294967296;\n\n}\n\n/**\n * Converts degrees to radians.\n *\n * @param {number} degrees - A value in degrees.\n * @return {number} The converted value in radians.\n */\nfunction degToRad( degrees ) {\n\n\treturn degrees * DEG2RAD;\n\n}\n\n/**\n * Converts radians to degrees.\n *\n * @param {number} radians - A value in radians.\n * @return {number} The converted value in degrees.\n */\nfunction radToDeg( radians ) {\n\n\treturn radians * RAD2DEG;\n\n}\n\n/**\n * Returns `true` if the given number is a power of two.\n *\n * @param {number} value - The value to check.\n * @return {boolean} Whether the given number is a power of two or not.\n */\nfunction isPowerOfTwo( value ) {\n\n\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n}\n\n/**\n * Returns the smallest power of two that is greater than or equal to the given number.\n *\n * @param {number} value - The value to find a POT for.\n * @return {number} The smallest power of two that is greater than or equal to the given number.\n */\nfunction ceilPowerOfTwo( value ) {\n\n\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\n\n}\n\n/**\n * Returns the largest power of two that is less than or equal to the given number.\n *\n * @param {number} value - The value to find a POT for.\n * @return {number} The largest power of two that is less than or equal to the given number.\n */\nfunction floorPowerOfTwo( value ) {\n\n\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n\n}\n\n/**\n * Sets the given quaternion from the [Intrinsic Proper Euler Angles]{@link https://en.wikipedia.org/wiki/Euler_angles}\n * defined by the given angles and order.\n *\n * Rotations are applied to the axes in the order specified by order:\n * rotation by angle `a` is applied first, then by angle `b`, then by angle `c`.\n *\n * @param {Quaternion} q - The quaternion to set.\n * @param {number} a - The rotation applied to the first axis, in radians.\n * @param {number} b - The rotation applied to the second axis, in radians.\n * @param {number} c - The rotation applied to the third axis, in radians.\n * @param {('XYX'|'XZX'|'YXY'|'YZY'|'ZXZ'|'ZYZ')} order - A string specifying the axes order.\n */\nfunction setQuaternionFromProperEuler( q, a, b, c, order ) {\n\n\tconst cos = Math.cos;\n\tconst sin = Math.sin;\n\n\tconst c2 = cos( b / 2 );\n\tconst s2 = sin( b / 2 );\n\n\tconst c13 = cos( ( a + c ) / 2 );\n\tconst s13 = sin( ( a + c ) / 2 );\n\n\tconst c1_3 = cos( ( a - c ) / 2 );\n\tconst s1_3 = sin( ( a - c ) / 2 );\n\n\tconst c3_1 = cos( ( c - a ) / 2 );\n\tconst s3_1 = sin( ( c - a ) / 2 );\n\n\tswitch ( order ) {\n\n\t\tcase 'XYX':\n\t\t\tq.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'YZY':\n\t\t\tq.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'ZXZ':\n\t\t\tq.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'XZX':\n\t\t\tq.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'YXY':\n\t\t\tq.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'ZYZ':\n\t\t\tq.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tconsole.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );\n\n\t}\n\n}\n\n/**\n * Denormalizes the given value according to the given typed array.\n *\n * @param {number} value - The value to denormalize.\n * @param {TypedArray} array - The typed array that defines the data type of the value.\n * @return {number} The denormalize (float) value in the range `[0,1]`.\n */\nfunction denormalize( value, array ) {\n\n\tswitch ( array.constructor ) {\n\n\t\tcase Float32Array:\n\n\t\t\treturn value;\n\n\t\tcase Uint32Array:\n\n\t\t\treturn value / 4294967295.0;\n\n\t\tcase Uint16Array:\n\n\t\t\treturn value / 65535.0;\n\n\t\tcase Uint8Array:\n\n\t\t\treturn value / 255.0;\n\n\t\tcase Int32Array:\n\n\t\t\treturn Math.max( value / 2147483647.0, -1 );\n\n\t\tcase Int16Array:\n\n\t\t\treturn Math.max( value / 32767.0, -1 );\n\n\t\tcase Int8Array:\n\n\t\t\treturn Math.max( value / 127.0, -1 );\n\n\t\tdefault:\n\n\t\t\tthrow new Error( 'Invalid component type.' );\n\n\t}\n\n}\n\n/**\n * Normalizes the given value according to the given typed array.\n *\n * @param {number} value - The float value in the range `[0,1]` to normalize.\n * @param {TypedArray} array - The typed array that defines the data type of the value.\n * @return {number} The normalize value.\n */\nfunction normalize( value, array ) {\n\n\tswitch ( array.constructor ) {\n\n\t\tcase Float32Array:\n\n\t\t\treturn value;\n\n\t\tcase Uint32Array:\n\n\t\t\treturn Math.round( value * 4294967295.0 );\n\n\t\tcase Uint16Array:\n\n\t\t\treturn Math.round( value * 65535.0 );\n\n\t\tcase Uint8Array:\n\n\t\t\treturn Math.round( value * 255.0 );\n\n\t\tcase Int32Array:\n\n\t\t\treturn Math.round( value * 2147483647.0 );\n\n\t\tcase Int16Array:\n\n\t\t\treturn Math.round( value * 32767.0 );\n\n\t\tcase Int8Array:\n\n\t\t\treturn Math.round( value * 127.0 );\n\n\t\tdefault:\n\n\t\t\tthrow new Error( 'Invalid component type.' );\n\n\t}\n\n}\n\n/**\n * @class\n * @classdesc A collection of math utility functions.\n * @hideconstructor\n */\nconst MathUtils = {\n\tDEG2RAD: DEG2RAD,\n\tRAD2DEG: RAD2DEG,\n\t/**\n\t * Generate a [UUID]{@link https://en.wikipedia.org/wiki/Universally_unique_identifier}\n\t * (universally unique identifier).\n\t *\n\t * @static\n\t * @method\n\t * @return {string} The UUID.\n\t */\n\tgenerateUUID: generateUUID,\n\t/**\n\t * Clamps the given value between min and max.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} value - The value to clamp.\n\t * @param {number} min - The min value.\n\t * @param {number} max - The max value.\n\t * @return {number} The clamped value.\n\t */\n\tclamp: clamp,\n\t/**\n\t * Computes the Euclidean modulo of the given parameters that\n\t * is `( ( n % m ) + m ) % m`.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} n - The first parameter.\n\t * @param {number} m - The second parameter.\n\t * @return {number} The Euclidean modulo.\n\t */\n\teuclideanModulo: euclideanModulo,\n\t/**\n\t * Performs a linear mapping from range `<a1, a2>` to range `<b1, b2>`\n\t * for the given value.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} x - The value to be mapped.\n\t * @param {number} a1 - Minimum value for range A.\n\t * @param {number} a2 - Maximum value for range A.\n\t * @param {number} b1 - Minimum value for range B.\n\t * @param {number} b2 - Maximum value for range B.\n\t * @return {number} The mapped value.\n\t */\n\tmapLinear: mapLinear,\n\t/**\n\t * Returns the percentage in the closed interval `[0, 1]` of the given value\n\t * between the start and end point.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} x - The start point\n\t * @param {number} y - The end point.\n\t * @param {number} value - A value between start and end.\n\t * @return {number} The interpolation factor.\n\t */\n\tinverseLerp: inverseLerp,\n\t/**\n\t * Returns a value linearly interpolated from two known points based on the given interval -\n\t * `t = 0` will return `x` and `t = 1` will return `y`.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} x - The start point\n\t * @param {number} y - The end point.\n\t * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.\n\t * @return {number} The interpolated value.\n\t */\n\tlerp: lerp,\n\t/**\n\t * Smoothly interpolate a number from `x` to `y` in  a spring-like manner using a delta\n\t * time to maintain frame rate independent movement. For details, see\n\t * [Frame rate independent damping using lerp]{@link http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/}.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} x - The current point.\n\t * @param {number} y - The target point.\n\t * @param {number} lambda - A higher lambda value will make the movement more sudden,\n\t * and a lower value will make the movement more gradual.\n\t * @param {number} dt - Delta time in seconds.\n\t * @return {number} The interpolated value.\n\t */\n\tdamp: damp,\n\t/**\n\t * Returns a value that alternates between `0` and the given `length` parameter.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} x - The value to pingpong.\n\t * @param {number} [length=1] - The positive value the function will pingpong to.\n\t * @return {number} The alternated value.\n\t */\n\tpingpong: pingpong,\n\t/**\n\t * Returns a value in the range `[0,1]` that represents the percentage that `x` has\n\t * moved between `min` and `max`, but smoothed or slowed down the closer `x` is to\n\t * the `min` and `max`.\n\t *\n\t * See [Smoothstep]{@link http://en.wikipedia.org/wiki/Smoothstep} for more details.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} x - The value to evaluate based on its position between min and max.\n\t * @param {number} min - The min value. Any x value below min will be `0`.\n\t * @param {number} max - The max value. Any x value above max will be `1`.\n\t * @return {number} The alternated value.\n\t */\n\tsmoothstep: smoothstep,\n\t/**\n\t * A [variation on smoothstep]{@link https://en.wikipedia.org/wiki/Smoothstep#Variations}\n\t * that has zero 1st and 2nd order derivatives at x=0 and x=1.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} x - The value to evaluate based on its position between min and max.\n\t * @param {number} min - The min value. Any x value below min will be `0`.\n\t * @param {number} max - The max value. Any x value above max will be `1`.\n\t * @return {number} The alternated value.\n\t */\n\tsmootherstep: smootherstep,\n\t/**\n\t * Returns a random integer from `<low, high>` interval.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} low - The lower value boundary.\n\t * @param {number} high - The upper value boundary\n\t * @return {number} A random integer.\n\t */\n\trandInt: randInt,\n\t/**\n\t * Returns a random float from `<low, high>` interval.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} low - The lower value boundary.\n\t * @param {number} high - The upper value boundary\n\t * @return {number} A random float.\n\t */\n\trandFloat: randFloat,\n\t/**\n\t * Returns a random integer from `<-range/2, range/2>` interval.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} range - Defines the value range.\n\t * @return {number} A random float.\n\t */\n\trandFloatSpread: randFloatSpread,\n\t/**\n\t * Returns a deterministic pseudo-random float in the interval `[0, 1]`.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} [s] - The integer seed.\n\t * @return {number} A random float.\n\t */\n\tseededRandom: seededRandom,\n\t/**\n\t * Converts degrees to radians.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} degrees - A value in degrees.\n\t * @return {number} The converted value in radians.\n\t */\n\tdegToRad: degToRad,\n\t/**\n\t * Converts radians to degrees.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} radians - A value in radians.\n\t * @return {number} The converted value in degrees.\n\t */\n\tradToDeg: radToDeg,\n\t/**\n\t * Returns `true` if the given number is a power of two.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} value - The value to check.\n\t * @return {boolean} Whether the given number is a power of two or not.\n\t */\n\tisPowerOfTwo: isPowerOfTwo,\n\t/**\n\t * Returns the smallest power of two that is greater than or equal to the given number.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} value - The value to find a POT for.\n\t * @return {number} The smallest power of two that is greater than or equal to the given number.\n\t */\n\tceilPowerOfTwo: ceilPowerOfTwo,\n\t/**\n\t * Returns the largest power of two that is less than or equal to the given number.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} value - The value to find a POT for.\n\t * @return {number} The largest power of two that is less than or equal to the given number.\n\t */\n\tfloorPowerOfTwo: floorPowerOfTwo,\n\t/**\n\t * Sets the given quaternion from the [Intrinsic Proper Euler Angles]{@link https://en.wikipedia.org/wiki/Euler_angles}\n\t * defined by the given angles and order.\n\t *\n\t * Rotations are applied to the axes in the order specified by order:\n\t * rotation by angle `a` is applied first, then by angle `b`, then by angle `c`.\n\t *\n\t * @static\n\t * @method\n\t * @param {Quaternion} q - The quaternion to set.\n\t * @param {number} a - The rotation applied to the first axis, in radians.\n\t * @param {number} b - The rotation applied to the second axis, in radians.\n\t * @param {number} c - The rotation applied to the third axis, in radians.\n\t * @param {('XYX'|'XZX'|'YXY'|'YZY'|'ZXZ'|'ZYZ')} order - A string specifying the axes order.\n\t */\n\tsetQuaternionFromProperEuler: setQuaternionFromProperEuler,\n\t/**\n\t * Normalizes the given value according to the given typed array.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} value - The float value in the range `[0,1]` to normalize.\n\t * @param {TypedArray} array - The typed array that defines the data type of the value.\n\t * @return {number} The normalize value.\n\t */\n\tnormalize: normalize,\n\t/**\n\t * Denormalizes the given value according to the given typed array.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} value - The value to denormalize.\n\t * @param {TypedArray} array - The typed array that defines the data type of the value.\n\t * @return {number} The denormalize (float) value in the range `[0,1]`.\n\t */\n\tdenormalize: denormalize\n};\n\n/**\n * Class representing a 2D vector. A 2D vector is an ordered pair of numbers\n * (labeled x and y), which can be used to represent a number of things, such as:\n *\n * - A point in 2D space (i.e. a position on a plane).\n * - A direction and length across a plane. In three.js the length will\n * always be the Euclidean distance(straight-line distance) from `(0, 0)` to `(x, y)`\n * and the direction is also measured from `(0, 0)` towards `(x, y)`.\n * - Any arbitrary ordered pair of numbers.\n *\n * There are other things a 2D vector can be used to represent, such as\n * momentum vectors, complex numbers and so on, however these are the most\n * common uses in three.js.\n *\n * Iterating through a vector instance will yield its components `(x, y)` in\n * the corresponding order.\n * ```js\n * const a = new THREE.Vector2( 0, 1 );\n *\n * //no arguments; will be initialised to (0, 0)\n * const b = new THREE.Vector2( );\n *\n * const d = a.distanceTo( b );\n * ```\n */\nclass Vector2 {\n\n\t/**\n\t * Constructs a new 2D vector.\n\t *\n\t * @param {number} [x=0] - The x value of this vector.\n\t * @param {number} [y=0] - The y value of this vector.\n\t */\n\tconstructor( x = 0, y = 0 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tVector2.prototype.isVector2 = true;\n\n\t\t/**\n\t\t * The x value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.x = x;\n\n\t\t/**\n\t\t * The y value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.y = y;\n\n\t}\n\n\t/**\n\t * Alias for {@link Vector2#x}.\n\t *\n\t * @type {number}\n\t */\n\tget width() {\n\n\t\treturn this.x;\n\n\t}\n\n\tset width( value ) {\n\n\t\tthis.x = value;\n\n\t}\n\n\t/**\n\t * Alias for {@link Vector2#y}.\n\t *\n\t * @type {number}\n\t */\n\tget height() {\n\n\t\treturn this.y;\n\n\t}\n\n\tset height( value ) {\n\n\t\tthis.y = value;\n\n\t}\n\n\t/**\n\t * Sets the vector components.\n\t *\n\t * @param {number} x - The value of the x component.\n\t * @param {number} y - The value of the y component.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tset( x, y ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components to the same value.\n\t *\n\t * @param {number} scalar - The value to set for all vector components.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's x component to the given value\n\t *\n\t * @param {number} x - The value to set.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's y component to the given value\n\t *\n\t * @param {number} y - The value to set.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Allows to set a vector component with an index.\n\t *\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y.\n\t * @param {number} value - The value to set.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the value of the vector component which matches the given index.\n\t *\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y.\n\t * @return {number} A vector component value.\n\t */\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns a new vector with copied values from this instance.\n\t *\n\t * @return {Vector2} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y );\n\n\t}\n\n\t/**\n\t * Copies the values of the given vector to this instance.\n\t *\n\t * @param {Vector2} v - The vector to copy.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vector to this instance.\n\t *\n\t * @param {Vector2} v - The vector to add.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tadd( v ) {\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given scalar value to all components of this instance.\n\t *\n\t * @param {number} s - The scalar to add.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector2} a - The first vector.\n\t * @param {Vector2} b - The second vector.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vector scaled by the given factor to this instance.\n\t *\n\t * @param {Vector2} v - The vector.\n\t * @param {number} s - The factor that scales `v`.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given vector from this instance.\n\t *\n\t * @param {Vector2} v - The vector to subtract.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tsub( v ) {\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given scalar value from all components of this instance.\n\t *\n\t * @param {number} s - The scalar to subtract.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector2} a - The first vector.\n\t * @param {Vector2} b - The second vector.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the given vector with this instance.\n\t *\n\t * @param {Vector2} v - The vector to multiply.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the given scalar value with all components of this instance.\n\t *\n\t * @param {number} scalar - The scalar to multiply.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Divides this instance by the given vector.\n\t *\n\t * @param {Vector2} v - The vector to divide.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tdivide( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Divides this vector by the given scalar.\n\t *\n\t * @param {number} scalar - The scalar to divide.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\t/**\n\t * Multiplies this vector (with an implicit 1 as the 3rd component) by\n\t * the given 3x3 matrix.\n\t *\n\t * @param {Matrix3} m - The matrix to apply.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tapplyMatrix3( m ) {\n\n\t\tconst x = this.x, y = this.y;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x or y value is greater than the given vector's x or y\n\t * value, replace that value with the corresponding min value.\n\t *\n\t * @param {Vector2} v - The vector.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x or y value is less than the given vector's x or y\n\t * value, replace that value with the corresponding max value.\n\t *\n\t * @param {Vector2} v - The vector.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x or y value is greater than the max vector's x or y\n\t * value, it is replaced by the corresponding value.\n\t * If this vector's x or y value is less than the min vector's x or y value,\n\t * it is replaced by the corresponding value.\n\t *\n\t * @param {Vector2} min - The minimum x and y values.\n\t * @param {Vector2} max - The maximum x and y values in the desired range.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = clamp( this.x, min.x, max.x );\n\t\tthis.y = clamp( this.y, min.y, max.y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x or y values are greater than the max value, they are\n\t * replaced by the max value.\n\t * If this vector's x or y values are less than the min value, they are\n\t * replaced by the min value.\n\t *\n\t * @param {number} minVal - The minimum value the components will be clamped to.\n\t * @param {number} maxVal - The maximum value the components will be clamped to.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = clamp( this.x, minVal, maxVal );\n\t\tthis.y = clamp( this.y, minVal, maxVal );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's length is greater than the max value, it is replaced by\n\t * the max value.\n\t * If this vector's length is less than the min value, it is replaced by the\n\t * min value.\n\t *\n\t * @param {number} min - The minimum value the vector length will be clamped to.\n\t * @param {number} max - The maximum value the vector length will be clamped to.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( clamp( length, min, max ) );\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded down to the nearest integer value.\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded up to the nearest integer value.\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded to the nearest integer value\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded towards zero (up if negative,\n\t * down if positive) to an integer value.\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */\n\troundToZero() {\n\n\t\tthis.x = Math.trunc( this.x );\n\t\tthis.y = Math.trunc( this.y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Inverts this vector - i.e. sets x = -x and y = -y.\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Calculates the dot product of the given vector with this instance.\n\t *\n\t * @param {Vector2} v - The vector to compute the dot product with.\n\t * @return {number} The result of the dot product.\n\t */\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y;\n\n\t}\n\n\t/**\n\t * Calculates the cross product of the given vector with this instance.\n\t *\n\t * @param {Vector2} v - The vector to compute the cross product with.\n\t * @return {number} The result of the cross product.\n\t */\n\tcross( v ) {\n\n\t\treturn this.x * v.y - this.y * v.x;\n\n\t}\n\n\t/**\n\t * Computes the square of the Euclidean length (straight-line length) from\n\t * (0, 0) to (x, y). If you are comparing the lengths of vectors, you should\n\t * compare the length squared instead as it is slightly more efficient to calculate.\n\t *\n\t * @return {number} The square length of this vector.\n\t */\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y;\n\n\t}\n\n\t/**\n\t * Computes the  Euclidean length (straight-line length) from (0, 0) to (x, y).\n\t *\n\t * @return {number} The length of this vector.\n\t */\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t}\n\n\t/**\n\t * Computes the Manhattan length of this vector.\n\t *\n\t * @return {number} The length of this vector.\n\t */\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t}\n\n\t/**\n\t * Converts this vector to a unit vector - that is, sets it equal to a vector\n\t * with the same direction as this one, but with a vector length of `1`.\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\t/**\n\t * Computes the angle in radians of this vector with respect to the positive x-axis.\n\t *\n\t * @return {number} The angle in radians.\n\t */\n\tangle() {\n\n\t\tconst angle = Math.atan2( - this.y, - this.x ) + Math.PI;\n\n\t\treturn angle;\n\n\t}\n\n\t/**\n\t * Returns the angle between the given vector and this instance in radians.\n\t *\n\t * @param {Vector2} v - The vector to compute the angle with.\n\t * @return {number} The angle in radians.\n\t */\n\tangleTo( v ) {\n\n\t\tconst denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\n\n\t\tif ( denominator === 0 ) return Math.PI / 2;\n\n\t\tconst theta = this.dot( v ) / denominator;\n\n\t\t// clamp, to handle numerical problems\n\n\t\treturn Math.acos( clamp( theta, -1, 1 ) );\n\n\t}\n\n\t/**\n\t * Computes the distance from the given vector to this instance.\n\t *\n\t * @param {Vector2} v - The vector to compute the distance to.\n\t * @return {number} The distance.\n\t */\n\tdistanceTo( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t}\n\n\t/**\n\t * Computes the squared distance from the given vector to this instance.\n\t * If you are just comparing the distance with another distance, you should compare\n\t * the distance squared instead as it is slightly more efficient to calculate.\n\t *\n\t * @param {Vector2} v - The vector to compute the squared distance to.\n\t * @return {number} The squared distance.\n\t */\n\tdistanceToSquared( v ) {\n\n\t\tconst dx = this.x - v.x, dy = this.y - v.y;\n\t\treturn dx * dx + dy * dy;\n\n\t}\n\n\t/**\n\t * Computes the Manhattan distance from the given vector to this instance.\n\t *\n\t * @param {Vector2} v - The vector to compute the Manhattan distance to.\n\t * @return {number} The Manhattan distance.\n\t */\n\tmanhattanDistanceTo( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t}\n\n\t/**\n\t * Sets this vector to a vector with the same direction as this one, but\n\t * with the specified length.\n\t *\n\t * @param {number} length - The new length of this vector.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\t/**\n\t * Linearly interpolates between the given vector and this instance, where\n\t * alpha is the percent distance along the line - alpha = 0 will be this\n\t * vector, and alpha = 1 will be the given one.\n\t *\n\t * @param {Vector2} v - The vector to interpolate towards.\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Linearly interpolates between the given vectors, where alpha is the percent\n\t * distance along the line - alpha = 0 will be first vector, and alpha = 1 will\n\t * be the second one. The result is stored in this instance.\n\t *\n\t * @param {Vector2} v1 - The first vector.\n\t * @param {Vector2} v2 - The second vector.\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this vector is equal with the given one.\n\t *\n\t * @param {Vector2} v - The vector to test for equality.\n\t * @return {boolean} Whether this vector is equal with the given one.\n\t */\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t}\n\n\t/**\n\t * Sets this vector's x value to be `array[ offset ]` and y\n\t * value to be `array[ offset + 1 ]`.\n\t *\n\t * @param {Array<number>} array - An array holding the vector component values.\n\t * @param {number} [offset=0] - The offset into the array.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Writes the components of this vector to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array holding the vector components.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number>} The vector components.\n\t */\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\n\t\treturn array;\n\n\t}\n\n\t/**\n\t * Sets the components of this vector from the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute holding vector data.\n\t * @param {number} index - The index into the attribute.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Rotates this vector around the given center by the given angle.\n\t *\n\t * @param {Vector2} center - The point around which to rotate.\n\t * @param {number} angle - The angle to rotate, in radians.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\trotateAround( center, angle ) {\n\n\t\tconst c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\tconst x = this.x - center.x;\n\t\tconst y = this.y - center.y;\n\n\t\tthis.x = x * c - y * s + center.x;\n\t\tthis.y = x * s + y * c + center.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets each component of this vector to a pseudo-random value between `0` and\n\t * `1`, excluding `1`.\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\n\t}\n\n}\n\n/**\n * Represents a 3x3 matrix.\n *\n * A Note on Row-Major and Column-Major Ordering:\n *\n * The constructor and {@link Matrix3#set} method take arguments in\n * [row-major]{@link https://en.wikipedia.org/wiki/Row-_and_column-major_order#Column-major_order}\n * order, while internally they are stored in the {@link Matrix3#elements} array in column-major order.\n * This means that calling:\n * ```js\n * const m = new THREE.Matrix();\n * m.set( 11, 12, 13,\n *        21, 22, 23,\n *        31, 32, 33 );\n * ```\n * will result in the elements array containing:\n * ```js\n * m.elements = [ 11, 21, 31,\n *                12, 22, 32,\n *                13, 23, 33 ];\n * ```\n * and internally all calculations are performed using column-major ordering.\n * However, as the actual ordering makes no difference mathematically and\n * most people are used to thinking about matrices in row-major order, the\n * three.js documentation shows matrices in row-major order. Just bear in\n * mind that if you are reading the source code, you'll have to take the\n * transpose of any matrices outlined here to make sense of the calculations.\n */\nclass Matrix3 {\n\n\t/**\n\t * Constructs a new 3x3 matrix. The arguments are supposed to be\n\t * in row-major order. If no arguments are provided, the constructor\n\t * initializes the matrix as an identity matrix.\n\t *\n\t * @param {number} [n11] - 1-1 matrix element.\n\t * @param {number} [n12] - 1-2 matrix element.\n\t * @param {number} [n13] - 1-3 matrix element.\n\t * @param {number} [n21] - 2-1 matrix element.\n\t * @param {number} [n22] - 2-2 matrix element.\n\t * @param {number} [n23] - 2-3 matrix element.\n\t * @param {number} [n31] - 3-1 matrix element.\n\t * @param {number} [n32] - 3-2 matrix element.\n\t * @param {number} [n33] - 3-3 matrix element.\n\t */\n\tconstructor( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tMatrix3.prototype.isMatrix3 = true;\n\n\t\t/**\n\t\t * A column-major list of matrix values.\n\t\t *\n\t\t * @type {Array<number>}\n\t\t */\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t];\n\n\t\tif ( n11 !== undefined ) {\n\n\t\t\tthis.set( n11, n12, n13, n21, n22, n23, n31, n32, n33 );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the elements of the matrix.The arguments are supposed to be\n\t * in row-major order.\n\t *\n\t * @param {number} [n11] - 1-1 matrix element.\n\t * @param {number} [n12] - 1-2 matrix element.\n\t * @param {number} [n13] - 1-3 matrix element.\n\t * @param {number} [n21] - 2-1 matrix element.\n\t * @param {number} [n22] - 2-2 matrix element.\n\t * @param {number} [n23] - 2-3 matrix element.\n\t * @param {number} [n31] - 3-1 matrix element.\n\t * @param {number} [n32] - 3-2 matrix element.\n\t * @param {number} [n33] - 3-3 matrix element.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tset( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix to the 3x3 identity matrix.\n\t *\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tidentity() {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the values of the given matrix to this instance.\n\t *\n\t * @param {Matrix3} m - The matrix to copy.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tcopy( m ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\n\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\n\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Extracts the basis of this matrix into the three axis vectors provided.\n\t *\n\t * @param {Vector3} xAxis - The basis's x axis.\n\t * @param {Vector3} yAxis - The basis's y axis.\n\t * @param {Vector3} zAxis - The basis's z axis.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\textractBasis( xAxis, yAxis, zAxis ) {\n\n\t\txAxis.setFromMatrix3Column( this, 0 );\n\t\tyAxis.setFromMatrix3Column( this, 1 );\n\t\tzAxis.setFromMatrix3Column( this, 2 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Set this matrix to the upper 3x3 matrix of the given 4x4 matrix.\n\t *\n\t * @param {Matrix4} m - The 4x4 matrix.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tsetFromMatrix4( m ) {\n\n\t\tconst me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\n\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\n\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Post-multiplies this matrix by the given 3x3 matrix.\n\t *\n\t * @param {Matrix3} m - The matrix to multiply with.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tmultiply( m ) {\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t}\n\n\t/**\n\t * Pre-multiplies this matrix by the given 3x3 matrix.\n\t *\n\t * @param {Matrix3} m - The matrix to multiply with.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tpremultiply( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t}\n\n\t/**\n\t * Multiples the given 3x3 matrices and stores the result\n\t * in this matrix.\n\t *\n\t * @param {Matrix3} a - The first matrix.\n\t * @param {Matrix3} b - The second matrix.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tmultiplyMatrices( a, b ) {\n\n\t\tconst ae = a.elements;\n\t\tconst be = b.elements;\n\t\tconst te = this.elements;\n\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\n\t\tconst a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\n\t\tconst a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\n\n\t\tconst b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\n\t\tconst b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\n\t\tconst b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies every component of the matrix by the given scalar.\n\t *\n\t * @param {number} s - The scalar.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tmultiplyScalar( s ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes and returns the determinant of this matrix.\n\t *\n\t * @return {number} The determinant.\n\t */\n\tdeterminant() {\n\n\t\tconst te = this.elements;\n\n\t\tconst a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t}\n\n\t/**\n\t * Inverts this matrix, using the [analytic method]{@link https://en.wikipedia.org/wiki/Invertible_matrix#Analytic_solution}.\n\t * You can not invert with a determinant of zero. If you attempt this, the method produces\n\t * a zero matrix instead.\n\t *\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tinvert() {\n\n\t\tconst te = this.elements,\n\n\t\t\tn11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ],\n\t\t\tn12 = te[ 3 ], n22 = te[ 4 ], n32 = te[ 5 ],\n\t\t\tn13 = te[ 6 ], n23 = te[ 7 ], n33 = te[ 8 ],\n\n\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\tif ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 );\n\n\t\tconst detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\tte[ 3 ] = t12 * detInv;\n\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\tte[ 6 ] = t13 * detInv;\n\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Transposes this matrix in place.\n\t *\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\ttranspose() {\n\n\t\tlet tmp;\n\t\tconst m = this.elements;\n\n\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes the normal matrix which is the inverse transpose of the upper\n\t * left 3x3 portion of the given 4x4 matrix.\n\t *\n\t * @param {Matrix4} matrix4 - The 4x4 matrix.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tgetNormalMatrix( matrix4 ) {\n\n\t\treturn this.setFromMatrix4( matrix4 ).invert().transpose();\n\n\t}\n\n\t/**\n\t * Transposes this matrix into the supplied array, and returns itself unchanged.\n\t *\n\t * @param {Array<number>} r - An array to store the transposed matrix elements.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\ttransposeIntoArray( r ) {\n\n\t\tconst m = this.elements;\n\n\t\tr[ 0 ] = m[ 0 ];\n\t\tr[ 1 ] = m[ 3 ];\n\t\tr[ 2 ] = m[ 6 ];\n\t\tr[ 3 ] = m[ 1 ];\n\t\tr[ 4 ] = m[ 4 ];\n\t\tr[ 5 ] = m[ 7 ];\n\t\tr[ 6 ] = m[ 2 ];\n\t\tr[ 7 ] = m[ 5 ];\n\t\tr[ 8 ] = m[ 8 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the UV transform matrix from offset, repeat, rotation, and center.\n\t *\n\t * @param {number} tx - Offset x.\n\t * @param {number} ty - Offset y.\n\t * @param {number} sx - Repeat x.\n\t * @param {number} sy - Repeat y.\n\t * @param {number} rotation - Rotation, in radians. Positive values rotate counterclockwise.\n\t * @param {number} cx - Center x of rotation.\n\t * @param {number} cy - Center y of rotation\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tsetUvTransform( tx, ty, sx, sy, rotation, cx, cy ) {\n\n\t\tconst c = Math.cos( rotation );\n\t\tconst s = Math.sin( rotation );\n\n\t\tthis.set(\n\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\n\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\n\t\t\t0, 0, 1\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Scales this matrix with the given scalar values.\n\t *\n\t * @param {number} sx - The amount to scale in the X axis.\n\t * @param {number} sy - The amount to scale in the Y axis.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tscale( sx, sy ) {\n\n\t\tthis.premultiply( _m3.makeScale( sx, sy ) );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Rotates this matrix by the given angle.\n\t *\n\t * @param {number} theta - The rotation in radians.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\trotate( theta ) {\n\n\t\tthis.premultiply( _m3.makeRotation( - theta ) );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Translates this matrix by the given scalar values.\n\t *\n\t * @param {number} tx - The amount to translate in the X axis.\n\t * @param {number} ty - The amount to translate in the Y axis.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\ttranslate( tx, ty ) {\n\n\t\tthis.premultiply( _m3.makeTranslation( tx, ty ) );\n\n\t\treturn this;\n\n\t}\n\n\t// for 2D Transforms\n\n\t/**\n\t * Sets this matrix as a 2D translation transform.\n\t *\n\t * @param {number|Vector2} x - The amount to translate in the X axis or alternatively a translation vector.\n\t * @param {number} y - The amount to translate in the Y axis.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tmakeTranslation( x, y ) {\n\n\t\tif ( x.isVector2 ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, x.x,\n\t\t\t\t0, 1, x.y,\n\t\t\t\t0, 0, 1\n\n\t\t\t);\n\n\t\t} else {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, x,\n\t\t\t\t0, 1, y,\n\t\t\t\t0, 0, 1\n\n\t\t\t);\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix as a 2D rotational transformation.\n\t *\n\t * @param {number} theta - The rotation in radians.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tmakeRotation( theta ) {\n\n\t\t// counterclockwise\n\n\t\tconst c = Math.cos( theta );\n\t\tconst s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\tc, - s, 0,\n\t\t\ts, c, 0,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix as a 2D scale transform.\n\t *\n\t * @param {number} x - The amount to scale in the X axis.\n\t * @param {number} y - The amount to scale in the Y axis.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tmakeScale( x, y ) {\n\n\t\tthis.set(\n\n\t\t\tx, 0, 0,\n\t\t\t0, y, 0,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this matrix is equal with the given one.\n\t *\n\t * @param {Matrix3} matrix - The matrix to test for equality.\n\t * @return {boolean} Whether this matrix is equal with the given one.\n\t */\n\tequals( matrix ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = matrix.elements;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * Sets the elements of the matrix from the given array.\n\t *\n\t * @param {Array<number>} array - The matrix elements in column-major order.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Matrix3} A reference to this matrix.\n\t */\n\tfromArray( array, offset = 0 ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Writes the elements of this matrix to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array holding the matrix elements in column-major order.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number>} The matrix elements in column-major order.\n\t */\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\tarray[ offset + 8 ] = te[ 8 ];\n\n\t\treturn array;\n\n\t}\n\n\t/**\n\t * Returns a matrix with copied values from this instance.\n\t *\n\t * @return {Matrix3} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().fromArray( this.elements );\n\n\t}\n\n}\n\nconst _m3 = /*@__PURE__*/ new Matrix3();\n\nfunction arrayNeedsUint32( array ) {\n\n\t// assumes larger values usually on last\n\n\tfor ( let i = array.length - 1; i >= 0; -- i ) {\n\n\t\tif ( array[ i ] >= 65535 ) return true; // account for PRIMITIVE_RESTART_FIXED_INDEX, #24565\n\n\t}\n\n\treturn false;\n\n}\n\nconst TYPED_ARRAYS = {\n\tInt8Array: Int8Array,\n\tUint8Array: Uint8Array,\n\tUint8ClampedArray: Uint8ClampedArray,\n\tInt16Array: Int16Array,\n\tUint16Array: Uint16Array,\n\tInt32Array: Int32Array,\n\tUint32Array: Uint32Array,\n\tFloat32Array: Float32Array,\n\tFloat64Array: Float64Array\n};\n\nfunction getTypedArray( type, buffer ) {\n\n\treturn new TYPED_ARRAYS[ type ]( buffer );\n\n}\n\nfunction createElementNS( name ) {\n\n\treturn document.createElementNS( 'http://www.w3.org/1999/xhtml', name );\n\n}\n\nfunction createCanvasElement() {\n\n\tconst canvas = createElementNS( 'canvas' );\n\tcanvas.style.display = 'block';\n\treturn canvas;\n\n}\n\nconst _cache = {};\n\nfunction warnOnce( message ) {\n\n\tif ( message in _cache ) return;\n\n\t_cache[ message ] = true;\n\n\tconsole.warn( message );\n\n}\n\nfunction probeAsync( gl, sync, interval ) {\n\n\treturn new Promise( function ( resolve, reject ) {\n\n\t\tfunction probe() {\n\n\t\t\tswitch ( gl.clientWaitSync( sync, gl.SYNC_FLUSH_COMMANDS_BIT, 0 ) ) {\n\n\t\t\t\tcase gl.WAIT_FAILED:\n\t\t\t\t\treject();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.TIMEOUT_EXPIRED:\n\t\t\t\t\tsetTimeout( probe, interval );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tresolve();\n\n\t\t\t}\n\n\t\t}\n\n\t\tsetTimeout( probe, interval );\n\n\t} );\n\n}\n\nfunction toNormalizedProjectionMatrix( projectionMatrix ) {\n\n\tconst m = projectionMatrix.elements;\n\n\t// Convert [-1, 1] to [0, 1] projection matrix\n\tm[ 2 ] = 0.5 * m[ 2 ] + 0.5 * m[ 3 ];\n\tm[ 6 ] = 0.5 * m[ 6 ] + 0.5 * m[ 7 ];\n\tm[ 10 ] = 0.5 * m[ 10 ] + 0.5 * m[ 11 ];\n\tm[ 14 ] = 0.5 * m[ 14 ] + 0.5 * m[ 15 ];\n\n}\n\nfunction toReversedProjectionMatrix( projectionMatrix ) {\n\n\tconst m = projectionMatrix.elements;\n\tconst isPerspectiveMatrix = m[ 11 ] === -1;\n\n\t// Reverse [0, 1] projection matrix\n\tif ( isPerspectiveMatrix ) {\n\n\t\tm[ 10 ] = - m[ 10 ] - 1;\n\t\tm[ 14 ] = - m[ 14 ];\n\n\t} else {\n\n\t\tm[ 10 ] = - m[ 10 ];\n\t\tm[ 14 ] = - m[ 14 ] + 1;\n\n\t}\n\n}\n\nconst LINEAR_REC709_TO_XYZ = /*@__PURE__*/ new Matrix3().set(\n\t0.4123908, 0.3575843, 0.1804808,\n\t0.2126390, 0.7151687, 0.0721923,\n\t0.0193308, 0.1191948, 0.9505322\n);\n\nconst XYZ_TO_LINEAR_REC709 = /*@__PURE__*/ new Matrix3().set(\n\t3.2409699, -1.5373832, -0.4986108,\n\t-0.9692436, 1.8759675, 0.0415551,\n\t0.0556301, -0.203977, 1.0569715\n);\n\nfunction createColorManagement() {\n\n\tconst ColorManagement = {\n\n\t\tenabled: true,\n\n\t\tworkingColorSpace: LinearSRGBColorSpace,\n\n\t\t/**\n\t\t * Implementations of supported color spaces.\n\t\t *\n\t\t * Required:\n\t\t *\t- primaries: chromaticity coordinates [ rx ry gx gy bx by ]\n\t\t *\t- whitePoint: reference white [ x y ]\n\t\t *\t- transfer: transfer function (pre-defined)\n\t\t *\t- toXYZ: Matrix3 RGB to XYZ transform\n\t\t *\t- fromXYZ: Matrix3 XYZ to RGB transform\n\t\t *\t- luminanceCoefficients: RGB luminance coefficients\n\t\t *\n\t\t * Optional:\n\t\t *  - outputColorSpaceConfig: { drawingBufferColorSpace: ColorSpace }\n\t\t *  - workingColorSpaceConfig: { unpackColorSpace: ColorSpace }\n\t\t *\n\t\t * Reference:\n\t\t * - https://www.russellcottrell.com/photo/matrixCalculator.htm\n\t\t */\n\t\tspaces: {},\n\n\t\tconvert: function ( color, sourceColorSpace, targetColorSpace ) {\n\n\t\t\tif ( this.enabled === false || sourceColorSpace === targetColorSpace || ! sourceColorSpace || ! targetColorSpace ) {\n\n\t\t\t\treturn color;\n\n\t\t\t}\n\n\t\t\tif ( this.spaces[ sourceColorSpace ].transfer === SRGBTransfer ) {\n\n\t\t\t\tcolor.r = SRGBToLinear( color.r );\n\t\t\t\tcolor.g = SRGBToLinear( color.g );\n\t\t\t\tcolor.b = SRGBToLinear( color.b );\n\n\t\t\t}\n\n\t\t\tif ( this.spaces[ sourceColorSpace ].primaries !== this.spaces[ targetColorSpace ].primaries ) {\n\n\t\t\t\tcolor.applyMatrix3( this.spaces[ sourceColorSpace ].toXYZ );\n\t\t\t\tcolor.applyMatrix3( this.spaces[ targetColorSpace ].fromXYZ );\n\n\t\t\t}\n\n\t\t\tif ( this.spaces[ targetColorSpace ].transfer === SRGBTransfer ) {\n\n\t\t\t\tcolor.r = LinearToSRGB( color.r );\n\t\t\t\tcolor.g = LinearToSRGB( color.g );\n\t\t\t\tcolor.b = LinearToSRGB( color.b );\n\n\t\t\t}\n\n\t\t\treturn color;\n\n\t\t},\n\n\t\tfromWorkingColorSpace: function ( color, targetColorSpace ) {\n\n\t\t\treturn this.convert( color, this.workingColorSpace, targetColorSpace );\n\n\t\t},\n\n\t\ttoWorkingColorSpace: function ( color, sourceColorSpace ) {\n\n\t\t\treturn this.convert( color, sourceColorSpace, this.workingColorSpace );\n\n\t\t},\n\n\t\tgetPrimaries: function ( colorSpace ) {\n\n\t\t\treturn this.spaces[ colorSpace ].primaries;\n\n\t\t},\n\n\t\tgetTransfer: function ( colorSpace ) {\n\n\t\t\tif ( colorSpace === NoColorSpace ) return LinearTransfer;\n\n\t\t\treturn this.spaces[ colorSpace ].transfer;\n\n\t\t},\n\n\t\tgetLuminanceCoefficients: function ( target, colorSpace = this.workingColorSpace ) {\n\n\t\t\treturn target.fromArray( this.spaces[ colorSpace ].luminanceCoefficients );\n\n\t\t},\n\n\t\tdefine: function ( colorSpaces ) {\n\n\t\t\tObject.assign( this.spaces, colorSpaces );\n\n\t\t},\n\n\t\t// Internal APIs\n\n\t\t_getMatrix: function ( targetMatrix, sourceColorSpace, targetColorSpace ) {\n\n\t\t\treturn targetMatrix\n\t\t\t\t.copy( this.spaces[ sourceColorSpace ].toXYZ )\n\t\t\t\t.multiply( this.spaces[ targetColorSpace ].fromXYZ );\n\n\t\t},\n\n\t\t_getDrawingBufferColorSpace: function ( colorSpace ) {\n\n\t\t\treturn this.spaces[ colorSpace ].outputColorSpaceConfig.drawingBufferColorSpace;\n\n\t\t},\n\n\t\t_getUnpackColorSpace: function ( colorSpace = this.workingColorSpace ) {\n\n\t\t\treturn this.spaces[ colorSpace ].workingColorSpaceConfig.unpackColorSpace;\n\n\t\t}\n\n\t};\n\n\t/******************************************************************************\n\t * sRGB definitions\n\t */\n\n\tconst REC709_PRIMARIES = [ 0.640, 0.330, 0.300, 0.600, 0.150, 0.060 ];\n\tconst REC709_LUMINANCE_COEFFICIENTS = [ 0.2126, 0.7152, 0.0722 ];\n\tconst D65 = [ 0.3127, 0.3290 ];\n\n\tColorManagement.define( {\n\n\t\t[ LinearSRGBColorSpace ]: {\n\t\t\tprimaries: REC709_PRIMARIES,\n\t\t\twhitePoint: D65,\n\t\t\ttransfer: LinearTransfer,\n\t\t\ttoXYZ: LINEAR_REC709_TO_XYZ,\n\t\t\tfromXYZ: XYZ_TO_LINEAR_REC709,\n\t\t\tluminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,\n\t\t\tworkingColorSpaceConfig: { unpackColorSpace: SRGBColorSpace },\n\t\t\toutputColorSpaceConfig: { drawingBufferColorSpace: SRGBColorSpace }\n\t\t},\n\n\t\t[ SRGBColorSpace ]: {\n\t\t\tprimaries: REC709_PRIMARIES,\n\t\t\twhitePoint: D65,\n\t\t\ttransfer: SRGBTransfer,\n\t\t\ttoXYZ: LINEAR_REC709_TO_XYZ,\n\t\t\tfromXYZ: XYZ_TO_LINEAR_REC709,\n\t\t\tluminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,\n\t\t\toutputColorSpaceConfig: { drawingBufferColorSpace: SRGBColorSpace }\n\t\t},\n\n\t} );\n\n\treturn ColorManagement;\n\n}\n\nconst ColorManagement = /*@__PURE__*/ createColorManagement();\n\nfunction SRGBToLinear( c ) {\n\n\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\n\n}\n\nfunction LinearToSRGB( c ) {\n\n\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\n\n}\n\nlet _canvas;\n\n/**\n * A class containing utility functions for images.\n *\n * @hideconstructor\n */\nclass ImageUtils {\n\n\t/**\n\t * Returns a data URI containing a representation of the given image.\n\t *\n\t * @param {(HTMLImageElement|HTMLCanvasElement)} image - The image object.\n\t * @param {string} [type='image/png'] - Indicates the image format.\n\t * @return {string} The data URI.\n\t */\n\tstatic getDataURL( image, type = 'image/png' ) {\n\n\t\tif ( /^data:/i.test( image.src ) ) {\n\n\t\t\treturn image.src;\n\n\t\t}\n\n\t\tif ( typeof HTMLCanvasElement === 'undefined' ) {\n\n\t\t\treturn image.src;\n\n\t\t}\n\n\t\tlet canvas;\n\n\t\tif ( image instanceof HTMLCanvasElement ) {\n\n\t\t\tcanvas = image;\n\n\t\t} else {\n\n\t\t\tif ( _canvas === undefined ) _canvas = createElementNS( 'canvas' );\n\n\t\t\t_canvas.width = image.width;\n\t\t\t_canvas.height = image.height;\n\n\t\t\tconst context = _canvas.getContext( '2d' );\n\n\t\t\tif ( image instanceof ImageData ) {\n\n\t\t\t\tcontext.putImageData( image, 0, 0 );\n\n\t\t\t} else {\n\n\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t}\n\n\t\t\tcanvas = _canvas;\n\n\t\t}\n\n\t\treturn canvas.toDataURL( type );\n\n\t}\n\n\t/**\n\t * Converts the given sRGB image data to linear color space.\n\t *\n\t * @param {(HTMLImageElement|HTMLCanvasElement|ImageBitmap|Object)} image - The image object.\n\t * @return {HTMLCanvasElement|Object} The converted image.\n\t */\n\tstatic sRGBToLinear( image ) {\n\n\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t\tconst canvas = createElementNS( 'canvas' );\n\n\t\t\tcanvas.width = image.width;\n\t\t\tcanvas.height = image.height;\n\n\t\t\tconst context = canvas.getContext( '2d' );\n\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\tconst imageData = context.getImageData( 0, 0, image.width, image.height );\n\t\t\tconst data = imageData.data;\n\n\t\t\tfor ( let i = 0; i < data.length; i ++ ) {\n\n\t\t\t\tdata[ i ] = SRGBToLinear( data[ i ] / 255 ) * 255;\n\n\t\t\t}\n\n\t\t\tcontext.putImageData( imageData, 0, 0 );\n\n\t\t\treturn canvas;\n\n\t\t} else if ( image.data ) {\n\n\t\t\tconst data = image.data.slice( 0 );\n\n\t\t\tfor ( let i = 0; i < data.length; i ++ ) {\n\n\t\t\t\tif ( data instanceof Uint8Array || data instanceof Uint8ClampedArray ) {\n\n\t\t\t\t\tdata[ i ] = Math.floor( SRGBToLinear( data[ i ] / 255 ) * 255 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// assuming float\n\n\t\t\t\t\tdata[ i ] = SRGBToLinear( data[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdata: data,\n\t\t\t\twidth: image.width,\n\t\t\t\theight: image.height\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.' );\n\t\t\treturn image;\n\n\t\t}\n\n\t}\n\n}\n\nlet _sourceId = 0;\n\n/**\n * Represents the data source of a texture.\n *\n * The main purpose of this class is to decouple the data definition from the texture\n * definition so the same data can be used with multiple texture instances.\n */\nclass Source {\n\n\t/**\n\t * Constructs a new video texture.\n\t *\n\t * @param {any} [data=null] - The data definition of a texture.\n\t */\n\tconstructor( data = null ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSource = true;\n\n\t\t/**\n\t\t * The ID of the source.\n\t\t *\n\t\t * @name Source#id\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */\n\t\tObject.defineProperty( this, 'id', { value: _sourceId ++ } );\n\n\t\t/**\n\t\t * The UUID of the source.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.uuid = generateUUID();\n\n\t\t/**\n\t\t * The data definition of a texture.\n\t\t *\n\t\t * @type {any}\n\t\t */\n\t\tthis.data = data;\n\n\t\t/**\n\t\t * This property is only relevant when {@link Source#needsUpdate} is set to `true` and\n\t\t * provides more control on how texture data should be processed. When `dataReady` is set\n\t\t * to `false`, the engine performs the memory allocation (if necessary) but does not transfer\n\t\t * the data into the GPU memory.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.dataReady = true;\n\n\t\t/**\n\t\t * This starts at `0` and counts how many times {@link Source#needsUpdate} is set to `true`.\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t * @default 0\n\t\t */\n\t\tthis.version = 0;\n\n\t}\n\n\t/**\n\t * When the property is set to `true`, the engine allocates the memory\n\t * for the texture (if necessary) and triggers the actual texture upload\n\t * to the GPU next time the source is used.\n\t *\n\t * @type {boolean}\n\t * @default false\n\t * @param {boolean} value\n\t */\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\t/**\n\t * Serializes the source into JSON.\n\t *\n\t * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n\t * @return {Object} A JSON object representing the serialized source.\n\t * @see {@link ObjectLoader#parse}\n\t */\n\ttoJSON( meta ) {\n\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( ! isRootObject && meta.images[ this.uuid ] !== undefined ) {\n\n\t\t\treturn meta.images[ this.uuid ];\n\n\t\t}\n\n\t\tconst output = {\n\t\t\tuuid: this.uuid,\n\t\t\turl: ''\n\t\t};\n\n\t\tconst data = this.data;\n\n\t\tif ( data !== null ) {\n\n\t\t\tlet url;\n\n\t\t\tif ( Array.isArray( data ) ) {\n\n\t\t\t\t// cube texture\n\n\t\t\t\turl = [];\n\n\t\t\t\tfor ( let i = 0, l = data.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( data[ i ].isDataTexture ) {\n\n\t\t\t\t\t\turl.push( serializeImage( data[ i ].image ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\turl.push( serializeImage( data[ i ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// texture\n\n\t\t\t\turl = serializeImage( data );\n\n\t\t\t}\n\n\t\t\toutput.url = url;\n\n\t\t}\n\n\t\tif ( ! isRootObject ) {\n\n\t\t\tmeta.images[ this.uuid ] = output;\n\n\t\t}\n\n\t\treturn output;\n\n\t}\n\n}\n\nfunction serializeImage( image ) {\n\n\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t// default images\n\n\t\treturn ImageUtils.getDataURL( image );\n\n\t} else {\n\n\t\tif ( image.data ) {\n\n\t\t\t// images of DataTexture\n\n\t\t\treturn {\n\t\t\t\tdata: Array.from( image.data ),\n\t\t\t\twidth: image.width,\n\t\t\t\theight: image.height,\n\t\t\t\ttype: image.data.constructor.name\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Texture: Unable to serialize Texture.' );\n\t\t\treturn {};\n\n\t\t}\n\n\t}\n\n}\n\nlet _textureId = 0;\n\n/**\n * Base class for all textures.\n *\n * Note: After the initial use of a texture, its dimensions, format, and type\n * cannot be changed. Instead, call {@link Texture#dispose} on the texture and instantiate a new one.\n *\n * @augments EventDispatcher\n */\nclass Texture extends EventDispatcher {\n\n\t/**\n\t * Constructs a new texture.\n\t *\n\t * @param {?Object} [image=Texture.DEFAULT_IMAGE] - The image holding the texture data.\n\t * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n\t * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n\t * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n\t * @param {number} [magFilter=LinearFilter] - The mag filter value.\n\t * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.\n\t * @param {number} [format=RGBAFormat] - The texture format.\n\t * @param {number} [type=UnsignedByteType] - The texture type.\n\t * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n\t * @param {string} [colorSpace=NoColorSpace] - The color space.\n\t */\n\tconstructor( image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = Texture.DEFAULT_ANISOTROPY, colorSpace = NoColorSpace ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isTexture = true;\n\n\t\t/**\n\t\t * The ID of the texture.\n\t\t *\n\t\t * @name Texture#id\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */\n\t\tObject.defineProperty( this, 'id', { value: _textureId ++ } );\n\n\t\t/**\n\t\t * The UUID of the material.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.uuid = generateUUID();\n\n\t\t/**\n\t\t * The name of the material.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = '';\n\n\t\t/**\n\t\t * The data definition of a texture. A reference to the data source can be\n\t\t * shared across textures. This is often useful in context of spritesheets\n\t\t * where multiple textures render the same data but with different texture\n\t\t * transformations.\n\t\t *\n\t\t * @type {Source}\n\t\t */\n\t\tthis.source = new Source( image );\n\n\t\t/**\n\t\t * An array holding user-defined mipmaps.\n\t\t *\n\t\t * @type {Array<Object>}\n\t\t */\n\t\tthis.mipmaps = [];\n\n\t\t/**\n\t\t * How the texture is applied to the object. The value `UVMapping`\n\t\t * is the default, where texture or uv coordinates are used to apply the map.\n\t\t *\n\t\t * @type {(UVMapping|CubeReflectionMapping|CubeRefractionMapping|EquirectangularReflectionMapping|EquirectangularRefractionMapping|CubeUVReflectionMapping)}\n\t\t * @default UVMapping\n\t\t*/\n\t\tthis.mapping = mapping;\n\n\t\t/**\n\t\t * Lets you select the uv attribute to map the texture to. `0` for `uv`,\n\t\t * `1` for `uv1`, `2` for `uv2` and `3` for `uv3`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.channel = 0;\n\n\t\t/**\n\t\t * This defines how the texture is wrapped horizontally and corresponds to\n\t\t * *U* in UV mapping.\n\t\t *\n\t\t * @type {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)}\n\t\t * @default ClampToEdgeWrapping\n\t\t */\n\t\tthis.wrapS = wrapS;\n\n\t\t/**\n\t\t * This defines how the texture is wrapped horizontally and corresponds to\n\t\t * *V* in UV mapping.\n\t\t *\n\t\t * @type {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)}\n\t\t * @default ClampToEdgeWrapping\n\t\t */\n\t\tthis.wrapT = wrapT;\n\n\t\t/**\n\t\t * How the texture is sampled when a texel covers more than one pixel.\n\t\t *\n\t\t * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n\t\t * @default LinearFilter\n\t\t */\n\t\tthis.magFilter = magFilter;\n\n\t\t/**\n\t\t * How the texture is sampled when a texel covers less than one pixel.\n\t\t *\n\t\t * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n\t\t * @default LinearMipmapLinearFilter\n\t\t */\n\t\tthis.minFilter = minFilter;\n\n\t\t/**\n\t\t * The number of samples taken along the axis through the pixel that has the\n\t\t * highest density of texels. By default, this value is `1`. A higher value\n\t\t * gives a less blurry result than a basic mipmap, at the cost of more\n\t\t * texture samples being used.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.anisotropy = anisotropy;\n\n\t\t/**\n\t\t * The format of the texture.\n\t\t *\n\t\t * @type {number}\n\t\t * @default RGBAFormat\n\t\t */\n\t\tthis.format = format;\n\n\t\t/**\n\t\t * The default internal format is derived from {@link Texture#format} and {@link Texture#type} and\n\t\t * defines how the texture data is going to be stored on the GPU.\n\t\t *\n\t\t * This property allows to overwrite the default format.\n\t\t *\n\t\t * @type {?string}\n\t\t * @default null\n\t\t */\n\t\tthis.internalFormat = null;\n\n\t\t/**\n\t\t * The data type of the texture.\n\t\t *\n\t\t * @type {number}\n\t\t * @default UnsignedByteType\n\t\t */\n\t\tthis.type = type;\n\n\t\t/**\n\t\t * How much a single repetition of the texture is offset from the beginning,\n\t\t * in each direction U and V. Typical range is `0.0` to `1.0`.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (0,0)\n\t\t */\n\t\tthis.offset = new Vector2( 0, 0 );\n\n\t\t/**\n\t\t * How many times the texture is repeated across the surface, in each\n\t\t * direction U and V. If repeat is set greater than `1` in either direction,\n\t\t * the corresponding wrap parameter should also be set to `RepeatWrapping`\n\t\t * or `MirroredRepeatWrapping` to achieve the desired tiling effect.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (1,1)\n\t\t */\n\t\tthis.repeat = new Vector2( 1, 1 );\n\n\t\t/**\n\t\t * The point around which rotation occurs. A value of `(0.5, 0.5)` corresponds\n\t\t * to the center of the texture. Default is `(0, 0)`, the lower left.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (0,0)\n\t\t */\n\t\tthis.center = new Vector2( 0, 0 );\n\n\t\t/**\n\t\t * How much the texture is rotated around the center point, in radians.\n\t\t * Positive values are counter-clockwise.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.rotation = 0;\n\n\t\t/**\n\t\t * Whether to update the texture's uv-transformation {@link Texture#matrix}\n\t\t * from the properties {@link Texture#offset}, {@link Texture#repeat},\n\t\t * {@link Texture#rotation}, and {@link Texture#center}.\n\t\t *\n\t\t * Set this to `false` if you are specifying the uv-transform matrix directly.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.matrixAutoUpdate = true;\n\n\t\t/**\n\t\t * The uv-transformation matrix of the texture.\n\t\t *\n\t\t * @type {Matrix3}\n\t\t */\n\t\tthis.matrix = new Matrix3();\n\n\t\t/**\n\t\t * Whether to generate mipmaps (if possible) for a texture.\n\t\t *\n\t\t * Set this to `false` if you are creating mipmaps manually.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.generateMipmaps = true;\n\n\t\t/**\n\t\t * If set to `true`, the alpha channel, if present, is multiplied into the\n\t\t * color channels when the texture is uploaded to the GPU.\n\t\t *\n\t\t * Note that this property has no effect when using `ImageBitmap`. You need to\n\t\t * configure premultiply alpha on bitmap creation instead.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.premultiplyAlpha = false;\n\n\t\t/**\n\t\t * If set to `true`, the texture is flipped along the vertical axis when\n\t\t * uploaded to the GPU.\n\t\t *\n\t\t * Note that this property has no effect when using `ImageBitmap`. You need to\n\t\t * configure the flip on bitmap creation instead.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.flipY = true;\n\n\t\t/**\n\t\t * Specifies the alignment requirements for the start of each pixel row in memory.\n\t\t * The allowable values are `1` (byte-alignment), `2` (rows aligned to even-numbered bytes),\n\t\t * `4` (word-alignment), and `8` (rows start on double-word boundaries).\n\t\t *\n\t\t * @type {number}\n\t\t * @default 4\n\t\t */\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\t\t/**\n\t\t * Textures containing color data should be annotated with `SRGBColorSpace` or `LinearSRGBColorSpace`.\n\t\t *\n\t\t * @type {string}\n\t\t * @default NoColorSpace\n\t\t */\n\t\tthis.colorSpace = colorSpace;\n\n\t\t/**\n\t\t * An object that can be used to store custom data about the texture. It\n\t\t * should not hold references to functions as these will not be cloned.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.userData = {};\n\n\t\t/**\n\t\t * This starts at `0` and counts how many times {@link Texture#needsUpdate} is set to `true`.\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t * @default 0\n\t\t */\n\t\tthis.version = 0;\n\n\t\t/**\n\t\t * A callback function, called when the texture is updated (e.g., when\n\t\t * {@link Texture#needsUpdate} has been set to true and then the texture is used).\n\t\t *\n\t\t * @type {?Function}\n\t\t * @default null\n\t\t */\n\t\tthis.onUpdate = null;\n\n\t\t/**\n\t\t * An optional back reference to the textures render target.\n\t\t *\n\t\t * @type {?(RenderTarget|WebGLRenderTarget)}\n\t\t * @default null\n\t\t */\n\t\tthis.renderTarget = null;\n\n\t\t/**\n\t\t * Indicates whether a texture belongs to a render target or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default false\n\t\t */\n\t\tthis.isRenderTargetTexture = false;\n\n\t\t/**\n\t\t * Indicates if a texture should be handled like a texture array.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default false\n\t\t */\n\t\tthis.isTextureArray = false;\n\n\t\t/**\n\t\t * Indicates whether this texture should be processed by `PMREMGenerator` or not\n\t\t * (only relevant for render target textures).\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t * @default 0\n\t\t */\n\t\tthis.pmremVersion = 0;\n\n\t}\n\n\t/**\n\t * The image object holding the texture data.\n\t *\n\t * @type {?Object}\n\t */\n\tget image() {\n\n\t\treturn this.source.data;\n\n\t}\n\n\tset image( value = null ) {\n\n\t\tthis.source.data = value;\n\n\t}\n\n\t/**\n\t * Updates the texture transformation matrix from the from the properties {@link Texture#offset},\n\t * {@link Texture#repeat}, {@link Texture#rotation}, and {@link Texture#center}.\n\t */\n\tupdateMatrix() {\n\n\t\tthis.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );\n\n\t}\n\n\t/**\n\t * Returns a new texture with copied values from this instance.\n\t *\n\t * @return {Texture} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\t/**\n\t * Copies the values of the given texture to this instance.\n\t *\n\t * @param {Texture} source - The texture to copy.\n\t * @return {Texture} A reference to this instance.\n\t */\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.source = source.source;\n\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\tthis.mapping = source.mapping;\n\t\tthis.channel = source.channel;\n\n\t\tthis.wrapS = source.wrapS;\n\t\tthis.wrapT = source.wrapT;\n\n\t\tthis.magFilter = source.magFilter;\n\t\tthis.minFilter = source.minFilter;\n\n\t\tthis.anisotropy = source.anisotropy;\n\n\t\tthis.format = source.format;\n\t\tthis.internalFormat = source.internalFormat;\n\t\tthis.type = source.type;\n\n\t\tthis.offset.copy( source.offset );\n\t\tthis.repeat.copy( source.repeat );\n\t\tthis.center.copy( source.center );\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\tthis.matrix.copy( source.matrix );\n\n\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\tthis.flipY = source.flipY;\n\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\tthis.colorSpace = source.colorSpace;\n\n\t\tthis.renderTarget = source.renderTarget;\n\t\tthis.isRenderTargetTexture = source.isRenderTargetTexture;\n\t\tthis.isTextureArray = source.isTextureArray;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\tthis.needsUpdate = true;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Serializes the texture into JSON.\n\t *\n\t * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n\t * @return {Object} A JSON object representing the serialized texture.\n\t * @see {@link ObjectLoader#parse}\n\t */\n\ttoJSON( meta ) {\n\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t}\n\n\t\tconst output = {\n\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.6,\n\t\t\t\ttype: 'Texture',\n\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t},\n\n\t\t\tuuid: this.uuid,\n\t\t\tname: this.name,\n\n\t\t\timage: this.source.toJSON( meta ).uuid,\n\n\t\t\tmapping: this.mapping,\n\t\t\tchannel: this.channel,\n\n\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\tcenter: [ this.center.x, this.center.y ],\n\t\t\trotation: this.rotation,\n\n\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\tformat: this.format,\n\t\t\tinternalFormat: this.internalFormat,\n\t\t\ttype: this.type,\n\t\t\tcolorSpace: this.colorSpace,\n\n\t\t\tminFilter: this.minFilter,\n\t\t\tmagFilter: this.magFilter,\n\t\t\tanisotropy: this.anisotropy,\n\n\t\t\tflipY: this.flipY,\n\n\t\t\tgenerateMipmaps: this.generateMipmaps,\n\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\tunpackAlignment: this.unpackAlignment\n\n\t\t};\n\n\t\tif ( Object.keys( this.userData ).length > 0 ) output.userData = this.userData;\n\n\t\tif ( ! isRootObject ) {\n\n\t\t\tmeta.textures[ this.uuid ] = output;\n\n\t\t}\n\n\t\treturn output;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t *\n\t * @fires Texture#dispose\n\t */\n\tdispose() {\n\n\t\t/**\n\t\t * Fires when the texture has been disposed of.\n\t\t *\n\t\t * @event Texture#dispose\n\t\t * @type {Object}\n\t\t */\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\t/**\n\t * Transforms the given uv vector with the textures uv transformation matrix.\n\t *\n\t * @param {Vector2} uv - The uv vector.\n\t * @return {Vector2} The transformed uv vector.\n\t */\n\ttransformUv( uv ) {\n\n\t\tif ( this.mapping !== UVMapping ) return uv;\n\n\t\tuv.applyMatrix3( this.matrix );\n\n\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.flipY ) {\n\n\t\t\tuv.y = 1 - uv.y;\n\n\t\t}\n\n\t\treturn uv;\n\n\t}\n\n\t/**\n\t * Setting this property to `true` indicates the engine the texture\n\t * must be updated in the next render. This triggers a texture upload\n\t * to the GPU and ensures correct texture parameter configuration.\n\t *\n\t * @type {boolean}\n\t * @default false\n\t * @param {boolean} value\n\t */\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) {\n\n\t\t\tthis.version ++;\n\t\t\tthis.source.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Setting this property to `true` indicates the engine the PMREM\n\t * must be regenerated.\n\t *\n\t * @type {boolean}\n\t * @default false\n\t * @param {boolean} value\n\t */\n\tset needsPMREMUpdate( value ) {\n\n\t\tif ( value === true ) {\n\n\t\t\tthis.pmremVersion ++;\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * The default image for all textures.\n *\n * @static\n * @type {?Image}\n * @default null\n */\nTexture.DEFAULT_IMAGE = null;\n\n/**\n * The default mapping for all textures.\n *\n * @static\n * @type {number}\n * @default UVMapping\n */\nTexture.DEFAULT_MAPPING = UVMapping;\n\n/**\n * The default anisotropy value for all textures.\n *\n * @static\n * @type {number}\n * @default 1\n */\nTexture.DEFAULT_ANISOTROPY = 1;\n\n/**\n * Class representing a 4D vector. A 4D vector is an ordered quadruplet of numbers\n * (labeled x, y, z and w), which can be used to represent a number of things, such as:\n *\n * - A point in 4D space.\n * - A direction and length in 4D space. In three.js the length will\n * always be the Euclidean distance(straight-line distance) from `(0, 0, 0, 0)` to `(x, y, z, w)`\n * and the direction is also measured from `(0, 0, 0, 0)` towards `(x, y, z, w)`.\n * - Any arbitrary ordered quadruplet of numbers.\n *\n * There are other things a 4D vector can be used to represent, however these\n * are the most common uses in *three.js*.\n *\n * Iterating through a vector instance will yield its components `(x, y, z, w)` in\n * the corresponding order.\n * ```js\n * const a = new THREE.Vector4( 0, 1, 0, 0 );\n *\n * //no arguments; will be initialised to (0, 0, 0, 1)\n * const b = new THREE.Vector4( );\n *\n * const d = a.dot( b );\n * ```\n */\nclass Vector4 {\n\n\t/**\n\t * Constructs a new 4D vector.\n\t *\n\t * @param {number} [x=0] - The x value of this vector.\n\t * @param {number} [y=0] - The y value of this vector.\n\t * @param {number} [z=0] - The z value of this vector.\n\t * @param {number} [w=1] - The w value of this vector.\n\t */\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tVector4.prototype.isVector4 = true;\n\n\t\t/**\n\t\t * The x value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.x = x;\n\n\t\t/**\n\t\t * The y value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.y = y;\n\n\t\t/**\n\t\t * The z value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.z = z;\n\n\t\t/**\n\t\t * The w value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.w = w;\n\n\t}\n\n\t/**\n\t * Alias for {@link Vector4#z}.\n\t *\n\t * @type {number}\n\t */\n\tget width() {\n\n\t\treturn this.z;\n\n\t}\n\n\tset width( value ) {\n\n\t\tthis.z = value;\n\n\t}\n\n\t/**\n\t * Alias for {@link Vector4#w}.\n\t *\n\t * @type {number}\n\t */\n\tget height() {\n\n\t\treturn this.w;\n\n\t}\n\n\tset height( value ) {\n\n\t\tthis.w = value;\n\n\t}\n\n\t/**\n\t * Sets the vector components.\n\t *\n\t * @param {number} x - The value of the x component.\n\t * @param {number} y - The value of the y component.\n\t * @param {number} z - The value of the z component.\n\t * @param {number} w - The value of the w component.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tset( x, y, z, w ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components to the same value.\n\t *\n\t * @param {number} scalar - The value to set for all vector components.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\t\tthis.w = scalar;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's x component to the given value\n\t *\n\t * @param {number} x - The value to set.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's y component to the given value\n\t *\n\t * @param {number} y - The value to set.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's z component to the given value\n\t *\n\t * @param {number} z - The value to set.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetZ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's w component to the given value\n\t *\n\t * @param {number} w - The value to set.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetW( w ) {\n\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Allows to set a vector component with an index.\n\t *\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y,\n\t * `2` equals to z, `3` equals to w.\n\t * @param {number} value - The value to set.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tcase 3: this.w = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the value of the vector component which matches the given index.\n\t *\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y,\n\t * `2` equals to z, `3` equals to w.\n\t * @return {number} A vector component value.\n\t */\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tcase 3: return this.w;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns a new vector with copied values from this instance.\n\t *\n\t * @return {Vector4} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t}\n\n\t/**\n\t * Copies the values of the given vector to this instance.\n\t *\n\t * @param {Vector3|Vector4} v - The vector to copy.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vector to this instance.\n\t *\n\t * @param {Vector4} v - The vector to add.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tadd( v ) {\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\t\tthis.w += v.w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given scalar value to all components of this instance.\n\t *\n\t * @param {number} s - The scalar to add.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\t\tthis.w += s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector4} a - The first vector.\n\t * @param {Vector4} b - The second vector.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\t\tthis.w = a.w + b.w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vector scaled by the given factor to this instance.\n\t *\n\t * @param {Vector4} v - The vector.\n\t * @param {number} s - The factor that scales `v`.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\t\tthis.w += v.w * s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given vector from this instance.\n\t *\n\t * @param {Vector4} v - The vector to subtract.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsub( v ) {\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\t\tthis.w -= v.w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given scalar value from all components of this instance.\n\t *\n\t * @param {number} s - The scalar to subtract.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\t\tthis.w -= s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector4} a - The first vector.\n\t * @param {Vector4} b - The second vector.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\t\tthis.w = a.w - b.w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the given vector with this instance.\n\t *\n\t * @param {Vector4} v - The vector to multiply.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\t\tthis.w *= v.w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the given scalar value with all components of this instance.\n\t *\n\t * @param {number} scalar - The scalar to multiply.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\t\tthis.w *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies this vector with the given 4x4 matrix.\n\t *\n\t * @param {Matrix4} m - The 4x4 matrix.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tapplyMatrix4( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z, w = this.w;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Divides this instance by the given vector.\n\t *\n\t * @param {Vector4} v - The vector to divide.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tdivide( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\t\tthis.z /= v.z;\n\t\tthis.w /= v.w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Divides this vector by the given scalar.\n\t *\n\t * @param {number} scalar - The scalar to divide.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\t/**\n\t * Sets the x, y and z components of this\n\t * vector to the quaternion's axis and w to the angle.\n\t *\n\t * @param {Quaternion} q - The Quaternion to set.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetAxisAngleFromQuaternion( q ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t// q is assumed to be normalized\n\n\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\tconst s = Math.sqrt( 1 - q.w * q.w );\n\n\t\tif ( s < 0.0001 ) {\n\n\t\t\tthis.x = 1;\n\t\t\tthis.y = 0;\n\t\t\tthis.z = 0;\n\n\t\t} else {\n\n\t\t\tthis.x = q.x / s;\n\t\t\tthis.y = q.y / s;\n\t\t\tthis.z = q.z / s;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the x, y and z components of this\n\t * vector to the axis of rotation and w to the angle.\n\t *\n\t * @param {Matrix4} m - A 4x4 matrix of which the upper left 3x3 matrix is a pure rotation matrix.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetAxisAngleFromRotationMatrix( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tlet angle, x, y, z; // variables for result\n\t\tconst epsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\tte = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t// singularity found\n\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t}\n\n\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\tangle = Math.PI;\n\n\t\t\tconst xx = ( m11 + 1 ) / 2;\n\t\t\tconst yy = ( m22 + 1 ) / 2;\n\t\t\tconst zz = ( m33 + 1 ) / 2;\n\t\t\tconst xy = ( m12 + m21 ) / 4;\n\t\t\tconst xz = ( m13 + m31 ) / 4;\n\t\t\tconst yz = ( m23 + m32 ) / 4;\n\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\tx = 0;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\ty = xy / x;\n\t\t\t\t\tz = xz / x;\n\n\t\t\t\t}\n\n\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\tx = xy / y;\n\t\t\t\t\tz = yz / y;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\tx = xz / z;\n\t\t\t\t\ty = yz / z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.set( x, y, z, angle );\n\n\t\t\treturn this; // return 180 deg rotation\n\n\t\t}\n\n\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\tlet s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t\t( m13 - m31 ) * ( m13 - m31 ) +\n\t\t\t( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\tthis.x = ( m32 - m23 ) / s;\n\t\tthis.y = ( m13 - m31 ) / s;\n\t\tthis.z = ( m21 - m12 ) / s;\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components to the position elements of the\n\t * given transformation matrix.\n\t *\n\t * @param {Matrix4} m - The 4x4 matrix.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetFromMatrixPosition( m ) {\n\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 12 ];\n\t\tthis.y = e[ 13 ];\n\t\tthis.z = e[ 14 ];\n\t\tthis.w = e[ 15 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x, y, z or w value is greater than the given vector's x, y, z or w\n\t * value, replace that value with the corresponding min value.\n\t *\n\t * @param {Vector4} v - The vector.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\t\tthis.w = Math.min( this.w, v.w );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x, y, z or w value is less than the given vector's x, y, z or w\n\t * value, replace that value with the corresponding max value.\n\t *\n\t * @param {Vector4} v - The vector.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\t\tthis.w = Math.max( this.w, v.w );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x, y, z or w value is greater than the max vector's x, y, z or w\n\t * value, it is replaced by the corresponding value.\n\t * If this vector's x, y, z or w value is less than the min vector's x, y, z or w value,\n\t * it is replaced by the corresponding value.\n\t *\n\t * @param {Vector4} min - The minimum x, y and z values.\n\t * @param {Vector4} max - The maximum x, y and z values in the desired range.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = clamp( this.x, min.x, max.x );\n\t\tthis.y = clamp( this.y, min.y, max.y );\n\t\tthis.z = clamp( this.z, min.z, max.z );\n\t\tthis.w = clamp( this.w, min.w, max.w );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x, y, z or w values are greater than the max value, they are\n\t * replaced by the max value.\n\t * If this vector's x, y, z or w values are less than the min value, they are\n\t * replaced by the min value.\n\t *\n\t * @param {number} minVal - The minimum value the components will be clamped to.\n\t * @param {number} maxVal - The maximum value the components will be clamped to.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = clamp( this.x, minVal, maxVal );\n\t\tthis.y = clamp( this.y, minVal, maxVal );\n\t\tthis.z = clamp( this.z, minVal, maxVal );\n\t\tthis.w = clamp( this.w, minVal, maxVal );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's length is greater than the max value, it is replaced by\n\t * the max value.\n\t * If this vector's length is less than the min value, it is replaced by the\n\t * min value.\n\t *\n\t * @param {number} min - The minimum value the vector length will be clamped to.\n\t * @param {number} max - The maximum value the vector length will be clamped to.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( clamp( length, min, max ) );\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded down to the nearest integer value.\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\t\tthis.w = Math.floor( this.w );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded up to the nearest integer value.\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\t\tthis.w = Math.ceil( this.w );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded to the nearest integer value\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\t\tthis.w = Math.round( this.w );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded towards zero (up if negative,\n\t * down if positive) to an integer value.\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */\n\troundToZero() {\n\n\t\tthis.x = Math.trunc( this.x );\n\t\tthis.y = Math.trunc( this.y );\n\t\tthis.z = Math.trunc( this.z );\n\t\tthis.w = Math.trunc( this.w );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Inverts this vector - i.e. sets x = -x, y = -y, z = -z, w = -w.\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\t\tthis.w = - this.w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Calculates the dot product of the given vector with this instance.\n\t *\n\t * @param {Vector4} v - The vector to compute the dot product with.\n\t * @return {number} The result of the dot product.\n\t */\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t}\n\n\t/**\n\t * Computes the square of the Euclidean length (straight-line length) from\n\t * (0, 0, 0, 0) to (x, y, z, w). If you are comparing the lengths of vectors, you should\n\t * compare the length squared instead as it is slightly more efficient to calculate.\n\t *\n\t * @return {number} The square length of this vector.\n\t */\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t}\n\n\t/**\n\t * Computes the  Euclidean length (straight-line length) from (0, 0, 0, 0) to (x, y, z, w).\n\t *\n\t * @return {number} The length of this vector.\n\t */\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t}\n\n\t/**\n\t * Computes the Manhattan length of this vector.\n\t *\n\t * @return {number} The length of this vector.\n\t */\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t}\n\n\t/**\n\t * Converts this vector to a unit vector - that is, sets it equal to a vector\n\t * with the same direction as this one, but with a vector length of `1`.\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\t/**\n\t * Sets this vector to a vector with the same direction as this one, but\n\t * with the specified length.\n\t *\n\t * @param {number} length - The new length of this vector.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\t/**\n\t * Linearly interpolates between the given vector and this instance, where\n\t * alpha is the percent distance along the line - alpha = 0 will be this\n\t * vector, and alpha = 1 will be the given one.\n\t *\n\t * @param {Vector4} v - The vector to interpolate towards.\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Linearly interpolates between the given vectors, where alpha is the percent\n\t * distance along the line - alpha = 0 will be first vector, and alpha = 1 will\n\t * be the second one. The result is stored in this instance.\n\t *\n\t * @param {Vector4} v1 - The first vector.\n\t * @param {Vector4} v2 - The second vector.\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\n\t\tthis.w = v1.w + ( v2.w - v1.w ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this vector is equal with the given one.\n\t *\n\t * @param {Vector4} v - The vector to test for equality.\n\t * @return {boolean} Whether this vector is equal with the given one.\n\t */\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t}\n\n\t/**\n\t * Sets this vector's x value to be `array[ offset ]`, y value to be `array[ offset + 1 ]`,\n\t * z value to be `array[ offset + 2 ]`, w value to be `array[ offset + 3 ]`.\n\t *\n\t * @param {Array<number>} array - An array holding the vector component values.\n\t * @param {number} [offset=0] - The offset into the array.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\t\tthis.w = array[ offset + 3 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Writes the components of this vector to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array holding the vector components.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number>} The vector components.\n\t */\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\t\tarray[ offset + 3 ] = this.w;\n\n\t\treturn array;\n\n\t}\n\n\t/**\n\t * Sets the components of this vector from the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute holding vector data.\n\t * @param {number} index - The index into the attribute.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\t\tthis.w = attribute.getW( index );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets each component of this vector to a pseudo-random value between `0` and\n\t * `1`, excluding `1`.\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\t\tthis.z = Math.random();\n\t\tthis.w = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\t\tyield this.z;\n\t\tyield this.w;\n\n\t}\n\n}\n\n/**\n * A render target is a buffer where the video card draws pixels for a scene\n * that is being rendered in the background. It is used in different effects,\n * such as applying postprocessing to a rendered image before displaying it\n * on the screen.\n *\n * @augments EventDispatcher\n */\nclass RenderTarget extends EventDispatcher {\n\n\t/**\n\t * Render target options.\n\t *\n\t * @typedef {Object} RenderTarget~Options\n\t * @property {boolean} [generateMipmaps=false] - Whether to generate mipmaps or not.\n\t * @property {number} [magFilter=LinearFilter] - The mag filter.\n\t * @property {number} [minFilter=LinearFilter] - The min filter.\n\t * @property {number} [format=RGBAFormat] - The texture format.\n\t * @property {number} [type=UnsignedByteType] - The texture type.\n\t * @property {?string} [internalFormat=null] - The texture's internal format.\n\t * @property {number} [wrapS=ClampToEdgeWrapping] - The texture's uv wrapping mode.\n\t * @property {number} [wrapT=ClampToEdgeWrapping] - The texture's uv wrapping mode.\n\t * @property {number} [anisotropy=1] - The texture's anisotropy value.\n\t * @property {string} [colorSpace=NoColorSpace] - The texture's color space.\n\t * @property {boolean} [depthBuffer=true] - Whether to allocate a depth buffer or not.\n\t * @property {boolean} [stencilBuffer=false] - Whether to allocate a stencil buffer or not.\n\t * @property {boolean} [resolveDepthBuffer=true] - Whether to resolve the depth buffer or not.\n\t * @property {boolean} [resolveStencilBuffer=true] - Whether  to resolve the stencil buffer or not.\n\t * @property {?Texture} [depthTexture=null] - Reference to a depth texture.\n\t * @property {number} [samples=0] - The MSAA samples count.\n\t * @property {number} [count=1] - Defines the number of color attachments . Must be at least `1`.\n\t * @property {boolean} [multiview=false] - Whether this target is used for multiview rendering.\n\t */\n\n\t/**\n\t * Constructs a new render target.\n\t *\n\t * @param {number} [width=1] - The width of the render target.\n\t * @param {number} [height=1] - The height of the render target.\n\t * @param {RenderTarget~Options} [options] - The configuration object.\n\t */\n\tconstructor( width = 1, height = 1, options = {} ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isRenderTarget = true;\n\n\t\t/**\n\t\t * The width of the render target.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.width = width;\n\n\t\t/**\n\t\t * The height of the render target.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.height = height;\n\n\t\t/**\n\t\t * The depth of the render target.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.depth = options.depth ? options.depth : 1;\n\n\t\t/**\n\t\t * A rectangular area inside the render target's viewport. Fragments that are\n\t\t * outside the area will be discarded.\n\t\t *\n\t\t * @type {Vector4}\n\t\t * @default (0,0,width,height)\n\t\t */\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\n\n\t\t/**\n\t\t * Indicates whether the scissor test should be enabled when rendering into\n\t\t * this render target or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.scissorTest = false;\n\n\t\t/**\n\t\t * A rectangular area representing the render target's viewport.\n\t\t *\n\t\t * @type {Vector4}\n\t\t * @default (0,0,width,height)\n\t\t */\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\n\n\t\tconst image = { width: width, height: height, depth: this.depth };\n\n\t\toptions = Object.assign( {\n\t\t\tgenerateMipmaps: false,\n\t\t\tinternalFormat: null,\n\t\t\tminFilter: LinearFilter,\n\t\t\tdepthBuffer: true,\n\t\t\tstencilBuffer: false,\n\t\t\tresolveDepthBuffer: true,\n\t\t\tresolveStencilBuffer: true,\n\t\t\tdepthTexture: null,\n\t\t\tsamples: 0,\n\t\t\tcount: 1,\n\t\t\tmultiview: false\n\t\t}, options );\n\n\t\tconst texture = new Texture( image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace );\n\n\t\ttexture.flipY = false;\n\t\ttexture.generateMipmaps = options.generateMipmaps;\n\t\ttexture.internalFormat = options.internalFormat;\n\n\t\t/**\n\t\t * An array of textures. Each color attachment is represented as a separate texture.\n\t\t * Has at least a single entry for the default color attachment.\n\t\t *\n\t\t * @type {Array<Texture>}\n\t\t */\n\t\tthis.textures = [];\n\n\t\tconst count = options.count;\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tthis.textures[ i ] = texture.clone();\n\t\t\tthis.textures[ i ].isRenderTargetTexture = true;\n\t\t\tthis.textures[ i ].renderTarget = this;\n\n\t\t}\n\n\t\t/**\n\t\t * Whether to allocate a depth buffer or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.depthBuffer = options.depthBuffer;\n\n\t\t/**\n\t\t * Whether to allocate a stencil buffer or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.stencilBuffer = options.stencilBuffer;\n\n\t\t/**\n\t\t * Whether to resolve the depth buffer or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.resolveDepthBuffer = options.resolveDepthBuffer;\n\n\t\t/**\n\t\t * Whether to resolve the stencil buffer or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.resolveStencilBuffer = options.resolveStencilBuffer;\n\n\t\tthis._depthTexture = null;\n\t\tthis.depthTexture = options.depthTexture;\n\n\t\t/**\n\t\t * The number of MSAA samples.\n\t\t *\n\t\t * A value of `0` disables MSAA.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.samples = options.samples;\n\n\t\t/**\n\t\t * Whether to this target is used in multiview rendering.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.multiview = options.multiview;\n\n\t}\n\n\t/**\n\t * The texture representing the default color attachment.\n\t *\n\t * @type {Texture}\n\t */\n\tget texture() {\n\n\t\treturn this.textures[ 0 ];\n\n\t}\n\n\tset texture( value ) {\n\n\t\tthis.textures[ 0 ] = value;\n\n\t}\n\n\tset depthTexture( current ) {\n\n\t\tif ( this._depthTexture !== null ) this._depthTexture.renderTarget = null;\n\t\tif ( current !== null ) current.renderTarget = this;\n\n\t\tthis._depthTexture = current;\n\n\t}\n\n\t/**\n\t * Instead of saving the depth in a renderbuffer, a texture\n\t * can be used instead which is useful for further processing\n\t * e.g. in context of post-processing.\n\t *\n\t * @type {?DepthTexture}\n\t * @default null\n\t */\n\tget depthTexture() {\n\n\t\treturn this._depthTexture;\n\n\t}\n\n\t/**\n\t * Sets the size of this render target.\n\t *\n\t * @param {number} width - The width.\n\t * @param {number} height - The height.\n\t * @param {number} [depth=1] - The depth.\n\t */\n\tsetSize( width, height, depth = 1 ) {\n\n\t\tif ( this.width !== width || this.height !== height || this.depth !== depth ) {\n\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t\tthis.depth = depth;\n\n\t\t\tfor ( let i = 0, il = this.textures.length; i < il; i ++ ) {\n\n\t\t\t\tthis.textures[ i ].image.width = width;\n\t\t\t\tthis.textures[ i ].image.height = height;\n\t\t\t\tthis.textures[ i ].image.depth = depth;\n\n\t\t\t}\n\n\t\t\tthis.dispose();\n\n\t\t}\n\n\t\tthis.viewport.set( 0, 0, width, height );\n\t\tthis.scissor.set( 0, 0, width, height );\n\n\t}\n\n\t/**\n\t * Returns a new render target with copied values from this instance.\n\t *\n\t * @return {RenderTarget} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\t/**\n\t * Copies the settings of the given render target. This is a structural copy so\n\t * no resources are shared between render targets after the copy. That includes\n\t * all MRT textures and the depth texture.\n\t *\n\t * @param {RenderTarget} source - The render target to copy.\n\t * @return {RenderTarget} A reference to this instance.\n\t */\n\tcopy( source ) {\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\t\tthis.depth = source.depth;\n\n\t\tthis.scissor.copy( source.scissor );\n\t\tthis.scissorTest = source.scissorTest;\n\n\t\tthis.viewport.copy( source.viewport );\n\n\t\tthis.textures.length = 0;\n\n\t\tfor ( let i = 0, il = source.textures.length; i < il; i ++ ) {\n\n\t\t\tthis.textures[ i ] = source.textures[ i ].clone();\n\t\t\tthis.textures[ i ].isRenderTargetTexture = true;\n\t\t\tthis.textures[ i ].renderTarget = this;\n\n\t\t\t// ensure image object is not shared, see #20328\n\n\t\t\tconst image = Object.assign( {}, source.textures[ i ].image );\n\t\t\tthis.textures[ i ].source = new Source( image );\n\n\t\t}\n\n\t\tthis.depthBuffer = source.depthBuffer;\n\t\tthis.stencilBuffer = source.stencilBuffer;\n\n\t\tthis.resolveDepthBuffer = source.resolveDepthBuffer;\n\t\tthis.resolveStencilBuffer = source.resolveStencilBuffer;\n\n\t\tif ( source.depthTexture !== null ) this.depthTexture = source.depthTexture.clone();\n\n\t\tthis.samples = source.samples;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t *\n\t * @fires RenderTarget#dispose\n\t */\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n}\n\n/**\n * A render target used in context of {@link WebGLRenderer}.\n *\n * @augments RenderTarget\n */\nclass WebGLRenderTarget extends RenderTarget {\n\n\t/**\n\t * Constructs a new 3D render target.\n\t *\n\t * @param {number} [width=1] - The width of the render target.\n\t * @param {number} [height=1] - The height of the render target.\n\t * @param {RenderTarget~Options} [options] - The configuration object.\n\t */\n\tconstructor( width = 1, height = 1, options = {} ) {\n\n\t\tsuper( width, height, options );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isWebGLRenderTarget = true;\n\n\t}\n\n}\n\n/**\n * Creates an array of textures directly from raw buffer data.\n *\n * @augments Texture\n */\nclass DataArrayTexture extends Texture {\n\n\t/**\n\t * Constructs a new data array texture.\n\t *\n\t * @param {?TypedArray} [data=null] - The buffer data.\n\t * @param {number} [width=1] - The width of the texture.\n\t * @param {number} [height=1] - The height of the texture.\n\t * @param {number} [depth=1] - The depth of the texture.\n\t */\n\tconstructor( data = null, width = 1, height = 1, depth = 1 ) {\n\n\t\tsuper( null );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isDataArrayTexture = true;\n\n\t\t/**\n\t\t * The image definition of a data texture.\n\t\t *\n\t\t * @type {{data:TypedArray,width:number,height:number,depth:number}}\n\t\t */\n\t\tthis.image = { data, width, height, depth };\n\n\t\t/**\n\t\t * How the texture is sampled when a texel covers more than one pixel.\n\t\t *\n\t\t * Overwritten and set to `NearestFilter` by default.\n\t\t *\n\t\t * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n\t\t * @default NearestFilter\n\t\t */\n\t\tthis.magFilter = NearestFilter;\n\n\t\t/**\n\t\t * How the texture is sampled when a texel covers less than one pixel.\n\t\t *\n\t\t * Overwritten and set to `NearestFilter` by default.\n\t\t *\n\t\t * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n\t\t * @default NearestFilter\n\t\t */\n\t\tthis.minFilter = NearestFilter;\n\n\t\t/**\n\t\t * This defines how the texture is wrapped in the depth and corresponds to\n\t\t * *W* in UVW mapping.\n\t\t *\n\t\t * @type {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)}\n\t\t * @default ClampToEdgeWrapping\n\t\t */\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\t/**\n\t\t * Whether to generate mipmaps (if possible) for a texture.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.generateMipmaps = false;\n\n\t\t/**\n\t\t * If set to `true`, the texture is flipped along the vertical axis when\n\t\t * uploaded to the GPU.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.flipY = false;\n\n\t\t/**\n\t\t * Specifies the alignment requirements for the start of each pixel row in memory.\n\t\t *\n\t\t * Overwritten and set to `1` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default 1\n\t\t */\n\t\tthis.unpackAlignment = 1;\n\n\t\t/**\n\t\t * A set of all layers which need to be updated in the texture.\n\t\t *\n\t\t * @type {Set<number>}\n\t\t */\n\t\tthis.layerUpdates = new Set();\n\n\t}\n\n\t/**\n\t * Describes that a specific layer of the texture needs to be updated.\n\t * Normally when {@link Texture#needsUpdate} is set to `true`, the\n\t * entire data texture array is sent to the GPU. Marking specific\n\t * layers will only transmit subsets of all mipmaps associated with a\n\t * specific depth in the array which is often much more performant.\n\t *\n\t * @param {number} layerIndex - The layer index that should be updated.\n\t */\n\taddLayerUpdate( layerIndex ) {\n\n\t\tthis.layerUpdates.add( layerIndex );\n\n\t}\n\n\t/**\n\t * Resets the layer updates registry.\n\t */\n\tclearLayerUpdates() {\n\n\t\tthis.layerUpdates.clear();\n\n\t}\n\n}\n\n/**\n * An array render target used in context of {@link WebGLRenderer}.\n *\n * @augments WebGLRenderTarget\n */\nclass WebGLArrayRenderTarget extends WebGLRenderTarget {\n\n\t/**\n\t * Constructs a new array render target.\n\t *\n\t * @param {number} [width=1] - The width of the render target.\n\t * @param {number} [height=1] - The height of the render target.\n\t * @param {number} [depth=1] - The height of the render target.\n\t * @param {RenderTarget~Options} [options] - The configuration object.\n\t */\n\tconstructor( width = 1, height = 1, depth = 1, options = {} ) {\n\n\t\tsuper( width, height, options );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isWebGLArrayRenderTarget = true;\n\n\t\tthis.depth = depth;\n\n\t\t/**\n\t\t * Overwritten with a different texture type.\n\t\t *\n\t\t * @type {DataArrayTexture}\n\t\t */\n\t\tthis.texture = new DataArrayTexture( null, width, height, depth );\n\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t}\n\n}\n\n/**\n * Creates a three-dimensional texture from raw data, with parameters to\n * divide it into width, height, and depth.\n *\n * @augments Texture\n */\nclass Data3DTexture extends Texture {\n\n\t/**\n\t * Constructs a new data array texture.\n\t *\n\t * @param {?TypedArray} [data=null] - The buffer data.\n\t * @param {number} [width=1] - The width of the texture.\n\t * @param {number} [height=1] - The height of the texture.\n\t * @param {number} [depth=1] - The depth of the texture.\n\t */\n\tconstructor( data = null, width = 1, height = 1, depth = 1 ) {\n\n\t\t// We're going to add .setXXX() methods for setting properties later.\n\t\t// Users can still set in Data3DTexture directly.\n\t\t//\n\t\t//\tconst texture = new THREE.Data3DTexture( data, width, height, depth );\n\t\t// \ttexture.anisotropy = 16;\n\t\t//\n\t\t// See #14839\n\n\t\tsuper( null );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isData3DTexture = true;\n\n\t\t/**\n\t\t * The image definition of a data texture.\n\t\t *\n\t\t * @type {{data:TypedArray,width:number,height:number,depth:number}}\n\t\t */\n\t\tthis.image = { data, width, height, depth };\n\n\t\t/**\n\t\t * How the texture is sampled when a texel covers more than one pixel.\n\t\t *\n\t\t * Overwritten and set to `NearestFilter` by default.\n\t\t *\n\t\t * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n\t\t * @default NearestFilter\n\t\t */\n\t\tthis.magFilter = NearestFilter;\n\n\t\t/**\n\t\t * How the texture is sampled when a texel covers less than one pixel.\n\t\t *\n\t\t * Overwritten and set to `NearestFilter` by default.\n\t\t *\n\t\t * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n\t\t * @default NearestFilter\n\t\t */\n\t\tthis.minFilter = NearestFilter;\n\n\t\t/**\n\t\t * This defines how the texture is wrapped in the depth and corresponds to\n\t\t * *W* in UVW mapping.\n\t\t *\n\t\t * @type {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)}\n\t\t * @default ClampToEdgeWrapping\n\t\t */\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\t/**\n\t\t * Whether to generate mipmaps (if possible) for a texture.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.generateMipmaps = false;\n\n\t\t/**\n\t\t * If set to `true`, the texture is flipped along the vertical axis when\n\t\t * uploaded to the GPU.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.flipY = false;\n\n\t\t/**\n\t\t * Specifies the alignment requirements for the start of each pixel row in memory.\n\t\t *\n\t\t * Overwritten and set to `1` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default 1\n\t\t */\n\t\tthis.unpackAlignment = 1;\n\n\t}\n\n}\n\n/**\n * A 3D render target used in context of {@link WebGLRenderer}.\n *\n * @augments WebGLRenderTarget\n */\nclass WebGL3DRenderTarget extends WebGLRenderTarget {\n\n\t/**\n\t * Constructs a new 3D render target.\n\t *\n\t * @param {number} [width=1] - The width of the render target.\n\t * @param {number} [height=1] - The height of the render target.\n\t * @param {number} [depth=1] - The height of the render target.\n\t * @param {RenderTarget~Options} [options] - The configuration object.\n\t */\n\tconstructor( width = 1, height = 1, depth = 1, options = {} ) {\n\n\t\tsuper( width, height, options );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isWebGL3DRenderTarget = true;\n\n\t\tthis.depth = depth;\n\n\t\t/**\n\t\t * Overwritten with a different texture type.\n\t\t *\n\t\t * @type {Data3DTexture}\n\t\t */\n\t\tthis.texture = new Data3DTexture( null, width, height, depth );\n\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t}\n\n}\n\n/**\n * Class for representing a Quaternion. Quaternions are used in three.js to represent rotations.\n *\n * Iterating through a vector instance will yield its components `(x, y, z, w)` in\n * the corresponding order.\n *\n * Note that three.js expects Quaternions to be normalized.\n * ```js\n * const quaternion = new THREE.Quaternion();\n * quaternion.setFromAxisAngle( new THREE.Vector3( 0, 1, 0 ), Math.PI / 2 );\n *\n * const vector = new THREE.Vector3( 1, 0, 0 );\n * vector.applyQuaternion( quaternion );\n * ```\n */\nclass Quaternion {\n\n\t/**\n\t * Constructs a new quaternion.\n\t *\n\t * @param {number} [x=0] - The x value of this quaternion.\n\t * @param {number} [y=0] - The y value of this quaternion.\n\t * @param {number} [z=0] - The z value of this quaternion.\n\t * @param {number} [w=1] - The w value of this quaternion.\n\t */\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isQuaternion = true;\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t}\n\n\t/**\n\t * Interpolates between two quaternions via SLERP. This implementation assumes the\n\t * quaternion data are managed  in flat arrays.\n\t *\n\t * @param {Array<number>} dst - The destination array.\n\t * @param {number} dstOffset - An offset into the destination array.\n\t * @param {Array<number>} src0 - The source array of the first quaternion.\n\t * @param {number} srcOffset0 - An offset into the first source array.\n\t * @param {Array<number>} src1 -  The source array of the second quaternion.\n\t * @param {number} srcOffset1 - An offset into the second source array.\n\t * @param {number} t - The interpolation factor in the range `[0,1]`.\n\t * @see {@link Quaternion#slerp}\n\t */\n\tstatic slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\tlet x0 = src0[ srcOffset0 + 0 ],\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\tw0 = src0[ srcOffset0 + 3 ];\n\n\t\tconst x1 = src1[ srcOffset1 + 0 ],\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\tif ( t === 0 ) {\n\n\t\t\tdst[ dstOffset + 0 ] = x0;\n\t\t\tdst[ dstOffset + 1 ] = y0;\n\t\t\tdst[ dstOffset + 2 ] = z0;\n\t\t\tdst[ dstOffset + 3 ] = w0;\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( t === 1 ) {\n\n\t\t\tdst[ dstOffset + 0 ] = x1;\n\t\t\tdst[ dstOffset + 1 ] = y1;\n\t\t\tdst[ dstOffset + 2 ] = z1;\n\t\t\tdst[ dstOffset + 3 ] = w1;\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\tlet s = 1 - t;\n\t\t\tconst cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\t\t\tdir = ( cos >= 0 ? 1 : -1 ),\n\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\tconst sin = Math.sqrt( sqrSin ),\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t}\n\n\t\t\tconst tDir = t * dir;\n\n\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t// Normalize in case we just did a lerp:\n\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\tconst f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\tx0 *= f;\n\t\t\t\ty0 *= f;\n\t\t\t\tz0 *= f;\n\t\t\t\tw0 *= f;\n\n\t\t\t}\n\n\t\t}\n\n\t\tdst[ dstOffset ] = x0;\n\t\tdst[ dstOffset + 1 ] = y0;\n\t\tdst[ dstOffset + 2 ] = z0;\n\t\tdst[ dstOffset + 3 ] = w0;\n\n\t}\n\n\t/**\n\t * Multiplies two quaternions. This implementation assumes the quaternion data are managed\n\t * in flat arrays.\n\t *\n\t * @param {Array<number>} dst - The destination array.\n\t * @param {number} dstOffset - An offset into the destination array.\n\t * @param {Array<number>} src0 - The source array of the first quaternion.\n\t * @param {number} srcOffset0 - An offset into the first source array.\n\t * @param {Array<number>} src1 -  The source array of the second quaternion.\n\t * @param {number} srcOffset1 - An offset into the second source array.\n\t * @return {Array<number>} The destination array.\n\t * @see {@link Quaternion#multiplyQuaternions}.\n\t */\n\tstatic multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {\n\n\t\tconst x0 = src0[ srcOffset0 ];\n\t\tconst y0 = src0[ srcOffset0 + 1 ];\n\t\tconst z0 = src0[ srcOffset0 + 2 ];\n\t\tconst w0 = src0[ srcOffset0 + 3 ];\n\n\t\tconst x1 = src1[ srcOffset1 ];\n\t\tconst y1 = src1[ srcOffset1 + 1 ];\n\t\tconst z1 = src1[ srcOffset1 + 2 ];\n\t\tconst w1 = src1[ srcOffset1 + 3 ];\n\n\t\tdst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n\t\tdst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n\t\tdst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n\t\tdst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n\n\t\treturn dst;\n\n\t}\n\n\t/**\n\t * The x value of this quaternion.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget x() {\n\n\t\treturn this._x;\n\n\t}\n\n\tset x( value ) {\n\n\t\tthis._x = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\t/**\n\t * The y value of this quaternion.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget y() {\n\n\t\treturn this._y;\n\n\t}\n\n\tset y( value ) {\n\n\t\tthis._y = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\t/**\n\t * The z value of this quaternion.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget z() {\n\n\t\treturn this._z;\n\n\t}\n\n\tset z( value ) {\n\n\t\tthis._z = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\t/**\n\t * The w value of this quaternion.\n\t *\n\t * @type {number}\n\t * @default 1\n\t */\n\tget w() {\n\n\t\treturn this._w;\n\n\t}\n\n\tset w( value ) {\n\n\t\tthis._w = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\t/**\n\t * Sets the quaternion components.\n\t *\n\t * @param {number} x - The x value of this quaternion.\n\t * @param {number} y - The y value of this quaternion.\n\t * @param {number} z - The z value of this quaternion.\n\t * @param {number} w - The w value of this quaternion.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tset( x, y, z, w ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new quaternion with copied values from this instance.\n\t *\n\t * @return {Quaternion} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t}\n\n\t/**\n\t * Copies the values of the given quaternion to this instance.\n\t *\n\t * @param {Quaternion} quaternion - The quaternion to copy.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tcopy( quaternion ) {\n\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this quaternion from the rotation specified by the given\n\t * Euler angles.\n\t *\n\t * @param {Euler} euler - The Euler angles.\n\t * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tsetFromEuler( euler, update = true ) {\n\n\t\tconst x = euler._x, y = euler._y, z = euler._z, order = euler._order;\n\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t//\tcontent/SpinCalc.m\n\n\t\tconst cos = Math.cos;\n\t\tconst sin = Math.sin;\n\n\t\tconst c1 = cos( x / 2 );\n\t\tconst c2 = cos( y / 2 );\n\t\tconst c3 = cos( z / 2 );\n\n\t\tconst s1 = sin( x / 2 );\n\t\tconst s2 = sin( y / 2 );\n\t\tconst s3 = sin( z / 2 );\n\n\t\tswitch ( order ) {\n\n\t\t\tcase 'XYZ':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXZ':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXY':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYX':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZX':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZY':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );\n\n\t\t}\n\n\t\tif ( update === true ) this._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this quaternion from the given axis and angle.\n\t *\n\t * @param {Vector3} axis - The normalized axis.\n\t * @param {number} angle - The angle in radians.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tsetFromAxisAngle( axis, angle ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\tconst halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\tthis._x = axis.x * s;\n\t\tthis._y = axis.y * s;\n\t\tthis._z = axis.z * s;\n\t\tthis._w = Math.cos( halfAngle );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this quaternion from the given rotation matrix.\n\t *\n\t * @param {Matrix4} m - A 4x4 matrix of which the upper 3x3 of matrix is a pure rotation matrix (i.e. unscaled).\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tsetFromRotationMatrix( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tconst te = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\ttrace = m11 + m22 + m33;\n\n\t\tif ( trace > 0 ) {\n\n\t\t\tconst s = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\tthis._w = 0.25 / s;\n\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\tthis._x = 0.25 * s;\n\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t} else if ( m22 > m33 ) {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\tthis._y = 0.25 * s;\n\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t} else {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\tthis._z = 0.25 * s;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this quaternion to the rotation required to rotate the direction vector\n\t * `vFrom` to the direction vector `vTo`.\n\t *\n\t * @param {Vector3} vFrom - The first (normalized) direction vector.\n\t * @param {Vector3} vTo - The second (normalized) direction vector.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tsetFromUnitVectors( vFrom, vTo ) {\n\n\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\tlet r = vFrom.dot( vTo ) + 1;\n\n\t\tif ( r < Number.EPSILON ) {\n\n\t\t\t// vFrom and vTo point in opposite directions\n\n\t\t\tr = 0;\n\n\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\tthis._x = - vFrom.y;\n\t\t\t\tthis._y = vFrom.x;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = r;\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = - vFrom.z;\n\t\t\t\tthis._z = vFrom.y;\n\t\t\t\tthis._w = r;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\tthis._w = r;\n\n\t\t}\n\n\t\treturn this.normalize();\n\n\t}\n\n\t/**\n\t * Returns the angle between this quaternion and the given one in radians.\n\t *\n\t * @param {Quaternion} q - The quaternion to compute the angle with.\n\t * @return {number} The angle in radians.\n\t */\n\tangleTo( q ) {\n\n\t\treturn 2 * Math.acos( Math.abs( clamp( this.dot( q ), -1, 1 ) ) );\n\n\t}\n\n\t/**\n\t * Rotates this quaternion by a given angular step to the given quaternion.\n\t * The method ensures that the final quaternion will not overshoot `q`.\n\t *\n\t * @param {Quaternion} q - The target quaternion.\n\t * @param {number} step - The angular step in radians.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\trotateTowards( q, step ) {\n\n\t\tconst angle = this.angleTo( q );\n\n\t\tif ( angle === 0 ) return this;\n\n\t\tconst t = Math.min( 1, step / angle );\n\n\t\tthis.slerp( q, t );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this quaternion to the identity quaternion; that is, to the\n\t * quaternion that represents \"no rotation\".\n\t *\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tidentity() {\n\n\t\treturn this.set( 0, 0, 0, 1 );\n\n\t}\n\n\t/**\n\t * Inverts this quaternion via {@link Quaternion#conjugate}. The\n\t * quaternion is assumed to have unit length.\n\t *\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tinvert() {\n\n\t\treturn this.conjugate();\n\n\t}\n\n\t/**\n\t * Returns the rotational conjugate of this quaternion. The conjugate of a\n\t * quaternion represents the same rotation in the opposite direction about\n\t * the rotational axis.\n\t *\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tconjugate() {\n\n\t\tthis._x *= -1;\n\t\tthis._y *= -1;\n\t\tthis._z *= -1;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Calculates the dot product of this quaternion and the given one.\n\t *\n\t * @param {Quaternion} v - The quaternion to compute the dot product with.\n\t * @return {number} The result of the dot product.\n\t */\n\tdot( v ) {\n\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t}\n\n\t/**\n\t * Computes the squared Euclidean length (straight-line length) of this quaternion,\n\t * considered as a 4 dimensional vector. This can be useful if you are comparing the\n\t * lengths of two quaternions, as this is a slightly more efficient calculation than\n\t * {@link Quaternion#length}.\n\t *\n\t * @return {number} The squared Euclidean length.\n\t */\n\tlengthSq() {\n\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t}\n\n\t/**\n\t * Computes the Euclidean length (straight-line length) of this quaternion,\n\t * considered as a 4 dimensional vector.\n\t *\n\t * @return {number} The Euclidean length.\n\t */\n\tlength() {\n\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t}\n\n\t/**\n\t * Normalizes this quaternion - that is, calculated the quaternion that performs\n\t * the same rotation as this one, but has a length equal to `1`.\n\t *\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tnormalize() {\n\n\t\tlet l = this.length();\n\n\t\tif ( l === 0 ) {\n\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\n\t\t} else {\n\n\t\t\tl = 1 / l;\n\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies this quaternion by the given one.\n\t *\n\t * @param {Quaternion} q - The quaternion.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tmultiply( q ) {\n\n\t\treturn this.multiplyQuaternions( this, q );\n\n\t}\n\n\t/**\n\t * Pre-multiplies this quaternion by the given one.\n\t *\n\t * @param {Quaternion} q - The quaternion.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tpremultiply( q ) {\n\n\t\treturn this.multiplyQuaternions( q, this );\n\n\t}\n\n\t/**\n\t * Multiplies the given quaternions and stores the result in this instance.\n\t *\n\t * @param {Quaternion} a - The first quaternion.\n\t * @param {Quaternion} b - The second quaternion.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tmultiplyQuaternions( a, b ) {\n\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\tconst qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\tconst qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Performs a spherical linear interpolation between quaternions.\n\t *\n\t * @param {Quaternion} qb - The target quaternion.\n\t * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tslerp( qb, t ) {\n\n\t\tif ( t === 0 ) return this;\n\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\tconst x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\tlet cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\tthis._w = - qb._w;\n\t\t\tthis._x = - qb._x;\n\t\t\tthis._y = - qb._y;\n\t\t\tthis._z = - qb._z;\n\n\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t} else {\n\n\t\t\tthis.copy( qb );\n\n\t\t}\n\n\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\tthis._w = w;\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\n\n\t\t\tconst s = 1 - t;\n\t\t\tthis._w = s * w + t * this._w;\n\t\t\tthis._x = s * x + t * this._x;\n\t\t\tthis._y = s * y + t * this._y;\n\t\t\tthis._z = s * z + t * this._z;\n\n\t\t\tthis.normalize(); // normalize calls _onChangeCallback()\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n\t\tconst halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\tconst ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Performs a spherical linear interpolation between the given quaternions\n\t * and stores the result in this quaternion.\n\t *\n\t * @param {Quaternion} qa - The source quaternion.\n\t * @param {Quaternion} qb - The target quaternion.\n\t * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tslerpQuaternions( qa, qb, t ) {\n\n\t\treturn this.copy( qa ).slerp( qb, t );\n\n\t}\n\n\t/**\n\t * Sets this quaternion to a uniformly random, normalized quaternion.\n\t *\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\trandom() {\n\n\t\t// Ken Shoemake\n\t\t// Uniform random rotations\n\t\t// D. Kirk, editor, Graphics Gems III, pages 124-132. Academic Press, New York, 1992.\n\n\t\tconst theta1 = 2 * Math.PI * Math.random();\n\t\tconst theta2 = 2 * Math.PI * Math.random();\n\n\t\tconst x0 = Math.random();\n\t\tconst r1 = Math.sqrt( 1 - x0 );\n\t\tconst r2 = Math.sqrt( x0 );\n\n\t\treturn this.set(\n\t\t\tr1 * Math.sin( theta1 ),\n\t\t\tr1 * Math.cos( theta1 ),\n\t\t\tr2 * Math.sin( theta2 ),\n\t\t\tr2 * Math.cos( theta2 ),\n\t\t);\n\n\t}\n\n\t/**\n\t * Returns `true` if this quaternion is equal with the given one.\n\t *\n\t * @param {Quaternion} quaternion - The quaternion to test for equality.\n\t * @return {boolean} Whether this quaternion is equal with the given one.\n\t */\n\tequals( quaternion ) {\n\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t}\n\n\t/**\n\t * Sets this quaternion's components from the given array.\n\t *\n\t * @param {Array<number>} array - An array holding the quaternion component values.\n\t * @param {number} [offset=0] - The offset into the array.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis._x = array[ offset ];\n\t\tthis._y = array[ offset + 1 ];\n\t\tthis._z = array[ offset + 2 ];\n\t\tthis._w = array[ offset + 3 ];\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Writes the components of this quaternion to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array holding the quaternion components.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number>} The quaternion components.\n\t */\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._w;\n\n\t\treturn array;\n\n\t}\n\n\t/**\n\t * Sets the components of this quaternion from the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute holding quaternion data.\n\t * @param {number} index - The index into the attribute.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis._x = attribute.getX( index );\n\t\tthis._y = attribute.getY( index );\n\t\tthis._z = attribute.getZ( index );\n\t\tthis._w = attribute.getW( index );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * This methods defines the serialization result of this class. Returns the\n\t * numerical elements of this quaternion in an array of format `[x, y, z, w]`.\n\t *\n\t * @return {Array<number>} The serialized quaternion.\n\t */\n\ttoJSON() {\n\n\t\treturn this.toArray();\n\n\t}\n\n\t_onChange( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t_onChangeCallback() {}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this._x;\n\t\tyield this._y;\n\t\tyield this._z;\n\t\tyield this._w;\n\n\t}\n\n}\n\n/**\n * Class representing a 3D vector. A 3D vector is an ordered triplet of numbers\n * (labeled x, y and z), which can be used to represent a number of things, such as:\n *\n * - A point in 3D space.\n * - A direction and length in 3D space. In three.js the length will\n * always be the Euclidean distance(straight-line distance) from `(0, 0, 0)` to `(x, y, z)`\n * and the direction is also measured from `(0, 0, 0)` towards `(x, y, z)`.\n * - Any arbitrary ordered triplet of numbers.\n *\n * There are other things a 3D vector can be used to represent, such as\n * momentum vectors and so on, however these are the most\n * common uses in three.js.\n *\n * Iterating through a vector instance will yield its components `(x, y, z)` in\n * the corresponding order.\n * ```js\n * const a = new THREE.Vector3( 0, 1, 0 );\n *\n * //no arguments; will be initialised to (0, 0, 0)\n * const b = new THREE.Vector3( );\n *\n * const d = a.distanceTo( b );\n * ```\n */\nclass Vector3 {\n\n\t/**\n\t * Constructs a new 3D vector.\n\t *\n\t * @param {number} [x=0] - The x value of this vector.\n\t * @param {number} [y=0] - The y value of this vector.\n\t * @param {number} [z=0] - The z value of this vector.\n\t */\n\tconstructor( x = 0, y = 0, z = 0 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tVector3.prototype.isVector3 = true;\n\n\t\t/**\n\t\t * The x value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.x = x;\n\n\t\t/**\n\t\t * The y value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.y = y;\n\n\t\t/**\n\t\t * The z value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.z = z;\n\n\t}\n\n\t/**\n\t * Sets the vector components.\n\t *\n\t * @param {number} x - The value of the x component.\n\t * @param {number} y - The value of the y component.\n\t * @param {number} z - The value of the z component.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tset( x, y, z ) {\n\n\t\tif ( z === undefined ) z = this.z; // sprite.scale.set(x,y)\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components to the same value.\n\t *\n\t * @param {number} scalar - The value to set for all vector components.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's x component to the given value\n\t *\n\t * @param {number} x - The value to set.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's y component to the given value\n\t *\n\t * @param {number} y - The value to set.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's z component to the given value\n\t *\n\t * @param {number} z - The value to set.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetZ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Allows to set a vector component with an index.\n\t *\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y, `2` equals to z.\n\t * @param {number} value - The value to set.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the value of the vector component which matches the given index.\n\t *\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y, `2` equals to z.\n\t * @return {number} A vector component value.\n\t */\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns a new vector with copied values from this instance.\n\t *\n\t * @return {Vector3} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t}\n\n\t/**\n\t * Copies the values of the given vector to this instance.\n\t *\n\t * @param {Vector3} v - The vector to copy.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vector to this instance.\n\t *\n\t * @param {Vector3} v - The vector to add.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tadd( v ) {\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given scalar value to all components of this instance.\n\t *\n\t * @param {number} s - The scalar to add.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector3} a - The first vector.\n\t * @param {Vector3} b - The second vector.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vector scaled by the given factor to this instance.\n\t *\n\t * @param {Vector3|Vector4} v - The vector.\n\t * @param {number} s - The factor that scales `v`.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given vector from this instance.\n\t *\n\t * @param {Vector3} v - The vector to subtract.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsub( v ) {\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given scalar value from all components of this instance.\n\t *\n\t * @param {number} s - The scalar to subtract.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector3} a - The first vector.\n\t * @param {Vector3} b - The second vector.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the given vector with this instance.\n\t *\n\t * @param {Vector3} v - The vector to multiply.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the given scalar value with all components of this instance.\n\t *\n\t * @param {number} scalar - The scalar to multiply.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector3} a - The first vector.\n\t * @param {Vector3} b - The second vector.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tmultiplyVectors( a, b ) {\n\n\t\tthis.x = a.x * b.x;\n\t\tthis.y = a.y * b.y;\n\t\tthis.z = a.z * b.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Applies the given Euler rotation to this vector.\n\t *\n\t * @param {Euler} euler - The Euler angles.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tapplyEuler( euler ) {\n\n\t\treturn this.applyQuaternion( _quaternion$4.setFromEuler( euler ) );\n\n\t}\n\n\t/**\n\t * Applies a rotation specified by an axis and an angle to this vector.\n\t *\n\t * @param {Vector3} axis - A normalized vector representing the rotation axis.\n\t * @param {number} angle - The angle in radians.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tapplyAxisAngle( axis, angle ) {\n\n\t\treturn this.applyQuaternion( _quaternion$4.setFromAxisAngle( axis, angle ) );\n\n\t}\n\n\t/**\n\t * Multiplies this vector with the given 3x3 matrix.\n\t *\n\t * @param {Matrix3} m - The 3x3 matrix.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tapplyMatrix3( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies this vector by the given normal matrix and normalizes\n\t * the result.\n\t *\n\t * @param {Matrix3} m - The normal matrix.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tapplyNormalMatrix( m ) {\n\n\t\treturn this.applyMatrix3( m ).normalize();\n\n\t}\n\n\t/**\n\t * Multiplies this vector (with an implicit 1 in the 4th dimension) by m, and\n\t * divides by perspective.\n\t *\n\t * @param {Matrix4} m - The matrix to apply.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tapplyMatrix4( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tconst w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\n\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Applies the given Quaternion to this vector.\n\t *\n\t * @param {Quaternion} q - The Quaternion.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tapplyQuaternion( q ) {\n\n\t\t// quaternion q is assumed to have unit length\n\n\t\tconst vx = this.x, vy = this.y, vz = this.z;\n\t\tconst qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t// t = 2 * cross( q.xyz, v );\n\t\tconst tx = 2 * ( qy * vz - qz * vy );\n\t\tconst ty = 2 * ( qz * vx - qx * vz );\n\t\tconst tz = 2 * ( qx * vy - qy * vx );\n\n\t\t// v + q.w * t + cross( q.xyz, t );\n\t\tthis.x = vx + qw * tx + qy * tz - qz * ty;\n\t\tthis.y = vy + qw * ty + qz * tx - qx * tz;\n\t\tthis.z = vz + qw * tz + qx * ty - qy * tx;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Projects this vector from world space into the camera's normalized\n\t * device coordinate (NDC) space.\n\t *\n\t * @param {Camera} camera - The camera.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tproject( camera ) {\n\n\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\n\n\t}\n\n\t/**\n\t * Unprojects this vector from the camera's normalized device coordinate (NDC)\n\t * space into world space.\n\t *\n\t * @param {Camera} camera - The camera.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tunproject( camera ) {\n\n\t\treturn this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\n\n\t}\n\n\t/**\n\t * Transforms the direction of this vector by a matrix (the upper left 3 x 3\n\t * subset of the given 4x4 matrix and then normalizes the result.\n\t *\n\t * @param {Matrix4} m - The matrix.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\ttransformDirection( m ) {\n\n\t\t// input: THREE.Matrix4 affine matrix\n\t\t// vector interpreted as a direction\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\treturn this.normalize();\n\n\t}\n\n\t/**\n\t * Divides this instance by the given vector.\n\t *\n\t * @param {Vector3} v - The vector to divide.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tdivide( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\t\tthis.z /= v.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Divides this vector by the given scalar.\n\t *\n\t * @param {number} scalar - The scalar to divide.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\t/**\n\t * If this vector's x, y or z value is greater than the given vector's x, y or z\n\t * value, replace that value with the corresponding min value.\n\t *\n\t * @param {Vector3} v - The vector.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x, y or z value is less than the given vector's x, y or z\n\t * value, replace that value with the corresponding max value.\n\t *\n\t * @param {Vector3} v - The vector.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x, y or z value is greater than the max vector's x, y or z\n\t * value, it is replaced by the corresponding value.\n\t * If this vector's x, y or z value is less than the min vector's x, y or z value,\n\t * it is replaced by the corresponding value.\n\t *\n\t * @param {Vector3} min - The minimum x, y and z values.\n\t * @param {Vector3} max - The maximum x, y and z values in the desired range.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = clamp( this.x, min.x, max.x );\n\t\tthis.y = clamp( this.y, min.y, max.y );\n\t\tthis.z = clamp( this.z, min.z, max.z );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x, y or z values are greater than the max value, they are\n\t * replaced by the max value.\n\t * If this vector's x, y or z values are less than the min value, they are\n\t * replaced by the min value.\n\t *\n\t * @param {number} minVal - The minimum value the components will be clamped to.\n\t * @param {number} maxVal - The maximum value the components will be clamped to.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = clamp( this.x, minVal, maxVal );\n\t\tthis.y = clamp( this.y, minVal, maxVal );\n\t\tthis.z = clamp( this.z, minVal, maxVal );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's length is greater than the max value, it is replaced by\n\t * the max value.\n\t * If this vector's length is less than the min value, it is replaced by the\n\t * min value.\n\t *\n\t * @param {number} min - The minimum value the vector length will be clamped to.\n\t * @param {number} max - The maximum value the vector length will be clamped to.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( clamp( length, min, max ) );\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded down to the nearest integer value.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded up to the nearest integer value.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded to the nearest integer value\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded towards zero (up if negative,\n\t * down if positive) to an integer value.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */\n\troundToZero() {\n\n\t\tthis.x = Math.trunc( this.x );\n\t\tthis.y = Math.trunc( this.y );\n\t\tthis.z = Math.trunc( this.z );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Inverts this vector - i.e. sets x = -x, y = -y and z = -z.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Calculates the dot product of the given vector with this instance.\n\t *\n\t * @param {Vector3} v - The vector to compute the dot product with.\n\t * @return {number} The result of the dot product.\n\t */\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t}\n\n\t// TODO lengthSquared?\n\n\t/**\n\t * Computes the square of the Euclidean length (straight-line length) from\n\t * (0, 0, 0) to (x, y, z). If you are comparing the lengths of vectors, you should\n\t * compare the length squared instead as it is slightly more efficient to calculate.\n\t *\n\t * @return {number} The square length of this vector.\n\t */\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t}\n\n\t/**\n\t * Computes the  Euclidean length (straight-line length) from (0, 0, 0) to (x, y, z).\n\t *\n\t * @return {number} The length of this vector.\n\t */\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t}\n\n\t/**\n\t * Computes the Manhattan length of this vector.\n\t *\n\t * @return {number} The length of this vector.\n\t */\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t}\n\n\t/**\n\t * Converts this vector to a unit vector - that is, sets it equal to a vector\n\t * with the same direction as this one, but with a vector length of `1`.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\t/**\n\t * Sets this vector to a vector with the same direction as this one, but\n\t * with the specified length.\n\t *\n\t * @param {number} length - The new length of this vector.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\t/**\n\t * Linearly interpolates between the given vector and this instance, where\n\t * alpha is the percent distance along the line - alpha = 0 will be this\n\t * vector, and alpha = 1 will be the given one.\n\t *\n\t * @param {Vector3} v - The vector to interpolate towards.\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Linearly interpolates between the given vectors, where alpha is the percent\n\t * distance along the line - alpha = 0 will be first vector, and alpha = 1 will\n\t * be the second one. The result is stored in this instance.\n\t *\n\t * @param {Vector3} v1 - The first vector.\n\t * @param {Vector3} v2 - The second vector.\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Calculates the cross product of the given vector with this instance.\n\t *\n\t * @param {Vector3} v - The vector to compute the cross product with.\n\t * @return {Vector3} The result of the cross product.\n\t */\n\tcross( v ) {\n\n\t\treturn this.crossVectors( this, v );\n\n\t}\n\n\t/**\n\t * Calculates the cross product of the given vectors and stores the result\n\t * in this instance.\n\t *\n\t * @param {Vector3} a - The first vector.\n\t * @param {Vector3} b - The second vector.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tcrossVectors( a, b ) {\n\n\t\tconst ax = a.x, ay = a.y, az = a.z;\n\t\tconst bx = b.x, by = b.y, bz = b.z;\n\n\t\tthis.x = ay * bz - az * by;\n\t\tthis.y = az * bx - ax * bz;\n\t\tthis.z = ax * by - ay * bx;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Projects this vector onto the given one.\n\t *\n\t * @param {Vector3} v - The vector to project to.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tprojectOnVector( v ) {\n\n\t\tconst denominator = v.lengthSq();\n\n\t\tif ( denominator === 0 ) return this.set( 0, 0, 0 );\n\n\t\tconst scalar = v.dot( this ) / denominator;\n\n\t\treturn this.copy( v ).multiplyScalar( scalar );\n\n\t}\n\n\t/**\n\t * Projects this vector onto a plane by subtracting this\n\t * vector projected onto the plane's normal from this vector.\n\t *\n\t * @param {Vector3} planeNormal - The plane normal.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tprojectOnPlane( planeNormal ) {\n\n\t\t_vector$c.copy( this ).projectOnVector( planeNormal );\n\n\t\treturn this.sub( _vector$c );\n\n\t}\n\n\t/**\n\t * Reflects this vector off a plane orthogonal to the given normal vector.\n\t *\n\t * @param {Vector3} normal - The (normalized) normal vector.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\treflect( normal ) {\n\n\t\treturn this.sub( _vector$c.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t}\n\t/**\n\t * Returns the angle between the given vector and this instance in radians.\n\t *\n\t * @param {Vector3} v - The vector to compute the angle with.\n\t * @return {number} The angle in radians.\n\t */\n\tangleTo( v ) {\n\n\t\tconst denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\n\n\t\tif ( denominator === 0 ) return Math.PI / 2;\n\n\t\tconst theta = this.dot( v ) / denominator;\n\n\t\t// clamp, to handle numerical problems\n\n\t\treturn Math.acos( clamp( theta, -1, 1 ) );\n\n\t}\n\n\t/**\n\t * Computes the distance from the given vector to this instance.\n\t *\n\t * @param {Vector3} v - The vector to compute the distance to.\n\t * @return {number} The distance.\n\t */\n\tdistanceTo( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t}\n\n\t/**\n\t * Computes the squared distance from the given vector to this instance.\n\t * If you are just comparing the distance with another distance, you should compare\n\t * the distance squared instead as it is slightly more efficient to calculate.\n\t *\n\t * @param {Vector3} v - The vector to compute the squared distance to.\n\t * @return {number} The squared distance.\n\t */\n\tdistanceToSquared( v ) {\n\n\t\tconst dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t}\n\n\t/**\n\t * Computes the Manhattan distance from the given vector to this instance.\n\t *\n\t * @param {Vector3} v - The vector to compute the Manhattan distance to.\n\t * @return {number} The Manhattan distance.\n\t */\n\tmanhattanDistanceTo( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t}\n\n\t/**\n\t * Sets the vector components from the given spherical coordinates.\n\t *\n\t * @param {Spherical} s - The spherical coordinates.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromSpherical( s ) {\n\n\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\n\n\t}\n\n\t/**\n\t * Sets the vector components from the given spherical coordinates.\n\t *\n\t * @param {number} radius - The radius.\n\t * @param {number} phi - The phi angle in radians.\n\t * @param {number} theta - The theta angle in radians.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromSphericalCoords( radius, phi, theta ) {\n\n\t\tconst sinPhiRadius = Math.sin( phi ) * radius;\n\n\t\tthis.x = sinPhiRadius * Math.sin( theta );\n\t\tthis.y = Math.cos( phi ) * radius;\n\t\tthis.z = sinPhiRadius * Math.cos( theta );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components from the given cylindrical coordinates.\n\t *\n\t * @param {Cylindrical} c - The cylindrical coordinates.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromCylindrical( c ) {\n\n\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\n\n\t}\n\n\t/**\n\t * Sets the vector components from the given cylindrical coordinates.\n\t *\n\t * @param {number} radius - The radius.\n\t * @param {number} theta - The theta angle in radians.\n\t * @param {number} y - The y value.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromCylindricalCoords( radius, theta, y ) {\n\n\t\tthis.x = radius * Math.sin( theta );\n\t\tthis.y = y;\n\t\tthis.z = radius * Math.cos( theta );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components to the position elements of the\n\t * given transformation matrix.\n\t *\n\t * @param {Matrix4} m - The 4x4 matrix.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromMatrixPosition( m ) {\n\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 12 ];\n\t\tthis.y = e[ 13 ];\n\t\tthis.z = e[ 14 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components to the scale elements of the\n\t * given transformation matrix.\n\t *\n\t * @param {Matrix4} m - The 4x4 matrix.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromMatrixScale( m ) {\n\n\t\tconst sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\tconst sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\tconst sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\tthis.x = sx;\n\t\tthis.y = sy;\n\t\tthis.z = sz;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components from the specified matrix column.\n\t *\n\t * @param {Matrix4} m - The 4x4 matrix.\n\t * @param {number} index - The column index.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromMatrixColumn( m, index ) {\n\n\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t}\n\n\t/**\n\t * Sets the vector components from the specified matrix column.\n\t *\n\t * @param {Matrix3} m - The 3x3 matrix.\n\t * @param {number} index - The column index.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromMatrix3Column( m, index ) {\n\n\t\treturn this.fromArray( m.elements, index * 3 );\n\n\t}\n\n\t/**\n\t * Sets the vector components from the given Euler angles.\n\t *\n\t * @param {Euler} e - The Euler angles to set.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromEuler( e ) {\n\n\t\tthis.x = e._x;\n\t\tthis.y = e._y;\n\t\tthis.z = e._z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components from the RGB components of the\n\t * given color.\n\t *\n\t * @param {Color} c - The color to set.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromColor( c ) {\n\n\t\tthis.x = c.r;\n\t\tthis.y = c.g;\n\t\tthis.z = c.b;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this vector is equal with the given one.\n\t *\n\t * @param {Vector3} v - The vector to test for equality.\n\t * @return {boolean} Whether this vector is equal with the given one.\n\t */\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t}\n\n\t/**\n\t * Sets this vector's x value to be `array[ offset ]`, y value to be `array[ offset + 1 ]`\n\t * and z value to be `array[ offset + 2 ]`.\n\t *\n\t * @param {Array<number>} array - An array holding the vector component values.\n\t * @param {number} [offset=0] - The offset into the array.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Writes the components of this vector to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array holding the vector components.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number>} The vector components.\n\t */\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\n\t\treturn array;\n\n\t}\n\n\t/**\n\t * Sets the components of this vector from the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute holding vector data.\n\t * @param {number} index - The index into the attribute.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets each component of this vector to a pseudo-random value between `0` and\n\t * `1`, excluding `1`.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\t\tthis.z = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this vector to a uniformly random point on a unit sphere.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */\n\trandomDirection() {\n\n\t\t// https://mathworld.wolfram.com/SpherePointPicking.html\n\n\t\tconst theta = Math.random() * Math.PI * 2;\n\t\tconst u = Math.random() * 2 - 1;\n\t\tconst c = Math.sqrt( 1 - u * u );\n\n\t\tthis.x = c * Math.cos( theta );\n\t\tthis.y = u;\n\t\tthis.z = c * Math.sin( theta );\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\t\tyield this.z;\n\n\t}\n\n}\n\nconst _vector$c = /*@__PURE__*/ new Vector3();\nconst _quaternion$4 = /*@__PURE__*/ new Quaternion();\n\n/**\n * Represents an axis-aligned bounding box (AABB) in 3D space.\n */\nclass Box3 {\n\n\t/**\n\t * Constructs a new bounding box.\n\t *\n\t * @param {Vector3} [min=(Infinity,Infinity,Infinity)] - A vector representing the lower boundary of the box.\n\t * @param {Vector3} [max=(-Infinity,-Infinity,-Infinity)] - A vector representing the upper boundary of the box.\n\t */\n\tconstructor( min = new Vector3( + Infinity, + Infinity, + Infinity ), max = new Vector3( - Infinity, - Infinity, - Infinity ) ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isBox3 = true;\n\n\t\t/**\n\t\t * The lower boundary of the box.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.min = min;\n\n\t\t/**\n\t\t * The upper boundary of the box.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.max = max;\n\n\t}\n\n\t/**\n\t * Sets the lower and upper boundaries of this box.\n\t * Please note that this method only copies the values from the given objects.\n\t *\n\t * @param {Vector3} min - The lower boundary of the box.\n\t * @param {Vector3} max - The upper boundary of the box.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\tset( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the upper and lower bounds of this box so it encloses the position data\n\t * in the given array.\n\t *\n\t * @param {Array<number>} array - An array holding 3D position data.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\tsetFromArray( array ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = array.length; i < il; i += 3 ) {\n\n\t\t\tthis.expandByPoint( _vector$b.fromArray( array, i ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the upper and lower bounds of this box so it encloses the position data\n\t * in the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - A buffer attribute holding 3D position data.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\tsetFromBufferAttribute( attribute ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = attribute.count; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( _vector$b.fromBufferAttribute( attribute, i ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the upper and lower bounds of this box so it encloses the position data\n\t * in the given array.\n\t *\n\t * @param {Array<Vector3>} points - An array holding 3D position data as instances of {@link Vector3}.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\tsetFromPoints( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Centers this box on the given center vector and sets this box's width, height and\n\t * depth to the given size values.\n\t *\n\t * @param {Vector3} center - The center of the box.\n\t * @param {Vector3} size - The x, y and z dimensions of the box.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\tsetFromCenterAndSize( center, size ) {\n\n\t\tconst halfSize = _vector$b.copy( size ).multiplyScalar( 0.5 );\n\n\t\tthis.min.copy( center ).sub( halfSize );\n\t\tthis.max.copy( center ).add( halfSize );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes the world-axis-aligned bounding box for the given 3D object\n\t * (including its children), accounting for the object's, and children's,\n\t * world transforms. The function may result in a larger box than strictly necessary.\n\t *\n\t * @param {Object3D} object - The 3D object to compute the bounding box for.\n\t * @param {boolean} [precise=false] - If set to `true`, the method computes the smallest\n\t * world-axis-aligned bounding box at the expense of more computation.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\tsetFromObject( object, precise = false ) {\n\n\t\tthis.makeEmpty();\n\n\t\treturn this.expandByObject( object, precise );\n\n\t}\n\n\t/**\n\t * Returns a new box with copied values from this instance.\n\t *\n\t * @return {Box3} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\t/**\n\t * Copies the values of the given box to this instance.\n\t *\n\t * @param {Box3} box - The box to copy.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\tcopy( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Makes this box empty which means in encloses a zero space in 3D.\n\t *\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\tmakeEmpty() {\n\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns true if this box includes zero points within its bounds.\n\t * Note that a box with equal lower and upper bounds still includes one\n\t * point, the one both bounds share.\n\t *\n\t * @return {boolean} Whether this box is empty or not.\n\t */\n\tisEmpty() {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t}\n\n\t/**\n\t * Returns the center point of this box.\n\t *\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The center point.\n\t */\n\tgetCenter( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t}\n\n\t/**\n\t * Returns the dimensions of this box.\n\t *\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The size.\n\t */\n\tgetSize( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t}\n\n\t/**\n\t * Expands the boundaries of this box to include the given point.\n\t *\n\t * @param {Vector3} point - The point that should be included by the bounding box.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\texpandByPoint( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Expands this box equilaterally by the given vector. The width of this\n\t * box will be expanded by the x component of the vector in both\n\t * directions. The height of this box will be expanded by the y component of\n\t * the vector in both directions. The depth of this box will be\n\t * expanded by the z component of the vector in both directions.\n\t *\n\t * @param {Vector3} vector - The vector that should expand the bounding box.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\texpandByVector( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Expands each dimension of the box by the given scalar. If negative, the\n\t * dimensions of the box will be contracted.\n\t *\n\t * @param {number} scalar - The scalar value that should expand the bounding box.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\texpandByScalar( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Expands the boundaries of this box to include the given 3D object and\n\t * its children, accounting for the object's, and children's, world\n\t * transforms. The function may result in a larger box than strictly\n\t * necessary (unless the precise parameter is set to true).\n\t *\n\t * @param {Object3D} object - The 3D object that should expand the bounding box.\n\t * @param {boolean} precise - If set to `true`, the method expands the bounding box\n\t * as little as necessary at the expense of more computation.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\texpandByObject( object, precise = false ) {\n\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t// accounting for both the object's, and children's, world transforms\n\n\t\tobject.updateWorldMatrix( false, false );\n\n\t\tconst geometry = object.geometry;\n\n\t\tif ( geometry !== undefined ) {\n\n\t\t\tconst positionAttribute = geometry.getAttribute( 'position' );\n\n\t\t\t// precise AABB computation based on vertex data requires at least a position attribute.\n\t\t\t// instancing isn't supported so far and uses the normal (conservative) code path.\n\n\t\t\tif ( precise === true && positionAttribute !== undefined && object.isInstancedMesh !== true ) {\n\n\t\t\t\tfor ( let i = 0, l = positionAttribute.count; i < l; i ++ ) {\n\n\t\t\t\t\tif ( object.isMesh === true ) {\n\n\t\t\t\t\t\tobject.getVertexPosition( i, _vector$b );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t_vector$b.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_vector$b.applyMatrix4( object.matrixWorld );\n\t\t\t\t\tthis.expandByPoint( _vector$b );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( object.boundingBox !== undefined ) {\n\n\t\t\t\t\t// object-level bounding box\n\n\t\t\t\t\tif ( object.boundingBox === null ) {\n\n\t\t\t\t\t\tobject.computeBoundingBox();\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_box$4.copy( object.boundingBox );\n\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// geometry-level bounding box\n\n\t\t\t\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\t\t\t\tgeometry.computeBoundingBox();\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_box$4.copy( geometry.boundingBox );\n\n\t\t\t\t}\n\n\t\t\t\t_box$4.applyMatrix4( object.matrixWorld );\n\n\t\t\t\tthis.union( _box$4 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tthis.expandByObject( children[ i ], precise );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if the given point lies within or on the boundaries of this box.\n\t *\n\t * @param {Vector3} point - The point to test.\n\t * @return {boolean} Whether the bounding box contains the given point or not.\n\t */\n\tcontainsPoint( point ) {\n\n\t\treturn point.x >= this.min.x && point.x <= this.max.x &&\n\t\t\tpoint.y >= this.min.y && point.y <= this.max.y &&\n\t\t\tpoint.z >= this.min.z && point.z <= this.max.z;\n\n\t}\n\n\t/**\n\t * Returns `true` if this bounding box includes the entirety of the given bounding box.\n\t * If this box and the given one are identical, this function also returns `true`.\n\t *\n\t * @param {Box3} box - The bounding box to test.\n\t * @return {boolean} Whether the bounding box contains the given bounding box or not.\n\t */\n\tcontainsBox( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t}\n\n\t/**\n\t * Returns a point as a proportion of this box's width, height and depth.\n\t *\n\t * @param {Vector3} point - A point in 3D space.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} A point as a proportion of this box's width, height and depth.\n\t */\n\tgetParameter( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t);\n\n\t}\n\n\t/**\n\t * Returns `true` if the given bounding box intersects with this bounding box.\n\t *\n\t * @param {Box3} box - The bounding box to test.\n\t * @return {boolean} Whether the given bounding box intersects with this bounding box.\n\t */\n\tintersectsBox( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\t\treturn box.max.x >= this.min.x && box.min.x <= this.max.x &&\n\t\t\tbox.max.y >= this.min.y && box.min.y <= this.max.y &&\n\t\t\tbox.max.z >= this.min.z && box.min.z <= this.max.z;\n\n\t}\n\n\t/**\n\t * Returns `true` if the given bounding sphere intersects with this bounding box.\n\t *\n\t * @param {Sphere} sphere - The bounding sphere to test.\n\t * @return {boolean} Whether the given bounding sphere intersects with this bounding box.\n\t */\n\tintersectsSphere( sphere ) {\n\n\t\t// Find the point on the AABB closest to the sphere center.\n\t\tthis.clampPoint( sphere.center, _vector$b );\n\n\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\treturn _vector$b.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t}\n\n\t/**\n\t * Returns `true` if the given plane intersects with this bounding box.\n\t *\n\t * @param {Plane} plane - The plane to test.\n\t * @return {boolean} Whether the given plane intersects with this bounding box.\n\t */\n\tintersectsPlane( plane ) {\n\n\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\tlet min, max;\n\n\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t} else {\n\n\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t}\n\n\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t}\n\n\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t}\n\n\t\treturn ( min <= - plane.constant && max >= - plane.constant );\n\n\t}\n\n\t/**\n\t * Returns `true` if the given triangle intersects with this bounding box.\n\t *\n\t * @param {Triangle} triangle - The triangle to test.\n\t * @return {boolean} Whether the given triangle intersects with this bounding box.\n\t */\n\tintersectsTriangle( triangle ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// compute box center and extents\n\t\tthis.getCenter( _center );\n\t\t_extents.subVectors( this.max, _center );\n\n\t\t// translate triangle to aabb origin\n\t\t_v0$2.subVectors( triangle.a, _center );\n\t\t_v1$7.subVectors( triangle.b, _center );\n\t\t_v2$4.subVectors( triangle.c, _center );\n\n\t\t// compute edge vectors for triangle\n\t\t_f0.subVectors( _v1$7, _v0$2 );\n\t\t_f1.subVectors( _v2$4, _v1$7 );\n\t\t_f2.subVectors( _v0$2, _v2$4 );\n\n\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\t\tlet axes = [\n\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\n\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\n\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\n\t\t];\n\t\tif ( ! satForAxes( axes, _v0$2, _v1$7, _v2$4, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// test 3 face normals from the aabb\n\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n\t\tif ( ! satForAxes( axes, _v0$2, _v1$7, _v2$4, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// finally testing the face normal of the triangle\n\t\t// use already existing triangle edge vectors here\n\t\t_triangleNormal.crossVectors( _f0, _f1 );\n\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\n\n\t\treturn satForAxes( axes, _v0$2, _v1$7, _v2$4, _extents );\n\n\t}\n\n\t/**\n\t * Clamps the given point within the bounds of this box.\n\t *\n\t * @param {Vector3} point - The point to clamp.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The clamped point.\n\t */\n\tclampPoint( point, target ) {\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t}\n\n\t/**\n\t * Returns the euclidean distance from any edge of this box to the specified point. If\n\t * the given point lies inside of this box, the distance will be `0`.\n\t *\n\t * @param {Vector3} point - The point to compute the distance to.\n\t * @return {number} The euclidean distance.\n\t */\n\tdistanceToPoint( point ) {\n\n\t\treturn this.clampPoint( point, _vector$b ).distanceTo( point );\n\n\t}\n\n\t/**\n\t * Returns a bounding sphere that encloses this bounding box.\n\t *\n\t * @param {Sphere} target - The target sphere that is used to store the method's result.\n\t * @return {Sphere} The bounding sphere that encloses this bounding box.\n\t */\n\tgetBoundingSphere( target ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\ttarget.makeEmpty();\n\n\t\t} else {\n\n\t\t\tthis.getCenter( target.center );\n\n\t\t\ttarget.radius = this.getSize( _vector$b ).length() * 0.5;\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Computes the intersection of this bounding box and the given one, setting the upper\n\t * bound of this box to the lesser of the two boxes' upper bounds and the\n\t * lower bound of this box to the greater of the two boxes' lower bounds. If\n\t * there's no overlap, makes this box empty.\n\t *\n\t * @param {Box3} box - The bounding box to intersect with.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\tintersect( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\tif ( this.isEmpty() ) this.makeEmpty();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes the union of this box and another and the given one, setting the upper\n\t * bound of this box to the greater of the two boxes' upper bounds and the\n\t * lower bound of this box to the lesser of the two boxes' lower bounds.\n\t *\n\t * @param {Box3} box - The bounding box that will be unioned with this instance.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\tunion( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Transforms this bounding box by the given 4x4 transformation matrix.\n\t *\n\t * @param {Matrix4} matrix - The transformation matrix.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\tapplyMatrix4( matrix ) {\n\n\t\t// transform of empty box is an empty box.\n\t\tif ( this.isEmpty() ) return this;\n\n\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\n\n\t\tthis.setFromPoints( _points );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given offset to both the upper and lower bounds of this bounding box,\n\t * effectively moving it in 3D space.\n\t *\n\t * @param {Vector3} offset - The offset that should be used to translate the bounding box.\n\t * @return {Box3} A reference to this bounding box.\n\t */\n\ttranslate( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this bounding box is equal with the given one.\n\t *\n\t * @param {Box3} box - The box to test for equality.\n\t * @return {boolean} Whether this bounding box is equal with the given one.\n\t */\n\tequals( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n}\n\nconst _points = [\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3()\n];\n\nconst _vector$b = /*@__PURE__*/ new Vector3();\n\nconst _box$4 = /*@__PURE__*/ new Box3();\n\n// triangle centered vertices\n\nconst _v0$2 = /*@__PURE__*/ new Vector3();\nconst _v1$7 = /*@__PURE__*/ new Vector3();\nconst _v2$4 = /*@__PURE__*/ new Vector3();\n\n// triangle edge vectors\n\nconst _f0 = /*@__PURE__*/ new Vector3();\nconst _f1 = /*@__PURE__*/ new Vector3();\nconst _f2 = /*@__PURE__*/ new Vector3();\n\nconst _center = /*@__PURE__*/ new Vector3();\nconst _extents = /*@__PURE__*/ new Vector3();\nconst _triangleNormal = /*@__PURE__*/ new Vector3();\nconst _testAxis = /*@__PURE__*/ new Vector3();\n\nfunction satForAxes( axes, v0, v1, v2, extents ) {\n\n\tfor ( let i = 0, j = axes.length - 3; i <= j; i += 3 ) {\n\n\t\t_testAxis.fromArray( axes, i );\n\t\t// project the aabb onto the separating axis\n\t\tconst r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\n\t\t// project all 3 vertices of the triangle onto the separating axis\n\t\tconst p0 = v0.dot( _testAxis );\n\t\tconst p1 = v1.dot( _testAxis );\n\t\tconst p2 = v2.dot( _testAxis );\n\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\n\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\n\n\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t// the axis is separating and we can exit\n\t\t\treturn false;\n\n\t\t}\n\n\t}\n\n\treturn true;\n\n}\n\nconst _box$3 = /*@__PURE__*/ new Box3();\nconst _v1$6 = /*@__PURE__*/ new Vector3();\nconst _v2$3 = /*@__PURE__*/ new Vector3();\n\n/**\n * An analytical 3D sphere defined by a center and radius. This class is mainly\n * used as a Bounding Sphere for 3D objects.\n */\nclass Sphere {\n\n\t/**\n\t * Constructs a new sphere.\n\t *\n\t * @param {Vector3} [center=(0,0,0)] - The center of the sphere\n\t * @param {number} [radius=-1] - The radius of the sphere.\n\t */\n\tconstructor( center = new Vector3(), radius = -1 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSphere = true;\n\n\t\t/**\n\t\t * The center of the sphere\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.center = center;\n\n\t\t/**\n\t\t * The radius of the sphere.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.radius = radius;\n\n\t}\n\n\t/**\n\t * Sets the sphere's components by copying the given values.\n\t *\n\t * @param {Vector3} center - The center.\n\t * @param {number} radius - The radius.\n\t * @return {Sphere} A reference to this sphere.\n\t */\n\tset( center, radius ) {\n\n\t\tthis.center.copy( center );\n\t\tthis.radius = radius;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes the minimum bounding sphere for list of points.\n\t * If the optional center point is given, it is used as the sphere's\n\t * center. Otherwise, the center of the axis-aligned bounding box\n\t * encompassing the points is calculated.\n\t *\n\t * @param {Array<Vector3>} points - A list of points in 3D space.\n\t * @param {Vector3} [optionalCenter] - The center of the sphere.\n\t * @return {Sphere} A reference to this sphere.\n\t */\n\tsetFromPoints( points, optionalCenter ) {\n\n\t\tconst center = this.center;\n\n\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\tcenter.copy( optionalCenter );\n\n\t\t} else {\n\n\t\t\t_box$3.setFromPoints( points ).getCenter( center );\n\n\t\t}\n\n\t\tlet maxRadiusSq = 0;\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t}\n\n\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the values of the given sphere to this instance.\n\t *\n\t * @param {Sphere} sphere - The sphere to copy.\n\t * @return {Sphere} A reference to this sphere.\n\t */\n\tcopy( sphere ) {\n\n\t\tthis.center.copy( sphere.center );\n\t\tthis.radius = sphere.radius;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if the sphere is empty (the radius set to a negative number).\n\t *\n\t * Spheres with a radius of `0` contain only their center point and are not\n\t * considered to be empty.\n\t *\n\t * @return {boolean} Whether this sphere is empty or not.\n\t */\n\tisEmpty() {\n\n\t\treturn ( this.radius < 0 );\n\n\t}\n\n\t/**\n\t * Makes this sphere empty which means in encloses a zero space in 3D.\n\t *\n\t * @return {Sphere} A reference to this sphere.\n\t */\n\tmakeEmpty() {\n\n\t\tthis.center.set( 0, 0, 0 );\n\t\tthis.radius = -1;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this sphere contains the given point inclusive of\n\t * the surface of the sphere.\n\t *\n\t * @param {Vector3} point - The point to check.\n\t * @return {boolean} Whether this sphere contains the given point or not.\n\t */\n\tcontainsPoint( point ) {\n\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t}\n\n\t/**\n\t * Returns the closest distance from the boundary of the sphere to the\n\t * given point. If the sphere contains the point, the distance will\n\t * be negative.\n\t *\n\t * @param {Vector3} point - The point to compute the distance to.\n\t * @return {number} The distance to the point.\n\t */\n\tdistanceToPoint( point ) {\n\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t}\n\n\t/**\n\t * Returns `true` if this sphere intersects with the given one.\n\t *\n\t * @param {Sphere} sphere - The sphere to test.\n\t * @return {boolean} Whether this sphere intersects with the given one or not.\n\t */\n\tintersectsSphere( sphere ) {\n\n\t\tconst radiusSum = this.radius + sphere.radius;\n\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t}\n\n\t/**\n\t * Returns `true` if this sphere intersects with the given box.\n\t *\n\t * @param {Box3} box - The box to test.\n\t * @return {boolean} Whether this sphere intersects with the given box or not.\n\t */\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsSphere( this );\n\n\t}\n\n\t/**\n\t * Returns `true` if this sphere intersects with the given plane.\n\t *\n\t * @param {Plane} plane - The plane to test.\n\t * @return {boolean} Whether this sphere intersects with the given plane or not.\n\t */\n\tintersectsPlane( plane ) {\n\n\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\n\n\t}\n\n\t/**\n\t * Clamps a point within the sphere. If the point is outside the sphere, it\n\t * will clamp it to the closest point on the edge of the sphere. Points\n\t * already inside the sphere will not be affected.\n\t *\n\t * @param {Vector3} point - The plane to clamp.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The clamped point.\n\t */\n\tclampPoint( point, target ) {\n\n\t\tconst deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\ttarget.copy( point );\n\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\ttarget.sub( this.center ).normalize();\n\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Returns a bounding box that encloses this sphere.\n\t *\n\t * @param {Box3} target - The target box that is used to store the method's result.\n\t * @return {Box3} The bounding box that encloses this sphere.\n\t */\n\tgetBoundingBox( target ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\t// Empty sphere produces empty bounding box\n\t\t\ttarget.makeEmpty();\n\t\t\treturn target;\n\n\t\t}\n\n\t\ttarget.set( this.center, this.center );\n\t\ttarget.expandByScalar( this.radius );\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Transforms this sphere with the given 4x4 transformation matrix.\n\t *\n\t * @param {Matrix4} matrix - The transformation matrix.\n\t * @return {Sphere} A reference to this sphere.\n\t */\n\tapplyMatrix4( matrix ) {\n\n\t\tthis.center.applyMatrix4( matrix );\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Translates the sphere's center by the given offset.\n\t *\n\t * @param {Vector3} offset - The offset.\n\t * @return {Sphere} A reference to this sphere.\n\t */\n\ttranslate( offset ) {\n\n\t\tthis.center.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Expands the boundaries of this sphere to include the given point.\n\t *\n\t * @param {Vector3} point - The point to include.\n\t * @return {Sphere} A reference to this sphere.\n\t */\n\texpandByPoint( point ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\tthis.center.copy( point );\n\n\t\t\tthis.radius = 0;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\t_v1$6.subVectors( point, this.center );\n\n\t\tconst lengthSq = _v1$6.lengthSq();\n\n\t\tif ( lengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\t// calculate the minimal sphere\n\n\t\t\tconst length = Math.sqrt( lengthSq );\n\n\t\t\tconst delta = ( length - this.radius ) * 0.5;\n\n\t\t\tthis.center.addScaledVector( _v1$6, delta / length );\n\n\t\t\tthis.radius += delta;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Expands this sphere to enclose both the original sphere and the given sphere.\n\t *\n\t * @param {Sphere} sphere - The sphere to include.\n\t * @return {Sphere} A reference to this sphere.\n\t */\n\tunion( sphere ) {\n\n\t\tif ( sphere.isEmpty() ) {\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\tthis.copy( sphere );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( this.center.equals( sphere.center ) === true ) {\n\n\t\t\t this.radius = Math.max( this.radius, sphere.radius );\n\n\t\t} else {\n\n\t\t\t_v2$3.subVectors( sphere.center, this.center ).setLength( sphere.radius );\n\n\t\t\tthis.expandByPoint( _v1$6.copy( sphere.center ).add( _v2$3 ) );\n\n\t\t\tthis.expandByPoint( _v1$6.copy( sphere.center ).sub( _v2$3 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this sphere is equal with the given one.\n\t *\n\t * @param {Sphere} sphere - The sphere to test for equality.\n\t * @return {boolean} Whether this bounding sphere is equal with the given one.\n\t */\n\tequals( sphere ) {\n\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t}\n\n\t/**\n\t * Returns a new sphere with copied values from this instance.\n\t *\n\t * @return {Sphere} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _vector$a = /*@__PURE__*/ new Vector3();\nconst _segCenter = /*@__PURE__*/ new Vector3();\nconst _segDir = /*@__PURE__*/ new Vector3();\nconst _diff = /*@__PURE__*/ new Vector3();\n\nconst _edge1 = /*@__PURE__*/ new Vector3();\nconst _edge2 = /*@__PURE__*/ new Vector3();\nconst _normal$1 = /*@__PURE__*/ new Vector3();\n\n/**\n * A ray that emits from an origin in a certain direction. The class is used by\n * {@link Raycaster} to assist with raycasting. Raycasting is used for\n * mouse picking (working out what objects in the 3D space the mouse is over)\n * amongst other things.\n */\nclass Ray {\n\n\t/**\n\t * Constructs a new ray.\n\t *\n\t * @param {Vector3} [origin=(0,0,0)] - The origin of the ray.\n\t * @param {Vector3} [direction=(0,0,-1)] - The (normalized) direction of the ray.\n\t */\n\tconstructor( origin = new Vector3(), direction = new Vector3( 0, 0, -1 ) ) {\n\n\t\t/**\n\t\t * The origin of the ray.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.origin = origin;\n\n\t\t/**\n\t\t * The (normalized) direction of the ray.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.direction = direction;\n\n\t}\n\n\t/**\n\t * Sets the ray's components by copying the given values.\n\t *\n\t * @param {Vector3} origin - The origin.\n\t * @param {Vector3} direction - The direction.\n\t * @return {Ray} A reference to this ray.\n\t */\n\tset( origin, direction ) {\n\n\t\tthis.origin.copy( origin );\n\t\tthis.direction.copy( direction );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the values of the given ray to this instance.\n\t *\n\t * @param {Ray} ray - The ray to copy.\n\t * @return {Ray} A reference to this ray.\n\t */\n\tcopy( ray ) {\n\n\t\tthis.origin.copy( ray.origin );\n\t\tthis.direction.copy( ray.direction );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a vector that is located at a given distance along this ray.\n\t *\n\t * @param {number} t - The distance along the ray to retrieve a position for.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} A position on the ray.\n\t */\n\tat( t, target ) {\n\n\t\treturn target.copy( this.origin ).addScaledVector( this.direction, t );\n\n\t}\n\n\t/**\n\t * Adjusts the direction of the ray to point at the given vector in world space.\n\t *\n\t * @param {Vector3} v - The target position.\n\t * @return {Ray} A reference to this ray.\n\t */\n\tlookAt( v ) {\n\n\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Shift the origin of this ray along its direction by the given distance.\n\t *\n\t * @param {number} t - The distance along the ray to interpolate.\n\t * @return {Ray} A reference to this ray.\n\t */\n\trecast( t ) {\n\n\t\tthis.origin.copy( this.at( t, _vector$a ) );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the point along this ray that is closest to the given point.\n\t *\n\t * @param {Vector3} point - A point in 3D space to get the closet location on the ray for.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The closest point on this ray.\n\t */\n\tclosestPointToPoint( point, target ) {\n\n\t\ttarget.subVectors( point, this.origin );\n\n\t\tconst directionDistance = target.dot( this.direction );\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn target.copy( this.origin );\n\n\t\t}\n\n\t\treturn target.copy( this.origin ).addScaledVector( this.direction, directionDistance );\n\n\t}\n\n\t/**\n\t * Returns the distance of the closest approach between this ray and the given point.\n\t *\n\t * @param {Vector3} point - A point in 3D space to compute the distance to.\n\t * @return {number} The distance.\n\t */\n\tdistanceToPoint( point ) {\n\n\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t}\n\n\t/**\n\t * Returns the squared distance of the closest approach between this ray and the given point.\n\t *\n\t * @param {Vector3} point - A point in 3D space to compute the distance to.\n\t * @return {number} The squared distance.\n\t */\n\tdistanceSqToPoint( point ) {\n\n\t\tconst directionDistance = _vector$a.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t// point behind the ray\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t}\n\n\t\t_vector$a.copy( this.origin ).addScaledVector( this.direction, directionDistance );\n\n\t\treturn _vector$a.distanceToSquared( point );\n\n\t}\n\n\t/**\n\t * Returns the squared distance between this ray and the given line segment.\n\t *\n\t * @param {Vector3} v0 - The start point of the line segment.\n\t * @param {Vector3} v1 - The end point of the line segment.\n\t * @param {Vector3} [optionalPointOnRay] - When provided, it receives the point on this ray that is closest to the segment.\n\t * @param {Vector3} [optionalPointOnSegment] - When provided, it receives the point on the line segment that is closest to this ray.\n\t * @return {number} The squared distance.\n\t */\n\tdistanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t// It returns the min distance between the ray and the segment\n\t\t// defined by v0 and v1\n\t\t// It can also set two optional targets :\n\t\t// - The closest point on the ray\n\t\t// - The closest point on the segment\n\n\t\t_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t_segDir.copy( v1 ).sub( v0 ).normalize();\n\t\t_diff.copy( this.origin ).sub( _segCenter );\n\n\t\tconst segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\tconst a01 = - this.direction.dot( _segDir );\n\t\tconst b0 = _diff.dot( this.direction );\n\t\tconst b1 = - _diff.dot( _segDir );\n\t\tconst c = _diff.lengthSq();\n\t\tconst det = Math.abs( 1 - a01 * a01 );\n\t\tlet s0, s1, sqrDist, extDet;\n\n\t\tif ( det > 0 ) {\n\n\t\t\t// The ray and segment are not parallel.\n\n\t\t\ts0 = a01 * b1 - b0;\n\t\t\ts1 = a01 * b0 - b1;\n\t\t\textDet = segExtent * det;\n\n\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\tconst invDet = 1 / det;\n\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// region 5\n\n\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t// region 4\n\n\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t// region 3\n\n\t\t\t\t\ts0 = 0;\n\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// region 2\n\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Ray and segment are parallel.\n\n\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t}\n\n\t\tif ( optionalPointOnRay ) {\n\n\t\t\toptionalPointOnRay.copy( this.origin ).addScaledVector( this.direction, s0 );\n\n\t\t}\n\n\t\tif ( optionalPointOnSegment ) {\n\n\t\t\toptionalPointOnSegment.copy( _segCenter ).addScaledVector( _segDir, s1 );\n\n\t\t}\n\n\t\treturn sqrDist;\n\n\t}\n\n\t/**\n\t * Intersects this ray with the given sphere, returning the intersection\n\t * point or `null` if there is no intersection.\n\t *\n\t * @param {Sphere} sphere - The sphere to intersect.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The intersection point.\n\t */\n\tintersectSphere( sphere, target ) {\n\n\t\t_vector$a.subVectors( sphere.center, this.origin );\n\t\tconst tca = _vector$a.dot( this.direction );\n\t\tconst d2 = _vector$a.dot( _vector$a ) - tca * tca;\n\t\tconst radius2 = sphere.radius * sphere.radius;\n\n\t\tif ( d2 > radius2 ) return null;\n\n\t\tconst thc = Math.sqrt( radius2 - d2 );\n\n\t\t// t0 = first intersect point - entrance on front of sphere\n\t\tconst t0 = tca - thc;\n\n\t\t// t1 = second intersect point - exit point on back of sphere\n\t\tconst t1 = tca + thc;\n\n\t\t// test to see if t1 is behind the ray - if so, return null\n\t\tif ( t1 < 0 ) return null;\n\n\t\t// test to see if t0 is behind the ray:\n\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t// in order to always return an intersect point that is in front of the ray.\n\t\tif ( t0 < 0 ) return this.at( t1, target );\n\n\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\treturn this.at( t0, target );\n\n\t}\n\n\t/**\n\t * Returns `true` if this ray intersects with the given sphere.\n\t *\n\t * @param {Sphere} sphere - The sphere to intersect.\n\t * @return {boolean} Whether this ray intersects with the given sphere or not.\n\t */\n\tintersectsSphere( sphere ) {\n\n\t\treturn this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t}\n\n\t/**\n\t * Computes the distance from the ray's origin to the given plane. Returns `null` if the ray\n\t * does not intersect with the plane.\n\t *\n\t * @param {Plane} plane - The plane to compute the distance to.\n\t * @return {?number} Whether this ray intersects with the given sphere or not.\n\t */\n\tdistanceToPlane( plane ) {\n\n\t\tconst denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t// Return if the ray never intersects the plane\n\n\t\treturn t >= 0 ? t : null;\n\n\t}\n\n\t/**\n\t * Intersects this ray with the given plane, returning the intersection\n\t * point or `null` if there is no intersection.\n\t *\n\t * @param {Plane} plane - The plane to intersect.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The intersection point.\n\t */\n\tintersectPlane( plane, target ) {\n\n\t\tconst t = this.distanceToPlane( plane );\n\n\t\tif ( t === null ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn this.at( t, target );\n\n\t}\n\n\t/**\n\t * Returns `true` if this ray intersects with the given plane.\n\t *\n\t * @param {Plane} plane - The plane to intersect.\n\t * @return {boolean} Whether this ray intersects with the given plane or not.\n\t */\n\tintersectsPlane( plane ) {\n\n\t\t// check if the ray lies on the plane first\n\n\t\tconst distToPoint = plane.distanceToPoint( this.origin );\n\n\t\tif ( distToPoint === 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tconst denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\treturn false;\n\n\t}\n\n\t/**\n\t * Intersects this ray with the given bounding box, returning the intersection\n\t * point or `null` if there is no intersection.\n\t *\n\t * @param {Box3} box - The box to intersect.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The intersection point.\n\t */\n\tintersectBox( box, target ) {\n\n\t\tlet tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\tconst invdirx = 1 / this.direction.x,\n\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\tconst origin = this.origin;\n\n\t\tif ( invdirx >= 0 ) {\n\n\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t} else {\n\n\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t}\n\n\t\tif ( invdiry >= 0 ) {\n\n\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t} else {\n\n\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t}\n\n\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n\t\tif ( tymin > tmin || isNaN( tmin ) ) tmin = tymin;\n\n\t\tif ( tymax < tmax || isNaN( tmax ) ) tmax = tymax;\n\n\t\tif ( invdirz >= 0 ) {\n\n\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t} else {\n\n\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t}\n\n\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n\t\t//return point closest to the ray (positive side)\n\n\t\tif ( tmax < 0 ) return null;\n\n\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\n\n\t}\n\n\t/**\n\t * Returns `true` if this ray intersects with the given box.\n\t *\n\t * @param {Box3} box - The box to intersect.\n\t * @return {boolean} Whether this ray intersects with the given box or not.\n\t */\n\tintersectsBox( box ) {\n\n\t\treturn this.intersectBox( box, _vector$a ) !== null;\n\n\t}\n\n\t/**\n\t * Intersects this ray with the given triangle, returning the intersection\n\t * point or `null` if there is no intersection.\n\t *\n\t * @param {Vector3} a - The first vertex of the triangle.\n\t * @param {Vector3} b - The second vertex of the triangle.\n\t * @param {Vector3} c - The third vertex of the triangle.\n\t * @param {boolean} backfaceCulling - Whether to use backface culling or not.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The intersection point.\n\t */\n\tintersectTriangle( a, b, c, backfaceCulling, target ) {\n\n\t\t// Compute the offset origin, edges, and normal.\n\n\t\t// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t_edge1.subVectors( b, a );\n\t\t_edge2.subVectors( c, a );\n\t\t_normal$1.crossVectors( _edge1, _edge2 );\n\n\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\tlet DdN = this.direction.dot( _normal$1 );\n\t\tlet sign;\n\n\t\tif ( DdN > 0 ) {\n\n\t\t\tif ( backfaceCulling ) return null;\n\t\t\tsign = 1;\n\n\t\t} else if ( DdN < 0 ) {\n\n\t\t\tsign = -1;\n\t\t\tDdN = - DdN;\n\n\t\t} else {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t_diff.subVectors( this.origin, a );\n\t\tconst DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );\n\n\t\t// b1 < 0, no intersection\n\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );\n\n\t\t// b2 < 0, no intersection\n\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// b1+b2 > 1, no intersection\n\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// Line intersects triangle, check if ray does.\n\t\tconst QdN = - sign * _diff.dot( _normal$1 );\n\n\t\t// t < 0, no intersection\n\t\tif ( QdN < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// Ray intersects triangle.\n\t\treturn this.at( QdN / DdN, target );\n\n\t}\n\n\t/**\n\t * Transforms this ray with the given 4x4 transformation matrix.\n\t *\n\t * @param {Matrix4} matrix4 - The transformation matrix.\n\t * @return {Ray} A reference to this ray.\n\t */\n\tapplyMatrix4( matrix4 ) {\n\n\t\tthis.origin.applyMatrix4( matrix4 );\n\t\tthis.direction.transformDirection( matrix4 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this ray is equal with the given one.\n\t *\n\t * @param {Ray} ray - The ray to test for equality.\n\t * @return {boolean} Whether this ray is equal with the given one.\n\t */\n\tequals( ray ) {\n\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t}\n\n\t/**\n\t * Returns a new ray with copied values from this instance.\n\t *\n\t * @return {Ray} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\n/**\n * Represents a 4x4 matrix.\n *\n * The most common use of a 4x4 matrix in 3D computer graphics is as a transformation matrix.\n * For an introduction to transformation matrices as used in WebGL, check out [this tutorial]{@link https://www.opengl-tutorial.org/beginners-tutorials/tutorial-3-matrices}\n *\n * This allows a 3D vector representing a point in 3D space to undergo\n * transformations such as translation, rotation, shear, scale, reflection,\n * orthogonal or perspective projection and so on, by being multiplied by the\n * matrix. This is known as `applying` the matrix to the vector.\n *\n * A Note on Row-Major and Column-Major Ordering:\n *\n * The constructor and {@link Matrix3#set} method take arguments in\n * [row-major]{@link https://en.wikipedia.org/wiki/Row-_and_column-major_order#Column-major_order}\n * order, while internally they are stored in the {@link Matrix3#elements} array in column-major order.\n * This means that calling:\n * ```js\n * const m = new THREE.Matrix4();\n * m.set( 11, 12, 13, 14,\n *        21, 22, 23, 24,\n *        31, 32, 33, 34,\n *        41, 42, 43, 44 );\n * ```\n * will result in the elements array containing:\n * ```js\n * m.elements = [ 11, 21, 31, 41,\n *                12, 22, 32, 42,\n *                13, 23, 33, 43,\n *                14, 24, 34, 44 ];\n * ```\n * and internally all calculations are performed using column-major ordering.\n * However, as the actual ordering makes no difference mathematically and\n * most people are used to thinking about matrices in row-major order, the\n * three.js documentation shows matrices in row-major order. Just bear in\n * mind that if you are reading the source code, you'll have to take the\n * transpose of any matrices outlined here to make sense of the calculations.\n */\nclass Matrix4 {\n\n\t/**\n\t * Constructs a new 4x4 matrix. The arguments are supposed to be\n\t * in row-major order. If no arguments are provided, the constructor\n\t * initializes the matrix as an identity matrix.\n\t *\n\t * @param {number} [n11] - 1-1 matrix element.\n\t * @param {number} [n12] - 1-2 matrix element.\n\t * @param {number} [n13] - 1-3 matrix element.\n\t * @param {number} [n14] - 1-4 matrix element.\n\t * @param {number} [n21] - 2-1 matrix element.\n\t * @param {number} [n22] - 2-2 matrix element.\n\t * @param {number} [n23] - 2-3 matrix element.\n\t * @param {number} [n24] - 2-4 matrix element.\n\t * @param {number} [n31] - 3-1 matrix element.\n\t * @param {number} [n32] - 3-2 matrix element.\n\t * @param {number} [n33] - 3-3 matrix element.\n\t * @param {number} [n34] - 3-4 matrix element.\n\t * @param {number} [n41] - 4-1 matrix element.\n\t * @param {number} [n42] - 4-2 matrix element.\n\t * @param {number} [n43] - 4-3 matrix element.\n\t * @param {number} [n44] - 4-4 matrix element.\n\t */\n\tconstructor( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tMatrix4.prototype.isMatrix4 = true;\n\n\t\t/**\n\t\t * A column-major list of matrix values.\n\t\t *\n\t\t * @type {Array<number>}\n\t\t */\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t];\n\n\t\tif ( n11 !== undefined ) {\n\n\t\t\tthis.set( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the elements of the matrix.The arguments are supposed to be\n\t * in row-major order.\n\t *\n\t * @param {number} [n11] - 1-1 matrix element.\n\t * @param {number} [n12] - 1-2 matrix element.\n\t * @param {number} [n13] - 1-3 matrix element.\n\t * @param {number} [n14] - 1-4 matrix element.\n\t * @param {number} [n21] - 2-1 matrix element.\n\t * @param {number} [n22] - 2-2 matrix element.\n\t * @param {number} [n23] - 2-3 matrix element.\n\t * @param {number} [n24] - 2-4 matrix element.\n\t * @param {number} [n31] - 3-1 matrix element.\n\t * @param {number} [n32] - 3-2 matrix element.\n\t * @param {number} [n33] - 3-3 matrix element.\n\t * @param {number} [n34] - 3-4 matrix element.\n\t * @param {number} [n41] - 4-1 matrix element.\n\t * @param {number} [n42] - 4-2 matrix element.\n\t * @param {number} [n43] - 4-3 matrix element.\n\t * @param {number} [n44] - 4-4 matrix element.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tset( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix to the 4x4 identity matrix.\n\t *\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tidentity() {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a matrix with copied values from this instance.\n\t *\n\t * @return {Matrix4} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new Matrix4().fromArray( this.elements );\n\n\t}\n\n\t/**\n\t * Copies the values of the given matrix to this instance.\n\t *\n\t * @param {Matrix4} m - The matrix to copy.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tcopy( m ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\n\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\n\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\n\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the translation component of the given matrix\n\t * into this matrix's translation component.\n\t *\n\t * @param {Matrix4} m - The matrix to copy the translation component.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tcopyPosition( m ) {\n\n\t\tconst te = this.elements, me = m.elements;\n\n\t\tte[ 12 ] = me[ 12 ];\n\t\tte[ 13 ] = me[ 13 ];\n\t\tte[ 14 ] = me[ 14 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Set the upper 3x3 elements of this matrix to the values of given 3x3 matrix.\n\t *\n\t * @param {Matrix3} m - The 3x3 matrix.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tsetFromMatrix3( m ) {\n\n\t\tconst me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 3 ], me[ 6 ], 0,\n\t\t\tme[ 1 ], me[ 4 ], me[ 7 ], 0,\n\t\t\tme[ 2 ], me[ 5 ], me[ 8 ], 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Extracts the basis of this matrix into the three axis vectors provided.\n\t *\n\t * @param {Vector3} xAxis - The basis's x axis.\n\t * @param {Vector3} yAxis - The basis's y axis.\n\t * @param {Vector3} zAxis - The basis's z axis.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\textractBasis( xAxis, yAxis, zAxis ) {\n\n\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given basis vectors to this matrix.\n\t *\n\t * @param {Vector3} xAxis - The basis's x axis.\n\t * @param {Vector3} yAxis - The basis's y axis.\n\t * @param {Vector3} zAxis - The basis's z axis.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeBasis( xAxis, yAxis, zAxis ) {\n\n\t\tthis.set(\n\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t0, 0, 0, 1\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Extracts the rotation component of the given matrix\n\t * into this matrix's rotation component.\n\t *\n\t * Note: This method does not support reflection matrices.\n\t *\n\t * @param {Matrix4} m - The matrix.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\textractRotation( m ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tconst scaleX = 1 / _v1$5.setFromMatrixColumn( m, 0 ).length();\n\t\tconst scaleY = 1 / _v1$5.setFromMatrixColumn( m, 1 ).length();\n\t\tconst scaleZ = 1 / _v1$5.setFromMatrixColumn( m, 2 ).length();\n\n\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\t\tte[ 3 ] = 0;\n\n\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\t\tte[ 7 ] = 0;\n\n\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\t\tte[ 11 ] = 0;\n\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the rotation component (the upper left 3x3 matrix) of this matrix to\n\t * the rotation specified by the given Euler angles. The rest of\n\t * the matrix is set to the identity. Depending on the {@link Euler#order},\n\t * there are six possible outcomes. See [this page]{@link https://en.wikipedia.org/wiki/Euler_angles#Rotation_matrix}\n\t * for a complete list.\n\t *\n\t * @param {Euler} euler - The Euler angles.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeRotationFromEuler( euler ) {\n\n\t\tconst te = this.elements;\n\n\t\tconst x = euler.x, y = euler.y, z = euler.z;\n\t\tconst a = Math.cos( x ), b = Math.sin( x );\n\t\tconst c = Math.cos( y ), d = Math.sin( y );\n\t\tconst e = Math.cos( z ), f = Math.sin( z );\n\n\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\tconst ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - c * f;\n\t\t\tte[ 8 ] = d;\n\n\t\t\tte[ 1 ] = af + be * d;\n\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\tte[ 9 ] = - b * c;\n\n\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\tte[ 6 ] = be + af * d;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\tconst ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce + df * b;\n\t\t\tte[ 4 ] = de * b - cf;\n\t\t\tte[ 8 ] = a * d;\n\n\t\t\tte[ 1 ] = a * f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b;\n\n\t\t\tte[ 2 ] = cf * b - de;\n\t\t\tte[ 6 ] = df + ce * b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\tconst ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce - df * b;\n\t\t\tte[ 4 ] = - a * f;\n\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\tte[ 1 ] = cf + de * b;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\tte[ 2 ] = - a * d;\n\t\t\tte[ 6 ] = b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\tconst ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = be * d - af;\n\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\tte[ 1 ] = c * f;\n\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\tte[ 2 ] = - d;\n\t\t\tte[ 6 ] = b * c;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\tconst ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\tte[ 1 ] = f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b * e;\n\n\t\t\tte[ 2 ] = - d * e;\n\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\tconst ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - f;\n\t\t\tte[ 8 ] = d * e;\n\n\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\tte[ 6 ] = b * e;\n\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t}\n\n\t\t// bottom row\n\t\tte[ 3 ] = 0;\n\t\tte[ 7 ] = 0;\n\t\tte[ 11 ] = 0;\n\n\t\t// last column\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the rotation component of this matrix to the rotation specified by\n\t * the given Quaternion as outlined [here]{@link https://en.wikipedia.org/wiki/Rotation_matrix#Quaternion}\n\t * The rest of the matrix is set to the identity.\n\t *\n\t * @param {Quaternion} q - The Quaternion.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeRotationFromQuaternion( q ) {\n\n\t\treturn this.compose( _zero, q, _one );\n\n\t}\n\n\t/**\n\t * Sets the rotation component of the transformation matrix, looking from `eye` towards\n\t * `target`, and oriented by the up-direction.\n\t *\n\t * @param {Vector3} eye - The eye vector.\n\t * @param {Vector3} target - The target vector.\n\t * @param {Vector3} up - The up vector.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tlookAt( eye, target, up ) {\n\n\t\tconst te = this.elements;\n\n\t\t_z.subVectors( eye, target );\n\n\t\tif ( _z.lengthSq() === 0 ) {\n\n\t\t\t// eye and target are in the same position\n\n\t\t\t_z.z = 1;\n\n\t\t}\n\n\t\t_z.normalize();\n\t\t_x.crossVectors( up, _z );\n\n\t\tif ( _x.lengthSq() === 0 ) {\n\n\t\t\t// up and z are parallel\n\n\t\t\tif ( Math.abs( up.z ) === 1 ) {\n\n\t\t\t\t_z.x += 0.0001;\n\n\t\t\t} else {\n\n\t\t\t\t_z.z += 0.0001;\n\n\t\t\t}\n\n\t\t\t_z.normalize();\n\t\t\t_x.crossVectors( up, _z );\n\n\t\t}\n\n\t\t_x.normalize();\n\t\t_y.crossVectors( _z, _x );\n\n\t\tte[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;\n\t\tte[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;\n\t\tte[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Post-multiplies this matrix by the given 4x4 matrix.\n\t *\n\t * @param {Matrix4} m - The matrix to multiply with.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmultiply( m ) {\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t}\n\n\t/**\n\t * Pre-multiplies this matrix by the given 4x4 matrix.\n\t *\n\t * @param {Matrix4} m - The matrix to multiply with.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tpremultiply( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t}\n\n\t/**\n\t * Multiples the given 4x4 matrices and stores the result\n\t * in this matrix.\n\t *\n\t * @param {Matrix4} a - The first matrix.\n\t * @param {Matrix4} b - The second matrix.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmultiplyMatrices( a, b ) {\n\n\t\tconst ae = a.elements;\n\t\tconst be = b.elements;\n\t\tconst te = this.elements;\n\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\tconst a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\tconst a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\tconst a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\tconst b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\tconst b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\tconst b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\tconst b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies every component of the matrix by the given scalar.\n\t *\n\t * @param {number} s - The scalar.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmultiplyScalar( s ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes and returns the determinant of this matrix.\n\t *\n\t * Based on the method outlined [here]{@link http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.html}.\n\t *\n\t * @return {number} The determinant.\n\t */\n\tdeterminant() {\n\n\t\tconst te = this.elements;\n\n\t\tconst n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\tconst n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\tconst n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\tconst n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t//TODO: make this more efficient\n\n\t\treturn (\n\t\t\tn41 * (\n\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t - n13 * n24 * n32\n\t\t\t\t - n14 * n22 * n33\n\t\t\t\t + n12 * n24 * n33\n\t\t\t\t + n13 * n22 * n34\n\t\t\t\t - n12 * n23 * n34\n\t\t\t) +\n\t\t\tn42 * (\n\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t - n11 * n24 * n33\n\t\t\t\t + n14 * n21 * n33\n\t\t\t\t - n13 * n21 * n34\n\t\t\t\t + n13 * n24 * n31\n\t\t\t\t - n14 * n23 * n31\n\t\t\t) +\n\t\t\tn43 * (\n\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t - n11 * n22 * n34\n\t\t\t\t - n14 * n21 * n32\n\t\t\t\t + n12 * n21 * n34\n\t\t\t\t + n14 * n22 * n31\n\t\t\t\t - n12 * n24 * n31\n\t\t\t) +\n\t\t\tn44 * (\n\t\t\t\t- n13 * n22 * n31\n\t\t\t\t - n11 * n23 * n32\n\t\t\t\t + n11 * n22 * n33\n\t\t\t\t + n13 * n21 * n32\n\t\t\t\t - n12 * n21 * n33\n\t\t\t\t + n12 * n23 * n31\n\t\t\t)\n\n\t\t);\n\n\t}\n\n\t/**\n\t * Transposes this matrix in place.\n\t *\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\ttranspose() {\n\n\t\tconst te = this.elements;\n\t\tlet tmp;\n\n\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the position component for this matrix from the given vector,\n\t * without affecting the rest of the matrix.\n\t *\n\t * @param {number|Vector3} x - The x component of the vector or alternatively the vector object.\n\t * @param {number} y - The y component of the vector.\n\t * @param {number} z - The z component of the vector.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tsetPosition( x, y, z ) {\n\n\t\tconst te = this.elements;\n\n\t\tif ( x.isVector3 ) {\n\n\t\t\tte[ 12 ] = x.x;\n\t\t\tte[ 13 ] = x.y;\n\t\t\tte[ 14 ] = x.z;\n\n\t\t} else {\n\n\t\t\tte[ 12 ] = x;\n\t\t\tte[ 13 ] = y;\n\t\t\tte[ 14 ] = z;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Inverts this matrix, using the [analytic method]{@link https://en.wikipedia.org/wiki/Invertible_matrix#Analytic_solution}.\n\t * You can not invert with a determinant of zero. If you attempt this, the method produces\n\t * a zero matrix instead.\n\t *\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tinvert() {\n\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\tconst te = this.elements,\n\n\t\t\tn11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ], n41 = te[ 3 ],\n\t\t\tn12 = te[ 4 ], n22 = te[ 5 ], n32 = te[ 6 ], n42 = te[ 7 ],\n\t\t\tn13 = te[ 8 ], n23 = te[ 9 ], n33 = te[ 10 ], n43 = te[ 11 ],\n\t\t\tn14 = te[ 12 ], n24 = te[ 13 ], n34 = te[ 14 ], n44 = te[ 15 ],\n\n\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\tconst det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\tif ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );\n\n\t\tconst detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\tte[ 4 ] = t12 * detInv;\n\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\tte[ 8 ] = t13 * detInv;\n\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\tte[ 12 ] = t14 * detInv;\n\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the columns of this matrix by the given vector.\n\t *\n\t * @param {Vector3} v - The scale vector.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tscale( v ) {\n\n\t\tconst te = this.elements;\n\t\tconst x = v.x, y = v.y, z = v.z;\n\n\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Gets the maximum scale value of the three axes.\n\t *\n\t * @return {number} The maximum scale.\n\t */\n\tgetMaxScaleOnAxis() {\n\n\t\tconst te = this.elements;\n\n\t\tconst scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\tconst scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\tconst scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t}\n\n\t/**\n\t * Sets this matrix as a translation transform from the given vector.\n\t *\n\t * @param {number|Vector3} x - The amount to translate in the X axis or alternatively a translation vector.\n\t * @param {number} y - The amount to translate in the Y axis.\n\t * @param {number} z - The amount to translate in the z axis.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeTranslation( x, y, z ) {\n\n\t\tif ( x.isVector3 ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, x.x,\n\t\t\t\t0, 1, 0, x.y,\n\t\t\t\t0, 0, 1, x.z,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t} else {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, x,\n\t\t\t\t0, 1, 0, y,\n\t\t\t\t0, 0, 1, z,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix as a rotational transformation around the X axis by\n\t * the given angle.\n\t *\n\t * @param {number} theta - The rotation in radians.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeRotationX( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, c, - s, 0,\n\t\t\t0, s, c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix as a rotational transformation around the Y axis by\n\t * the given angle.\n\t *\n\t * @param {number} theta - The rotation in radians.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeRotationY( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t c, 0, s, 0,\n\t\t\t 0, 1, 0, 0,\n\t\t\t- s, 0, c, 0,\n\t\t\t 0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix as a rotational transformation around the Z axis by\n\t * the given angle.\n\t *\n\t * @param {number} theta - The rotation in radians.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeRotationZ( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\tc, - s, 0, 0,\n\t\t\ts, c, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix as a rotational transformation around the given axis by\n\t * the given angle.\n\t *\n\t * This is a somewhat controversial but mathematically sound alternative to\n\t * rotating via Quaternions. See the discussion [here]{@link https://www.gamedev.net/articles/programming/math-and-physics/do-we-really-need-quaternions-r1199}.\n\t *\n\t * @param {Vector3} axis - The normalized rotation axis.\n\t * @param {number} angle - The rotation in radians.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeRotationAxis( axis, angle ) {\n\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\tconst c = Math.cos( angle );\n\t\tconst s = Math.sin( angle );\n\t\tconst t = 1 - c;\n\t\tconst x = axis.x, y = axis.y, z = axis.z;\n\t\tconst tx = t * x, ty = t * y;\n\n\t\tthis.set(\n\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix as a scale transformation.\n\t *\n\t * @param {number} x - The amount to scale in the X axis.\n\t * @param {number} y - The amount to scale in the Y axis.\n\t * @param {number} z - The amount to scale in the Z axis.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeScale( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\tx, 0, 0, 0,\n\t\t\t0, y, 0, 0,\n\t\t\t0, 0, z, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix as a shear transformation.\n\t *\n\t * @param {number} xy - The amount to shear X by Y.\n\t * @param {number} xz - The amount to shear X by Z.\n\t * @param {number} yx - The amount to shear Y by X.\n\t * @param {number} yz - The amount to shear Y by Z.\n\t * @param {number} zx - The amount to shear Z by X.\n\t * @param {number} zy - The amount to shear Z by Y.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeShear( xy, xz, yx, yz, zx, zy ) {\n\n\t\tthis.set(\n\n\t\t\t1, yx, zx, 0,\n\t\t\txy, 1, zy, 0,\n\t\t\txz, yz, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix to the transformation composed of the given position,\n\t * rotation (Quaternion) and scale.\n\t *\n\t * @param {Vector3} position - The position vector.\n\t * @param {Quaternion} quaternion - The rotation as a Quaternion.\n\t * @param {Vector3} scale - The scale vector.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tcompose( position, quaternion, scale ) {\n\n\t\tconst te = this.elements;\n\n\t\tconst x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\n\t\tconst x2 = x + x,\ty2 = y + y, z2 = z + z;\n\t\tconst xx = x * x2, xy = x * y2, xz = x * z2;\n\t\tconst yy = y * y2, yz = y * z2, zz = z * z2;\n\t\tconst wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\tconst sx = scale.x, sy = scale.y, sz = scale.z;\n\n\t\tte[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\n\t\tte[ 1 ] = ( xy + wz ) * sx;\n\t\tte[ 2 ] = ( xz - wy ) * sx;\n\t\tte[ 3 ] = 0;\n\n\t\tte[ 4 ] = ( xy - wz ) * sy;\n\t\tte[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\n\t\tte[ 6 ] = ( yz + wx ) * sy;\n\t\tte[ 7 ] = 0;\n\n\t\tte[ 8 ] = ( xz + wy ) * sz;\n\t\tte[ 9 ] = ( yz - wx ) * sz;\n\t\tte[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\n\t\tte[ 11 ] = 0;\n\n\t\tte[ 12 ] = position.x;\n\t\tte[ 13 ] = position.y;\n\t\tte[ 14 ] = position.z;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Decomposes this matrix into its position, rotation and scale components\n\t * and provides the result in the given objects.\n\t *\n\t * Note: Not all matrices are decomposable in this way. For example, if an\n\t * object has a non-uniformly scaled parent, then the object's world matrix\n\t * may not be decomposable, and this method may not be appropriate.\n\t *\n\t * @param {Vector3} position - The position vector.\n\t * @param {Quaternion} quaternion - The rotation as a Quaternion.\n\t * @param {Vector3} scale - The scale vector.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tdecompose( position, quaternion, scale ) {\n\n\t\tconst te = this.elements;\n\n\t\tlet sx = _v1$5.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\tconst sy = _v1$5.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\tconst sz = _v1$5.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t// if determine is negative, we need to invert one scale\n\t\tconst det = this.determinant();\n\t\tif ( det < 0 ) sx = - sx;\n\n\t\tposition.x = te[ 12 ];\n\t\tposition.y = te[ 13 ];\n\t\tposition.z = te[ 14 ];\n\n\t\t// scale the rotation part\n\t\t_m1$2.copy( this );\n\n\t\tconst invSX = 1 / sx;\n\t\tconst invSY = 1 / sy;\n\t\tconst invSZ = 1 / sz;\n\n\t\t_m1$2.elements[ 0 ] *= invSX;\n\t\t_m1$2.elements[ 1 ] *= invSX;\n\t\t_m1$2.elements[ 2 ] *= invSX;\n\n\t\t_m1$2.elements[ 4 ] *= invSY;\n\t\t_m1$2.elements[ 5 ] *= invSY;\n\t\t_m1$2.elements[ 6 ] *= invSY;\n\n\t\t_m1$2.elements[ 8 ] *= invSZ;\n\t\t_m1$2.elements[ 9 ] *= invSZ;\n\t\t_m1$2.elements[ 10 ] *= invSZ;\n\n\t\tquaternion.setFromRotationMatrix( _m1$2 );\n\n\t\tscale.x = sx;\n\t\tscale.y = sy;\n\t\tscale.z = sz;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Creates a perspective projection matrix. This is used internally by\n\t * {@link PerspectiveCamera#updateProjectionMatrix}.\n\n\t * @param {number} left - Left boundary of the viewing frustum at the near plane.\n\t * @param {number} right - Right boundary of the viewing frustum at the near plane.\n\t * @param {number} top - Top boundary of the viewing frustum at the near plane.\n\t * @param {number} bottom - Bottom boundary of the viewing frustum at the near plane.\n\t * @param {number} near - The distance from the camera to the near plane.\n\t * @param {number} far - The distance from the camera to the far plane.\n\t * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} [coordinateSystem=WebGLCoordinateSystem] - The coordinate system.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakePerspective( left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem ) {\n\n\t\tconst te = this.elements;\n\t\tconst x = 2 * near / ( right - left );\n\t\tconst y = 2 * near / ( top - bottom );\n\n\t\tconst a = ( right + left ) / ( right - left );\n\t\tconst b = ( top + bottom ) / ( top - bottom );\n\n\t\tlet c, d;\n\n\t\tif ( coordinateSystem === WebGLCoordinateSystem ) {\n\n\t\t\tc = - ( far + near ) / ( far - near );\n\t\t\td = ( -2 * far * near ) / ( far - near );\n\n\t\t} else if ( coordinateSystem === WebGPUCoordinateSystem ) {\n\n\t\t\tc = - far / ( far - near );\n\t\t\td = ( - far * near ) / ( far - near );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.Matrix4.makePerspective(): Invalid coordinate system: ' + coordinateSystem );\n\n\t\t}\n\n\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a; \tte[ 12 ] = 0;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b; \tte[ 13 ] = 0;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c; \tte[ 14 ] = d;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = -1;\tte[ 15 ] = 0;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Creates a orthographic projection matrix. This is used internally by\n\t * {@link OrthographicCamera#updateProjectionMatrix}.\n\n\t * @param {number} left - Left boundary of the viewing frustum at the near plane.\n\t * @param {number} right - Right boundary of the viewing frustum at the near plane.\n\t * @param {number} top - Top boundary of the viewing frustum at the near plane.\n\t * @param {number} bottom - Bottom boundary of the viewing frustum at the near plane.\n\t * @param {number} near - The distance from the camera to the near plane.\n\t * @param {number} far - The distance from the camera to the far plane.\n\t * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} [coordinateSystem=WebGLCoordinateSystem] - The coordinate system.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeOrthographic( left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem ) {\n\n\t\tconst te = this.elements;\n\t\tconst w = 1.0 / ( right - left );\n\t\tconst h = 1.0 / ( top - bottom );\n\t\tconst p = 1.0 / ( far - near );\n\n\t\tconst x = ( right + left ) * w;\n\t\tconst y = ( top + bottom ) * h;\n\n\t\tlet z, zInv;\n\n\t\tif ( coordinateSystem === WebGLCoordinateSystem ) {\n\n\t\t\tz = ( far + near ) * p;\n\t\t\tzInv = -2 * p;\n\n\t\t} else if ( coordinateSystem === WebGPUCoordinateSystem ) {\n\n\t\t\tz = near * p;\n\t\t\tzInv = -1 * p;\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.Matrix4.makeOrthographic(): Invalid coordinate system: ' + coordinateSystem );\n\n\t\t}\n\n\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\t\tte[ 8 ] = 0; \t\tte[ 12 ] = - x;\n\t\tte[ 1 ] = 0; \t\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0; \t\tte[ 13 ] = - y;\n\t\tte[ 2 ] = 0; \t\tte[ 6 ] = 0;\t\tte[ 10 ] = zInv;\tte[ 14 ] = - z;\n\t\tte[ 3 ] = 0; \t\tte[ 7 ] = 0;\t\tte[ 11 ] = 0;\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this matrix is equal with the given one.\n\t *\n\t * @param {Matrix4} matrix - The matrix to test for equality.\n\t * @return {boolean} Whether this matrix is equal with the given one.\n\t */\n\tequals( matrix ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = matrix.elements;\n\n\t\tfor ( let i = 0; i < 16; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * Sets the elements of the matrix from the given array.\n\t *\n\t * @param {Array<number>} array - The matrix elements in column-major order.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tfromArray( array, offset = 0 ) {\n\n\t\tfor ( let i = 0; i < 16; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Writes the elements of this matrix to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array holding the matrix elements in column-major order.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number>} The matrix elements in column-major order.\n\t */\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\tarray[ offset + 8 ] = te[ 8 ];\n\t\tarray[ offset + 9 ] = te[ 9 ];\n\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\treturn array;\n\n\t}\n\n}\n\nconst _v1$5 = /*@__PURE__*/ new Vector3();\nconst _m1$2 = /*@__PURE__*/ new Matrix4();\nconst _zero = /*@__PURE__*/ new Vector3( 0, 0, 0 );\nconst _one = /*@__PURE__*/ new Vector3( 1, 1, 1 );\nconst _x = /*@__PURE__*/ new Vector3();\nconst _y = /*@__PURE__*/ new Vector3();\nconst _z = /*@__PURE__*/ new Vector3();\n\nconst _matrix$2 = /*@__PURE__*/ new Matrix4();\nconst _quaternion$3 = /*@__PURE__*/ new Quaternion();\n\n/**\n * A class representing Euler angles.\n *\n * Euler angles describe a rotational transformation by rotating an object on\n * its various axes in specified amounts per axis, and a specified axis\n * order.\n *\n * Iterating through an instance will yield its components (x, y, z,\n * order) in the corresponding order.\n *\n * ```js\n * const a = new THREE.Euler( 0, 1, 1.57, 'XYZ' );\n * const b = new THREE.Vector3( 1, 0, 1 );\n * b.applyEuler(a);\n * ```\n */\nclass Euler {\n\n\t/**\n\t * Constructs a new euler instance.\n\t *\n\t * @param {number} [x=0] - The angle of the x axis in radians.\n\t * @param {number} [y=0] - The angle of the y axis in radians.\n\t * @param {number} [z=0] - The angle of the z axis in radians.\n\t * @param {string} [order=Euler.DEFAULT_ORDER] - A string representing the order that the rotations are applied.\n\t */\n\tconstructor( x = 0, y = 0, z = 0, order = Euler.DEFAULT_ORDER ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isEuler = true;\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order;\n\n\t}\n\n\t/**\n\t * The angle of the x axis in radians.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget x() {\n\n\t\treturn this._x;\n\n\t}\n\n\tset x( value ) {\n\n\t\tthis._x = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\t/**\n\t * The angle of the y axis in radians.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget y() {\n\n\t\treturn this._y;\n\n\t}\n\n\tset y( value ) {\n\n\t\tthis._y = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\t/**\n\t * The angle of the z axis in radians.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget z() {\n\n\t\treturn this._z;\n\n\t}\n\n\tset z( value ) {\n\n\t\tthis._z = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\t/**\n\t * A string representing the order that the rotations are applied.\n\t *\n\t * @type {string}\n\t * @default 'XYZ'\n\t */\n\tget order() {\n\n\t\treturn this._order;\n\n\t}\n\n\tset order( value ) {\n\n\t\tthis._order = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\t/**\n\t * Sets the Euler components.\n\t *\n\t * @param {number} x - The angle of the x axis in radians.\n\t * @param {number} y - The angle of the y axis in radians.\n\t * @param {number} z - The angle of the z axis in radians.\n\t * @param {string} [order] - A string representing the order that the rotations are applied.\n\t * @return {Euler} A reference to this Euler instance.\n\t */\n\tset( x, y, z, order = this._order ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new Euler instance with copied values from this instance.\n\t *\n\t * @return {Euler} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t}\n\n\t/**\n\t * Copies the values of the given Euler instance to this instance.\n\t *\n\t * @param {Euler} euler - The Euler instance to copy.\n\t * @return {Euler} A reference to this Euler instance.\n\t */\n\tcopy( euler ) {\n\n\t\tthis._x = euler._x;\n\t\tthis._y = euler._y;\n\t\tthis._z = euler._z;\n\t\tthis._order = euler._order;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the angles of this Euler instance from a pure rotation matrix.\n\t *\n\t * @param {Matrix4} m - A 4x4 matrix of which the upper 3x3 of matrix is a pure rotation matrix (i.e. unscaled).\n\t * @param {string} [order] - A string representing the order that the rotations are applied.\n\t * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.\n\t * @return {Euler} A reference to this Euler instance.\n\t */\n\tsetFromRotationMatrix( m, order = this._order, update = true ) {\n\n\t\tconst te = m.elements;\n\t\tconst m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\tconst m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\tconst m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tswitch ( order ) {\n\n\t\t\tcase 'XYZ':\n\n\t\t\t\tthis._y = Math.asin( clamp( m13, -1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m13 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXZ':\n\n\t\t\t\tthis._x = Math.asin( - clamp( m23, -1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m23 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXY':\n\n\t\t\t\tthis._x = Math.asin( clamp( m32, -1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m32 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = 0;\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYX':\n\n\t\t\t\tthis._y = Math.asin( - clamp( m31, -1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m31 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZX':\n\n\t\t\t\tthis._z = Math.asin( clamp( m21, -1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m21 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZY':\n\n\t\t\t\tthis._z = Math.asin( - clamp( m12, -1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m12 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._y = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order );\n\n\t\t}\n\n\t\tthis._order = order;\n\n\t\tif ( update === true ) this._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the angles of this Euler instance from a normalized quaternion.\n\t *\n\t * @param {Quaternion} q - A normalized Quaternion.\n\t * @param {string} [order] - A string representing the order that the rotations are applied.\n\t * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.\n\t * @return {Euler} A reference to this Euler instance.\n\t */\n\tsetFromQuaternion( q, order, update ) {\n\n\t\t_matrix$2.makeRotationFromQuaternion( q );\n\n\t\treturn this.setFromRotationMatrix( _matrix$2, order, update );\n\n\t}\n\n\t/**\n\t * Sets the angles of this Euler instance from the given vector.\n\t *\n\t * @param {Vector3} v - The vector.\n\t * @param {string} [order] - A string representing the order that the rotations are applied.\n\t * @return {Euler} A reference to this Euler instance.\n\t */\n\tsetFromVector3( v, order = this._order ) {\n\n\t\treturn this.set( v.x, v.y, v.z, order );\n\n\t}\n\n\t/**\n\t * Resets the euler angle with a new order by creating a quaternion from this\n\t * euler angle and then setting this euler angle with the quaternion and the\n\t * new order.\n\t *\n\t * Warning: This discards revolution information.\n\t *\n\t * @param {string} [newOrder] - A string representing the new order that the rotations are applied.\n\t * @return {Euler} A reference to this Euler instance.\n\t */\n\treorder( newOrder ) {\n\n\t\t_quaternion$3.setFromEuler( this );\n\n\t\treturn this.setFromQuaternion( _quaternion$3, newOrder );\n\n\t}\n\n\t/**\n\t * Returns `true` if this Euler instance is equal with the given one.\n\t *\n\t * @param {Euler} euler - The Euler instance to test for equality.\n\t * @return {boolean} Whether this Euler instance is equal with the given one.\n\t */\n\tequals( euler ) {\n\n\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t}\n\n\t/**\n\t * Sets this Euler instance's components to values from the given array. The first three\n\t * entries of the array are assign to the x,y and z components. An optional fourth entry\n\t * defines the Euler order.\n\t *\n\t * @param {Array<number,number,number,?string>} array - An array holding the Euler component values.\n\t * @return {Euler} A reference to this Euler instance.\n\t */\n\tfromArray( array ) {\n\n\t\tthis._x = array[ 0 ];\n\t\tthis._y = array[ 1 ];\n\t\tthis._z = array[ 2 ];\n\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Writes the components of this Euler instance to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number,number,number,string>} [array=[]] - The target array holding the Euler components.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number,number,number,string>} The Euler components.\n\t */\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._order;\n\n\t\treturn array;\n\n\t}\n\n\t_onChange( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t_onChangeCallback() {}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this._x;\n\t\tyield this._y;\n\t\tyield this._z;\n\t\tyield this._order;\n\n\t}\n\n}\n\n/**\n * The default Euler angle order.\n *\n * @static\n * @type {string}\n * @default 'XYZ'\n */\nEuler.DEFAULT_ORDER = 'XYZ';\n\n/**\n * A layers object assigns an 3D object to 1 or more of 32\n * layers numbered `0` to `31` - internally the layers are stored as a\n * bit mask], and by default all 3D objects are a member of layer `0`.\n *\n * This can be used to control visibility - an object must share a layer with\n * a camera to be visible when that camera's view is\n * rendered.\n *\n * All classes that inherit from {@link Object3D} have an `layers` property which\n * is an instance of this class.\n */\nclass Layers {\n\n\t/**\n\t * Constructs a new layers instance, with membership\n\t * initially set to layer `0`.\n\t */\n\tconstructor() {\n\n\t\t/**\n\t\t * A bit mask storing which of the 32 layers this layers object is currently\n\t\t * a member of.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.mask = 1 | 0;\n\n\t}\n\n\t/**\n\t * Sets membership to the given layer, and remove membership all other layers.\n\t *\n\t * @param {number} layer - The layer to set.\n\t */\n\tset( layer ) {\n\n\t\tthis.mask = ( 1 << layer | 0 ) >>> 0;\n\n\t}\n\n\t/**\n\t * Adds membership of the given layer.\n\t *\n\t * @param {number} layer - The layer to enable.\n\t */\n\tenable( layer ) {\n\n\t\tthis.mask |= 1 << layer | 0;\n\n\t}\n\n\t/**\n\t * Adds membership to all layers.\n\t */\n\tenableAll() {\n\n\t\tthis.mask = 0xffffffff | 0;\n\n\t}\n\n\t/**\n\t * Toggles the membership of the given layer.\n\t *\n\t * @param {number} layer - The layer to toggle.\n\t */\n\ttoggle( layer ) {\n\n\t\tthis.mask ^= 1 << layer | 0;\n\n\t}\n\n\t/**\n\t * Removes membership of the given layer.\n\t *\n\t * @param {number} layer - The layer to enable.\n\t */\n\tdisable( layer ) {\n\n\t\tthis.mask &= ~ ( 1 << layer | 0 );\n\n\t}\n\n\t/**\n\t * Removes the membership from all layers.\n\t */\n\tdisableAll() {\n\n\t\tthis.mask = 0;\n\n\t}\n\n\t/**\n\t * Returns `true` if this and the given layers object have at least one\n\t * layer in common.\n\t *\n\t * @param {Layers} layers - The layers to test.\n\t * @return {boolean } Whether this and the given layers object have at least one layer in common or not.\n\t */\n\ttest( layers ) {\n\n\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t}\n\n\t/**\n\t * Returns `true` if the given layer is enabled.\n\t *\n\t * @param {number} layer - The layer to test.\n\t * @return {boolean } Whether the given layer is enabled or not.\n\t */\n\tisEnabled( layer ) {\n\n\t\treturn ( this.mask & ( 1 << layer | 0 ) ) !== 0;\n\n\t}\n\n}\n\nlet _object3DId = 0;\n\nconst _v1$4 = /*@__PURE__*/ new Vector3();\nconst _q1 = /*@__PURE__*/ new Quaternion();\nconst _m1$1 = /*@__PURE__*/ new Matrix4();\nconst _target = /*@__PURE__*/ new Vector3();\n\nconst _position$3 = /*@__PURE__*/ new Vector3();\nconst _scale$2 = /*@__PURE__*/ new Vector3();\nconst _quaternion$2 = /*@__PURE__*/ new Quaternion();\n\nconst _xAxis = /*@__PURE__*/ new Vector3( 1, 0, 0 );\nconst _yAxis = /*@__PURE__*/ new Vector3( 0, 1, 0 );\nconst _zAxis = /*@__PURE__*/ new Vector3( 0, 0, 1 );\n\n/**\n * Fires when the object has been added to its parent object.\n *\n * @event Object3D#added\n * @type {Object}\n */\nconst _addedEvent = { type: 'added' };\n\n/**\n * Fires when the object has been removed from its parent object.\n *\n * @event Object3D#removed\n * @type {Object}\n */\nconst _removedEvent = { type: 'removed' };\n\n/**\n * Fires when a new child object has been added.\n *\n * @event Object3D#childadded\n * @type {Object}\n */\nconst _childaddedEvent = { type: 'childadded', child: null };\n\n/**\n * Fires when a new child object has been added.\n *\n * @event Object3D#childremoved\n * @type {Object}\n */\nconst _childremovedEvent = { type: 'childremoved', child: null };\n\n/**\n * This is the base class for most objects in three.js and provides a set of\n * properties and methods for manipulating objects in 3D space.\n *\n * @augments EventDispatcher\n */\nclass Object3D extends EventDispatcher {\n\n\t/**\n\t * Constructs a new 3D object.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isObject3D = true;\n\n\t\t/**\n\t\t * The ID of the 3D object.\n\t\t *\n\t\t * @name Object3D#id\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */\n\t\tObject.defineProperty( this, 'id', { value: _object3DId ++ } );\n\n\t\t/**\n\t\t * The UUID of the 3D object.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.uuid = generateUUID();\n\n\t\t/**\n\t\t * The name of the 3D object.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = '';\n\n\t\t/**\n\t\t * The type property is used for detecting the object type\n\t\t * in context of serialization/deserialization.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.type = 'Object3D';\n\n\t\t/**\n\t\t * A reference to the parent object.\n\t\t *\n\t\t * @type {?Object3D}\n\t\t * @default null\n\t\t */\n\t\tthis.parent = null;\n\n\t\t/**\n\t\t * An array holding the child 3D objects of this instance.\n\t\t *\n\t\t * @type {Array<Object3D>}\n\t\t */\n\t\tthis.children = [];\n\n\t\t/**\n\t\t * Defines the `up` direction of the 3D object which influences\n\t\t * the orientation via methods like {@link Object3D#lookAt}.\n\t\t *\n\t\t * The default values for all 3D objects is defined by `Object3D.DEFAULT_UP`.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.up = Object3D.DEFAULT_UP.clone();\n\n\t\tconst position = new Vector3();\n\t\tconst rotation = new Euler();\n\t\tconst quaternion = new Quaternion();\n\t\tconst scale = new Vector3( 1, 1, 1 );\n\n\t\tfunction onRotationChange() {\n\n\t\t\tquaternion.setFromEuler( rotation, false );\n\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t\t}\n\n\t\trotation._onChange( onRotationChange );\n\t\tquaternion._onChange( onQuaternionChange );\n\n\t\tObject.defineProperties( this, {\n\t\t\t/**\n\t\t\t * Represents the object's local position.\n\t\t\t *\n\t\t\t * @name Object3D#position\n\t\t\t * @type {Vector3}\n\t\t\t * @default (0,0,0)\n\t\t\t */\n\t\t\tposition: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\t/**\n\t\t\t * Represents the object's local rotation as Euler angles, in radians.\n\t\t\t *\n\t\t\t * @name Object3D#rotation\n\t\t\t * @type {Euler}\n\t\t\t * @default (0,0,0)\n\t\t\t */\n\t\t\trotation: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\t/**\n\t\t\t * Represents the object's local rotation as Quaternions.\n\t\t\t *\n\t\t\t * @name Object3D#quaternion\n\t\t\t * @type {Quaternion}\n\t\t\t */\n\t\t\tquaternion: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\t/**\n\t\t\t * Represents the object's local scale.\n\t\t\t *\n\t\t\t * @name Object3D#scale\n\t\t\t * @type {Vector3}\n\t\t\t * @default (1,1,1)\n\t\t\t */\n\t\t\tscale: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\t/**\n\t\t\t * Represents the object's model-view matrix.\n\t\t\t *\n\t\t\t * @name Object3D#modelViewMatrix\n\t\t\t * @type {Matrix4}\n\t\t\t */\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\t/**\n\t\t\t * Represents the object's normal matrix.\n\t\t\t *\n\t\t\t * @name Object3D#normalMatrix\n\t\t\t * @type {Matrix3}\n\t\t\t */\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Represents the object's transformation matrix in local space.\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */\n\t\tthis.matrix = new Matrix4();\n\n\t\t/**\n\t\t * Represents the object's transformation matrix in world space.\n\t\t * If the 3D object has no parent, then it's identical to the local transformation matrix\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */\n\t\tthis.matrixWorld = new Matrix4();\n\n\t\t/**\n\t\t * When set to `true`, the engine automatically computes the local matrix from position,\n\t\t * rotation and scale every frame.\n\t\t *\n\t\t * The default values for all 3D objects is defined by `Object3D.DEFAULT_MATRIX_AUTO_UPDATE`.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.matrixAutoUpdate = Object3D.DEFAULT_MATRIX_AUTO_UPDATE;\n\n\t\t/**\n\t\t * When set to `true`, the engine automatically computes the world matrix from the current local\n\t\t * matrix and the object's transformation hierarchy.\n\t\t *\n\t\t * The default values for all 3D objects is defined by `Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE`.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.matrixWorldAutoUpdate = Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE; // checked by the renderer\n\n\t\t/**\n\t\t * When set to `true`, it calculates the world matrix in that frame and resets this property\n\t\t * to `false`.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t/**\n\t\t * The layer membership of the 3D object. The 3D object is only visible if it has\n\t\t * at least one layer in common with the camera in use. This property can also be\n\t\t * used to filter out unwanted objects in ray-intersection tests when using {@link Raycaster}.\n\t\t *\n\t\t * @type {Layers}\n\t\t */\n\t\tthis.layers = new Layers();\n\n\t\t/**\n\t\t * When set to `true`, the 3D object gets rendered.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.visible = true;\n\n\t\t/**\n\t\t * When set to `true`, the 3D object gets rendered into shadow maps.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.castShadow = false;\n\n\t\t/**\n\t\t * When set to `true`, the 3D object is affected by shadows in the scene.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.receiveShadow = false;\n\n\t\t/**\n\t\t * When set to `true`, the 3D object is honored by view frustum culling.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.frustumCulled = true;\n\n\t\t/**\n\t\t * This value allows the default rendering order of scene graph objects to be\n\t\t * overridden although opaque and transparent objects remain sorted independently.\n\t\t * When this property is set for an instance of {@link Group},all descendants\n\t\t * objects will be sorted and rendered together. Sorting is from lowest to highest\n\t\t * render order.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.renderOrder = 0;\n\n\t\t/**\n\t\t * An array holding the animation clips of the 3D object.\n\t\t *\n\t\t * @type {Array<AnimationClip>}\n\t\t */\n\t\tthis.animations = [];\n\n\t\t/**\n\t\t * Custom depth material to be used when rendering to the depth map. Can only be used\n\t\t * in context of meshes. When shadow-casting with a {@link DirectionalLight} or {@link SpotLight},\n\t\t * if you are modifying vertex positions in the vertex shader you must specify a custom depth\n\t\t * material for proper shadows.\n\t\t *\n\t\t * Only relevant in context of {@link WebGLRenderer}.\n\t\t *\n\t\t * @type {(Material|undefined)}\n\t\t * @default undefined\n\t\t */\n\t\tthis.customDepthMaterial = undefined;\n\n\t\t/**\n\t\t * Same as {@link Object3D#customDepthMaterial}, but used with {@link PointLight}.\n\t\t *\n\t\t * Only relevant in context of {@link WebGLRenderer}.\n\t\t *\n\t\t * @type {(Material|undefined)}\n\t\t * @default undefined\n\t\t */\n\t\tthis.customDistanceMaterial = undefined;\n\n\t\t/**\n\t\t * An object that can be used to store custom data about the 3D object. It\n\t\t * should not hold references to functions as these will not be cloned.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.userData = {};\n\n\t}\n\n\t/**\n\t * A callback that is executed immediately before a 3D object is rendered to a shadow map.\n\t *\n\t * @param {Renderer|WebGLRenderer} renderer - The renderer.\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Camera} camera - The camera that is used to render the scene.\n\t * @param {Camera} shadowCamera - The shadow camera.\n\t * @param {BufferGeometry} geometry - The 3D object's geometry.\n\t * @param {Material} depthMaterial - The depth material.\n\t * @param {Object} group - The geometry group data.\n\t */\n\tonBeforeShadow( /* renderer, object, camera, shadowCamera, geometry, depthMaterial, group */ ) {}\n\n\t/**\n\t * A callback that is executed immediately after a 3D object is rendered to a shadow map.\n\t *\n\t * @param {Renderer|WebGLRenderer} renderer - The renderer.\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Camera} camera - The camera that is used to render the scene.\n\t * @param {Camera} shadowCamera - The shadow camera.\n\t * @param {BufferGeometry} geometry - The 3D object's geometry.\n\t * @param {Material} depthMaterial - The depth material.\n\t * @param {Object} group - The geometry group data.\n\t */\n\tonAfterShadow( /* renderer, object, camera, shadowCamera, geometry, depthMaterial, group */ ) {}\n\n\t/**\n\t * A callback that is executed immediately before a 3D object is rendered.\n\t *\n\t * @param {Renderer|WebGLRenderer} renderer - The renderer.\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Camera} camera - The camera that is used to render the scene.\n\t * @param {BufferGeometry} geometry - The 3D object's geometry.\n\t * @param {Material} material - The 3D object's material.\n\t * @param {Object} group - The geometry group data.\n\t */\n\tonBeforeRender( /* renderer, scene, camera, geometry, material, group */ ) {}\n\n\t/**\n\t * A callback that is executed immediately after a 3D object is rendered.\n\t *\n\t * @param {Renderer|WebGLRenderer} renderer - The renderer.\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Camera} camera - The camera that is used to render the scene.\n\t * @param {BufferGeometry} geometry - The 3D object's geometry.\n\t * @param {Material} material - The 3D object's material.\n\t * @param {Object} group - The geometry group data.\n\t */\n\tonAfterRender( /* renderer, scene, camera, geometry, material, group */ ) {}\n\n\t/**\n\t * Applies the given transformation matrix to the object and updates the object's position,\n\t * rotation and scale.\n\t *\n\t * @param {Matrix4} matrix - The transformation matrix.\n\t */\n\tapplyMatrix4( matrix ) {\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tthis.matrix.premultiply( matrix );\n\n\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t}\n\n\t/**\n\t * Applies a rotation represented by given the quaternion to the 3D object.\n\t *\n\t * @param {Quaternion} q - The quaternion.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\tapplyQuaternion( q ) {\n\n\t\tthis.quaternion.premultiply( q );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given rotation represented as an axis/angle couple to the 3D object.\n\t *\n\t * @param {Vector3} axis - The (normalized) axis vector.\n\t * @param {number} angle - The angle in radians.\n\t */\n\tsetRotationFromAxisAngle( axis, angle ) {\n\n\t\t// assumes axis is normalized\n\n\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t}\n\n\t/**\n\t * Sets the given rotation represented as Euler angles to the 3D object.\n\t *\n\t * @param {Euler} euler - The Euler angles.\n\t */\n\tsetRotationFromEuler( euler ) {\n\n\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t}\n\n\t/**\n\t * Sets the given rotation represented as rotation matrix to the 3D object.\n\t *\n\t * @param {Matrix4} m - Although a 4x4 matrix is expected, the upper 3x3 portion must be\n\t * a pure rotation matrix (i.e, unscaled).\n\t */\n\tsetRotationFromMatrix( m ) {\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t}\n\n\t/**\n\t * Sets the given rotation represented as a Quaternion to the 3D object.\n\t *\n\t * @param {Quaternion} q - The Quaternion\n\t */\n\tsetRotationFromQuaternion( q ) {\n\n\t\t// assumes q is normalized\n\n\t\tthis.quaternion.copy( q );\n\n\t}\n\n\t/**\n\t * Rotates the 3D object along an axis in local space.\n\t *\n\t * @param {Vector3} axis - The (normalized) axis vector.\n\t * @param {number} angle - The angle in radians.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\trotateOnAxis( axis, angle ) {\n\n\t\t// rotate object on axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\tthis.quaternion.multiply( _q1 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Rotates the 3D object along an axis in world space.\n\t *\n\t * @param {Vector3} axis - The (normalized) axis vector.\n\t * @param {number} angle - The angle in radians.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\trotateOnWorldAxis( axis, angle ) {\n\n\t\t// rotate object on axis in world space\n\t\t// axis is assumed to be normalized\n\t\t// method assumes no rotated parent\n\n\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\tthis.quaternion.premultiply( _q1 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Rotates the 3D object around its X axis in local space.\n\t *\n\t * @param {number} angle - The angle in radians.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\trotateX( angle ) {\n\n\t\treturn this.rotateOnAxis( _xAxis, angle );\n\n\t}\n\n\t/**\n\t * Rotates the 3D object around its Y axis in local space.\n\t *\n\t * @param {number} angle - The angle in radians.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\trotateY( angle ) {\n\n\t\treturn this.rotateOnAxis( _yAxis, angle );\n\n\t}\n\n\t/**\n\t * Rotates the 3D object around its Z axis in local space.\n\t *\n\t * @param {number} angle - The angle in radians.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\trotateZ( angle ) {\n\n\t\treturn this.rotateOnAxis( _zAxis, angle );\n\n\t}\n\n\t/**\n\t * Translate the 3D object by a distance along the given axis in local space.\n\t *\n\t * @param {Vector3} axis - The (normalized) axis vector.\n\t * @param {number} distance - The distance in world units.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\ttranslateOnAxis( axis, distance ) {\n\n\t\t// translate object by distance along axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\t_v1$4.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\tthis.position.add( _v1$4.multiplyScalar( distance ) );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Translate the 3D object by a distance along its X-axis in local space.\n\t *\n\t * @param {number} distance - The distance in world units.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\ttranslateX( distance ) {\n\n\t\treturn this.translateOnAxis( _xAxis, distance );\n\n\t}\n\n\t/**\n\t * Translate the 3D object by a distance along its Y-axis in local space.\n\t *\n\t * @param {number} distance - The distance in world units.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\ttranslateY( distance ) {\n\n\t\treturn this.translateOnAxis( _yAxis, distance );\n\n\t}\n\n\t/**\n\t * Translate the 3D object by a distance along its Z-axis in local space.\n\t *\n\t * @param {number} distance - The distance in world units.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\ttranslateZ( distance ) {\n\n\t\treturn this.translateOnAxis( _zAxis, distance );\n\n\t}\n\n\t/**\n\t * Converts the given vector from this 3D object's local space to world space.\n\t *\n\t * @param {Vector3} vector - The vector to convert.\n\t * @return {Vector3} The converted vector.\n\t */\n\tlocalToWorld( vector ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t}\n\n\t/**\n\t * Converts the given vector from this 3D object's word space to local space.\n\t *\n\t * @param {Vector3} vector - The vector to convert.\n\t * @return {Vector3} The converted vector.\n\t */\n\tworldToLocal( vector ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\treturn vector.applyMatrix4( _m1$1.copy( this.matrixWorld ).invert() );\n\n\t}\n\n\t/**\n\t * Rotates the object to face a point in world space.\n\t *\n\t * This method does not support objects having non-uniformly-scaled parent(s).\n\t *\n\t * @param {number|Vector3} x - The x coordinate in world space. Alternatively, a vector representing a position in world space\n\t * @param {number} [y] - The y coordinate in world space.\n\t * @param {number} [z] - The z coordinate in world space.\n\t */\n\tlookAt( x, y, z ) {\n\n\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\n\t\tif ( x.isVector3 ) {\n\n\t\t\t_target.copy( x );\n\n\t\t} else {\n\n\t\t\t_target.set( x, y, z );\n\n\t\t}\n\n\t\tconst parent = this.parent;\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\t_position$3.setFromMatrixPosition( this.matrixWorld );\n\n\t\tif ( this.isCamera || this.isLight ) {\n\n\t\t\t_m1$1.lookAt( _position$3, _target, this.up );\n\n\t\t} else {\n\n\t\t\t_m1$1.lookAt( _target, _position$3, this.up );\n\n\t\t}\n\n\t\tthis.quaternion.setFromRotationMatrix( _m1$1 );\n\n\t\tif ( parent ) {\n\n\t\t\t_m1$1.extractRotation( parent.matrixWorld );\n\t\t\t_q1.setFromRotationMatrix( _m1$1 );\n\t\t\tthis.quaternion.premultiply( _q1.invert() );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Adds the given 3D object as a child to this 3D object. An arbitrary number of\n\t * objects may be added. Any current parent on an object passed in here will be\n\t * removed, since an object can have at most one parent.\n\t *\n\t * @fires Object3D#added\n\t * @fires Object3D#childadded\n\t * @param {Object3D} object - The 3D object to add.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\tadd( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object === this ) {\n\n\t\t\tconsole.error( 'THREE.Object3D.add: object can\\'t be added as a child of itself.', object );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object && object.isObject3D ) {\n\n\t\t\tobject.removeFromParent();\n\t\t\tobject.parent = this;\n\t\t\tthis.children.push( object );\n\n\t\t\tobject.dispatchEvent( _addedEvent );\n\n\t\t\t_childaddedEvent.child = object;\n\t\t\tthis.dispatchEvent( _childaddedEvent );\n\t\t\t_childaddedEvent.child = null;\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Object3D.add: object not an instance of THREE.Object3D.', object );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Removes the given 3D object as child from this 3D object.\n\t * An arbitrary number of objects may be removed.\n\t *\n\t * @fires Object3D#removed\n\t * @fires Object3D#childremoved\n\t * @param {Object3D} object - The 3D object to remove.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\tremove( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst index = this.children.indexOf( object );\n\n\t\tif ( index !== -1 ) {\n\n\t\t\tobject.parent = null;\n\t\t\tthis.children.splice( index, 1 );\n\n\t\t\tobject.dispatchEvent( _removedEvent );\n\n\t\t\t_childremovedEvent.child = object;\n\t\t\tthis.dispatchEvent( _childremovedEvent );\n\t\t\t_childremovedEvent.child = null;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Removes this 3D object from its current parent.\n\t *\n\t * @fires Object3D#removed\n\t * @fires Object3D#childremoved\n\t * @return {Object3D} A reference to this instance.\n\t */\n\tremoveFromParent() {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tparent.remove( this );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Removes all child objects.\n\t *\n\t * @fires Object3D#removed\n\t * @fires Object3D#childremoved\n\t * @return {Object3D} A reference to this instance.\n\t */\n\tclear() {\n\n\t\treturn this.remove( ... this.children );\n\n\t}\n\n\t/**\n\t * Adds the given 3D object as a child of this 3D object, while maintaining the object's world\n\t * transform. This method does not support scene graphs having non-uniformly-scaled nodes(s).\n\t *\n\t * @fires Object3D#added\n\t * @fires Object3D#childadded\n\t * @param {Object3D} object - The 3D object to attach.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\tattach( object ) {\n\n\t\t// adds object as a child of this, while maintaining the object's world transform\n\n\t\t// Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\t_m1$1.copy( this.matrixWorld ).invert();\n\n\t\tif ( object.parent !== null ) {\n\n\t\t\tobject.parent.updateWorldMatrix( true, false );\n\n\t\t\t_m1$1.multiply( object.parent.matrixWorld );\n\n\t\t}\n\n\t\tobject.applyMatrix4( _m1$1 );\n\n\t\tobject.removeFromParent();\n\t\tobject.parent = this;\n\t\tthis.children.push( object );\n\n\t\tobject.updateWorldMatrix( false, true );\n\n\t\tobject.dispatchEvent( _addedEvent );\n\n\t\t_childaddedEvent.child = object;\n\t\tthis.dispatchEvent( _childaddedEvent );\n\t\t_childaddedEvent.child = null;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Searches through the 3D object and its children, starting with the 3D object\n\t * itself, and returns the first with a matching ID.\n\t *\n\t * @param {number} id - The id.\n\t * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.\n\t */\n\tgetObjectById( id ) {\n\n\t\treturn this.getObjectByProperty( 'id', id );\n\n\t}\n\n\t/**\n\t * Searches through the 3D object and its children, starting with the 3D object\n\t * itself, and returns the first with a matching name.\n\t *\n\t * @param {string} name - The name.\n\t * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.\n\t */\n\tgetObjectByName( name ) {\n\n\t\treturn this.getObjectByProperty( 'name', name );\n\n\t}\n\n\t/**\n\t * Searches through the 3D object and its children, starting with the 3D object\n\t * itself, and returns the first with a matching property value.\n\t *\n\t * @param {string} name - The name of the property.\n\t * @param {any} value - The value.\n\t * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.\n\t */\n\tgetObjectByProperty( name, value ) {\n\n\t\tif ( this[ name ] === value ) return this;\n\n\t\tfor ( let i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tconst child = this.children[ i ];\n\t\t\tconst object = child.getObjectByProperty( name, value );\n\n\t\t\tif ( object !== undefined ) {\n\n\t\t\t\treturn object;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t}\n\n\t/**\n\t * Searches through the 3D object and its children, starting with the 3D object\n\t * itself, and returns all 3D objects with a matching property value.\n\t *\n\t * @param {string} name - The name of the property.\n\t * @param {any} value - The value.\n\t * @param {Array<Object3D>} result - The method stores the result in this array.\n\t * @return {Array<Object3D>} The found 3D objects.\n\t */\n\tgetObjectsByProperty( name, value, result = [] ) {\n\n\t\tif ( this[ name ] === value ) result.push( this );\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].getObjectsByProperty( name, value, result );\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\t/**\n\t * Returns a vector representing the position of the 3D object in world space.\n\t *\n\t * @param {Vector3} target - The target vector the result is stored to.\n\t * @return {Vector3} The 3D object's position in world space.\n\t */\n\tgetWorldPosition( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\treturn target.setFromMatrixPosition( this.matrixWorld );\n\n\t}\n\n\t/**\n\t * Returns a Quaternion representing the position of the 3D object in world space.\n\t *\n\t * @param {Quaternion} target - The target Quaternion the result is stored to.\n\t * @return {Quaternion} The 3D object's rotation in world space.\n\t */\n\tgetWorldQuaternion( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tthis.matrixWorld.decompose( _position$3, target, _scale$2 );\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Returns a vector representing the scale of the 3D object in world space.\n\t *\n\t * @param {Vector3} target - The target vector the result is stored to.\n\t * @return {Vector3} The 3D object's scale in world space.\n\t */\n\tgetWorldScale( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tthis.matrixWorld.decompose( _position$3, _quaternion$2, target );\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Returns a vector representing the (\"look\") direction of the 3D object in world space.\n\t *\n\t * @param {Vector3} target - The target vector the result is stored to.\n\t * @return {Vector3} The 3D object's direction in world space.\n\t */\n\tgetWorldDirection( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tconst e = this.matrixWorld.elements;\n\n\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\n\n\t}\n\n\t/**\n\t * Abstract method to get intersections between a casted ray and this\n\t * 3D object. Renderable 3D objects such as {@link Mesh}, {@link Line} or {@link Points}\n\t * implement this method in order to use raycasting.\n\t *\n\t * @abstract\n\t * @param {Raycaster} raycaster - The raycaster.\n\t * @param {Array<Object>} intersects - An array holding the result of the method.\n\t */\n\traycast( /* raycaster, intersects */ ) {}\n\n\t/**\n\t * Executes the callback on this 3D object and all descendants.\n\t *\n\t * Note: Modifying the scene graph inside the callback is discouraged.\n\t *\n\t * @param {Function} callback - A callback function that allows to process the current 3D object.\n\t */\n\ttraverse( callback ) {\n\n\t\tcallback( this );\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverse( callback );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Like {@link Object3D#traverse}, but the callback will only be executed for visible 3D objects.\n\t * Descendants of invisible 3D objects are not traversed.\n\t *\n\t * Note: Modifying the scene graph inside the callback is discouraged.\n\t *\n\t * @param {Function} callback - A callback function that allows to process the current 3D object.\n\t */\n\ttraverseVisible( callback ) {\n\n\t\tif ( this.visible === false ) return;\n\n\t\tcallback( this );\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Like {@link Object3D#traverse}, but the callback will only be executed for all ancestors.\n\t *\n\t * Note: Modifying the scene graph inside the callback is discouraged.\n\t *\n\t * @param {Function} callback - A callback function that allows to process the current 3D object.\n\t */\n\ttraverseAncestors( callback ) {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tcallback( parent );\n\n\t\t\tparent.traverseAncestors( callback );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates the transformation matrix in local space by computing it from the current\n\t * position, rotation and scale values.\n\t */\n\tupdateMatrix() {\n\n\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t/**\n\t * Updates the transformation matrix in world space of this 3D objects and its descendants.\n\t *\n\t * To ensure correct results, this method also recomputes the 3D object's transformation matrix in\n\t * local space. The computation of the local and world matrix can be controlled with the\n\t * {@link Object3D#matrixAutoUpdate} and {@link Object3D#matrixWorldAutoUpdate} flags which are both\n\t * `true` by default.  Set these flags to `false` if you need more control over the update matrix process.\n\t *\n\t * @param {boolean} [force=false] - When set to `true`, a recomputation of world matrices is forced even\n\t * when {@link Object3D#matrixWorldAutoUpdate} is set to `false`.\n\t */\n\tupdateMatrixWorld( force ) {\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tif ( this.matrixWorldNeedsUpdate || force ) {\n\n\t\t\tif ( this.matrixWorldAutoUpdate === true ) {\n\n\t\t\t\tif ( this.parent === null ) {\n\n\t\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\tforce = true;\n\n\t\t}\n\n\t\t// make sure descendants are updated if required\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tconst child = children[ i ];\n\n\t\t\tchild.updateMatrixWorld( force );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * An alternative version of {@link Object3D#updateMatrixWorld} with more control over the\n\t * update of ancestor and descendant nodes.\n\t *\n\t * @param {boolean} [updateParents=false] Whether ancestor nodes should be updated or not.\n\t * @param {boolean} [updateChildren=false] Whether descendant nodes should be updated or not.\n\t */\n\tupdateWorldMatrix( updateParents, updateChildren ) {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( updateParents === true && parent !== null ) {\n\n\t\t\tparent.updateWorldMatrix( true, false );\n\n\t\t}\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tif ( this.matrixWorldAutoUpdate === true ) {\n\n\t\t\tif ( this.parent === null ) {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// make sure descendants are updated\n\n\t\tif ( updateChildren === true ) {\n\n\t\t\tconst children = this.children;\n\n\t\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = children[ i ];\n\n\t\t\t\tchild.updateWorldMatrix( false, true );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Serializes the 3D object into JSON.\n\t *\n\t * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n\t * @return {Object} A JSON object representing the serialized 3D object.\n\t * @see {@link ObjectLoader#parse}\n\t */\n\ttoJSON( meta ) {\n\n\t\t// meta is a string when called from JSON.stringify\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tconst output = {};\n\n\t\t// meta is a hash used to collect geometries, materials.\n\t\t// not providing it implies that this is the root object\n\t\t// being serialized.\n\t\tif ( isRootObject ) {\n\n\t\t\t// initialize meta obj\n\t\t\tmeta = {\n\t\t\t\tgeometries: {},\n\t\t\t\tmaterials: {},\n\t\t\t\ttextures: {},\n\t\t\t\timages: {},\n\t\t\t\tshapes: {},\n\t\t\t\tskeletons: {},\n\t\t\t\tanimations: {},\n\t\t\t\tnodes: {}\n\t\t\t};\n\n\t\t\toutput.metadata = {\n\t\t\t\tversion: 4.6,\n\t\t\t\ttype: 'Object',\n\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t};\n\n\t\t}\n\n\t\t// standard Object3D serialization\n\n\t\tconst object = {};\n\n\t\tobject.uuid = this.uuid;\n\t\tobject.type = this.type;\n\n\t\tif ( this.name !== '' ) object.name = this.name;\n\t\tif ( this.castShadow === true ) object.castShadow = true;\n\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t\tif ( this.visible === false ) object.visible = false;\n\t\tif ( this.frustumCulled === false ) object.frustumCulled = false;\n\t\tif ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;\n\t\tif ( Object.keys( this.userData ).length > 0 ) object.userData = this.userData;\n\n\t\tobject.layers = this.layers.mask;\n\t\tobject.matrix = this.matrix.toArray();\n\t\tobject.up = this.up.toArray();\n\n\t\tif ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;\n\n\t\t// object specific properties\n\n\t\tif ( this.isInstancedMesh ) {\n\n\t\t\tobject.type = 'InstancedMesh';\n\t\t\tobject.count = this.count;\n\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\t\t\tif ( this.instanceColor !== null ) object.instanceColor = this.instanceColor.toJSON();\n\n\t\t}\n\n\t\tif ( this.isBatchedMesh ) {\n\n\t\t\tobject.type = 'BatchedMesh';\n\t\t\tobject.perObjectFrustumCulled = this.perObjectFrustumCulled;\n\t\t\tobject.sortObjects = this.sortObjects;\n\n\t\t\tobject.drawRanges = this._drawRanges;\n\t\t\tobject.reservedRanges = this._reservedRanges;\n\n\t\t\tobject.geometryInfo = this._geometryInfo.map( info => ( {\n\t\t\t\t...info,\n\t\t\t\tboundingBox: info.boundingBox ? {\n\t\t\t\t\tmin: info.boundingBox.min.toArray(),\n\t\t\t\t\tmax: info.boundingBox.max.toArray()\n\t\t\t\t} : undefined,\n\t\t\t\tboundingSphere: info.boundingSphere ? {\n\t\t\t\t\tradius: info.boundingSphere.radius,\n\t\t\t\t\tcenter: info.boundingSphere.center.toArray()\n\t\t\t\t} : undefined\n\t\t\t} ) );\n\t\t\tobject.instanceInfo = this._instanceInfo.map( info => ( { ...info } ) );\n\n\t\t\tobject.availableInstanceIds = this._availableInstanceIds.slice();\n\t\t\tobject.availableGeometryIds = this._availableGeometryIds.slice();\n\n\t\t\tobject.nextIndexStart = this._nextIndexStart;\n\t\t\tobject.nextVertexStart = this._nextVertexStart;\n\t\t\tobject.geometryCount = this._geometryCount;\n\n\t\t\tobject.maxInstanceCount = this._maxInstanceCount;\n\t\t\tobject.maxVertexCount = this._maxVertexCount;\n\t\t\tobject.maxIndexCount = this._maxIndexCount;\n\n\t\t\tobject.geometryInitialized = this._geometryInitialized;\n\n\t\t\tobject.matricesTexture = this._matricesTexture.toJSON( meta );\n\n\t\t\tobject.indirectTexture = this._indirectTexture.toJSON( meta );\n\n\t\t\tif ( this._colorsTexture !== null ) {\n\n\t\t\t\tobject.colorsTexture = this._colorsTexture.toJSON( meta );\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tobject.boundingSphere = {\n\t\t\t\t\tcenter: this.boundingSphere.center.toArray(),\n\t\t\t\t\tradius: this.boundingSphere.radius\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tobject.boundingBox = {\n\t\t\t\t\tmin: this.boundingBox.min.toArray(),\n\t\t\t\t\tmax: this.boundingBox.max.toArray()\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction serialize( library, element ) {\n\n\t\t\tif ( library[ element.uuid ] === undefined ) {\n\n\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\n\n\t\t\t}\n\n\t\t\treturn element.uuid;\n\n\t\t}\n\n\t\tif ( this.isScene ) {\n\n\t\t\tif ( this.background ) {\n\n\t\t\t\tif ( this.background.isColor ) {\n\n\t\t\t\t\tobject.background = this.background.toJSON();\n\n\t\t\t\t} else if ( this.background.isTexture ) {\n\n\t\t\t\t\tobject.background = this.background.toJSON( meta ).uuid;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true ) {\n\n\t\t\t\tobject.environment = this.environment.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t} else if ( this.isMesh || this.isLine || this.isPoints ) {\n\n\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\n\n\t\t\tconst parameters = this.geometry.parameters;\n\n\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\n\n\t\t\t\tconst shapes = parameters.shapes;\n\n\t\t\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\t\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tconst shape = shapes[ i ];\n\n\t\t\t\t\t\tserialize( meta.shapes, shape );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tserialize( meta.shapes, shapes );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.isSkinnedMesh ) {\n\n\t\t\tobject.bindMode = this.bindMode;\n\t\t\tobject.bindMatrix = this.bindMatrix.toArray();\n\n\t\t\tif ( this.skeleton !== undefined ) {\n\n\t\t\t\tserialize( meta.skeletons, this.skeleton );\n\n\t\t\t\tobject.skeleton = this.skeleton.uuid;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.material !== undefined ) {\n\n\t\t\tif ( Array.isArray( this.material ) ) {\n\n\t\t\t\tconst uuids = [];\n\n\t\t\t\tfor ( let i = 0, l = this.material.length; i < l; i ++ ) {\n\n\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tobject.material = uuids;\n\n\t\t\t} else {\n\n\t\t\t\tobject.material = serialize( meta.materials, this.material );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.children.length > 0 ) {\n\n\t\t\tobject.children = [];\n\n\t\t\tfor ( let i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.animations.length > 0 ) {\n\n\t\t\tobject.animations = [];\n\n\t\t\tfor ( let i = 0; i < this.animations.length; i ++ ) {\n\n\t\t\t\tconst animation = this.animations[ i ];\n\n\t\t\t\tobject.animations.push( serialize( meta.animations, animation ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( isRootObject ) {\n\n\t\t\tconst geometries = extractFromCache( meta.geometries );\n\t\t\tconst materials = extractFromCache( meta.materials );\n\t\t\tconst textures = extractFromCache( meta.textures );\n\t\t\tconst images = extractFromCache( meta.images );\n\t\t\tconst shapes = extractFromCache( meta.shapes );\n\t\t\tconst skeletons = extractFromCache( meta.skeletons );\n\t\t\tconst animations = extractFromCache( meta.animations );\n\t\t\tconst nodes = extractFromCache( meta.nodes );\n\n\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t\t\tif ( images.length > 0 ) output.images = images;\n\t\t\tif ( shapes.length > 0 ) output.shapes = shapes;\n\t\t\tif ( skeletons.length > 0 ) output.skeletons = skeletons;\n\t\t\tif ( animations.length > 0 ) output.animations = animations;\n\t\t\tif ( nodes.length > 0 ) output.nodes = nodes;\n\n\t\t}\n\n\t\toutput.object = object;\n\n\t\treturn output;\n\n\t\t// extract data from the cache hash\n\t\t// remove metadata on each item\n\t\t// and return as array\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tconst values = [];\n\t\t\tfor ( const key in cache ) {\n\n\t\t\t\tconst data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns a new 3D object with copied values from this instance.\n\t *\n\t * @param {boolean} [recursive=true] - When set to `true`, descendants of the 3D object are also cloned.\n\t * @return {Object3D} A clone of this instance.\n\t */\n\tclone( recursive ) {\n\n\t\treturn new this.constructor().copy( this, recursive );\n\n\t}\n\n\t/**\n\t * Copies the values of the given 3D object to this instance.\n\t *\n\t * @param {Object3D} source - The 3D object to copy.\n\t * @param {boolean} [recursive=true] - When set to `true`, descendants of the 3D object are cloned.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\tcopy( source, recursive = true ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.up.copy( source.up );\n\n\t\tthis.position.copy( source.position );\n\t\tthis.rotation.order = source.rotation.order;\n\t\tthis.quaternion.copy( source.quaternion );\n\t\tthis.scale.copy( source.scale );\n\n\t\tthis.matrix.copy( source.matrix );\n\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\tthis.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\tthis.layers.mask = source.layers.mask;\n\t\tthis.visible = source.visible;\n\n\t\tthis.castShadow = source.castShadow;\n\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\tthis.frustumCulled = source.frustumCulled;\n\t\tthis.renderOrder = source.renderOrder;\n\n\t\tthis.animations = source.animations.slice();\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tfor ( let i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\tconst child = source.children[ i ];\n\t\t\t\tthis.add( child.clone() );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * The default up direction for objects, also used as the default\n * position for {@link DirectionalLight} and {@link HemisphereLight}.\n *\n * @static\n * @type {Vector3}\n * @default (0,1,0)\n */\nObject3D.DEFAULT_UP = /*@__PURE__*/ new Vector3( 0, 1, 0 );\n\n/**\n * The default setting for {@link Object3D#matrixAutoUpdate} for\n * newly created 3D objects.\n *\n * @static\n * @type {boolean}\n * @default true\n */\nObject3D.DEFAULT_MATRIX_AUTO_UPDATE = true;\n\n/**\n * The default setting for {@link Object3D#matrixWorldAutoUpdate} for\n * newly created 3D objects.\n *\n * @static\n * @type {boolean}\n * @default true\n */\nObject3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;\n\nconst _v0$1 = /*@__PURE__*/ new Vector3();\nconst _v1$3 = /*@__PURE__*/ new Vector3();\nconst _v2$2 = /*@__PURE__*/ new Vector3();\nconst _v3$2 = /*@__PURE__*/ new Vector3();\n\nconst _vab = /*@__PURE__*/ new Vector3();\nconst _vac = /*@__PURE__*/ new Vector3();\nconst _vbc = /*@__PURE__*/ new Vector3();\nconst _vap = /*@__PURE__*/ new Vector3();\nconst _vbp = /*@__PURE__*/ new Vector3();\nconst _vcp = /*@__PURE__*/ new Vector3();\n\nconst _v40 = /*@__PURE__*/ new Vector4();\nconst _v41 = /*@__PURE__*/ new Vector4();\nconst _v42 = /*@__PURE__*/ new Vector4();\n\n/**\n * A geometric triangle as defined by three vectors representing its three corners.\n */\nclass Triangle {\n\n\t/**\n\t * Constructs a new triangle.\n\t *\n\t * @param {Vector3} [a=(0,0,0)] - The first corner of the triangle.\n\t * @param {Vector3} [b=(0,0,0)] - The second corner of the triangle.\n\t * @param {Vector3} [c=(0,0,0)] - The third corner of the triangle.\n\t */\n\tconstructor( a = new Vector3(), b = new Vector3(), c = new Vector3() ) {\n\n\t\t/**\n\t\t * The first corner of the triangle.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.a = a;\n\n\t\t/**\n\t\t * The second corner of the triangle.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.b = b;\n\n\t\t/**\n\t\t * The third corner of the triangle.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.c = c;\n\n\t}\n\n\t/**\n\t * Computes the normal vector of a triangle.\n\t *\n\t * @param {Vector3} a - The first corner of the triangle.\n\t * @param {Vector3} b - The second corner of the triangle.\n\t * @param {Vector3} c - The third corner of the triangle.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The triangle's normal.\n\t */\n\tstatic getNormal( a, b, c, target ) {\n\n\t\ttarget.subVectors( c, b );\n\t\t_v0$1.subVectors( a, b );\n\t\ttarget.cross( _v0$1 );\n\n\t\tconst targetLengthSq = target.lengthSq();\n\t\tif ( targetLengthSq > 0 ) {\n\n\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\n\n\t\t}\n\n\t\treturn target.set( 0, 0, 0 );\n\n\t}\n\n\t/**\n\t * Computes a barycentric coordinates from the given vector.\n\t * Returns `null` if the triangle is degenerate.\n\t *\n\t * @param {Vector3} point - A point in 3D space.\n\t * @param {Vector3} a - The first corner of the triangle.\n\t * @param {Vector3} b - The second corner of the triangle.\n\t * @param {Vector3} c - The third corner of the triangle.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The barycentric coordinates for the given point\n\t */\n\tstatic getBarycoord( point, a, b, c, target ) {\n\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\n\t\t_v0$1.subVectors( c, a );\n\t\t_v1$3.subVectors( b, a );\n\t\t_v2$2.subVectors( point, a );\n\n\t\tconst dot00 = _v0$1.dot( _v0$1 );\n\t\tconst dot01 = _v0$1.dot( _v1$3 );\n\t\tconst dot02 = _v0$1.dot( _v2$2 );\n\t\tconst dot11 = _v1$3.dot( _v1$3 );\n\t\tconst dot12 = _v1$3.dot( _v2$2 );\n\n\t\tconst denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\t// collinear or singular triangle\n\t\tif ( denom === 0 ) {\n\n\t\t\ttarget.set( 0, 0, 0 );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst invDenom = 1 / denom;\n\t\tconst u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\tconst v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t// barycentric coordinates must always sum to 1\n\t\treturn target.set( 1 - u - v, v, u );\n\n\t}\n\n\t/**\n\t * Returns `true` if the given point, when projected onto the plane of the\n\t * triangle, lies within the triangle.\n\t *\n\t * @param {Vector3} point - The point in 3D space to test.\n\t * @param {Vector3} a - The first corner of the triangle.\n\t * @param {Vector3} b - The second corner of the triangle.\n\t * @param {Vector3} c - The third corner of the triangle.\n\t * @return {boolean} Whether the given point, when projected onto the plane of the\n\t * triangle, lies within the triangle or not.\n\t */\n\tstatic containsPoint( point, a, b, c ) {\n\n\t\t// if the triangle is degenerate then we can't contain a point\n\t\tif ( this.getBarycoord( point, a, b, c, _v3$2 ) === null ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn ( _v3$2.x >= 0 ) && ( _v3$2.y >= 0 ) && ( ( _v3$2.x + _v3$2.y ) <= 1 );\n\n\t}\n\n\t/**\n\t * Computes the value barycentrically interpolated for the given point on the\n\t * triangle. Returns `null` if the triangle is degenerate.\n\t *\n\t * @param {Vector3} point - Position of interpolated point.\n\t * @param {Vector3} p1 - The first corner of the triangle.\n\t * @param {Vector3} p2 - The second corner of the triangle.\n\t * @param {Vector3} p3 - The third corner of the triangle.\n\t * @param {Vector3} v1 - Value to interpolate of first vertex.\n\t * @param {Vector3} v2 - Value to interpolate of second vertex.\n\t * @param {Vector3} v3 - Value to interpolate of third vertex.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The interpolated value.\n\t */\n\tstatic getInterpolation( point, p1, p2, p3, v1, v2, v3, target ) {\n\n\t\tif ( this.getBarycoord( point, p1, p2, p3, _v3$2 ) === null ) {\n\n\t\t\ttarget.x = 0;\n\t\t\ttarget.y = 0;\n\t\t\tif ( 'z' in target ) target.z = 0;\n\t\t\tif ( 'w' in target ) target.w = 0;\n\t\t\treturn null;\n\n\t\t}\n\n\t\ttarget.setScalar( 0 );\n\t\ttarget.addScaledVector( v1, _v3$2.x );\n\t\ttarget.addScaledVector( v2, _v3$2.y );\n\t\ttarget.addScaledVector( v3, _v3$2.z );\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Computes the value barycentrically interpolated for the given attribute and indices.\n\t *\n\t * @param {BufferAttribute} attr - The attribute to interpolate.\n\t * @param {number} i1 - Index of first vertex.\n\t * @param {number} i2 - Index of second vertex.\n\t * @param {number} i3 - Index of third vertex.\n\t * @param {Vector3} barycoord - The barycoordinate value to use to interpolate.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The interpolated attribute value.\n\t */\n\tstatic getInterpolatedAttribute( attr, i1, i2, i3, barycoord, target ) {\n\n\t\t_v40.setScalar( 0 );\n\t\t_v41.setScalar( 0 );\n\t\t_v42.setScalar( 0 );\n\n\t\t_v40.fromBufferAttribute( attr, i1 );\n\t\t_v41.fromBufferAttribute( attr, i2 );\n\t\t_v42.fromBufferAttribute( attr, i3 );\n\n\t\ttarget.setScalar( 0 );\n\t\ttarget.addScaledVector( _v40, barycoord.x );\n\t\ttarget.addScaledVector( _v41, barycoord.y );\n\t\ttarget.addScaledVector( _v42, barycoord.z );\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Returns `true` if the triangle is oriented towards the given direction.\n\t *\n\t * @param {Vector3} a - The first corner of the triangle.\n\t * @param {Vector3} b - The second corner of the triangle.\n\t * @param {Vector3} c - The third corner of the triangle.\n\t * @param {Vector3} direction - The (normalized) direction vector.\n\t * @return {boolean} Whether the triangle is oriented towards the given direction or not.\n\t */\n\tstatic isFrontFacing( a, b, c, direction ) {\n\n\t\t_v0$1.subVectors( c, b );\n\t\t_v1$3.subVectors( a, b );\n\n\t\t// strictly front facing\n\t\treturn ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;\n\n\t}\n\n\t/**\n\t * Sets the triangle's vertices by copying the given values.\n\t *\n\t * @param {Vector3} a - The first corner of the triangle.\n\t * @param {Vector3} b - The second corner of the triangle.\n\t * @param {Vector3} c - The third corner of the triangle.\n\t * @return {Triangle} A reference to this triangle.\n\t */\n\tset( a, b, c ) {\n\n\t\tthis.a.copy( a );\n\t\tthis.b.copy( b );\n\t\tthis.c.copy( c );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the triangle's vertices by copying the given array values.\n\t *\n\t * @param {Array<Vector3>} points - An array with 3D points.\n\t * @param {number} i0 - The array index representing the first corner of the triangle.\n\t * @param {number} i1 - The array index representing the second corner of the triangle.\n\t * @param {number} i2 - The array index representing the third corner of the triangle.\n\t * @return {Triangle} A reference to this triangle.\n\t */\n\tsetFromPointsAndIndices( points, i0, i1, i2 ) {\n\n\t\tthis.a.copy( points[ i0 ] );\n\t\tthis.b.copy( points[ i1 ] );\n\t\tthis.c.copy( points[ i2 ] );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the triangle's vertices by copying the given attribute values.\n\t *\n\t * @param {BufferAttribute} attribute - A buffer attribute with 3D points data.\n\t * @param {number} i0 - The attribute index representing the first corner of the triangle.\n\t * @param {number} i1 - The attribute index representing the second corner of the triangle.\n\t * @param {number} i2 - The attribute index representing the third corner of the triangle.\n\t * @return {Triangle} A reference to this triangle.\n\t */\n\tsetFromAttributeAndIndices( attribute, i0, i1, i2 ) {\n\n\t\tthis.a.fromBufferAttribute( attribute, i0 );\n\t\tthis.b.fromBufferAttribute( attribute, i1 );\n\t\tthis.c.fromBufferAttribute( attribute, i2 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new triangle with copied values from this instance.\n\t *\n\t * @return {Triangle} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\t/**\n\t * Copies the values of the given triangle to this instance.\n\t *\n\t * @param {Triangle} triangle - The triangle to copy.\n\t * @return {Triangle} A reference to this triangle.\n\t */\n\tcopy( triangle ) {\n\n\t\tthis.a.copy( triangle.a );\n\t\tthis.b.copy( triangle.b );\n\t\tthis.c.copy( triangle.c );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes the area of the triangle.\n\t *\n\t * @return {number} The triangle's area.\n\t */\n\tgetArea() {\n\n\t\t_v0$1.subVectors( this.c, this.b );\n\t\t_v1$3.subVectors( this.a, this.b );\n\n\t\treturn _v0$1.cross( _v1$3 ).length() * 0.5;\n\n\t}\n\n\t/**\n\t * Computes the midpoint of the triangle.\n\t *\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The triangle's midpoint.\n\t */\n\tgetMidpoint( target ) {\n\n\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t}\n\n\t/**\n\t * Computes the normal of the triangle.\n\t *\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The triangle's normal.\n\t */\n\tgetNormal( target ) {\n\n\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\n\n\t}\n\n\t/**\n\t * Computes a plane the triangle lies within.\n\t *\n\t * @param {Plane} target - The target vector that is used to store the method's result.\n\t * @return {Plane} The plane the triangle lies within.\n\t */\n\tgetPlane( target ) {\n\n\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t}\n\n\t/**\n\t * Computes a barycentric coordinates from the given vector.\n\t * Returns `null` if the triangle is degenerate.\n\t *\n\t * @param {Vector3} point - A point in 3D space.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The barycentric coordinates for the given point\n\t */\n\tgetBarycoord( point, target ) {\n\n\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\n\n\t}\n\n\t/**\n\t * Computes the value barycentrically interpolated for the given point on the\n\t * triangle. Returns `null` if the triangle is degenerate.\n\t *\n\t * @param {Vector3} point - Position of interpolated point.\n\t * @param {Vector3} v1 - Value to interpolate of first vertex.\n\t * @param {Vector3} v2 - Value to interpolate of second vertex.\n\t * @param {Vector3} v3 - Value to interpolate of third vertex.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The interpolated value.\n\t */\n\tgetInterpolation( point, v1, v2, v3, target ) {\n\n\t\treturn Triangle.getInterpolation( point, this.a, this.b, this.c, v1, v2, v3, target );\n\n\t}\n\n\t/**\n\t * Returns `true` if the given point, when projected onto the plane of the\n\t * triangle, lies within the triangle.\n\t *\n\t * @param {Vector3} point - The point in 3D space to test.\n\t * @return {boolean} Whether the given point, when projected onto the plane of the\n\t * triangle, lies within the triangle or not.\n\t */\n\tcontainsPoint( point ) {\n\n\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t}\n\n\t/**\n\t * Returns `true` if the triangle is oriented towards the given direction.\n\t *\n\t * @param {Vector3} direction - The (normalized) direction vector.\n\t * @return {boolean} Whether the triangle is oriented towards the given direction or not.\n\t */\n\tisFrontFacing( direction ) {\n\n\t\treturn Triangle.isFrontFacing( this.a, this.b, this.c, direction );\n\n\t}\n\n\t/**\n\t * Returns `true` if this triangle intersects with the given box.\n\t *\n\t * @param {Box3} box - The box to intersect.\n\t * @return {boolean} Whether this triangle intersects with the given box or not.\n\t */\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsTriangle( this );\n\n\t}\n\n\t/**\n\t * Returns the closest point on the triangle to the given point.\n\t *\n\t * @param {Vector3} p - The point to compute the closest point for.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The closest point on the triangle.\n\t */\n\tclosestPointToPoint( p, target ) {\n\n\t\tconst a = this.a, b = this.b, c = this.c;\n\t\tlet v, w;\n\n\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t_vab.subVectors( b, a );\n\t\t_vac.subVectors( c, a );\n\t\t_vap.subVectors( p, a );\n\t\tconst d1 = _vab.dot( _vap );\n\t\tconst d2 = _vac.dot( _vap );\n\t\tif ( d1 <= 0 && d2 <= 0 ) {\n\n\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\treturn target.copy( a );\n\n\t\t}\n\n\t\t_vbp.subVectors( p, b );\n\t\tconst d3 = _vab.dot( _vbp );\n\t\tconst d4 = _vac.dot( _vbp );\n\t\tif ( d3 >= 0 && d4 <= d3 ) {\n\n\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\treturn target.copy( b );\n\n\t\t}\n\n\t\tconst vc = d1 * d4 - d3 * d2;\n\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\n\n\t\t\tv = d1 / ( d1 - d3 );\n\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\n\t\t\treturn target.copy( a ).addScaledVector( _vab, v );\n\n\t\t}\n\n\t\t_vcp.subVectors( p, c );\n\t\tconst d5 = _vab.dot( _vcp );\n\t\tconst d6 = _vac.dot( _vcp );\n\t\tif ( d6 >= 0 && d5 <= d6 ) {\n\n\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\treturn target.copy( c );\n\n\t\t}\n\n\t\tconst vb = d5 * d2 - d1 * d6;\n\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\n\n\t\t\tw = d2 / ( d2 - d6 );\n\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\n\t\t\treturn target.copy( a ).addScaledVector( _vac, w );\n\n\t\t}\n\n\t\tconst va = d3 * d6 - d5 * d4;\n\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\n\n\t\t\t_vbc.subVectors( c, b );\n\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\n\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\n\t\t\treturn target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\n\n\t\t}\n\n\t\t// face region\n\t\tconst denom = 1 / ( va + vb + vc );\n\t\t// u = va * denom\n\t\tv = vb * denom;\n\t\tw = vc * denom;\n\n\t\treturn target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\n\n\t}\n\n\t/**\n\t * Returns `true` if this triangle is equal with the given one.\n\t *\n\t * @param {Triangle} triangle - The triangle to test for equality.\n\t * @return {boolean} Whether this triangle is equal with the given one.\n\t */\n\tequals( triangle ) {\n\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t}\n\n}\n\nconst _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\nconst _hslA = { h: 0, s: 0, l: 0 };\nconst _hslB = { h: 0, s: 0, l: 0 };\n\nfunction hue2rgb( p, q, t ) {\n\n\tif ( t < 0 ) t += 1;\n\tif ( t > 1 ) t -= 1;\n\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\tif ( t < 1 / 2 ) return q;\n\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\treturn p;\n\n}\n\n/**\n * A Color instance is represented by RGB components in the linear <i>working\n * color space</i>, which defaults to `LinearSRGBColorSpace`. Inputs\n * conventionally using `SRGBColorSpace` (such as hexadecimals and CSS\n * strings) are converted to the working color space automatically.\n *\n * ```js\n * // converted automatically from SRGBColorSpace to LinearSRGBColorSpace\n * const color = new THREE.Color().setHex( 0x112233 );\n * ```\n * Source color spaces may be specified explicitly, to ensure correct conversions.\n * ```js\n * // assumed already LinearSRGBColorSpace; no conversion\n * const color = new THREE.Color().setRGB( 0.5, 0.5, 0.5 );\n *\n * // converted explicitly from SRGBColorSpace to LinearSRGBColorSpace\n * const color = new THREE.Color().setRGB( 0.5, 0.5, 0.5, SRGBColorSpace );\n * ```\n * If THREE.ColorManagement is disabled, no conversions occur. For details,\n * see <i>Color management</i>. Iterating through a Color instance will yield\n * its components (r, g, b) in the corresponding order. A Color can be initialised\n * in any of the following ways:\n * ```js\n * //empty constructor - will default white\n * const color1 = new THREE.Color();\n *\n * //Hexadecimal color (recommended)\n * const color2 = new THREE.Color( 0xff0000 );\n *\n * //RGB string\n * const color3 = new THREE.Color(\"rgb(255, 0, 0)\");\n * const color4 = new THREE.Color(\"rgb(100%, 0%, 0%)\");\n *\n * //X11 color name - all 140 color names are supported.\n * //Note the lack of CamelCase in the name\n * const color5 = new THREE.Color( 'skyblue' );\n * //HSL string\n * const color6 = new THREE.Color(\"hsl(0, 100%, 50%)\");\n *\n * //Separate RGB values between 0 and 1\n * const color7 = new THREE.Color( 1, 0, 0 );\n * ```\n */\nclass Color {\n\n\t/**\n\t * Constructs a new color.\n\t *\n\t * Note that standard method of specifying color in three.js is with a hexadecimal triplet,\n\t * and that method is used throughout the rest of the documentation.\n\t *\n\t * @param {(number|string|Color)} [r] - The red component of the color. If `g` and `b` are\n\t * not provided, it can be hexadecimal triplet, a CSS-style string or another `Color` instance.\n\t * @param {number} [g] - The green component.\n\t * @param {number} [b] - The blue component.\n\t */\n\tconstructor( r, g, b ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isColor = true;\n\n\t\t/**\n\t\t * The red component.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.r = 1;\n\n\t\t/**\n\t\t * The green component.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.g = 1;\n\n\t\t/**\n\t\t * The blue component.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.b = 1;\n\n\t\treturn this.set( r, g, b );\n\n\t}\n\n\t/**\n\t * Sets the colors's components from the given values.\n\t *\n\t * @param {(number|string|Color)} [r] - The red component of the color. If `g` and `b` are\n\t * not provided, it can be hexadecimal triplet, a CSS-style string or another `Color` instance.\n\t * @param {number} [g] - The green component.\n\t * @param {number} [b] - The blue component.\n\t * @return {Color} A reference to this color.\n\t */\n\tset( r, g, b ) {\n\n\t\tif ( g === undefined && b === undefined ) {\n\n\t\t\t// r is THREE.Color, hex or string\n\n\t\t\tconst value = r;\n\n\t\t\tif ( value && value.isColor ) {\n\n\t\t\t\tthis.copy( value );\n\n\t\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\t\tthis.setHex( value );\n\n\t\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\t\tthis.setStyle( value );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.setRGB( r, g, b );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the colors's components to the given scalar value.\n\t *\n\t * @param {number} scalar - The scalar value.\n\t * @return {Color} A reference to this color.\n\t */\n\tsetScalar( scalar ) {\n\n\t\tthis.r = scalar;\n\t\tthis.g = scalar;\n\t\tthis.b = scalar;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this color from a hexadecimal value.\n\t *\n\t * @param {number} hex - The hexadecimal value.\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n\t * @return {Color} A reference to this color.\n\t */\n\tsetHex( hex, colorSpace = SRGBColorSpace ) {\n\n\t\thex = Math.floor( hex );\n\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this color from RGB values.\n\t *\n\t * @param {number} r - Red channel value between `0.0` and `1.0`.\n\t * @param {number} g - Green channel value between `0.0` and `1.0`.\n\t * @param {number} b - Blue channel value between `0.0` and `1.0`.\n\t * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.\n\t * @return {Color} A reference to this color.\n\t */\n\tsetRGB( r, g, b, colorSpace = ColorManagement.workingColorSpace ) {\n\n\t\tthis.r = r;\n\t\tthis.g = g;\n\t\tthis.b = b;\n\n\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this color from RGB values.\n\t *\n\t * @param {number} h - Hue value between `0.0` and `1.0`.\n\t * @param {number} s - Saturation value between `0.0` and `1.0`.\n\t * @param {number} l - Lightness value between `0.0` and `1.0`.\n\t * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.\n\t * @return {Color} A reference to this color.\n\t */\n\tsetHSL( h, s, l, colorSpace = ColorManagement.workingColorSpace ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\th = euclideanModulo( h, 1 );\n\t\ts = clamp( s, 0, 1 );\n\t\tl = clamp( l, 0, 1 );\n\n\t\tif ( s === 0 ) {\n\n\t\t\tthis.r = this.g = this.b = l;\n\n\t\t} else {\n\n\t\t\tconst p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\tconst q = ( 2 * l ) - p;\n\n\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t}\n\n\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this color from a CSS-style string. For example, `rgb(250, 0,0)`,\n\t * `rgb(100%, 0%, 0%)`, `hsl(0, 100%, 50%)`, `#ff0000`, `#f00`, or `red` ( or\n\t * any [X11 color name]{@link https://en.wikipedia.org/wiki/X11_color_names#Color_name_chart} -\n\t * all 140 color names are supported).\n\t *\n\t * @param {string} style - Color as a CSS-style string.\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n\t * @return {Color} A reference to this color.\n\t */\n\tsetStyle( style, colorSpace = SRGBColorSpace ) {\n\n\t\tfunction handleAlpha( string ) {\n\n\t\t\tif ( string === undefined ) return;\n\n\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tlet m;\n\n\t\tif ( m = /^(\\w+)\\(([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t// rgb / hsl\n\n\t\t\tlet color;\n\t\t\tconst name = m[ 1 ];\n\t\t\tconst components = m[ 2 ];\n\n\t\t\tswitch ( name ) {\n\n\t\t\t\tcase 'rgb':\n\t\t\t\tcase 'rgba':\n\n\t\t\t\t\tif ( color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this.setRGB(\n\t\t\t\t\t\t\tMath.min( 255, parseInt( color[ 1 ], 10 ) ) / 255,\n\t\t\t\t\t\t\tMath.min( 255, parseInt( color[ 2 ], 10 ) ) / 255,\n\t\t\t\t\t\t\tMath.min( 255, parseInt( color[ 3 ], 10 ) ) / 255,\n\t\t\t\t\t\t\tcolorSpace\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this.setRGB(\n\t\t\t\t\t\t\tMath.min( 100, parseInt( color[ 1 ], 10 ) ) / 100,\n\t\t\t\t\t\t\tMath.min( 100, parseInt( color[ 2 ], 10 ) ) / 100,\n\t\t\t\t\t\t\tMath.min( 100, parseInt( color[ 3 ], 10 ) ) / 100,\n\t\t\t\t\t\t\tcolorSpace\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'hsl':\n\t\t\t\tcase 'hsla':\n\n\t\t\t\t\tif ( color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this.setHSL(\n\t\t\t\t\t\t\tparseFloat( color[ 1 ] ) / 360,\n\t\t\t\t\t\t\tparseFloat( color[ 2 ] ) / 100,\n\t\t\t\t\t\t\tparseFloat( color[ 3 ] ) / 100,\n\t\t\t\t\t\t\tcolorSpace\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tconsole.warn( 'THREE.Color: Unknown color model ' + style );\n\n\t\t\t}\n\n\t\t} else if ( m = /^\\#([A-Fa-f\\d]+)$/.exec( style ) ) {\n\n\t\t\t// hex color\n\n\t\t\tconst hex = m[ 1 ];\n\t\t\tconst size = hex.length;\n\n\t\t\tif ( size === 3 ) {\n\n\t\t\t\t// #ff0\n\t\t\t\treturn this.setRGB(\n\t\t\t\t\tparseInt( hex.charAt( 0 ), 16 ) / 15,\n\t\t\t\t\tparseInt( hex.charAt( 1 ), 16 ) / 15,\n\t\t\t\t\tparseInt( hex.charAt( 2 ), 16 ) / 15,\n\t\t\t\t\tcolorSpace\n\t\t\t\t);\n\n\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t// #ff0000\n\t\t\t\treturn this.setHex( parseInt( hex, 16 ), colorSpace );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Color: Invalid hex color ' + style );\n\n\t\t\t}\n\n\t\t} else if ( style && style.length > 0 ) {\n\n\t\t\treturn this.setColorName( style, colorSpace );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this color from a color name. Faster than {@link Color#setStyle} if\n\t * you don't need the other CSS-style formats.\n\t *\n\t * For convenience, the list of names is exposed in `Color.NAMES` as a hash.\n\t * ```js\n\t * Color.NAMES.aliceblue // returns 0xF0F8FF\n\t * ```\n\t *\n\t * @param {string} style - The color name.\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n\t * @return {Color} A reference to this color.\n\t */\n\tsetColorName( style, colorSpace = SRGBColorSpace ) {\n\n\t\t// color keywords\n\t\tconst hex = _colorKeywords[ style.toLowerCase() ];\n\n\t\tif ( hex !== undefined ) {\n\n\t\t\t// red\n\t\t\tthis.setHex( hex, colorSpace );\n\n\t\t} else {\n\n\t\t\t// unknown color\n\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new color with copied values from this instance.\n\t *\n\t * @return {Color} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t}\n\n\t/**\n\t * Copies the values of the given color to this instance.\n\t *\n\t * @param {Color} color - The color to copy.\n\t * @return {Color} A reference to this color.\n\t */\n\tcopy( color ) {\n\n\t\tthis.r = color.r;\n\t\tthis.g = color.g;\n\t\tthis.b = color.b;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the given color into this color, and then converts this color from\n\t * `SRGBColorSpace` to `LinearSRGBColorSpace`.\n\t *\n\t * @param {Color} color - The color to copy/convert.\n\t * @return {Color} A reference to this color.\n\t */\n\tcopySRGBToLinear( color ) {\n\n\t\tthis.r = SRGBToLinear( color.r );\n\t\tthis.g = SRGBToLinear( color.g );\n\t\tthis.b = SRGBToLinear( color.b );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the given color into this color, and then converts this color from\n\t * `LinearSRGBColorSpace` to `SRGBColorSpace`.\n\t *\n\t * @param {Color} color - The color to copy/convert.\n\t * @return {Color} A reference to this color.\n\t */\n\tcopyLinearToSRGB( color ) {\n\n\t\tthis.r = LinearToSRGB( color.r );\n\t\tthis.g = LinearToSRGB( color.g );\n\t\tthis.b = LinearToSRGB( color.b );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Converts this color from `SRGBColorSpace` to `LinearSRGBColorSpace`.\n\t *\n\t * @return {Color} A reference to this color.\n\t */\n\tconvertSRGBToLinear() {\n\n\t\tthis.copySRGBToLinear( this );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Converts this color from `LinearSRGBColorSpace` to `SRGBColorSpace`.\n\t *\n\t * @return {Color} A reference to this color.\n\t */\n\tconvertLinearToSRGB() {\n\n\t\tthis.copyLinearToSRGB( this );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the hexadecimal value of this color.\n\t *\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n\t * @return {number} The hexadecimal value.\n\t */\n\tgetHex( colorSpace = SRGBColorSpace ) {\n\n\t\tColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );\n\n\t\treturn Math.round( clamp( _color.r * 255, 0, 255 ) ) * 65536 + Math.round( clamp( _color.g * 255, 0, 255 ) ) * 256 + Math.round( clamp( _color.b * 255, 0, 255 ) );\n\n\t}\n\n\t/**\n\t * Returns the hexadecimal value of this color as a string (for example, 'FFFFFF').\n\t *\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n\t * @return {string} The hexadecimal value as a string.\n\t */\n\tgetHexString( colorSpace = SRGBColorSpace ) {\n\n\t\treturn ( '000000' + this.getHex( colorSpace ).toString( 16 ) ).slice( -6 );\n\n\t}\n\n\t/**\n\t * Converts the colors RGB values into the HSL format and stores them into the\n\t * given target object.\n\t *\n\t * @param {{h:number,s:number,l:number}} target - The target object that is used to store the method's result.\n\t * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.\n\t * @return {{h:number,s:number,l:number}} The HSL representation of this color.\n\t */\n\tgetHSL( target, colorSpace = ColorManagement.workingColorSpace ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\tColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );\n\n\t\tconst r = _color.r, g = _color.g, b = _color.b;\n\n\t\tconst max = Math.max( r, g, b );\n\t\tconst min = Math.min( r, g, b );\n\n\t\tlet hue, saturation;\n\t\tconst lightness = ( min + max ) / 2.0;\n\n\t\tif ( min === max ) {\n\n\t\t\thue = 0;\n\t\t\tsaturation = 0;\n\n\t\t} else {\n\n\t\t\tconst delta = max - min;\n\n\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\tswitch ( max ) {\n\n\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t}\n\n\t\t\thue /= 6;\n\n\t\t}\n\n\t\ttarget.h = hue;\n\t\ttarget.s = saturation;\n\t\ttarget.l = lightness;\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Returns the RGB values of this color and stores them into the given target object.\n\t *\n\t * @param {Color} target - The target color that is used to store the method's result.\n\t * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.\n\t * @return {Color} The RGB representation of this color.\n\t */\n\tgetRGB( target, colorSpace = ColorManagement.workingColorSpace ) {\n\n\t\tColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );\n\n\t\ttarget.r = _color.r;\n\t\ttarget.g = _color.g;\n\t\ttarget.b = _color.b;\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Returns the value of this color as a CSS style string. Example: `rgb(255,0,0)`.\n\t *\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n\t * @return {string} The CSS representation of this color.\n\t */\n\tgetStyle( colorSpace = SRGBColorSpace ) {\n\n\t\tColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );\n\n\t\tconst r = _color.r, g = _color.g, b = _color.b;\n\n\t\tif ( colorSpace !== SRGBColorSpace ) {\n\n\t\t\t// Requires CSS Color Module Level 4 (https://www.w3.org/TR/css-color-4/).\n\t\t\treturn `color(${ colorSpace } ${ r.toFixed( 3 ) } ${ g.toFixed( 3 ) } ${ b.toFixed( 3 ) })`;\n\n\t\t}\n\n\t\treturn `rgb(${ Math.round( r * 255 ) },${ Math.round( g * 255 ) },${ Math.round( b * 255 ) })`;\n\n\t}\n\n\t/**\n\t * Adds the given HSL values to this color's values.\n\t * Internally, this converts the color's RGB values to HSL, adds HSL\n\t * and then converts the color back to RGB.\n\t *\n\t * @param {number} h - Hue value between `0.0` and `1.0`.\n\t * @param {number} s - Saturation value between `0.0` and `1.0`.\n\t * @param {number} l - Lightness value between `0.0` and `1.0`.\n\t * @return {Color} A reference to this color.\n\t */\n\toffsetHSL( h, s, l ) {\n\n\t\tthis.getHSL( _hslA );\n\n\t\treturn this.setHSL( _hslA.h + h, _hslA.s + s, _hslA.l + l );\n\n\t}\n\n\t/**\n\t * Adds the RGB values of the given color to the RGB values of this color.\n\t *\n\t * @param {Color} color - The color to add.\n\t * @return {Color} A reference to this color.\n\t */\n\tadd( color ) {\n\n\t\tthis.r += color.r;\n\t\tthis.g += color.g;\n\t\tthis.b += color.b;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the RGB values of the given colors and stores the result in this instance.\n\t *\n\t * @param {Color} color1 - The first color.\n\t * @param {Color} color2 - The second color.\n\t * @return {Color} A reference to this color.\n\t */\n\taddColors( color1, color2 ) {\n\n\t\tthis.r = color1.r + color2.r;\n\t\tthis.g = color1.g + color2.g;\n\t\tthis.b = color1.b + color2.b;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given scalar value to the RGB values of this color.\n\t *\n\t * @param {number} s - The scalar to add.\n\t * @return {Color} A reference to this color.\n\t */\n\taddScalar( s ) {\n\n\t\tthis.r += s;\n\t\tthis.g += s;\n\t\tthis.b += s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the RGB values of the given color from the RGB values of this color.\n\t *\n\t * @param {Color} color - The color to subtract.\n\t * @return {Color} A reference to this color.\n\t */\n\tsub( color ) {\n\n\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\tthis.b = Math.max( 0, this.b - color.b );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the RGB values of the given color with the RGB values of this color.\n\t *\n\t * @param {Color} color - The color to multiply.\n\t * @return {Color} A reference to this color.\n\t */\n\tmultiply( color ) {\n\n\t\tthis.r *= color.r;\n\t\tthis.g *= color.g;\n\t\tthis.b *= color.b;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the given scalar value with the RGB values of this color.\n\t *\n\t * @param {number} s - The scalar to multiply.\n\t * @return {Color} A reference to this color.\n\t */\n\tmultiplyScalar( s ) {\n\n\t\tthis.r *= s;\n\t\tthis.g *= s;\n\t\tthis.b *= s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Linearly interpolates this color's RGB values toward the RGB values of the\n\t * given color. The alpha argument can be thought of as the ratio between\n\t * the two colors, where `0.0` is this color and `1.0` is the first argument.\n\t *\n\t * @param {Color} color - The color to converge on.\n\t * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.\n\t * @return {Color} A reference to this color.\n\t */\n\tlerp( color, alpha ) {\n\n\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Linearly interpolates between the given colors and stores the result in this instance.\n\t * The alpha argument can be thought of as the ratio between the two colors, where `0.0`\n\t * is the first and `1.0` is the second color.\n\t *\n\t * @param {Color} color1 - The first color.\n\t * @param {Color} color2 - The second color.\n\t * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.\n\t * @return {Color} A reference to this color.\n\t */\n\tlerpColors( color1, color2, alpha ) {\n\n\t\tthis.r = color1.r + ( color2.r - color1.r ) * alpha;\n\t\tthis.g = color1.g + ( color2.g - color1.g ) * alpha;\n\t\tthis.b = color1.b + ( color2.b - color1.b ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Linearly interpolates this color's HSL values toward the HSL values of the\n\t * given color. It differs from {@link Color#lerp} by not interpolating straight\n\t * from one color to the other, but instead going through all the hues in between\n\t * those two colors. The alpha argument can be thought of as the ratio between\n\t * the two colors, where 0.0 is this color and 1.0 is the first argument.\n\t *\n\t * @param {Color} color - The color to converge on.\n\t * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.\n\t * @return {Color} A reference to this color.\n\t */\n\tlerpHSL( color, alpha ) {\n\n\t\tthis.getHSL( _hslA );\n\t\tcolor.getHSL( _hslB );\n\n\t\tconst h = lerp( _hslA.h, _hslB.h, alpha );\n\t\tconst s = lerp( _hslA.s, _hslB.s, alpha );\n\t\tconst l = lerp( _hslA.l, _hslB.l, alpha );\n\n\t\tthis.setHSL( h, s, l );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the color's RGB components from the given 3D vector.\n\t *\n\t * @param {Vector3} v - The vector to set.\n\t * @return {Color} A reference to this color.\n\t */\n\tsetFromVector3( v ) {\n\n\t\tthis.r = v.x;\n\t\tthis.g = v.y;\n\t\tthis.b = v.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Transforms this color with the given 3x3 matrix.\n\t *\n\t * @param {Matrix3} m - The matrix.\n\t * @return {Color} A reference to this color.\n\t */\n\tapplyMatrix3( m ) {\n\n\t\tconst r = this.r, g = this.g, b = this.b;\n\t\tconst e = m.elements;\n\n\t\tthis.r = e[ 0 ] * r + e[ 3 ] * g + e[ 6 ] * b;\n\t\tthis.g = e[ 1 ] * r + e[ 4 ] * g + e[ 7 ] * b;\n\t\tthis.b = e[ 2 ] * r + e[ 5 ] * g + e[ 8 ] * b;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this color is equal with the given one.\n\t *\n\t * @param {Color} c - The color to test for equality.\n\t * @return {boolean} Whether this bounding color is equal with the given one.\n\t */\n\tequals( c ) {\n\n\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t}\n\n\t/**\n\t * Sets this color's RGB components from the given array.\n\t *\n\t * @param {Array<number>} array - An array holding the RGB values.\n\t * @param {number} [offset=0] - The offset into the array.\n\t * @return {Color} A reference to this color.\n\t */\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.r = array[ offset ];\n\t\tthis.g = array[ offset + 1 ];\n\t\tthis.b = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Writes the RGB components of this color to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array holding the color components.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number>} The color components.\n\t */\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.r;\n\t\tarray[ offset + 1 ] = this.g;\n\t\tarray[ offset + 2 ] = this.b;\n\n\t\treturn array;\n\n\t}\n\n\t/**\n\t * Sets the components of this color from the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute holding color data.\n\t * @param {number} index - The index into the attribute.\n\t * @return {Color} A reference to this color.\n\t */\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.r = attribute.getX( index );\n\t\tthis.g = attribute.getY( index );\n\t\tthis.b = attribute.getZ( index );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * This methods defines the serialization result of this class. Returns the color\n\t * as a hexadecimal value.\n\t *\n\t * @return {number} The hexadecimal value.\n\t */\n\ttoJSON() {\n\n\t\treturn this.getHex();\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.r;\n\t\tyield this.g;\n\t\tyield this.b;\n\n\t}\n\n}\n\nconst _color = /*@__PURE__*/ new Color();\n\n/**\n * A dictionary with X11 color names.\n *\n * Note that multiple words such as Dark Orange become the string 'darkorange'.\n *\n * @static\n * @type {Object}\n */\nColor.NAMES = _colorKeywords;\n\nlet _materialId = 0;\n\n/**\n * Abstract base class for materials.\n *\n * Materials define the appearance of renderable 3D objects.\n *\n * @abstract\n * @augments EventDispatcher\n */\nclass Material extends EventDispatcher {\n\n\t/**\n\t * Constructs a new material.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMaterial = true;\n\n\t\t/**\n\t\t * The ID of the material.\n\t\t *\n\t\t * @name Material#id\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */\n\t\tObject.defineProperty( this, 'id', { value: _materialId ++ } );\n\n\t\t/**\n\t\t * The UUID of the material.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.uuid = generateUUID();\n\n\t\t/**\n\t\t * The name of the material.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = '';\n\n\t\t/**\n\t\t * The type property is used for detecting the object type\n\t\t * in context of serialization/deserialization.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.type = 'Material';\n\n\t\t/**\n\t\t * Defines the blending type of the material.\n\t\t *\n\t\t * It must be set to `CustomBlending` if custom blending properties like\n\t\t * {@link Material#blendSrc}, {@link Material#blendDst} or {@link Material#blendEquation}\n\t\t * should have any effect.\n\t\t *\n\t\t * @type {(NoBlending|NormalBlending|AdditiveBlending|SubtractiveBlending|MultiplyBlending|CustomBlending)}\n\t\t * @default NormalBlending\n\t\t */\n\t\tthis.blending = NormalBlending;\n\n\t\t/**\n\t\t * Defines which side of faces will be rendered - front, back or both.\n\t\t *\n\t\t * @type {(FrontSide|BackSide|DoubleSide)}\n\t\t * @default FrontSide\n\t\t */\n\t\tthis.side = FrontSide;\n\n\t\t/**\n\t\t * If set to `true`, vertex colors should be used.\n\t\t *\n\t\t * The engine supports RGB and RGBA vertex colors depending on whether a three (RGB) or\n\t\t * four (RGBA) component color buffer attribute is used.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.vertexColors = false;\n\n\t\t/**\n\t\t * Defines how transparent the material is.\n\t\t * A value of `0.0` indicates fully transparent, `1.0` is fully opaque.\n\t\t *\n\t\t * If the {@link Material#transparent} is not set to `true`,\n\t\t * the material will remain fully opaque and this value will only affect its color.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.opacity = 1;\n\n\t\t/**\n\t\t * Defines whether this material is transparent. This has an effect on\n\t\t * rendering as transparent objects need special treatment and are rendered\n\t\t * after non-transparent objects.\n\t\t *\n\t\t * When set to true, the extent to which the material is transparent is\n\t\t * controlled by {@link Material#opacity}.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.transparent = false;\n\n\t\t/**\n\t\t * Enables alpha hashed transparency, an alternative to {@link Material#transparent} or\n\t\t * {@link Material#alphaTest}. The material will not be rendered if opacity is lower than\n\t\t * a random threshold. Randomization introduces some grain or noise, but approximates alpha\n\t\t * blending without the associated problems of sorting. Using TAA can reduce the resulting noise.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.alphaHash = false;\n\n\t\t/**\n\t\t * Defines the blending source factor.\n\t\t *\n\t\t * @type {(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}\n\t\t * @default SrcAlphaFactor\n\t\t */\n\t\tthis.blendSrc = SrcAlphaFactor;\n\n\t\t/**\n\t\t * Defines the blending destination factor.\n\t\t *\n\t\t * @type {(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}\n\t\t * @default OneMinusSrcAlphaFactor\n\t\t */\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\n\t\t/**\n\t\t * Defines the blending equation.\n\t\t *\n\t\t * @type {(AddEquation|SubtractEquation|ReverseSubtractEquation|MinEquation|MaxEquation)}\n\t\t * @default AddEquation\n\t\t */\n\t\tthis.blendEquation = AddEquation;\n\n\t\t/**\n\t\t * Defines the blending source alpha factor.\n\t\t *\n\t\t * @type {?(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}\n\t\t * @default null\n\t\t */\n\t\tthis.blendSrcAlpha = null;\n\n\t\t/**\n\t\t * Defines the blending destination alpha factor.\n\t\t *\n\t\t * @type {?(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}\n\t\t * @default null\n\t\t */\n\t\tthis.blendDstAlpha = null;\n\n\t\t/**\n\t\t * Defines the blending equation of the alpha channel.\n\t\t *\n\t\t * @type {?(AddEquation|SubtractEquation|ReverseSubtractEquation|MinEquation|MaxEquation)}\n\t\t * @default null\n\t\t */\n\t\tthis.blendEquationAlpha = null;\n\n\t\t/**\n\t\t * Represents the RGB values of the constant blend color.\n\t\t *\n\t\t * This property has only an effect when using custom blending with `ConstantColor` or `OneMinusConstantColor`.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (0,0,0)\n\t\t */\n\t\tthis.blendColor = new Color( 0, 0, 0 );\n\n\t\t/**\n\t\t * Represents the alpha value of the constant blend color.\n\t\t *\n\t\t * This property has only an effect when using custom blending with `ConstantAlpha` or `OneMinusConstantAlpha`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.blendAlpha = 0;\n\n\t\t/**\n\t\t * Defines the depth function.\n\t\t *\n\t\t * @type {(NeverDepth|AlwaysDepth|LessDepth|LessEqualDepth|EqualDepth|GreaterEqualDepth|GreaterDepth|NotEqualDepth)}\n\t\t * @default LessEqualDepth\n\t\t */\n\t\tthis.depthFunc = LessEqualDepth;\n\n\t\t/**\n\t\t * Whether to have depth test enabled when rendering this material.\n\t\t * When the depth test is disabled, the depth write will also be implicitly disabled.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.depthTest = true;\n\n\t\t/**\n\t\t * Whether rendering this material has any effect on the depth buffer.\n\t\t *\n\t\t * When drawing 2D overlays it can be useful to disable the depth writing in\n\t\t * order to layer several things together without creating z-index artifacts.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.depthWrite = true;\n\n\t\t/**\n\t\t * The bit mask to use when writing to the stencil buffer.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0xff\n\t\t */\n\t\tthis.stencilWriteMask = 0xff;\n\n\t\t/**\n\t\t * The stencil comparison function to use.\n\t\t *\n\t\t * @type {NeverStencilFunc|LessStencilFunc|EqualStencilFunc|LessEqualStencilFunc|GreaterStencilFunc|NotEqualStencilFunc|GreaterEqualStencilFunc|AlwaysStencilFunc}\n\t\t * @default AlwaysStencilFunc\n\t\t */\n\t\tthis.stencilFunc = AlwaysStencilFunc;\n\n\t\t/**\n\t\t * The value to use when performing stencil comparisons or stencil operations.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.stencilRef = 0;\n\n\t\t/**\n\t\t * The bit mask to use when comparing against the stencil buffer.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0xff\n\t\t */\n\t\tthis.stencilFuncMask = 0xff;\n\n\t\t/**\n\t\t * Which stencil operation to perform when the comparison function returns `false`.\n\t\t *\n\t\t * @type {ZeroStencilOp|KeepStencilOp|ReplaceStencilOp|IncrementStencilOp|DecrementStencilOp|IncrementWrapStencilOp|DecrementWrapStencilOp|InvertStencilOp}\n\t\t * @default KeepStencilOp\n\t\t */\n\t\tthis.stencilFail = KeepStencilOp;\n\n\t\t/**\n\t\t * Which stencil operation to perform when the comparison function returns\n\t\t * `true` but the depth test fails.\n\t\t *\n\t\t * @type {ZeroStencilOp|KeepStencilOp|ReplaceStencilOp|IncrementStencilOp|DecrementStencilOp|IncrementWrapStencilOp|DecrementWrapStencilOp|InvertStencilOp}\n\t\t * @default KeepStencilOp\n\t\t */\n\t\tthis.stencilZFail = KeepStencilOp;\n\n\t\t/**\n\t\t * Which stencil operation to perform when the comparison function returns\n\t\t * `true` and the depth test passes.\n\t\t *\n\t\t * @type {ZeroStencilOp|KeepStencilOp|ReplaceStencilOp|IncrementStencilOp|DecrementStencilOp|IncrementWrapStencilOp|DecrementWrapStencilOp|InvertStencilOp}\n\t\t * @default KeepStencilOp\n\t\t */\n\t\tthis.stencilZPass = KeepStencilOp;\n\n\t\t/**\n\t\t * Whether stencil operations are performed against the stencil buffer. In\n\t\t * order to perform writes or comparisons against the stencil buffer this\n\t\t * value must be `true`.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.stencilWrite = false;\n\n\t\t/**\n\t\t * User-defined clipping planes specified as THREE.Plane objects in world\n\t\t * space. These planes apply to the objects this material is attached to.\n\t\t * Points in space whose signed distance to the plane is negative are clipped\n\t\t * (not rendered). This requires {@link WebGLRenderer#localClippingEnabled} to\n\t\t * be `true`.\n\t\t *\n\t\t * @type {?Array<Plane>}\n\t\t * @default null\n\t\t */\n\t\tthis.clippingPlanes = null;\n\n\t\t/**\n\t\t * Changes the behavior of clipping planes so that only their intersection is\n\t\t * clipped, rather than their union.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.clipIntersection = false;\n\n\t\t/**\n\t\t * Defines whether to clip shadows according to the clipping planes specified\n\t\t * on this material.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.clipShadows = false;\n\n\t\t/**\n\t\t * Defines which side of faces cast shadows. If `null`, the side casting shadows\n\t\t * is determined as follows:\n\t\t *\n\t\t * - When {@link Material#side} is set to `FrontSide`, the back side cast shadows.\n\t\t * - When {@link Material#side} is set to `BackSide`, the front side cast shadows.\n\t\t * - When {@link Material#side} is set to `DoubleSide`, both sides cast shadows.\n\t\t *\n\t\t * @type {?(FrontSide|BackSide|DoubleSide)}\n\t\t * @default null\n\t\t */\n\t\tthis.shadowSide = null;\n\n\t\t/**\n\t\t * Whether to render the material's color.\n\t\t *\n\t\t * This can be used in conjunction with {@link Object3D#renderOder} to create invisible\n\t\t * objects that occlude other objects.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.colorWrite = true;\n\n\t\t/**\n\t\t * Override the renderer's default precision for this material.\n\t\t *\n\t\t * @type {?('highp'|'mediump'|'lowp')}\n\t\t * @default null\n\t\t */\n\t\tthis.precision = null;\n\n\t\t/**\n\t\t * Whether to use polygon offset or not. When enabled, each fragment's depth value will\n\t\t * be offset after it is interpolated from the depth values of the appropriate vertices.\n\t\t * The offset is added before the depth test is performed and before the value is written\n\t\t * into the depth buffer.\n\t\t *\n\t\t * Can be useful for rendering hidden-line images, for applying decals to surfaces, and for\n\t\t * rendering solids with highlighted edges.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.polygonOffset = false;\n\n\t\t/**\n\t\t * Specifies a scale factor that is used to create a variable depth offset for each polygon.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.polygonOffsetFactor = 0;\n\n\t\t/**\n\t\t * Is multiplied by an implementation-specific value to create a constant depth offset.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.polygonOffsetUnits = 0;\n\n\t\t/**\n\t\t * Whether to apply dithering to the color to remove the appearance of banding.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.dithering = false;\n\n\t\t/**\n\t\t * Whether alpha to coverage should be enabled or not. Can only be used with MSAA-enabled contexts\n\t\t * (meaning when the renderer was created with *antialias* parameter set to `true`). Enabling this\n\t\t * will smooth aliasing on clip plane edges and alphaTest-clipped edges.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.alphaToCoverage = false;\n\n\t\t/**\n\t\t * Whether to premultiply the alpha (transparency) value.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.premultipliedAlpha = false;\n\n\t\t/**\n\t\t * Whether double-sided, transparent objects should be rendered with a single pass or not.\n\t\t *\n\t\t * The engine renders double-sided, transparent objects with two draw calls (back faces first,\n\t\t * then front faces) to mitigate transparency artifacts. There are scenarios however where this\n\t\t * approach produces no quality gains but still doubles draw calls e.g. when rendering flat\n\t\t * vegetation like grass sprites. In these cases, set the `forceSinglePass` flag to `true` to\n\t\t * disable the two pass rendering to avoid performance issues.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.forceSinglePass = false;\n\n\t\t/**\n\t\t * Whether it's possible to override the material with {@link Scene#overrideMaterial} or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.allowOverride = true;\n\n\t\t/**\n\t\t * Defines whether 3D objects using this material are visible.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.visible = true;\n\n\t\t/**\n\t\t * Defines whether this material is tone mapped according to the renderer's tone mapping setting.\n\t\t *\n\t\t * It is ignored when rendering to a render target or using post processing or when using\n\t\t * `WebGPURenderer`. In all these cases, all materials are honored by tone mapping.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.toneMapped = true;\n\n\t\t/**\n\t\t * An object that can be used to store custom data about the Material. It\n\t\t * should not hold references to functions as these will not be cloned.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.userData = {};\n\n\t\t/**\n\t\t * This starts at `0` and counts how many times {@link Material#needsUpdate} is set to `true`.\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t * @default 0\n\t\t */\n\t\tthis.version = 0;\n\n\t\tthis._alphaTest = 0;\n\n\t}\n\n\t/**\n\t * Sets the alpha value to be used when running an alpha test. The material\n\t * will not be rendered if the opacity is lower than this value.\n\t *\n\t * @type {number}\n\t * @readonly\n\t * @default 0\n\t */\n\tget alphaTest() {\n\n\t\treturn this._alphaTest;\n\n\t}\n\n\tset alphaTest( value ) {\n\n\t\tif ( this._alphaTest > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._alphaTest = value;\n\n\t}\n\n\t/**\n\t * An optional callback that is executed immediately before the material is used to render a 3D object.\n\t *\n\t * This method can only be used when rendering with {@link WebGLRenderer}.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {Scene} scene - The scene.\n\t * @param {Camera} camera - The camera that is used to render the scene.\n\t * @param {BufferGeometry} geometry - The 3D object's geometry.\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Object} group - The geometry group data.\n\t */\n\tonBeforeRender( /* renderer, scene, camera, geometry, object, group */ ) {}\n\n\t/**\n\t * An optional callback that is executed immediately before the shader\n\t * program is compiled. This function is called with the shader source code\n\t * as a parameter. Useful for the modification of built-in materials.\n\t *\n\t * This method can only be used when rendering with {@link WebGLRenderer}. The\n\t * recommended approach when customizing materials is to use `WebGPURenderer` with the new\n\t * Node Material system and [TSL]{@link https://github.com/mrdoob/three.js/wiki/Three.js-Shading-Language}.\n\t *\n\t * @param {{vertexShader:string,fragmentShader:string,uniforms:Object}} shaderobject - The object holds the uniforms and the vertex and fragment shader source.\n\t * @param {WebGLRenderer} renderer - A reference to the renderer.\n\t */\n\tonBeforeCompile( /* shaderobject, renderer */ ) {}\n\n\t/**\n\t * In case {@link Material#onBeforeCompile} is used, this callback can be used to identify\n\t * values of settings used in `onBeforeCompile()`, so three.js can reuse a cached\n\t * shader or recompile the shader for this material as needed.\n\t *\n\t * This method can only be used when rendering with {@link WebGLRenderer}.\n\t *\n\t * @return {string} The custom program cache key.\n\t */\n\tcustomProgramCacheKey() {\n\n\t\treturn this.onBeforeCompile.toString();\n\n\t}\n\n\t/**\n\t * This method can be used to set default values from parameter objects.\n\t * It is a generic implementation so it can be used with different types\n\t * of materials.\n\t *\n\t * @param {Object} [values] - The material values to set.\n\t */\n\tsetValues( values ) {\n\n\t\tif ( values === undefined ) return;\n\n\t\tfor ( const key in values ) {\n\n\t\t\tconst newValue = values[ key ];\n\n\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\tconsole.warn( `THREE.Material: parameter '${ key }' has value of undefined.` );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tconst currentValue = this[ key ];\n\n\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\tconsole.warn( `THREE.Material: '${ key }' is not a property of THREE.${ this.type }.` );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( currentValue && currentValue.isColor ) {\n\n\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n\n\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t} else {\n\n\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Serializes the material into JSON.\n\t *\n\t * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n\t * @return {Object} A JSON object representing the serialized material.\n\t * @see {@link ObjectLoader#parse}\n\t */\n\ttoJSON( meta ) {\n\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( isRootObject ) {\n\n\t\t\tmeta = {\n\t\t\t\ttextures: {},\n\t\t\t\timages: {}\n\t\t\t};\n\n\t\t}\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.6,\n\t\t\t\ttype: 'Material',\n\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard Material serialization\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.color && this.color.isColor ) data.color = this.color.getHex();\n\n\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n\t\tif ( this.sheen !== undefined ) data.sheen = this.sheen;\n\t\tif ( this.sheenColor && this.sheenColor.isColor ) data.sheenColor = this.sheenColor.getHex();\n\t\tif ( this.sheenRoughness !== undefined ) data.sheenRoughness = this.sheenRoughness;\n\t\tif ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();\n\t\tif ( this.emissiveIntensity !== undefined && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;\n\n\t\tif ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();\n\t\tif ( this.specularIntensity !== undefined ) data.specularIntensity = this.specularIntensity;\n\t\tif ( this.specularColor && this.specularColor.isColor ) data.specularColor = this.specularColor.getHex();\n\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\t\tif ( this.clearcoat !== undefined ) data.clearcoat = this.clearcoat;\n\t\tif ( this.clearcoatRoughness !== undefined ) data.clearcoatRoughness = this.clearcoatRoughness;\n\n\t\tif ( this.clearcoatMap && this.clearcoatMap.isTexture ) {\n\n\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {\n\n\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {\n\n\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;\n\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\n\t\t}\n\n\t\tif ( this.dispersion !== undefined ) data.dispersion = this.dispersion;\n\n\t\tif ( this.iridescence !== undefined ) data.iridescence = this.iridescence;\n\t\tif ( this.iridescenceIOR !== undefined ) data.iridescenceIOR = this.iridescenceIOR;\n\t\tif ( this.iridescenceThicknessRange !== undefined ) data.iridescenceThicknessRange = this.iridescenceThicknessRange;\n\n\t\tif ( this.iridescenceMap && this.iridescenceMap.isTexture ) {\n\n\t\t\tdata.iridescenceMap = this.iridescenceMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture ) {\n\n\t\t\tdata.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.anisotropy !== undefined ) data.anisotropy = this.anisotropy;\n\t\tif ( this.anisotropyRotation !== undefined ) data.anisotropyRotation = this.anisotropyRotation;\n\n\t\tif ( this.anisotropyMap && this.anisotropyMap.isTexture ) {\n\n\t\t\tdata.anisotropyMap = this.anisotropyMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;\n\t\tif ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;\n\t\tif ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\n\t\tif ( this.lightMap && this.lightMap.isTexture ) {\n\n\t\t\tdata.lightMap = this.lightMap.toJSON( meta ).uuid;\n\t\t\tdata.lightMapIntensity = this.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( this.aoMap && this.aoMap.isTexture ) {\n\n\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\n\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\n\t\t}\n\n\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\n\n\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t}\n\n\t\tif ( this.normalMap && this.normalMap.isTexture ) {\n\n\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t}\n\n\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\n\n\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t}\n\n\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t\tif ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\t\tif ( this.specularIntensityMap && this.specularIntensityMap.isTexture ) data.specularIntensityMap = this.specularIntensityMap.toJSON( meta ).uuid;\n\t\tif ( this.specularColorMap && this.specularColorMap.isTexture ) data.specularColorMap = this.specularColorMap.toJSON( meta ).uuid;\n\n\t\tif ( this.envMap && this.envMap.isTexture ) {\n\n\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\n\t\t\tif ( this.combine !== undefined ) data.combine = this.combine;\n\n\t\t}\n\n\t\tif ( this.envMapRotation !== undefined ) data.envMapRotation = this.envMapRotation.toArray();\n\t\tif ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;\n\t\tif ( this.reflectivity !== undefined ) data.reflectivity = this.reflectivity;\n\t\tif ( this.refractionRatio !== undefined ) data.refractionRatio = this.refractionRatio;\n\n\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\n\n\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.transmission !== undefined ) data.transmission = this.transmission;\n\t\tif ( this.transmissionMap && this.transmissionMap.isTexture ) data.transmissionMap = this.transmissionMap.toJSON( meta ).uuid;\n\t\tif ( this.thickness !== undefined ) data.thickness = this.thickness;\n\t\tif ( this.thicknessMap && this.thicknessMap.isTexture ) data.thicknessMap = this.thicknessMap.toJSON( meta ).uuid;\n\t\tif ( this.attenuationDistance !== undefined && this.attenuationDistance !== Infinity ) data.attenuationDistance = this.attenuationDistance;\n\t\tif ( this.attenuationColor !== undefined ) data.attenuationColor = this.attenuationColor.getHex();\n\n\t\tif ( this.size !== undefined ) data.size = this.size;\n\t\tif ( this.shadowSide !== null ) data.shadowSide = this.shadowSide;\n\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n\t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n\t\tif ( this.side !== FrontSide ) data.side = this.side;\n\t\tif ( this.vertexColors === true ) data.vertexColors = true;\n\n\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t\tif ( this.transparent === true ) data.transparent = true;\n\n\t\tif ( this.blendSrc !== SrcAlphaFactor ) data.blendSrc = this.blendSrc;\n\t\tif ( this.blendDst !== OneMinusSrcAlphaFactor ) data.blendDst = this.blendDst;\n\t\tif ( this.blendEquation !== AddEquation ) data.blendEquation = this.blendEquation;\n\t\tif ( this.blendSrcAlpha !== null ) data.blendSrcAlpha = this.blendSrcAlpha;\n\t\tif ( this.blendDstAlpha !== null ) data.blendDstAlpha = this.blendDstAlpha;\n\t\tif ( this.blendEquationAlpha !== null ) data.blendEquationAlpha = this.blendEquationAlpha;\n\t\tif ( this.blendColor && this.blendColor.isColor ) data.blendColor = this.blendColor.getHex();\n\t\tif ( this.blendAlpha !== 0 ) data.blendAlpha = this.blendAlpha;\n\n\t\tif ( this.depthFunc !== LessEqualDepth ) data.depthFunc = this.depthFunc;\n\t\tif ( this.depthTest === false ) data.depthTest = this.depthTest;\n\t\tif ( this.depthWrite === false ) data.depthWrite = this.depthWrite;\n\t\tif ( this.colorWrite === false ) data.colorWrite = this.colorWrite;\n\n\t\tif ( this.stencilWriteMask !== 0xff ) data.stencilWriteMask = this.stencilWriteMask;\n\t\tif ( this.stencilFunc !== AlwaysStencilFunc ) data.stencilFunc = this.stencilFunc;\n\t\tif ( this.stencilRef !== 0 ) data.stencilRef = this.stencilRef;\n\t\tif ( this.stencilFuncMask !== 0xff ) data.stencilFuncMask = this.stencilFuncMask;\n\t\tif ( this.stencilFail !== KeepStencilOp ) data.stencilFail = this.stencilFail;\n\t\tif ( this.stencilZFail !== KeepStencilOp ) data.stencilZFail = this.stencilZFail;\n\t\tif ( this.stencilZPass !== KeepStencilOp ) data.stencilZPass = this.stencilZPass;\n\t\tif ( this.stencilWrite === true ) data.stencilWrite = this.stencilWrite;\n\n\t\t// rotation (SpriteMaterial)\n\t\tif ( this.rotation !== undefined && this.rotation !== 0 ) data.rotation = this.rotation;\n\n\t\tif ( this.polygonOffset === true ) data.polygonOffset = true;\n\t\tif ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;\n\t\tif ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;\n\n\t\tif ( this.linewidth !== undefined && this.linewidth !== 1 ) data.linewidth = this.linewidth;\n\t\tif ( this.dashSize !== undefined ) data.dashSize = this.dashSize;\n\t\tif ( this.gapSize !== undefined ) data.gapSize = this.gapSize;\n\t\tif ( this.scale !== undefined ) data.scale = this.scale;\n\n\t\tif ( this.dithering === true ) data.dithering = true;\n\n\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t\tif ( this.alphaHash === true ) data.alphaHash = true;\n\t\tif ( this.alphaToCoverage === true ) data.alphaToCoverage = true;\n\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = true;\n\t\tif ( this.forceSinglePass === true ) data.forceSinglePass = true;\n\n\t\tif ( this.wireframe === true ) data.wireframe = true;\n\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n\t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\n\t\tif ( this.flatShading === true ) data.flatShading = true;\n\n\t\tif ( this.visible === false ) data.visible = false;\n\n\t\tif ( this.toneMapped === false ) data.toneMapped = false;\n\n\t\tif ( this.fog === false ) data.fog = false;\n\n\t\tif ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;\n\n\t\t// TODO: Copied from Object3D.toJSON\n\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tconst values = [];\n\n\t\t\tfor ( const key in cache ) {\n\n\t\t\t\tconst data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t\tif ( isRootObject ) {\n\n\t\t\tconst textures = extractFromCache( meta.textures );\n\t\t\tconst images = extractFromCache( meta.images );\n\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\tif ( images.length > 0 ) data.images = images;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * Returns a new material with copied values from this instance.\n\t *\n\t * @return {Material} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\t/**\n\t * Copies the values of the given material to this instance.\n\t *\n\t * @param {Material} source - The material to copy.\n\t * @return {Material} A reference to this instance.\n\t */\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.blending = source.blending;\n\t\tthis.side = source.side;\n\t\tthis.vertexColors = source.vertexColors;\n\n\t\tthis.opacity = source.opacity;\n\t\tthis.transparent = source.transparent;\n\n\t\tthis.blendSrc = source.blendSrc;\n\t\tthis.blendDst = source.blendDst;\n\t\tthis.blendEquation = source.blendEquation;\n\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\t\tthis.blendColor.copy( source.blendColor );\n\t\tthis.blendAlpha = source.blendAlpha;\n\n\t\tthis.depthFunc = source.depthFunc;\n\t\tthis.depthTest = source.depthTest;\n\t\tthis.depthWrite = source.depthWrite;\n\n\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\tthis.stencilFunc = source.stencilFunc;\n\t\tthis.stencilRef = source.stencilRef;\n\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\tthis.stencilFail = source.stencilFail;\n\t\tthis.stencilZFail = source.stencilZFail;\n\t\tthis.stencilZPass = source.stencilZPass;\n\t\tthis.stencilWrite = source.stencilWrite;\n\n\t\tconst srcPlanes = source.clippingPlanes;\n\t\tlet dstPlanes = null;\n\n\t\tif ( srcPlanes !== null ) {\n\n\t\t\tconst n = srcPlanes.length;\n\t\t\tdstPlanes = new Array( n );\n\n\t\t\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.clippingPlanes = dstPlanes;\n\t\tthis.clipIntersection = source.clipIntersection;\n\t\tthis.clipShadows = source.clipShadows;\n\n\t\tthis.shadowSide = source.shadowSide;\n\n\t\tthis.colorWrite = source.colorWrite;\n\n\t\tthis.precision = source.precision;\n\n\t\tthis.polygonOffset = source.polygonOffset;\n\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\tthis.dithering = source.dithering;\n\n\t\tthis.alphaTest = source.alphaTest;\n\t\tthis.alphaHash = source.alphaHash;\n\t\tthis.alphaToCoverage = source.alphaToCoverage;\n\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\t\tthis.forceSinglePass = source.forceSinglePass;\n\n\t\tthis.visible = source.visible;\n\n\t\tthis.toneMapped = source.toneMapped;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t *\n\t * @fires Material#dispose\n\t */\n\tdispose() {\n\n\t\t/**\n\t\t * Fires when the material has been disposed of.\n\t\t *\n\t\t * @event Material#dispose\n\t\t * @type {Object}\n\t\t */\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\t/**\n\t * Setting this property to `true` indicates the engine the material\n\t * needs to be recompiled.\n\t *\n\t * @type {boolean}\n\t * @default false\n\t * @param {boolean} value\n\t */\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n}\n\n/**\n * A material for drawing geometries in a simple shaded (flat or wireframe) way.\n *\n * This material is not affected by lights.\n *\n * @augments Material\n */\nclass MeshBasicMaterial extends Material {\n\n\t/**\n\t * Constructs a new mesh basic material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMeshBasicMaterial = true;\n\n\t\tthis.type = 'MeshBasicMaterial';\n\n\t\t/**\n\t\t * Color of the material.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */\n\t\tthis.color = new Color( 0xffffff ); // emissive\n\n\t\t/**\n\t\t * The color map. May optionally include an alpha channel, typically combined\n\t\t * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n\t\t * color is modulated by the diffuse `color`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.map = null;\n\n\t\t/**\n\t\t * The light map. Requires a second set of UVs.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.lightMap = null;\n\n\t\t/**\n\t\t * Intensity of the baked light.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\t/**\n\t\t * The red channel of this texture is used as the ambient occlusion map.\n\t\t * Requires a second set of UVs.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.aoMap = null;\n\n\t\t/**\n\t\t * Intensity of the ambient occlusion effect. Range is `[0,1]`, where `0`\n\t\t * disables ambient occlusion. Where intensity is `1` and the AO map's\n\t\t * red channel is also `1`, ambient light is fully occluded on a surface.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\t/**\n\t\t * Specular map used by the material.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.specularMap = null;\n\n\t\t/**\n\t\t * The alpha map is a grayscale texture that controls the opacity across the\n\t\t * surface (black: fully transparent; white: fully opaque).\n\t\t *\n\t\t * Only the color of the texture is used, ignoring the alpha channel if one\n\t\t * exists. For RGB and RGBA textures, the renderer will use the green channel\n\t\t * when sampling this texture due to the extra bit of precision provided for\n\t\t * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n\t\t * luminance/alpha textures will also still work as expected.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.alphaMap = null;\n\n\t\t/**\n\t\t * The environment map.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.envMap = null;\n\n\t\t/**\n\t\t * The rotation of the environment map in radians.\n\t\t *\n\t\t * @type {Euler}\n\t\t * @default (0,0,0)\n\t\t */\n\t\tthis.envMapRotation = new Euler();\n\n\t\t/**\n\t\t * How to combine the result of the surface's color with the environment map, if any.\n\t\t *\n\t\t * When set to `MixOperation`, the {@link MeshBasicMaterial#reflectivity} is used to\n\t\t * blend between the two colors.\n\t\t *\n\t\t * @type {(MultiplyOperation|MixOperation|AddOperation)}\n\t\t * @default MultiplyOperation\n\t\t */\n\t\tthis.combine = MultiplyOperation;\n\n\t\t/**\n\t\t * How much the environment map affects the surface.\n\t\t * The valid range is between `0` (no reflections) and `1` (full reflections).\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.reflectivity = 1;\n\n\t\t/**\n\t\t * The index of refraction (IOR) of air (approximately 1) divided by the\n\t\t * index of refraction of the material. It is used with environment mapping\n\t\t * modes {@link CubeRefractionMapping} and {@link EquirectangularRefractionMapping}.\n\t\t * The refraction ratio should not exceed `1`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.98\n\t\t */\n\t\tthis.refractionRatio = 0.98;\n\n\t\t/**\n\t\t * Renders the geometry as a wireframe.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.wireframe = false;\n\n\t\t/**\n\t\t * Controls the thickness of the wireframe.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.wireframeLinewidth = 1;\n\n\t\t/**\n\t\t * Defines appearance of wireframe ends.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('round'|'bevel'|'miter')}\n\t\t * @default 'round'\n\t\t */\n\t\tthis.wireframeLinecap = 'round';\n\n\t\t/**\n\t\t * Defines appearance of wireframe joints.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('round'|'bevel'|'miter')}\n\t\t * @default 'round'\n\t\t */\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\t/**\n\t\t * Whether the material is affected by fog or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapRotation.copy( source.envMapRotation );\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\n// Fast Half Float Conversions, http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n\nconst _tables = /*@__PURE__*/ _generateTables();\n\nfunction _generateTables() {\n\n\t// float32 to float16 helpers\n\n\tconst buffer = new ArrayBuffer( 4 );\n\tconst floatView = new Float32Array( buffer );\n\tconst uint32View = new Uint32Array( buffer );\n\n\tconst baseTable = new Uint32Array( 512 );\n\tconst shiftTable = new Uint32Array( 512 );\n\n\tfor ( let i = 0; i < 256; ++ i ) {\n\n\t\tconst e = i - 127;\n\n\t\t// very small number (0, -0)\n\n\t\tif ( e < -27 ) {\n\n\t\t\tbaseTable[ i ] = 0x0000;\n\t\t\tbaseTable[ i | 0x100 ] = 0x8000;\n\t\t\tshiftTable[ i ] = 24;\n\t\t\tshiftTable[ i | 0x100 ] = 24;\n\n\t\t\t// small number (denorm)\n\n\t\t} else if ( e < -14 ) {\n\n\t\t\tbaseTable[ i ] = 0x0400 >> ( - e - 14 );\n\t\t\tbaseTable[ i | 0x100 ] = ( 0x0400 >> ( - e - 14 ) ) | 0x8000;\n\t\t\tshiftTable[ i ] = - e - 1;\n\t\t\tshiftTable[ i | 0x100 ] = - e - 1;\n\n\t\t\t// normal number\n\n\t\t} else if ( e <= 15 ) {\n\n\t\t\tbaseTable[ i ] = ( e + 15 ) << 10;\n\t\t\tbaseTable[ i | 0x100 ] = ( ( e + 15 ) << 10 ) | 0x8000;\n\t\t\tshiftTable[ i ] = 13;\n\t\t\tshiftTable[ i | 0x100 ] = 13;\n\n\t\t\t// large number (Infinity, -Infinity)\n\n\t\t} else if ( e < 128 ) {\n\n\t\t\tbaseTable[ i ] = 0x7c00;\n\t\t\tbaseTable[ i | 0x100 ] = 0xfc00;\n\t\t\tshiftTable[ i ] = 24;\n\t\t\tshiftTable[ i | 0x100 ] = 24;\n\n\t\t\t// stay (NaN, Infinity, -Infinity)\n\n\t\t} else {\n\n\t\t\tbaseTable[ i ] = 0x7c00;\n\t\t\tbaseTable[ i | 0x100 ] = 0xfc00;\n\t\t\tshiftTable[ i ] = 13;\n\t\t\tshiftTable[ i | 0x100 ] = 13;\n\n\t\t}\n\n\t}\n\n\t// float16 to float32 helpers\n\n\tconst mantissaTable = new Uint32Array( 2048 );\n\tconst exponentTable = new Uint32Array( 64 );\n\tconst offsetTable = new Uint32Array( 64 );\n\n\tfor ( let i = 1; i < 1024; ++ i ) {\n\n\t\tlet m = i << 13; // zero pad mantissa bits\n\t\tlet e = 0; // zero exponent\n\n\t\t// normalized\n\t\twhile ( ( m & 0x00800000 ) === 0 ) {\n\n\t\t\tm <<= 1;\n\t\t\te -= 0x00800000; // decrement exponent\n\n\t\t}\n\n\t\tm &= -8388609; // clear leading 1 bit\n\t\te += 0x38800000; // adjust bias\n\n\t\tmantissaTable[ i ] = m | e;\n\n\t}\n\n\tfor ( let i = 1024; i < 2048; ++ i ) {\n\n\t\tmantissaTable[ i ] = 0x38000000 + ( ( i - 1024 ) << 13 );\n\n\t}\n\n\tfor ( let i = 1; i < 31; ++ i ) {\n\n\t\texponentTable[ i ] = i << 23;\n\n\t}\n\n\texponentTable[ 31 ] = 0x47800000;\n\texponentTable[ 32 ] = 0x80000000;\n\n\tfor ( let i = 33; i < 63; ++ i ) {\n\n\t\texponentTable[ i ] = 0x80000000 + ( ( i - 32 ) << 23 );\n\n\t}\n\n\texponentTable[ 63 ] = 0xc7800000;\n\n\tfor ( let i = 1; i < 64; ++ i ) {\n\n\t\tif ( i !== 32 ) {\n\n\t\t\toffsetTable[ i ] = 1024;\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\tfloatView: floatView,\n\t\tuint32View: uint32View,\n\t\tbaseTable: baseTable,\n\t\tshiftTable: shiftTable,\n\t\tmantissaTable: mantissaTable,\n\t\texponentTable: exponentTable,\n\t\toffsetTable: offsetTable\n\t};\n\n}\n\n/**\n * Returns a half precision floating point value (FP16) from the given single\n * precision floating point value (FP32).\n *\n * @param {number} val - A single precision floating point value.\n * @return {number} The FP16 value.\n */\nfunction toHalfFloat( val ) {\n\n\tif ( Math.abs( val ) > 65504 ) console.warn( 'THREE.DataUtils.toHalfFloat(): Value out of range.' );\n\n\tval = clamp( val, -65504, 65504 );\n\n\t_tables.floatView[ 0 ] = val;\n\tconst f = _tables.uint32View[ 0 ];\n\tconst e = ( f >> 23 ) & 0x1ff;\n\treturn _tables.baseTable[ e ] + ( ( f & 0x007fffff ) >> _tables.shiftTable[ e ] );\n\n}\n\n/**\n * Returns a single precision floating point value (FP32) from the given half\n * precision floating point value (FP16).\n *\n * @param {number} val - A half precision floating point value.\n * @return {number} The FP32 value.\n */\nfunction fromHalfFloat( val ) {\n\n\tconst m = val >> 10;\n\t_tables.uint32View[ 0 ] = _tables.mantissaTable[ _tables.offsetTable[ m ] + ( val & 0x3ff ) ] + _tables.exponentTable[ m ];\n\treturn _tables.floatView[ 0 ];\n\n}\n\n/**\n * A class containing utility functions for data.\n *\n * @hideconstructor\n */\nclass DataUtils {\n\n\t/**\n\t * Returns a half precision floating point value (FP16) from the given single\n\t * precision floating point value (FP32).\n\t *\n\t * @param {number} val - A single precision floating point value.\n\t * @return {number} The FP16 value.\n\t */\n\tstatic toHalfFloat( val ) {\n\n\t\treturn toHalfFloat( val );\n\n\t}\n\n\t/**\n\t * Returns a single precision floating point value (FP32) from the given half\n\t * precision floating point value (FP16).\n\t *\n\t * @param {number} val - A half precision floating point value.\n\t * @return {number} The FP32 value.\n\t */\n\tstatic fromHalfFloat( val ) {\n\n\t\treturn fromHalfFloat( val );\n\n\t}\n\n}\n\nconst _vector$9 = /*@__PURE__*/ new Vector3();\nconst _vector2$1 = /*@__PURE__*/ new Vector2();\n\nlet _id$2 = 0;\n\n/**\n * This class stores data for an attribute (such as vertex positions, face\n * indices, normals, colors, UVs, and any custom attributes ) associated with\n * a geometry, which allows for more efficient passing of data to the GPU.\n *\n * When working with vector-like data, the `fromBufferAttribute( attribute, index )`\n * helper methods on vector and color class might be helpful. E.g. {@link Vector3#fromBufferAttribute}.\n */\nclass BufferAttribute {\n\n\t/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {TypedArray} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */\n\tconstructor( array, itemSize, normalized = false ) {\n\n\t\tif ( Array.isArray( array ) ) {\n\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t}\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isBufferAttribute = true;\n\n\t\t/**\n\t\t * The ID of the buffer attribute.\n\t\t *\n\t\t * @name BufferAttribute#id\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */\n\t\tObject.defineProperty( this, 'id', { value: _id$2 ++ } );\n\n\t\t/**\n\t\t * The name of the buffer attribute.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = '';\n\n\t\t/**\n\t\t * The array holding the attribute data. It should have `itemSize * numVertices`\n\t\t * elements, where `numVertices` is the number of vertices in the associated geometry.\n\t\t *\n\t\t * @type {TypedArray}\n\t\t */\n\t\tthis.array = array;\n\n\t\t/**\n\t\t * The number of values of the array that should be associated with a particular vertex.\n\t\t * For instance, if this attribute is storing a 3-component vector (such as a position,\n\t\t * normal, or color), then the value should be `3`.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.itemSize = itemSize;\n\n\t\t/**\n\t\t * Represents the number of items this buffer attribute stores. It is internally computed\n\t\t * by dividing the `array` length by the `itemSize`.\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\n\t\t/**\n\t\t * Applies to integer data only. Indicates how the underlying data in the buffer maps to\n\t\t * the values in the GLSL code. For instance, if `array` is an instance of `UInt16Array`,\n\t\t * and `normalized` is `true`, the values `0 -+65535` in the array data will be mapped to\n\t\t * `0.0f - +1.0f` in the GLSL attribute. If `normalized` is `false`, the values will be converted\n\t\t * to floats unmodified, i.e. `65535` becomes `65535.0f`.\n\t\t *\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.normalized = normalized;\n\n\t\t/**\n\t\t * Defines the intended usage pattern of the data store for optimization purposes.\n\t\t *\n\t\t * Note: After the initial use of a buffer, its usage cannot be changed. Instead,\n\t\t * instantiate a new one and set the desired usage before the next render.\n\t\t *\n\t\t * @type {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)}\n\t\t * @default StaticDrawUsage\n\t\t */\n\t\tthis.usage = StaticDrawUsage;\n\n\t\t/**\n\t\t * This can be used to only update some components of stored vectors (for example, just the\n\t\t * component related to color). Use the `addUpdateRange()` function to add ranges to this array.\n\t\t *\n\t\t * @type {Array<Object>}\n\t\t */\n\t\tthis.updateRanges = [];\n\n\t\t/**\n\t\t * Configures the bound GPU type for use in shaders.\n\t\t *\n\t\t * Note: this only has an effect for integer arrays and is not configurable for float arrays.\n\t\t * For lower precision float types, use `Float16BufferAttribute`.\n\t\t *\n\t\t * @type {(FloatType|IntType)}\n\t\t * @default FloatType\n\t\t */\n\t\tthis.gpuType = FloatType;\n\n\t\t/**\n\t\t * A version number, incremented every time the `needsUpdate` is set to `true`.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.version = 0;\n\n\t}\n\n\t/**\n\t * A callback function that is executed after the renderer has transferred the attribute\n\t * array data to the GPU.\n\t */\n\tonUploadCallback() {}\n\n\t/**\n\t * Flag to indicate that this attribute has changed and should be re-sent to\n\t * the GPU. Set this to `true` when you modify the value of the array.\n\t *\n\t * @type {number}\n\t * @default false\n\t * @param {boolean} value\n\t */\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\t/**\n\t * Sets the usage of this buffer attribute.\n\t *\n\t * @param {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)} value - The usage to set.\n\t * @return {BufferAttribute} A reference to this buffer attribute.\n\t */\n\tsetUsage( value ) {\n\n\t\tthis.usage = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds a range of data in the data array to be updated on the GPU.\n\t *\n\t * @param {number} start - Position at which to start update.\n\t * @param {number} count - The number of components to update.\n\t */\n\taddUpdateRange( start, count ) {\n\n\t\tthis.updateRanges.push( { start, count } );\n\n\t}\n\n\t/**\n\t * Clears the update ranges.\n\t */\n\tclearUpdateRanges() {\n\n\t\tthis.updateRanges.length = 0;\n\n\t}\n\n\t/**\n\t * Copies the values of the given buffer attribute to this instance.\n\t *\n\t * @param {BufferAttribute} source - The buffer attribute to copy.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.itemSize = source.itemSize;\n\t\tthis.count = source.count;\n\t\tthis.normalized = source.normalized;\n\n\t\tthis.usage = source.usage;\n\t\tthis.gpuType = source.gpuType;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies a vector from the given buffer attribute to this one. The start\n\t * and destination position in the attribute buffers are represented by the\n\t * given indices.\n\t *\n\t * @param {number} index1 - The destination index into this buffer attribute.\n\t * @param {BufferAttribute} attribute - The buffer attribute to copy from.\n\t * @param {number} index2 - The source index into the given buffer attribute.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tcopyAt( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.itemSize;\n\t\tindex2 *= attribute.itemSize;\n\n\t\tfor ( let i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the given array data into this buffer attribute.\n\t *\n\t * @param {(TypedArray|Array)} array - The array to copy.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tcopyArray( array ) {\n\n\t\tthis.array.set( array );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Applies the given 3x3 matrix to the given attribute. Works with\n\t * item size `2` and `3`.\n\t *\n\t * @param {Matrix3} m - The matrix to apply.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tapplyMatrix3( m ) {\n\n\t\tif ( this.itemSize === 2 ) {\n\n\t\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector2$1.fromBufferAttribute( this, i );\n\t\t\t\t_vector2$1.applyMatrix3( m );\n\n\t\t\t\tthis.setXY( i, _vector2$1.x, _vector2$1.y );\n\n\t\t\t}\n\n\t\t} else if ( this.itemSize === 3 ) {\n\n\t\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$9.fromBufferAttribute( this, i );\n\t\t\t\t_vector$9.applyMatrix3( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Applies the given 4x4 matrix to the given attribute. Only works with\n\t * item size `3`.\n\t *\n\t * @param {Matrix4} m - The matrix to apply.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tapplyMatrix4( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$9.fromBufferAttribute( this, i );\n\n\t\t\t_vector$9.applyMatrix4( m );\n\n\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Applies the given 3x3 normal matrix to the given attribute. Only works with\n\t * item size `3`.\n\t *\n\t * @param {Matrix3} m - The normal matrix to apply.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tapplyNormalMatrix( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$9.fromBufferAttribute( this, i );\n\n\t\t\t_vector$9.applyNormalMatrix( m );\n\n\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Applies the given 4x4 matrix to the given attribute. Only works with\n\t * item size `3` and with direction vectors.\n\t *\n\t * @param {Matrix4} m - The matrix to apply.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\ttransformDirection( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$9.fromBufferAttribute( this, i );\n\n\t\t\t_vector$9.transformDirection( m );\n\n\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given array data in the buffer attribute.\n\t *\n\t * @param {(TypedArray|Array)} value - The array data to set.\n\t * @param {number} [offset=0] - The offset in this buffer attribute's array.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tset( value, offset = 0 ) {\n\n\t\t// Matching BufferAttribute constructor, do not normalize the array.\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the given component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} component - The component index.\n\t * @return {number} The returned value.\n\t */\n\tgetComponent( index, component ) {\n\n\t\tlet value = this.array[ index * this.itemSize + component ];\n\n\t\tif ( this.normalized ) value = denormalize( value, this.array );\n\n\t\treturn value;\n\n\t}\n\n\t/**\n\t * Sets the given value to the given component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} component - The component index.\n\t * @param {number} value - The value to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tsetComponent( index, component, value ) {\n\n\t\tif ( this.normalized ) value = normalize( value, this.array );\n\n\t\tthis.array[ index * this.itemSize + component ] = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the x component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @return {number} The x component.\n\t */\n\tgetX( index ) {\n\n\t\tlet x = this.array[ index * this.itemSize ];\n\n\t\tif ( this.normalized ) x = denormalize( x, this.array );\n\n\t\treturn x;\n\n\t}\n\n\t/**\n\t * Sets the x component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} x - The value to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tsetX( index, x ) {\n\n\t\tif ( this.normalized ) x = normalize( x, this.array );\n\n\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the y component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @return {number} The y component.\n\t */\n\tgetY( index ) {\n\n\t\tlet y = this.array[ index * this.itemSize + 1 ];\n\n\t\tif ( this.normalized ) y = denormalize( y, this.array );\n\n\t\treturn y;\n\n\t}\n\n\t/**\n\t * Sets the y component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} y - The value to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tsetY( index, y ) {\n\n\t\tif ( this.normalized ) y = normalize( y, this.array );\n\n\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the z component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @return {number} The z component.\n\t */\n\tgetZ( index ) {\n\n\t\tlet z = this.array[ index * this.itemSize + 2 ];\n\n\t\tif ( this.normalized ) z = denormalize( z, this.array );\n\n\t\treturn z;\n\n\t}\n\n\t/**\n\t * Sets the z component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} z - The value to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tsetZ( index, z ) {\n\n\t\tif ( this.normalized ) z = normalize( z, this.array );\n\n\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the w component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @return {number} The w component.\n\t */\n\tgetW( index ) {\n\n\t\tlet w = this.array[ index * this.itemSize + 3 ];\n\n\t\tif ( this.normalized ) w = denormalize( w, this.array );\n\n\t\treturn w;\n\n\t}\n\n\t/**\n\t * Sets the w component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} w - The value to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tsetW( index, w ) {\n\n\t\tif ( this.normalized ) w = normalize( w, this.array );\n\n\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the x and y component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} x - The value for the x component to set.\n\t * @param {number} y - The value for the y component to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tsetXY( index, x, y ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the x, y and z component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} x - The value for the x component to set.\n\t * @param {number} y - The value for the y component to set.\n\t * @param {number} z - The value for the z component to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tsetXYZ( index, x, y, z ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the x, y, z and w component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} x - The value for the x component to set.\n\t * @param {number} y - The value for the y component to set.\n\t * @param {number} z - The value for the z component to set.\n\t * @param {number} w - The value for the w component to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tsetXYZW( index, x, y, z, w ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\t\t\tw = normalize( w, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\t\tthis.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given callback function that is executed after the Renderer has transferred\n\t * the attribute array data to the GPU. Can be used to perform clean-up operations after\n\t * the upload when attribute data are not needed anymore on the CPU side.\n\t *\n\t * @param {Function} callback - The `onUpload()` callback.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tonUpload( callback ) {\n\n\t\tthis.onUploadCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new buffer attribute with copied values from this instance.\n\t *\n\t * @return {BufferAttribute} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\n\n\t}\n\n\t/**\n\t * Serializes the buffer attribute into JSON.\n\t *\n\t * @return {Object} A JSON object representing the serialized buffer attribute.\n\t */\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\titemSize: this.itemSize,\n\t\t\ttype: this.array.constructor.name,\n\t\t\tarray: Array.from( this.array ),\n\t\t\tnormalized: this.normalized\n\t\t};\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\t\tif ( this.usage !== StaticDrawUsage ) data.usage = this.usage;\n\n\t\treturn data;\n\n\t}\n\n}\n\n/**\n * Convenient class that can be used when creating a `Int8` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Int8BufferAttribute extends BufferAttribute {\n\n\t/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Int8Array)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Int8Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\n/**\n * Convenient class that can be used when creating a `UInt8` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Uint8BufferAttribute extends BufferAttribute {\n\n\t/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Uint8Array)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint8Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\n/**\n * Convenient class that can be used when creating a `UInt8Clamped` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Uint8ClampedBufferAttribute extends BufferAttribute {\n\n\t/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Uint8ClampedArray)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint8ClampedArray( array ), itemSize, normalized );\n\n\t}\n\n}\n\n/**\n * Convenient class that can be used when creating a `Int16` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Int16BufferAttribute extends BufferAttribute {\n\n\t/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Int16Array)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Int16Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\n/**\n * Convenient class that can be used when creating a `UInt16` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Uint16BufferAttribute extends BufferAttribute {\n\n\t/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Uint16Array)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint16Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\n/**\n * Convenient class that can be used when creating a `Int32` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Int32BufferAttribute extends BufferAttribute {\n\n\t/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Int32Array)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Int32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\n/**\n * Convenient class that can be used when creating a `UInt32` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Uint32BufferAttribute extends BufferAttribute {\n\n\t/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Uint32Array)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\n/**\n * Convenient class that can be used when creating a `Float16` buffer attribute with\n * a plain `Array` instance.\n *\n * This class automatically converts to and from FP16 since `Float16Array` is not\n * natively supported in JavaScript.\n *\n * @augments BufferAttribute\n */\nclass Float16BufferAttribute extends BufferAttribute {\n\n\t/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Uint16Array)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint16Array( array ), itemSize, normalized );\n\n\t\tthis.isFloat16BufferAttribute = true;\n\n\t}\n\n\tgetX( index ) {\n\n\t\tlet x = fromHalfFloat( this.array[ index * this.itemSize ] );\n\n\t\tif ( this.normalized ) x = denormalize( x, this.array );\n\n\t\treturn x;\n\n\t}\n\n\tsetX( index, x ) {\n\n\t\tif ( this.normalized ) x = normalize( x, this.array );\n\n\t\tthis.array[ index * this.itemSize ] = toHalfFloat( x );\n\n\t\treturn this;\n\n\t}\n\n\tgetY( index ) {\n\n\t\tlet y = fromHalfFloat( this.array[ index * this.itemSize + 1 ] );\n\n\t\tif ( this.normalized ) y = denormalize( y, this.array );\n\n\t\treturn y;\n\n\t}\n\n\tsetY( index, y ) {\n\n\t\tif ( this.normalized ) y = normalize( y, this.array );\n\n\t\tthis.array[ index * this.itemSize + 1 ] = toHalfFloat( y );\n\n\t\treturn this;\n\n\t}\n\n\tgetZ( index ) {\n\n\t\tlet z = fromHalfFloat( this.array[ index * this.itemSize + 2 ] );\n\n\t\tif ( this.normalized ) z = denormalize( z, this.array );\n\n\t\treturn z;\n\n\t}\n\n\tsetZ( index, z ) {\n\n\t\tif ( this.normalized ) z = normalize( z, this.array );\n\n\t\tthis.array[ index * this.itemSize + 2 ] = toHalfFloat( z );\n\n\t\treturn this;\n\n\t}\n\n\tgetW( index ) {\n\n\t\tlet w = fromHalfFloat( this.array[ index * this.itemSize + 3 ] );\n\n\t\tif ( this.normalized ) w = denormalize( w, this.array );\n\n\t\treturn w;\n\n\t}\n\n\tsetW( index, w ) {\n\n\t\tif ( this.normalized ) w = normalize( w, this.array );\n\n\t\tthis.array[ index * this.itemSize + 3 ] = toHalfFloat( w );\n\n\t\treturn this;\n\n\t}\n\n\tsetXY( index, x, y ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = toHalfFloat( x );\n\t\tthis.array[ index + 1 ] = toHalfFloat( y );\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZ( index, x, y, z ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = toHalfFloat( x );\n\t\tthis.array[ index + 1 ] = toHalfFloat( y );\n\t\tthis.array[ index + 2 ] = toHalfFloat( z );\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZW( index, x, y, z, w ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\t\t\tw = normalize( w, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = toHalfFloat( x );\n\t\tthis.array[ index + 1 ] = toHalfFloat( y );\n\t\tthis.array[ index + 2 ] = toHalfFloat( z );\n\t\tthis.array[ index + 3 ] = toHalfFloat( w );\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * Convenient class that can be used when creating a `Float32` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Float32BufferAttribute extends BufferAttribute {\n\n\t/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Float32Array)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Float32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nlet _id$1 = 0;\n\nconst _m1 = /*@__PURE__*/ new Matrix4();\nconst _obj = /*@__PURE__*/ new Object3D();\nconst _offset = /*@__PURE__*/ new Vector3();\nconst _box$2 = /*@__PURE__*/ new Box3();\nconst _boxMorphTargets = /*@__PURE__*/ new Box3();\nconst _vector$8 = /*@__PURE__*/ new Vector3();\n\n/**\n * A representation of mesh, line, or point geometry. Includes vertex\n * positions, face indices, normals, colors, UVs, and custom attributes\n * within buffers, reducing the cost of passing all this data to the GPU.\n *\n * ```js\n * const geometry = new THREE.BufferGeometry();\n * // create a simple square shape. We duplicate the top left and bottom right\n * // vertices because each vertex needs to appear once per triangle.\n * const vertices = new Float32Array( [\n * \t-1.0, -1.0,  1.0, // v0\n * \t 1.0, -1.0,  1.0, // v1\n * \t 1.0,  1.0,  1.0, // v2\n *\n * \t 1.0,  1.0,  1.0, // v3\n * \t-1.0,  1.0,  1.0, // v4\n * \t-1.0, -1.0,  1.0  // v5\n * ] );\n * // itemSize = 3 because there are 3 values (components) per vertex\n * geometry.setAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n * const material = new THREE.MeshBasicMaterial( { color: 0xff0000 } );\n * const mesh = new THREE.Mesh( geometry, material );\n * ```\n *\n * @augments EventDispatcher\n */\nclass BufferGeometry extends EventDispatcher {\n\n\t/**\n\t * Constructs a new geometry.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isBufferGeometry = true;\n\n\t\t/**\n\t\t * The ID of the geometry.\n\t\t *\n\t\t * @name BufferGeometry#id\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */\n\t\tObject.defineProperty( this, 'id', { value: _id$1 ++ } );\n\n\t\t/**\n\t\t * The UUID of the geometry.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.uuid = generateUUID();\n\n\t\t/**\n\t\t * The name of the geometry.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\n\t\t/**\n\t\t * Allows for vertices to be re-used across multiple triangles; this is\n\t\t * called using \"indexed triangles\". Each triangle is associated with the\n\t\t * indices of three vertices. This attribute therefore stores the index of\n\t\t * each vertex for each triangular face. If this attribute is not set, the\n\t\t * renderer assumes that each three contiguous positions represent a single triangle.\n\t\t *\n\t\t * @type {?BufferAttribute}\n\t\t * @default null\n\t\t */\n\t\tthis.index = null;\n\n\t\t/**\n\t\t * A (storage) buffer attribute which was generated with a compute shader and\n\t\t * now defines indirect draw calls.\n\t\t *\n\t\t * Can only be used with {@link WebGPURenderer} and a WebGPU backend.\n\t\t *\n\t\t * @type {?BufferAttribute}\n\t\t * @default null\n\t\t */\n\t\tthis.indirect = null;\n\n\t\t/**\n\t\t * This dictionary has as id the name of the attribute to be set and as value\n\t\t * the buffer attribute to set it to. Rather than accessing this property directly,\n\t\t * use `setAttribute()` and `getAttribute()` to access attributes of this geometry.\n\t\t *\n\t\t * @type {Object<string,(BufferAttribute|InterleavedBufferAttribute)>}\n\t\t */\n\t\tthis.attributes = {};\n\n\t\t/**\n\t\t * This dictionary holds the morph targets of the geometry.\n\t\t *\n\t\t * Note: Once the geometry has been rendered, the morph attribute data cannot\n\t\t * be changed. You will have to call `dispose()?, and create a new geometry instance.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.morphAttributes = {};\n\n\t\t/**\n\t\t * Used to control the morph target behavior; when set to `true`, the morph\n\t\t * target data is treated as relative offsets, rather than as absolute\n\t\t * positions/normals.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.morphTargetsRelative = false;\n\n\t\t/**\n\t\t * Split the geometry into groups, each of which will be rendered in a\n\t\t * separate draw call. This allows an array of materials to be used with the geometry.\n\t\t *\n\t\t * Use `addGroup()` and `clearGroups()` to edit groups, rather than modifying this array directly.\n\t\t *\n\t\t * Every vertex and index must belong to exactly one group — groups must not share vertices or\n\t\t * indices, and must not leave vertices or indices unused.\n\t\t *\n\t\t * @type {Array<Object>}\n\t\t */\n\t\tthis.groups = [];\n\n\t\t/**\n\t\t * Bounding box for the geometry which can be calculated with `computeBoundingBox()`.\n\t\t *\n\t\t * @type {Box3}\n\t\t * @default null\n\t\t */\n\t\tthis.boundingBox = null;\n\n\t\t/**\n\t\t * Bounding sphere for the geometry which can be calculated with `computeBoundingSphere()`.\n\t\t *\n\t\t * @type {Sphere}\n\t\t * @default null\n\t\t */\n\t\tthis.boundingSphere = null;\n\n\t\t/**\n\t\t * Determines the part of the geometry to render. This should not be set directly,\n\t\t * instead use `setDrawRange()`.\n\t\t *\n\t\t * @type {{start:number,count:number}}\n\t\t */\n\t\tthis.drawRange = { start: 0, count: Infinity };\n\n\t\t/**\n\t\t * An object that can be used to store custom data about the geometry.\n\t\t * It should not hold references to functions as these will not be cloned.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.userData = {};\n\n\t}\n\n\t/**\n\t * Returns the index of this geometry.\n\t *\n\t * @return {?BufferAttribute} The index. Returns `null` if no index is defined.\n\t */\n\tgetIndex() {\n\n\t\treturn this.index;\n\n\t}\n\n\t/**\n\t * Sets the given index to this geometry.\n\t *\n\t * @param {Array<number>|BufferAttribute} index - The index to set.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */\n\tsetIndex( index ) {\n\n\t\tif ( Array.isArray( index ) ) {\n\n\t\t\tthis.index = new ( arrayNeedsUint32( index ) ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\n\n\t\t} else {\n\n\t\t\tthis.index = index;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given indirect attribute to this geometry.\n\t *\n\t * @param {BufferAttribute} indirect - The attribute holding indirect draw calls.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */\n\tsetIndirect( indirect ) {\n\n\t\tthis.indirect = indirect;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the indirect attribute of this geometry.\n\t *\n\t * @return {?BufferAttribute} The indirect attribute. Returns `null` if no indirect attribute is defined.\n\t */\n\tgetIndirect() {\n\n\t\treturn this.indirect;\n\n\t}\n\n\t/**\n\t * Returns the buffer attribute for the given name.\n\t *\n\t * @param {string} name - The attribute name.\n\t * @return {BufferAttribute|InterleavedBufferAttribute|undefined} The buffer attribute.\n\t * Returns `undefined` if not attribute has been found.\n\t */\n\tgetAttribute( name ) {\n\n\t\treturn this.attributes[ name ];\n\n\t}\n\n\t/**\n\t * Sets the given attribute for the given name.\n\t *\n\t * @param {string} name - The attribute name.\n\t * @param {BufferAttribute|InterleavedBufferAttribute} attribute - The attribute to set.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */\n\tsetAttribute( name, attribute ) {\n\n\t\tthis.attributes[ name ] = attribute;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Deletes the attribute for the given name.\n\t *\n\t * @param {string} name - The attribute name to delete.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */\n\tdeleteAttribute( name ) {\n\n\t\tdelete this.attributes[ name ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this geometry has an attribute for the given name.\n\t *\n\t * @param {string} name - The attribute name.\n\t * @return {boolean} Whether this geometry has an attribute for the given name or not.\n\t */\n\thasAttribute( name ) {\n\n\t\treturn this.attributes[ name ] !== undefined;\n\n\t}\n\n\t/**\n\t * Adds a group to this geometry.\n\t *\n\t * @param {number} start - The first element in this draw call. That is the first\n\t * vertex for non-indexed geometry, otherwise the first triangle index.\n\t * @param {number} count - Specifies how many vertices (or indices) are part of this group.\n\t * @param {number} [materialIndex=0] - The material array index to use.\n\t */\n\taddGroup( start, count, materialIndex = 0 ) {\n\n\t\tthis.groups.push( {\n\n\t\t\tstart: start,\n\t\t\tcount: count,\n\t\t\tmaterialIndex: materialIndex\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Clears all groups.\n\t */\n\tclearGroups() {\n\n\t\tthis.groups = [];\n\n\t}\n\n\t/**\n\t * Sets the draw range for this geometry.\n\t *\n\t * @param {number} start - The first vertex for non-indexed geometry, otherwise the first triangle index.\n\t * @param {number} count - For non-indexed BufferGeometry, `count` is the number of vertices to render.\n\t * For indexed BufferGeometry, `count` is the number of indices to render.\n\t */\n\tsetDrawRange( start, count ) {\n\n\t\tthis.drawRange.start = start;\n\t\tthis.drawRange.count = count;\n\n\t}\n\n\t/**\n\t * Applies the given 4x4 transformation matrix to the geometry.\n\t *\n\t * @param {Matrix4} matrix - The matrix to apply.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */\n\tapplyMatrix4( matrix ) {\n\n\t\tconst position = this.attributes.position;\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tposition.applyMatrix4( matrix );\n\n\t\t\tposition.needsUpdate = true;\n\n\t\t}\n\n\t\tconst normal = this.attributes.normal;\n\n\t\tif ( normal !== undefined ) {\n\n\t\t\tconst normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\tnormal.applyNormalMatrix( normalMatrix );\n\n\t\t\tnormal.needsUpdate = true;\n\n\t\t}\n\n\t\tconst tangent = this.attributes.tangent;\n\n\t\tif ( tangent !== undefined ) {\n\n\t\t\ttangent.transformDirection( matrix );\n\n\t\t\ttangent.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Applies the rotation represented by the Quaternion to the geometry.\n\t *\n\t * @param {Quaternion} q - The Quaternion to apply.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */\n\tapplyQuaternion( q ) {\n\n\t\t_m1.makeRotationFromQuaternion( q );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Rotates the geometry about the X axis. This is typically done as a one time\n\t * operation, and not during a loop. Use {@link Object3D#rotation} for typical\n\t * real-time mesh rotation.\n\t *\n\t * @param {number} angle - The angle in radians.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */\n\trotateX( angle ) {\n\n\t\t// rotate geometry around world x-axis\n\n\t\t_m1.makeRotationX( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Rotates the geometry about the Y axis. This is typically done as a one time\n\t * operation, and not during a loop. Use {@link Object3D#rotation} for typical\n\t * real-time mesh rotation.\n\t *\n\t * @param {number} angle - The angle in radians.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */\n\trotateY( angle ) {\n\n\t\t// rotate geometry around world y-axis\n\n\t\t_m1.makeRotationY( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Rotates the geometry about the Z axis. This is typically done as a one time\n\t * operation, and not during a loop. Use {@link Object3D#rotation} for typical\n\t * real-time mesh rotation.\n\t *\n\t * @param {number} angle - The angle in radians.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */\n\trotateZ( angle ) {\n\n\t\t// rotate geometry around world z-axis\n\n\t\t_m1.makeRotationZ( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Translates the geometry. This is typically done as a one time\n\t * operation, and not during a loop. Use {@link Object3D#position} for typical\n\t * real-time mesh rotation.\n\t *\n\t * @param {number} x - The x offset.\n\t * @param {number} y - The y offset.\n\t * @param {number} z - The z offset.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */\n\ttranslate( x, y, z ) {\n\n\t\t// translate geometry\n\n\t\t_m1.makeTranslation( x, y, z );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Scales the geometry. This is typically done as a one time\n\t * operation, and not during a loop. Use {@link Object3D#scale} for typical\n\t * real-time mesh rotation.\n\t *\n\t * @param {number} x - The x scale.\n\t * @param {number} y - The y scale.\n\t * @param {number} z - The z scale.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */\n\tscale( x, y, z ) {\n\n\t\t// scale geometry\n\n\t\t_m1.makeScale( x, y, z );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Rotates the geometry to face a point in 3D space. This is typically done as a one time\n\t * operation, and not during a loop. Use {@link Object3D#lookAt} for typical\n\t * real-time mesh rotation.\n\t *\n\t * @param {Vector3} vector - The target point.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */\n\tlookAt( vector ) {\n\n\t\t_obj.lookAt( vector );\n\n\t\t_obj.updateMatrix();\n\n\t\tthis.applyMatrix4( _obj.matrix );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Center the geometry based on its bounding box.\n\t *\n\t * @return {BufferGeometry} A reference to this instance.\n\t */\n\tcenter() {\n\n\t\tthis.computeBoundingBox();\n\n\t\tthis.boundingBox.getCenter( _offset ).negate();\n\n\t\tthis.translate( _offset.x, _offset.y, _offset.z );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Defines a geometry by creating a `position` attribute based on the given array of points. The array\n\t * can hold 2D or 3D vectors. When using two-dimensional data, the `z` coordinate for all vertices is\n\t * set to `0`.\n\t *\n\t * If the method is used with an existing `position` attribute, the vertex data are overwritten with the\n\t * data from the array. The length of the array must match the vertex count.\n\t *\n\t * @param {Array<Vector2>|Array<Vector3>} points - The points.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */\n\tsetFromPoints( points ) {\n\n\t\tconst positionAttribute = this.getAttribute( 'position' );\n\n\t\tif ( positionAttribute === undefined ) {\n\n\t\t\tconst position = [];\n\n\t\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tconst point = points[ i ];\n\t\t\t\tposition.push( point.x, point.y, point.z || 0 );\n\n\t\t\t}\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n\n\t\t} else {\n\n\t\t\tconst l = Math.min( points.length, positionAttribute.count ); // make sure data do not exceed buffer size\n\n\t\t\tfor ( let i = 0; i < l; i ++ ) {\n\n\t\t\t\tconst point = points[ i ];\n\t\t\t\tpositionAttribute.setXYZ( i, point.x, point.y, point.z || 0 );\n\n\t\t\t}\n\n\t\t\tif ( points.length > positionAttribute.count ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry.' );\n\n\t\t\t}\n\n\t\t\tpositionAttribute.needsUpdate = true;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes the bounding box of the geometry, and updates the `boundingBox` member.\n\t * The bounding box is not computed by the engine; it must be computed by your app.\n\t * You may need to recompute the bounding box if the geometry vertices are modified.\n\t */\n\tcomputeBoundingBox() {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tconst position = this.attributes.position;\n\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\tif ( position && position.isGLBufferAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.', this );\n\n\t\t\tthis.boundingBox.set(\n\t\t\t\tnew Vector3( - Infinity, - Infinity, - Infinity ),\n\t\t\t\tnew Vector3( + Infinity, + Infinity, + Infinity )\n\t\t\t);\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tthis.boundingBox.setFromBufferAttribute( position );\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t_box$2.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t_vector$8.addVectors( this.boundingBox.min, _box$2.min );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$8 );\n\n\t\t\t\t\t\t_vector$8.addVectors( this.boundingBox.max, _box$2.max );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$8 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$2.min );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$2.max );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t}\n\n\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Computes the bounding sphere of the geometry, and updates the `boundingSphere` member.\n\t * The engine automatically computes the bounding sphere when it is needed, e.g., for ray casting or view frustum culling.\n\t * You may need to recompute the bounding sphere if the geometry vertices are modified.\n\t */\n\tcomputeBoundingSphere() {\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tconst position = this.attributes.position;\n\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\tif ( position && position.isGLBufferAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.', this );\n\n\t\t\tthis.boundingSphere.set( new Vector3(), Infinity );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( position ) {\n\n\t\t\t// first, find the center of the bounding sphere\n\n\t\t\tconst center = this.boundingSphere.center;\n\n\t\t\t_box$2.setFromBufferAttribute( position );\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t_vector$8.addVectors( _box$2.min, _boxMorphTargets.min );\n\t\t\t\t\t\t_box$2.expandByPoint( _vector$8 );\n\n\t\t\t\t\t\t_vector$8.addVectors( _box$2.max, _boxMorphTargets.max );\n\t\t\t\t\t\t_box$2.expandByPoint( _vector$8 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t_box$2.expandByPoint( _boxMorphTargets.min );\n\t\t\t\t\t\t_box$2.expandByPoint( _boxMorphTargets.max );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_box$2.getCenter( center );\n\n\t\t\t// second, try to find a boundingSphere with a radius smaller than the\n\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\tlet maxRadiusSq = 0;\n\n\t\t\tfor ( let i = 0, il = position.count; i < il; i ++ ) {\n\n\t\t\t\t_vector$8.fromBufferAttribute( position, i );\n\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8 ) );\n\n\t\t\t}\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\tconst morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\tfor ( let j = 0, jl = morphAttribute.count; j < jl; j ++ ) {\n\n\t\t\t\t\t\t_vector$8.fromBufferAttribute( morphAttribute, j );\n\n\t\t\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t_offset.fromBufferAttribute( position, j );\n\t\t\t\t\t\t\t_vector$8.add( _offset );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Calculates and adds a tangent attribute to this geometry.\n\t *\n\t * The computation is only supported for indexed geometries and if position, normal, and uv attributes\n\t * are defined. When using a tangent space normal map, prefer the MikkTSpace algorithm provided by\n\t * {@link BufferGeometryUtils#computeMikkTSpaceTangents} instead.\n\t */\n\tcomputeTangents() {\n\n\t\tconst index = this.index;\n\t\tconst attributes = this.attributes;\n\n\t\t// based on http://www.terathon.com/code/tangent.html\n\t\t// (per vertex tangents)\n\n\t\tif ( index === null ||\n\t\t\t attributes.position === undefined ||\n\t\t\t attributes.normal === undefined ||\n\t\t\t attributes.uv === undefined ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst positionAttribute = attributes.position;\n\t\tconst normalAttribute = attributes.normal;\n\t\tconst uvAttribute = attributes.uv;\n\n\t\tif ( this.hasAttribute( 'tangent' ) === false ) {\n\n\t\t\tthis.setAttribute( 'tangent', new BufferAttribute( new Float32Array( 4 * positionAttribute.count ), 4 ) );\n\n\t\t}\n\n\t\tconst tangentAttribute = this.getAttribute( 'tangent' );\n\n\t\tconst tan1 = [], tan2 = [];\n\n\t\tfor ( let i = 0; i < positionAttribute.count; i ++ ) {\n\n\t\t\ttan1[ i ] = new Vector3();\n\t\t\ttan2[ i ] = new Vector3();\n\n\t\t}\n\n\t\tconst vA = new Vector3(),\n\t\t\tvB = new Vector3(),\n\t\t\tvC = new Vector3(),\n\n\t\t\tuvA = new Vector2(),\n\t\t\tuvB = new Vector2(),\n\t\t\tuvC = new Vector2(),\n\n\t\t\tsdir = new Vector3(),\n\t\t\ttdir = new Vector3();\n\n\t\tfunction handleTriangle( a, b, c ) {\n\n\t\t\tvA.fromBufferAttribute( positionAttribute, a );\n\t\t\tvB.fromBufferAttribute( positionAttribute, b );\n\t\t\tvC.fromBufferAttribute( positionAttribute, c );\n\n\t\t\tuvA.fromBufferAttribute( uvAttribute, a );\n\t\t\tuvB.fromBufferAttribute( uvAttribute, b );\n\t\t\tuvC.fromBufferAttribute( uvAttribute, c );\n\n\t\t\tvB.sub( vA );\n\t\t\tvC.sub( vA );\n\n\t\t\tuvB.sub( uvA );\n\t\t\tuvC.sub( uvA );\n\n\t\t\tconst r = 1.0 / ( uvB.x * uvC.y - uvC.x * uvB.y );\n\n\t\t\t// silently ignore degenerate uv triangles having coincident or colinear vertices\n\n\t\t\tif ( ! isFinite( r ) ) return;\n\n\t\t\tsdir.copy( vB ).multiplyScalar( uvC.y ).addScaledVector( vC, - uvB.y ).multiplyScalar( r );\n\t\t\ttdir.copy( vC ).multiplyScalar( uvB.x ).addScaledVector( vB, - uvC.x ).multiplyScalar( r );\n\n\t\t\ttan1[ a ].add( sdir );\n\t\t\ttan1[ b ].add( sdir );\n\t\t\ttan1[ c ].add( sdir );\n\n\t\t\ttan2[ a ].add( tdir );\n\t\t\ttan2[ b ].add( tdir );\n\t\t\ttan2[ c ].add( tdir );\n\n\t\t}\n\n\t\tlet groups = this.groups;\n\n\t\tif ( groups.length === 0 ) {\n\n\t\t\tgroups = [ {\n\t\t\t\tstart: 0,\n\t\t\t\tcount: index.count\n\t\t\t} ];\n\n\t\t}\n\n\t\tfor ( let i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tconst group = groups[ i ];\n\n\t\t\tconst start = group.start;\n\t\t\tconst count = group.count;\n\n\t\t\tfor ( let j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleTriangle(\n\t\t\t\t\tindex.getX( j + 0 ),\n\t\t\t\t\tindex.getX( j + 1 ),\n\t\t\t\t\tindex.getX( j + 2 )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst tmp = new Vector3(), tmp2 = new Vector3();\n\t\tconst n = new Vector3(), n2 = new Vector3();\n\n\t\tfunction handleVertex( v ) {\n\n\t\t\tn.fromBufferAttribute( normalAttribute, v );\n\t\t\tn2.copy( n );\n\n\t\t\tconst t = tan1[ v ];\n\n\t\t\t// Gram-Schmidt orthogonalize\n\n\t\t\ttmp.copy( t );\n\t\t\ttmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();\n\n\t\t\t// Calculate handedness\n\n\t\t\ttmp2.crossVectors( n2, t );\n\t\t\tconst test = tmp2.dot( tan2[ v ] );\n\t\t\tconst w = ( test < 0.0 ) ? -1 : 1.0;\n\n\t\t\ttangentAttribute.setXYZW( v, tmp.x, tmp.y, tmp.z, w );\n\n\t\t}\n\n\t\tfor ( let i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tconst group = groups[ i ];\n\n\t\t\tconst start = group.start;\n\t\t\tconst count = group.count;\n\n\t\t\tfor ( let j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleVertex( index.getX( j + 0 ) );\n\t\t\t\thandleVertex( index.getX( j + 1 ) );\n\t\t\t\thandleVertex( index.getX( j + 2 ) );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Computes vertex normals for the given vertex data. For indexed geometries, the method sets\n\t * each vertex normal to be the average of the face normals of the faces that share that vertex.\n\t * For non-indexed geometries, vertices are not shared, and the method sets each vertex normal\n\t * to be the same as the face normal.\n\t */\n\tcomputeVertexNormals() {\n\n\t\tconst index = this.index;\n\t\tconst positionAttribute = this.getAttribute( 'position' );\n\n\t\tif ( positionAttribute !== undefined ) {\n\n\t\t\tlet normalAttribute = this.getAttribute( 'normal' );\n\n\t\t\tif ( normalAttribute === undefined ) {\n\n\t\t\t\tnormalAttribute = new BufferAttribute( new Float32Array( positionAttribute.count * 3 ), 3 );\n\t\t\t\tthis.setAttribute( 'normal', normalAttribute );\n\n\t\t\t} else {\n\n\t\t\t\t// reset existing normals to zero\n\n\t\t\t\tfor ( let i = 0, il = normalAttribute.count; i < il; i ++ ) {\n\n\t\t\t\t\tnormalAttribute.setXYZ( i, 0, 0, 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\n\t\t\tconst nA = new Vector3(), nB = new Vector3(), nC = new Vector3();\n\t\t\tconst cb = new Vector3(), ab = new Vector3();\n\n\t\t\t// indexed elements\n\n\t\t\tif ( index ) {\n\n\t\t\t\tfor ( let i = 0, il = index.count; i < il; i += 3 ) {\n\n\t\t\t\t\tconst vA = index.getX( i + 0 );\n\t\t\t\t\tconst vB = index.getX( i + 1 );\n\t\t\t\t\tconst vC = index.getX( i + 2 );\n\n\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, vA );\n\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, vB );\n\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, vC );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnA.fromBufferAttribute( normalAttribute, vA );\n\t\t\t\t\tnB.fromBufferAttribute( normalAttribute, vB );\n\t\t\t\t\tnC.fromBufferAttribute( normalAttribute, vC );\n\n\t\t\t\t\tnA.add( cb );\n\t\t\t\t\tnB.add( cb );\n\t\t\t\t\tnC.add( cb );\n\n\t\t\t\t\tnormalAttribute.setXYZ( vA, nA.x, nA.y, nA.z );\n\t\t\t\t\tnormalAttribute.setXYZ( vB, nB.x, nB.y, nB.z );\n\t\t\t\t\tnormalAttribute.setXYZ( vC, nC.x, nC.y, nC.z );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\tfor ( let i = 0, il = positionAttribute.count; i < il; i += 3 ) {\n\n\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, i + 0 );\n\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, i + 1 );\n\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, i + 2 );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnormalAttribute.setXYZ( i + 0, cb.x, cb.y, cb.z );\n\t\t\t\t\tnormalAttribute.setXYZ( i + 1, cb.x, cb.y, cb.z );\n\t\t\t\t\tnormalAttribute.setXYZ( i + 2, cb.x, cb.y, cb.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.normalizeNormals();\n\n\t\t\tnormalAttribute.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Ensures every normal vector in a geometry will have a magnitude of `1`. This will\n\t * correct lighting on the geometry surfaces.\n\t */\n\tnormalizeNormals() {\n\n\t\tconst normals = this.attributes.normal;\n\n\t\tfor ( let i = 0, il = normals.count; i < il; i ++ ) {\n\n\t\t\t_vector$8.fromBufferAttribute( normals, i );\n\n\t\t\t_vector$8.normalize();\n\n\t\t\tnormals.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Return a new non-index version of this indexed geometry. If the geometry\n\t * is already non-indexed, the method is a NOOP.\n\t *\n\t * @return {BufferGeometry} The non-indexed version of this indexed geometry.\n\t */\n\ttoNonIndexed() {\n\n\t\tfunction convertBufferAttribute( attribute, indices ) {\n\n\t\t\tconst array = attribute.array;\n\t\t\tconst itemSize = attribute.itemSize;\n\t\t\tconst normalized = attribute.normalized;\n\n\t\t\tconst array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\tlet index = 0, index2 = 0;\n\n\t\t\tfor ( let i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\tindex = indices[ i ] * attribute.data.stride + attribute.offset;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new BufferAttribute( array2, itemSize, normalized );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.index === null ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.' );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst geometry2 = new BufferGeometry();\n\n\t\tconst indices = this.index.array;\n\t\tconst attributes = this.attributes;\n\n\t\t// attributes\n\n\t\tfor ( const name in attributes ) {\n\n\t\t\tconst attribute = attributes[ name ];\n\n\t\t\tconst newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\tgeometry2.setAttribute( name, newAttribute );\n\n\t\t}\n\n\t\t// morph attributes\n\n\t\tconst morphAttributes = this.morphAttributes;\n\n\t\tfor ( const name in morphAttributes ) {\n\n\t\t\tconst morphArray = [];\n\t\t\tconst morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\tfor ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {\n\n\t\t\t\tconst attribute = morphAttribute[ i ];\n\n\t\t\t\tconst newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\t\tmorphArray.push( newAttribute );\n\n\t\t\t}\n\n\t\t\tgeometry2.morphAttributes[ name ] = morphArray;\n\n\t\t}\n\n\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t// groups\n\n\t\tconst groups = this.groups;\n\n\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tconst group = groups[ i ];\n\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\treturn geometry2;\n\n\t}\n\n\t/**\n\t * Serializes the geometry into JSON.\n\t *\n\t * @return {Object} A JSON object representing the serialized geometry.\n\t */\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.6,\n\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard BufferGeometry serialization\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\t\tif ( this.name !== '' ) data.name = this.name;\n\t\tif ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;\n\n\t\tif ( this.parameters !== undefined ) {\n\n\t\t\tconst parameters = this.parameters;\n\n\t\t\tfor ( const key in parameters ) {\n\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\t// for simplicity the code assumes attributes are not shared across geometries, see #15811\n\n\t\tdata.data = { attributes: {} };\n\n\t\tconst index = this.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tdata.data.index = {\n\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call( index.array )\n\t\t\t};\n\n\t\t}\n\n\t\tconst attributes = this.attributes;\n\n\t\tfor ( const key in attributes ) {\n\n\t\t\tconst attribute = attributes[ key ];\n\n\t\t\tdata.data.attributes[ key ] = attribute.toJSON( data.data );\n\n\t\t}\n\n\t\tconst morphAttributes = {};\n\t\tlet hasMorphAttributes = false;\n\n\t\tfor ( const key in this.morphAttributes ) {\n\n\t\t\tconst attributeArray = this.morphAttributes[ key ];\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\tconst attribute = attributeArray[ i ];\n\n\t\t\t\tarray.push( attribute.toJSON( data.data ) );\n\n\t\t\t}\n\n\t\t\tif ( array.length > 0 ) {\n\n\t\t\t\tmorphAttributes[ key ] = array;\n\n\t\t\t\thasMorphAttributes = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( hasMorphAttributes ) {\n\n\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t}\n\n\t\tconst groups = this.groups;\n\n\t\tif ( groups.length > 0 ) {\n\n\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t}\n\n\t\tconst boundingSphere = this.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tdata.data.boundingSphere = {\n\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\tradius: boundingSphere.radius\n\t\t\t};\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * Returns a new geometry with copied values from this instance.\n\t *\n\t * @return {BufferGeometry} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\t/**\n\t * Copies the values of the given geometry to this instance.\n\t *\n\t * @param {BufferGeometry} source - The geometry to copy.\n\t * @return {BufferGeometry} A reference to this instance.\n\t */\n\tcopy( source ) {\n\n\t\t// reset\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\t\tthis.morphAttributes = {};\n\t\tthis.groups = [];\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// used for storing cloned, shared data\n\n\t\tconst data = {};\n\n\t\t// name\n\n\t\tthis.name = source.name;\n\n\t\t// index\n\n\t\tconst index = source.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tthis.setIndex( index.clone() );\n\n\t\t}\n\n\t\t// attributes\n\n\t\tconst attributes = source.attributes;\n\n\t\tfor ( const name in attributes ) {\n\n\t\t\tconst attribute = attributes[ name ];\n\t\t\tthis.setAttribute( name, attribute.clone( data ) );\n\n\t\t}\n\n\t\t// morph attributes\n\n\t\tconst morphAttributes = source.morphAttributes;\n\n\t\tfor ( const name in morphAttributes ) {\n\n\t\t\tconst array = [];\n\t\t\tconst morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\tfor ( let i = 0, l = morphAttribute.length; i < l; i ++ ) {\n\n\t\t\t\tarray.push( morphAttribute[ i ].clone( data ) );\n\n\t\t\t}\n\n\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t}\n\n\t\tthis.morphTargetsRelative = source.morphTargetsRelative;\n\n\t\t// groups\n\n\t\tconst groups = source.groups;\n\n\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tconst group = groups[ i ];\n\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\t// bounding box\n\n\t\tconst boundingBox = source.boundingBox;\n\n\t\tif ( boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t}\n\n\t\t// bounding sphere\n\n\t\tconst boundingSphere = source.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t}\n\n\t\t// draw range\n\n\t\tthis.drawRange.start = source.drawRange.start;\n\t\tthis.drawRange.count = source.drawRange.count;\n\n\t\t// user data\n\n\t\tthis.userData = source.userData;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t *\n\t * @fires BufferGeometry#dispose\n\t */\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n}\n\nconst _inverseMatrix$3 = /*@__PURE__*/ new Matrix4();\nconst _ray$3 = /*@__PURE__*/ new Ray();\nconst _sphere$6 = /*@__PURE__*/ new Sphere();\nconst _sphereHitAt = /*@__PURE__*/ new Vector3();\n\nconst _vA$1 = /*@__PURE__*/ new Vector3();\nconst _vB$1 = /*@__PURE__*/ new Vector3();\nconst _vC$1 = /*@__PURE__*/ new Vector3();\n\nconst _tempA = /*@__PURE__*/ new Vector3();\nconst _morphA = /*@__PURE__*/ new Vector3();\n\nconst _intersectionPoint = /*@__PURE__*/ new Vector3();\nconst _intersectionPointWorld = /*@__PURE__*/ new Vector3();\n\n/**\n * Class representing triangular polygon mesh based objects.\n *\n * ```js\n * const geometry = new THREE.BoxGeometry( 1, 1, 1 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const mesh = new THREE.Mesh( geometry, material );\n * scene.add( mesh );\n * ```\n *\n * @augments Object3D\n */\nclass Mesh extends Object3D {\n\n\t/**\n\t * Constructs a new mesh.\n\t *\n\t * @param {BufferGeometry} [geometry] - The mesh geometry.\n\t * @param {Material|Array<Material>} [material] - The mesh material.\n\t */\n\tconstructor( geometry = new BufferGeometry(), material = new MeshBasicMaterial() ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMesh = true;\n\n\t\tthis.type = 'Mesh';\n\n\t\t/**\n\t\t * The mesh geometry.\n\t\t *\n\t\t * @type {BufferGeometry}\n\t\t */\n\t\tthis.geometry = geometry;\n\n\t\t/**\n\t\t * The mesh material.\n\t\t *\n\t\t * @type {Material|Array<Material>}\n\t\t * @default MeshBasicMaterial\n\t\t */\n\t\tthis.material = material;\n\n\t\t/**\n\t\t * A dictionary representing the morph targets in the geometry. The key is the\n\t\t * morph targets name, the value its attribute index. This member is `undefined`\n\t\t * by default and only set when morph targets are detected in the geometry.\n\t\t *\n\t\t * @type {Object<String,number>|undefined}\n\t\t * @default undefined\n\t\t */\n\t\tthis.morphTargetDictionary = undefined;\n\n\t\t/**\n\t\t * An array of weights typically in the range `[0,1]` that specify how much of the morph\n\t\t * is applied. This member is `undefined` by default and only set when morph targets are\n\t\t * detected in the geometry.\n\t\t *\n\t\t * @type {Array<number>|undefined}\n\t\t * @default undefined\n\t\t */\n\t\tthis.morphTargetInfluences = undefined;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tif ( source.morphTargetInfluences !== undefined ) {\n\n\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\n\t\t}\n\n\t\tif ( source.morphTargetDictionary !== undefined ) {\n\n\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\n\n\t\t}\n\n\t\tthis.material = Array.isArray( source.material ) ? source.material.slice() : source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the values of {@link Mesh#morphTargetDictionary} and {@link Mesh#morphTargetInfluences}\n\t * to make sure existing morph targets can influence this 3D object.\n\t */\n\tupdateMorphTargets() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst morphAttributes = geometry.morphAttributes;\n\t\tconst keys = Object.keys( morphAttributes );\n\n\t\tif ( keys.length > 0 ) {\n\n\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns the local-space position of the vertex at the given index, taking into\n\t * account the current animation state of both morph targets and skinning.\n\t *\n\t * @param {number} index - The vertex index.\n\t * @param {Vector3} target - The target object that is used to store the method's result.\n\t * @return {Vector3} The vertex position in local space.\n\t */\n\tgetVertexPosition( index, target ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst position = geometry.attributes.position;\n\t\tconst morphPosition = geometry.morphAttributes.position;\n\t\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\n\t\ttarget.fromBufferAttribute( position, index );\n\n\t\tconst morphInfluences = this.morphTargetInfluences;\n\n\t\tif ( morphPosition && morphInfluences ) {\n\n\t\t\t_morphA.set( 0, 0, 0 );\n\n\t\t\tfor ( let i = 0, il = morphPosition.length; i < il; i ++ ) {\n\n\t\t\t\tconst influence = morphInfluences[ i ];\n\t\t\t\tconst morphAttribute = morphPosition[ i ];\n\n\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t_tempA.fromBufferAttribute( morphAttribute, index );\n\n\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA.sub( target ), influence );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttarget.add( _morphA );\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Computes intersection points between a casted ray and this line.\n\t *\n\t * @param {Raycaster} raycaster - The raycaster.\n\t * @param {Array<Object>} intersects - The target array that holds the intersection points.\n\t */\n\traycast( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst material = this.material;\n\t\tconst matrixWorld = this.matrixWorld;\n\n\t\tif ( material === undefined ) return;\n\n\t\t// test with bounding sphere in world space\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere$6.copy( geometry.boundingSphere );\n\t\t_sphere$6.applyMatrix4( matrixWorld );\n\n\t\t// check distance from ray origin to bounding sphere\n\n\t\t_ray$3.copy( raycaster.ray ).recast( raycaster.near );\n\n\t\tif ( _sphere$6.containsPoint( _ray$3.origin ) === false ) {\n\n\t\t\tif ( _ray$3.intersectSphere( _sphere$6, _sphereHitAt ) === null ) return;\n\n\t\t\tif ( _ray$3.origin.distanceToSquared( _sphereHitAt ) > ( raycaster.far - raycaster.near ) ** 2 ) return;\n\n\t\t}\n\n\t\t// convert ray to local space of mesh\n\n\t\t_inverseMatrix$3.copy( matrixWorld ).invert();\n\t\t_ray$3.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$3 );\n\n\t\t// test with bounding box in local space\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tif ( _ray$3.intersectsBox( geometry.boundingBox ) === false ) return;\n\n\t\t}\n\n\t\t// test for intersections with geometry\n\n\t\tthis._computeIntersections( raycaster, intersects, _ray$3 );\n\n\t}\n\n\t_computeIntersections( raycaster, intersects, rayLocalSpace ) {\n\n\t\tlet intersection;\n\n\t\tconst geometry = this.geometry;\n\t\tconst material = this.material;\n\n\t\tconst index = geometry.index;\n\t\tconst position = geometry.attributes.position;\n\t\tconst uv = geometry.attributes.uv;\n\t\tconst uv1 = geometry.attributes.uv1;\n\t\tconst normal = geometry.attributes.normal;\n\t\tconst groups = geometry.groups;\n\t\tconst drawRange = geometry.drawRange;\n\n\t\tif ( index !== null ) {\n\n\t\t\t// indexed buffer geometry\n\n\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\n\t\t\t\t\tconst end = Math.min( index.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );\n\n\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\tconst a = index.getX( j );\n\t\t\t\t\t\tconst b = index.getX( j + 1 );\n\t\t\t\t\t\tconst c = index.getX( j + 2 );\n\n\t\t\t\t\t\tintersection = checkGeometryIntersection( this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\tconst a = index.getX( i );\n\t\t\t\t\tconst b = index.getX( i + 1 );\n\t\t\t\t\tconst c = index.getX( i + 2 );\n\n\t\t\t\t\tintersection = checkGeometryIntersection( this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( position !== undefined ) {\n\n\t\t\t// non-indexed buffer geometry\n\n\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\n\t\t\t\t\tconst end = Math.min( position.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );\n\n\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\tconst a = j;\n\t\t\t\t\t\tconst b = j + 1;\n\t\t\t\t\t\tconst c = j + 2;\n\n\t\t\t\t\t\tintersection = checkGeometryIntersection( this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\tconst end = Math.min( position.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\tconst a = i;\n\t\t\t\t\tconst b = i + 1;\n\t\t\t\t\tconst c = i + 2;\n\n\t\t\t\t\tintersection = checkGeometryIntersection( this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nfunction checkIntersection$1( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\tlet intersect;\n\n\tif ( material.side === BackSide ) {\n\n\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t} else {\n\n\t\tintersect = ray.intersectTriangle( pA, pB, pC, ( material.side === FrontSide ), point );\n\n\t}\n\n\tif ( intersect === null ) return null;\n\n\t_intersectionPointWorld.copy( point );\n\t_intersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\tconst distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );\n\n\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n\treturn {\n\t\tdistance: distance,\n\t\tpoint: _intersectionPointWorld.clone(),\n\t\tobject: object\n\t};\n\n}\n\nfunction checkGeometryIntersection( object, material, raycaster, ray, uv, uv1, normal, a, b, c ) {\n\n\tobject.getVertexPosition( a, _vA$1 );\n\tobject.getVertexPosition( b, _vB$1 );\n\tobject.getVertexPosition( c, _vC$1 );\n\n\tconst intersection = checkIntersection$1( object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint );\n\n\tif ( intersection ) {\n\n\t\tconst barycoord = new Vector3();\n\t\tTriangle.getBarycoord( _intersectionPoint, _vA$1, _vB$1, _vC$1, barycoord );\n\n\t\tif ( uv ) {\n\n\t\t\tintersection.uv = Triangle.getInterpolatedAttribute( uv, a, b, c, barycoord, new Vector2() );\n\n\t\t}\n\n\t\tif ( uv1 ) {\n\n\t\t\tintersection.uv1 = Triangle.getInterpolatedAttribute( uv1, a, b, c, barycoord, new Vector2() );\n\n\t\t}\n\n\t\tif ( normal ) {\n\n\t\t\tintersection.normal = Triangle.getInterpolatedAttribute( normal, a, b, c, barycoord, new Vector3() );\n\n\t\t\tif ( intersection.normal.dot( ray.direction ) > 0 ) {\n\n\t\t\t\tintersection.normal.multiplyScalar( -1 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst face = {\n\t\t\ta: a,\n\t\t\tb: b,\n\t\t\tc: c,\n\t\t\tnormal: new Vector3(),\n\t\t\tmaterialIndex: 0\n\t\t};\n\n\t\tTriangle.getNormal( _vA$1, _vB$1, _vC$1, face.normal );\n\n\t\tintersection.face = face;\n\t\tintersection.barycoord = barycoord;\n\n\t}\n\n\treturn intersection;\n\n}\n\n/**\n * A geometry class for a rectangular cuboid with a given width, height, and depth.\n * On creation, the cuboid is centred on the origin, with each edge parallel to one\n * of the axes.\n *\n * ```js\n * const geometry = new THREE.BoxGeometry( 1, 1, 1 );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n * const cube = new THREE.Mesh( geometry, material );\n * scene.add( cube );\n * ```\n *\n * @augments BufferGeometry\n */\nclass BoxGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new box geometry.\n\t *\n\t * @param {number} [width=1] - The width. That is, the length of the edges parallel to the X axis.\n\t * @param {number} [height=1] - The height. That is, the length of the edges parallel to the Y axis.\n\t * @param {number} [depth=1] - The depth. That is, the length of the edges parallel to the Z axis.\n\t * @param {number} [widthSegments=1] - Number of segmented rectangular faces along the width of the sides.\n\t * @param {number} [heightSegments=1] - Number of segmented rectangular faces along the height of the sides.\n\t * @param {number} [depthSegments=1] - Number of segmented rectangular faces along the depth of the sides.\n\t */\n\tconstructor( width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'BoxGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tdepthSegments: depthSegments\n\t\t};\n\n\t\tconst scope = this;\n\n\t\t// segments\n\n\t\twidthSegments = Math.floor( widthSegments );\n\t\theightSegments = Math.floor( heightSegments );\n\t\tdepthSegments = Math.floor( depthSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tlet numberOfVertices = 0;\n\t\tlet groupStart = 0;\n\n\t\t// build each side of the box geometry\n\n\t\tbuildPlane( 'z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments, 0 ); // px\n\t\tbuildPlane( 'z', 'y', 'x', 1, -1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\n\t\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\n\t\tbuildPlane( 'x', 'z', 'y', 1, -1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\n\t\tbuildPlane( 'x', 'y', 'z', 1, -1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\n\t\tbuildPlane( 'x', 'y', 'z', -1, -1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\t\tconst segmentWidth = width / gridX;\n\t\t\tconst segmentHeight = height / gridY;\n\n\t\t\tconst widthHalf = width / 2;\n\t\t\tconst heightHalf = height / 2;\n\t\t\tconst depthHalf = depth / 2;\n\n\t\t\tconst gridX1 = gridX + 1;\n\t\t\tconst gridY1 = gridY + 1;\n\n\t\t\tlet vertexCounter = 0;\n\t\t\tlet groupCount = 0;\n\n\t\t\tconst vector = new Vector3();\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( let iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\t\tconst y = iy * segmentHeight - heightHalf;\n\n\t\t\t\tfor ( let ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\t\tconst x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t\t// now apply vector to vertex buffer\n\n\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = 0;\n\t\t\t\t\tvector[ v ] = 0;\n\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : -1;\n\n\t\t\t\t\t// now apply vector to normal buffer\n\n\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// uvs\n\n\t\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t\t\t// counters\n\n\t\t\t\t\tvertexCounter += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// indices\n\n\t\t\t// 1. you need three indices to draw a single face\n\t\t\t// 2. a single segment consists of two faces\n\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\t\tfor ( let iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\t\tfor ( let ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\t\tconst a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\tconst b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\t\tconst c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\t\tconst d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// increase counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t\t// update total number of vertices\n\n\t\t\tnumberOfVertices += vertexCounter;\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {BoxGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new BoxGeometry( data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments );\n\n\t}\n\n}\n\n// Uniform Utilities\n\nfunction cloneUniforms( src ) {\n\n\tconst dst = {};\n\n\tfor ( const u in src ) {\n\n\t\tdst[ u ] = {};\n\n\t\tfor ( const p in src[ u ] ) {\n\n\t\t\tconst property = src[ u ][ p ];\n\n\t\t\tif ( property && ( property.isColor ||\n\t\t\t\tproperty.isMatrix3 || property.isMatrix4 ||\n\t\t\t\tproperty.isVector2 || property.isVector3 || property.isVector4 ||\n\t\t\t\tproperty.isTexture || property.isQuaternion ) ) {\n\n\t\t\t\tif ( property.isRenderTargetTexture ) {\n\n\t\t\t\t\tconsole.warn( 'UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().' );\n\t\t\t\t\tdst[ u ][ p ] = null;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdst[ u ][ p ] = property.clone();\n\n\t\t\t\t}\n\n\t\t\t} else if ( Array.isArray( property ) ) {\n\n\t\t\t\tdst[ u ][ p ] = property.slice();\n\n\t\t\t} else {\n\n\t\t\t\tdst[ u ][ p ] = property;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn dst;\n\n}\n\nfunction mergeUniforms( uniforms ) {\n\n\tconst merged = {};\n\n\tfor ( let u = 0; u < uniforms.length; u ++ ) {\n\n\t\tconst tmp = cloneUniforms( uniforms[ u ] );\n\n\t\tfor ( const p in tmp ) {\n\n\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t}\n\n\t}\n\n\treturn merged;\n\n}\n\nfunction cloneUniformsGroups( src ) {\n\n\tconst dst = [];\n\n\tfor ( let u = 0; u < src.length; u ++ ) {\n\n\t\tdst.push( src[ u ].clone() );\n\n\t}\n\n\treturn dst;\n\n}\n\nfunction getUnlitUniformColorSpace( renderer ) {\n\n\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\tif ( currentRenderTarget === null ) {\n\n\t\t// https://github.com/mrdoob/three.js/pull/23937#issuecomment-1111067398\n\t\treturn renderer.outputColorSpace;\n\n\t}\n\n\t// https://github.com/mrdoob/three.js/issues/27868\n\tif ( currentRenderTarget.isXRRenderTarget === true ) {\n\n\t\treturn currentRenderTarget.texture.colorSpace;\n\n\t}\n\n\treturn ColorManagement.workingColorSpace;\n\n}\n\n// Legacy\n\nconst UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };\n\nvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\nvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\n/**\n * A material rendered with custom shaders. A shader is a small program written in GLSL.\n * that runs on the GPU. You may want to use a custom shader if you need to implement an\n * effect not included with any of the built-in materials.\n *\n * There are the following notes to bear in mind when using a `ShaderMaterial`:\n *\n * - `ShaderMaterial` can only be used with {@link WebGLRenderer}.\n * - Built in attributes and uniforms are passed to the shaders along with your code. If\n * you don't want that, use {@link RawShaderMaterial} instead.\n * - You can use the directive `#pragma unroll_loop_start` and `#pragma unroll_loop_end`\n * in order to unroll a `for` loop in GLSL by the shader preprocessor. The directive has\n * to be placed right above the loop. The loop formatting has to correspond to a defined standard.\n *   - The loop has to be [normalized]{@link https://en.wikipedia.org/wiki/Normalized_loop}.\n *   - The loop variable has to be *i*.\n *   - The value `UNROLLED_LOOP_INDEX` will be replaced with the explicitly\n * value of *i* for the given iteration and can be used in preprocessor\n * statements.\n *\n * ```js\n * const material = new THREE.ShaderMaterial( {\n * \tuniforms: {\n * \t\ttime: { value: 1.0 },\n * \t\tresolution: { value: new THREE.Vector2() }\n * \t},\n * \tvertexShader: document.getElementById( 'vertexShader' ).textContent,\n * \tfragmentShader: document.getElementById( 'fragmentShader' ).textContent\n * } );\n * ```\n *\n * @augments Material\n */\nclass ShaderMaterial extends Material {\n\n\t/**\n\t * Constructs a new shader material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isShaderMaterial = true;\n\n\t\tthis.type = 'ShaderMaterial';\n\n\t\t/**\n\t\t * Defines custom constants using `#define` directives within the GLSL code\n\t\t * for both the vertex shader and the fragment shader; each key/value pair\n\t\t * yields another directive.\n\t\t * ```js\n\t\t * defines: {\n\t\t * \tFOO: 15,\n\t\t * \tBAR: true\n\t\t * }\n\t\t * ```\n\t\t * Yields the lines:\n\t\t * ```\n\t\t * #define FOO 15\n\t\t * #define BAR true\n\t\t * ```\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.defines = {};\n\n\t\t/**\n\t\t * An object of the form:\n\t\t * ```js\n\t\t * {\n\t\t * \t\"uniform1\": { value: 1.0 },\n\t\t * \t\"uniform2\": { value: 2 }\n\t\t * }\n\t\t * ```\n\t\t * specifying the uniforms to be passed to the shader code; keys are uniform\n\t\t * names, values are definitions of the form\n\t\t * ```\n\t\t * {\n\t\t * \tvalue: 1.0\n\t\t * }\n\t\t * ```\n\t\t * where `value` is the value of the uniform. Names must match the name of\n\t\t * the uniform, as defined in the GLSL code. Note that uniforms are refreshed\n\t\t * on every frame, so updating the value of the uniform will immediately\n\t\t * update the value available to the GLSL code.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.uniforms = {};\n\n\t\t/**\n\t\t * An array holding uniforms groups for configuring UBOs.\n\t\t *\n\t\t * @type {Array<UniformsGroup>}\n\t\t */\n\t\tthis.uniformsGroups = [];\n\n\t\t/**\n\t\t * Vertex shader GLSL code. This is the actual code for the shader.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.vertexShader = default_vertex;\n\n\t\t/**\n\t\t * Fragment shader GLSL code. This is the actual code for the shader.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.fragmentShader = default_fragment;\n\n\t\t/**\n\t\t * Controls line thickness or lines.\n\t\t *\n\t\t * WebGL and WebGPU ignore this setting and always render line primitives with a\n\t\t * width of one pixel.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.linewidth = 1;\n\n\t\t/**\n\t\t * Renders the geometry as a wireframe.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.wireframe = false;\n\n\t\t/**\n\t\t * Controls the thickness of the wireframe.\n\t\t *\n\t\t * WebGL and WebGPU ignore this property and always render\n\t\t * 1 pixel wide lines.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.wireframeLinewidth = 1;\n\n\t\t/**\n\t\t * Define whether the material color is affected by global fog settings; `true`\n\t\t * to pass fog uniforms to the shader.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.fog = false;\n\n\t\t/**\n\t\t * Defines whether this material uses lighting; `true` to pass uniform data\n\t\t * related to lighting to this shader.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.lights = false;\n\n\t\t/**\n\t\t * Defines whether this material supports clipping; `true` to let the renderer\n\t\t * pass the clippingPlanes uniform.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.clipping = false;\n\n\t\t/**\n\t\t * Overwritten and set to `true` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.forceSinglePass = true;\n\n\t\t/**\n\t\t * This object allows to enable certain WebGL 2 extensions.\n\t\t *\n\t\t * - clipCullDistance: set to `true` to use vertex shader clipping\n\t\t * - multiDraw: set to `true` to use vertex shader multi_draw / enable gl_DrawID\n\t\t *\n\t\t * @type {{clipCullDistance:false,multiDraw:false}}\n\t\t */\n\t\tthis.extensions = {\n\t\t\tclipCullDistance: false, // set to use vertex shader clipping\n\t\t\tmultiDraw: false // set to use vertex shader multi_draw / enable gl_DrawID\n\t\t};\n\n\t\t/**\n\t\t * When the rendered geometry doesn't include these attributes but the\n\t\t * material does, these default values will be passed to the shaders. This\n\t\t * avoids errors when buffer data is missing.\n\t\t *\n\t\t * - color: [ 1, 1, 1 ]\n\t\t * - uv: [ 0, 0 ]\n\t\t * - uv1: [ 0, 0 ]\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [ 1, 1, 1 ],\n\t\t\t'uv': [ 0, 0 ],\n\t\t\t'uv1': [ 0, 0 ]\n\t\t};\n\n\t\t/**\n\t\t * If set, this calls [gl.bindAttribLocation]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindAttribLocation}\n\t\t * to bind a generic vertex index to an attribute variable.\n\t\t *\n\t\t * @type {string|undefined}\n\t\t * @default undefined\n\t\t */\n\t\tthis.index0AttributeName = undefined;\n\n\t\t/**\n\t\t * Can be used to force a uniform update while changing uniforms in\n\t\t * {@link Object3D#onBeforeRender}.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.uniformsNeedUpdate = false;\n\n\t\t/**\n\t\t * Defines the GLSL version of custom shader code.\n\t\t *\n\t\t * @type {?(GLSL1|GLSL3)}\n\t\t * @default null\n\t\t */\n\t\tthis.glslVersion = null;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tthis.setValues( parameters );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\n\t\tthis.uniforms = cloneUniforms( source.uniforms );\n\t\tthis.uniformsGroups = cloneUniformsGroups( source.uniformsGroups );\n\n\t\tthis.defines = Object.assign( {}, source.defines );\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.fog = source.fog;\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\n\t\tthis.extensions = Object.assign( {}, source.extensions );\n\n\t\tthis.glslVersion = source.glslVersion;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.glslVersion = this.glslVersion;\n\t\tdata.uniforms = {};\n\n\t\tfor ( const name in this.uniforms ) {\n\n\t\t\tconst uniform = this.uniforms[ name ];\n\t\t\tconst value = uniform.value;\n\n\t\t\tif ( value && value.isTexture ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 't',\n\t\t\t\t\tvalue: value.toJSON( meta ).uuid\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isColor ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'c',\n\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector2 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v2',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\tvalue: value\n\t\t\t\t};\n\n\t\t\t\t// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;\n\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\n\t\tdata.lights = this.lights;\n\t\tdata.clipping = this.clipping;\n\n\t\tconst extensions = {};\n\n\t\tfor ( const key in this.extensions ) {\n\n\t\t\tif ( this.extensions[ key ] === true ) extensions[ key ] = true;\n\n\t\t}\n\n\t\tif ( Object.keys( extensions ).length > 0 ) data.extensions = extensions;\n\n\t\treturn data;\n\n\t}\n\n}\n\n/**\n * Abstract base class for cameras. This class should always be inherited\n * when you build a new camera.\n *\n * @abstract\n * @augments Object3D\n */\nclass Camera extends Object3D {\n\n\t/**\n\t * Constructs a new camera.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCamera = true;\n\n\t\tthis.type = 'Camera';\n\n\t\t/**\n\t\t * The inverse of the camera's world matrix.\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */\n\t\tthis.matrixWorldInverse = new Matrix4();\n\n\t\t/**\n\t\t * The camera's projection matrix.\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */\n\t\tthis.projectionMatrix = new Matrix4();\n\n\t\t/**\n\t\t * The inverse of the camera's projection matrix.\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */\n\t\tthis.projectionMatrixInverse = new Matrix4();\n\n\t\t/**\n\t\t * The coordinate system in which the camera is used.\n\t\t *\n\t\t * @type {(WebGLCoordinateSystem|WebGPUCoordinateSystem)}\n\t\t */\n\t\tthis.coordinateSystem = WebGLCoordinateSystem;\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\n\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\n\n\t\tthis.coordinateSystem = source.coordinateSystem;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a vector representing the (\"look\") direction of the 3D object in world space.\n\t *\n\t * This method is overwritten since cameras have a different forward vector compared to other\n\t * 3D objects. A camera looks down its local, negative z-axis by default.\n\t *\n\t * @param {Vector3} target - The target vector the result is stored to.\n\t * @return {Vector3} The 3D object's direction in world space.\n\t */\n\tgetWorldDirection( target ) {\n\n\t\treturn super.getWorldDirection( target ).negate();\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tthis.matrixWorldInverse.copy( this.matrixWorld ).invert();\n\n\t}\n\n\tupdateWorldMatrix( updateParents, updateChildren ) {\n\n\t\tsuper.updateWorldMatrix( updateParents, updateChildren );\n\n\t\tthis.matrixWorldInverse.copy( this.matrixWorld ).invert();\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _v3$1 = /*@__PURE__*/ new Vector3();\nconst _minTarget = /*@__PURE__*/ new Vector2();\nconst _maxTarget = /*@__PURE__*/ new Vector2();\n\n/**\n * Camera that uses [perspective projection]{@link https://en.wikipedia.org/wiki/Perspective_(graphical)}.\n *\n * This projection mode is designed to mimic the way the human eye sees. It\n * is the most common projection mode used for rendering a 3D scene.\n *\n * ```js\n * const camera = new THREE.PerspectiveCamera( 45, width / height, 1, 1000 );\n * scene.add( camera );\n * ```\n *\n * @augments Camera\n */\nclass PerspectiveCamera extends Camera {\n\n\t/**\n\t * Constructs a new perspective camera.\n\t *\n\t * @param {number} [fov=50] - The vertical field of view.\n\t * @param {number} [aspect=1] - The aspect ratio.\n\t * @param {number} [near=0.1] - The camera's near plane.\n\t * @param {number} [far=2000] - The camera's far plane.\n\t */\n\tconstructor( fov = 50, aspect = 1, near = 0.1, far = 2000 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isPerspectiveCamera = true;\n\n\t\tthis.type = 'PerspectiveCamera';\n\n\t\t/**\n\t\t * The vertical field of view, from bottom to top of view,\n\t\t * in degrees.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 50\n\t\t */\n\t\tthis.fov = fov;\n\n\t\t/**\n\t\t * The zoom factor of the camera.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.zoom = 1;\n\n\t\t/**\n\t\t * The camera's near plane. The valid range is greater than `0`\n\t\t * and less than the current value of {@link PerspectiveCamera#far}.\n\t\t *\n\t\t * Note that, unlike for the {@link OrthographicCamera}, `0` is <em>not</em> a\n\t\t * valid value for a perspective camera's near plane.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.1\n\t\t */\n\t\tthis.near = near;\n\n\t\t/**\n\t\t * The camera's far plane. Must be greater than the\n\t\t * current value of {@link PerspectiveCamera#near}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 2000\n\t\t */\n\t\tthis.far = far;\n\n\t\t/**\n\t\t * Object distance used for stereoscopy and depth-of-field effects. This\n\t\t * parameter does not influence the projection matrix unless a\n\t\t * {@link StereoCamera} is being used.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 10\n\t\t */\n\t\tthis.focus = 10;\n\n\t\t/**\n\t\t * The aspect ratio, usually the canvas width / canvas height.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.aspect = aspect;\n\n\t\t/**\n\t\t * Represents the frustum window specification. This property should not be edited\n\t\t * directly but via {@link PerspectiveCamera#setViewOffset} and {@link PerspectiveCamera#clearViewOffset}.\n\t\t *\n\t\t * @type {?Object}\n\t\t * @default null\n\t\t */\n\t\tthis.view = null;\n\n\t\t/**\n\t\t * Film size used for the larger axis. Default is `35` (millimeters). This\n\t\t * parameter does not influence the projection matrix unless {@link PerspectiveCamera#filmOffset}\n\t\t * is set to a nonzero value.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 35\n\t\t */\n\t\tthis.filmGauge = 35;\n\n\t\t/**\n\t\t * Horizontal off-center offset in the same unit as {@link PerspectiveCamera#filmGauge}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.filmOffset = 0;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.fov = source.fov;\n\t\tthis.zoom = source.zoom;\n\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\t\tthis.focus = source.focus;\n\n\t\tthis.aspect = source.aspect;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\tthis.filmGauge = source.filmGauge;\n\t\tthis.filmOffset = source.filmOffset;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the FOV by focal length in respect to the current {@link PerspectiveCamera#filmGauge}.\n\t *\n\t * The default film gauge is 35, so that the focal length can be specified for\n\t * a 35mm (full frame) camera.\n\t *\n\t * @param {number} focalLength - Values for focal length and film gauge must have the same unit.\n\t */\n\tsetFocalLength( focalLength ) {\n\n\t\t/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */\n\t\tconst vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\tthis.fov = RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\t/**\n\t * Returns the focal length from the current {@link PerspectiveCamera#fov} and\n\t * {@link PerspectiveCamera#filmGauge}.\n\t *\n\t * @return {number} The computed focal length.\n\t */\n\tgetFocalLength() {\n\n\t\tconst vExtentSlope = Math.tan( DEG2RAD * 0.5 * this.fov );\n\n\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t}\n\n\t/**\n\t * Returns the current vertical field of view angle in degrees considering {@link PerspectiveCamera#zoom}.\n\t *\n\t * @return {number} The effective FOV.\n\t */\n\tgetEffectiveFOV() {\n\n\t\treturn RAD2DEG * 2 * Math.atan(\n\t\t\tMath.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t}\n\n\t/**\n\t * Returns the width of the image on the film. If {@link PerspectiveCamera#aspect} is greater than or\n\t * equal to one (landscape format), the result equals {@link PerspectiveCamera#filmGauge}.\n\t *\n\t * @return {number} The film width.\n\t */\n\tgetFilmWidth() {\n\n\t\t// film not completely covered in portrait format (aspect < 1)\n\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t}\n\n\t/**\n\t * Returns the height of the image on the film. If {@link PerspectiveCamera#aspect} is greater than or\n\t * equal to one (landscape format), the result equals {@link PerspectiveCamera#filmGauge}.\n\t *\n\t * @return {number} The film width.\n\t */\n\tgetFilmHeight() {\n\n\t\t// film not completely covered in landscape format (aspect > 1)\n\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t}\n\n\t/**\n\t * Computes the 2D bounds of the camera's viewable rectangle at a given distance along the viewing direction.\n\t * Sets `minTarget` and `maxTarget` to the coordinates of the lower-left and upper-right corners of the view rectangle.\n\t *\n\t * @param {number} distance - The viewing distance.\n\t * @param {Vector2} minTarget - The lower-left corner of the view rectangle is written into this vector.\n\t * @param {Vector2} maxTarget - The upper-right corner of the view rectangle is written into this vector.\n\t */\n\tgetViewBounds( distance, minTarget, maxTarget ) {\n\n\t\t_v3$1.set( -1, -1, 0.5 ).applyMatrix4( this.projectionMatrixInverse );\n\n\t\tminTarget.set( _v3$1.x, _v3$1.y ).multiplyScalar( - distance / _v3$1.z );\n\n\t\t_v3$1.set( 1, 1, 0.5 ).applyMatrix4( this.projectionMatrixInverse );\n\n\t\tmaxTarget.set( _v3$1.x, _v3$1.y ).multiplyScalar( - distance / _v3$1.z );\n\n\t}\n\n\t/**\n\t * Computes the width and height of the camera's viewable rectangle at a given distance along the viewing direction.\n\t *\n\t * @param {number} distance - The viewing distance.\n\t * @param {Vector2} target - The target vector that is used to store result where x is width and y is height.\n\t * @returns {Vector2} The view size.\n\t */\n\tgetViewSize( distance, target ) {\n\n\t\tthis.getViewBounds( distance, _minTarget, _maxTarget );\n\n\t\treturn target.subVectors( _maxTarget, _minTarget );\n\n\t}\n\n\t/**\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t * multi-monitor/multi-machine setups.\n\t *\n\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t * the monitors are in grid like this\n\t *```\n\t *   +---+---+---+\n\t *   | A | B | C |\n\t *   +---+---+---+\n\t *   | D | E | F |\n\t *   +---+---+---+\n\t *```\n\t * then for each monitor you would call it like this:\n\t *```js\n\t * const w = 1920;\n\t * const h = 1080;\n\t * const fullWidth = w * 3;\n\t * const fullHeight = h * 2;\n\t *\n\t * // --A--\n\t * camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t * // --B--\n\t * camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t * // --C--\n\t * camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t * // --D--\n\t * camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t * // --E--\n\t * camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t * // --F--\n\t * camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t * ```\n\t *\n\t * Note there is no reason monitors have to be the same size or in a grid.\n\t *\n\t * @param {number} fullWidth - The full width of multiview setup.\n\t * @param {number} fullHeight - The full height of multiview setup.\n\t * @param {number} x - The horizontal offset of the subcamera.\n\t * @param {number} y - The vertical offset of the subcamera.\n\t * @param {number} width - The width of subcamera.\n\t * @param {number} height - The height of subcamera.\n\t */\n\tsetViewOffset( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\t/**\n\t * Removes the view offset from the projection matrix.\n\t */\n\tclearViewOffset() {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\t/**\n\t * Updates the camera's projection matrix. Must be called after any change of\n\t * camera properties.\n\t */\n\tupdateProjectionMatrix() {\n\n\t\tconst near = this.near;\n\t\tlet top = near * Math.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom;\n\t\tlet height = 2 * top;\n\t\tlet width = this.aspect * height;\n\t\tlet left = -0.5 * width;\n\t\tconst view = this.view;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tconst fullWidth = view.fullWidth,\n\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\twidth *= view.width / fullWidth;\n\t\t\theight *= view.height / fullHeight;\n\n\t\t}\n\n\t\tconst skew = this.filmOffset;\n\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far, this.coordinateSystem );\n\n\t\tthis.projectionMatrixInverse.copy( this.projectionMatrix ).invert();\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.fov = this.fov;\n\t\tdata.object.zoom = this.zoom;\n\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\t\tdata.object.focus = this.focus;\n\n\t\tdata.object.aspect = this.aspect;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\tdata.object.filmGauge = this.filmGauge;\n\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\treturn data;\n\n\t}\n\n}\n\nconst fov = -90; // negative fov is not an error\nconst aspect = 1;\n\n/**\n * A special type of camera that is positioned in 3D space to render its surroundings into a\n * cube render target. The render target can then be used as an environment map for rendering\n * realtime reflections in your scene.\n *\n * ```js\n * // Create cube render target\n * const cubeRenderTarget = new THREE.WebGLCubeRenderTarget( 256, { generateMipmaps: true, minFilter: THREE.LinearMipmapLinearFilter } );\n *\n * // Create cube camera\n * const cubeCamera = new THREE.CubeCamera( 1, 100000, cubeRenderTarget );\n * scene.add( cubeCamera );\n *\n * // Create car\n * const chromeMaterial = new THREE.MeshLambertMaterial( { color: 0xffffff, envMap: cubeRenderTarget.texture } );\n * const car = new THREE.Mesh( carGeometry, chromeMaterial );\n * scene.add( car );\n *\n * // Update the render target cube\n * car.visible = false;\n * cubeCamera.position.copy( car.position );\n * cubeCamera.update( renderer, scene );\n *\n * // Render the scene\n * car.visible = true;\n * renderer.render( scene, camera );\n * ```\n *\n * @augments Object3D\n */\nclass CubeCamera extends Object3D {\n\n\t/**\n\t * Constructs a new cube camera.\n\t *\n\t * @param {number} near - The camera's near plane.\n\t * @param {number} far - The camera's far plane.\n\t * @param {WebGLCubeRenderTarget} renderTarget - The cube render target.\n\t */\n\tconstructor( near, far, renderTarget ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CubeCamera';\n\n\t\t/**\n\t\t * A reference to the cube render target.\n\t\t *\n\t\t * @type {WebGLCubeRenderTarget}\n\t\t */\n\t\tthis.renderTarget = renderTarget;\n\n\t\t/**\n\t\t * The current active coordinate system.\n\t\t *\n\t\t * @type {?(WebGLCoordinateSystem|WebGPUCoordinateSystem)}\n\t\t * @default null\n\t\t */\n\t\tthis.coordinateSystem = null;\n\n\t\t/**\n\t\t * The current active mipmap level\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.activeMipmapLevel = 0;\n\n\t\tconst cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPX.layers = this.layers;\n\t\tthis.add( cameraPX );\n\n\t\tconst cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNX.layers = this.layers;\n\t\tthis.add( cameraNX );\n\n\t\tconst cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPY.layers = this.layers;\n\t\tthis.add( cameraPY );\n\n\t\tconst cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNY.layers = this.layers;\n\t\tthis.add( cameraNY );\n\n\t\tconst cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPZ.layers = this.layers;\n\t\tthis.add( cameraPZ );\n\n\t\tconst cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNZ.layers = this.layers;\n\t\tthis.add( cameraNZ );\n\n\t}\n\n\t/**\n\t * Must be called when the coordinate system of the cube camera is changed.\n\t */\n\tupdateCoordinateSystem() {\n\n\t\tconst coordinateSystem = this.coordinateSystem;\n\n\t\tconst cameras = this.children.concat();\n\n\t\tconst [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = cameras;\n\n\t\tfor ( const camera of cameras ) this.remove( camera );\n\n\t\tif ( coordinateSystem === WebGLCoordinateSystem ) {\n\n\t\t\tcameraPX.up.set( 0, 1, 0 );\n\t\t\tcameraPX.lookAt( 1, 0, 0 );\n\n\t\t\tcameraNX.up.set( 0, 1, 0 );\n\t\t\tcameraNX.lookAt( -1, 0, 0 );\n\n\t\t\tcameraPY.up.set( 0, 0, -1 );\n\t\t\tcameraPY.lookAt( 0, 1, 0 );\n\n\t\t\tcameraNY.up.set( 0, 0, 1 );\n\t\t\tcameraNY.lookAt( 0, -1, 0 );\n\n\t\t\tcameraPZ.up.set( 0, 1, 0 );\n\t\t\tcameraPZ.lookAt( 0, 0, 1 );\n\n\t\t\tcameraNZ.up.set( 0, 1, 0 );\n\t\t\tcameraNZ.lookAt( 0, 0, -1 );\n\n\t\t} else if ( coordinateSystem === WebGPUCoordinateSystem ) {\n\n\t\t\tcameraPX.up.set( 0, -1, 0 );\n\t\t\tcameraPX.lookAt( -1, 0, 0 );\n\n\t\t\tcameraNX.up.set( 0, -1, 0 );\n\t\t\tcameraNX.lookAt( 1, 0, 0 );\n\n\t\t\tcameraPY.up.set( 0, 0, 1 );\n\t\t\tcameraPY.lookAt( 0, 1, 0 );\n\n\t\t\tcameraNY.up.set( 0, 0, -1 );\n\t\t\tcameraNY.lookAt( 0, -1, 0 );\n\n\t\t\tcameraPZ.up.set( 0, -1, 0 );\n\t\t\tcameraPZ.lookAt( 0, 0, 1 );\n\n\t\t\tcameraNZ.up.set( 0, -1, 0 );\n\t\t\tcameraNZ.lookAt( 0, 0, -1 );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: ' + coordinateSystem );\n\n\t\t}\n\n\t\tfor ( const camera of cameras ) {\n\n\t\t\tthis.add( camera );\n\n\t\t\tcamera.updateMatrixWorld();\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Calling this method will render the given scene with the given renderer\n\t * into the cube render target of the camera.\n\t *\n\t * @param {(Renderer|WebGLRenderer)} renderer - The renderer.\n\t * @param {Scene} scene - The scene to render.\n\t */\n\tupdate( renderer, scene ) {\n\n\t\tif ( this.parent === null ) this.updateMatrixWorld();\n\n\t\tconst { renderTarget, activeMipmapLevel } = this;\n\n\t\tif ( this.coordinateSystem !== renderer.coordinateSystem ) {\n\n\t\t\tthis.coordinateSystem = renderer.coordinateSystem;\n\n\t\t\tthis.updateCoordinateSystem();\n\n\t\t}\n\n\t\tconst [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = this.children;\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\tconst currentActiveCubeFace = renderer.getActiveCubeFace();\n\t\tconst currentActiveMipmapLevel = renderer.getActiveMipmapLevel();\n\n\t\tconst currentXrEnabled = renderer.xr.enabled;\n\n\t\trenderer.xr.enabled = false;\n\n\t\tconst generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\trenderer.setRenderTarget( renderTarget, 0, activeMipmapLevel );\n\t\trenderer.render( scene, cameraPX );\n\n\t\trenderer.setRenderTarget( renderTarget, 1, activeMipmapLevel );\n\t\trenderer.render( scene, cameraNX );\n\n\t\trenderer.setRenderTarget( renderTarget, 2, activeMipmapLevel );\n\t\trenderer.render( scene, cameraPY );\n\n\t\trenderer.setRenderTarget( renderTarget, 3, activeMipmapLevel );\n\t\trenderer.render( scene, cameraNY );\n\n\t\trenderer.setRenderTarget( renderTarget, 4, activeMipmapLevel );\n\t\trenderer.render( scene, cameraPZ );\n\n\t\t// mipmaps are generated during the last call of render()\n\t\t// at this point, all sides of the cube render target are defined\n\n\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\trenderer.setRenderTarget( renderTarget, 5, activeMipmapLevel );\n\t\trenderer.render( scene, cameraNZ );\n\n\t\trenderer.setRenderTarget( currentRenderTarget, currentActiveCubeFace, currentActiveMipmapLevel );\n\n\t\trenderer.xr.enabled = currentXrEnabled;\n\n\t\trenderTarget.texture.needsPMREMUpdate = true;\n\n\t}\n\n}\n\n/**\n * Creates a cube texture made up of six images.\n *\n * ```js\n * const loader = new THREE.CubeTextureLoader();\n * loader.setPath( 'textures/cube/pisa/' );\n *\n * const textureCube = loader.load( [\n * \t'px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png'\n * ] );\n *\n * const material = new THREE.MeshBasicMaterial( { color: 0xffffff, envMap: textureCube } );\n * ```\n *\n * @augments Texture\n */\nclass CubeTexture extends Texture {\n\n\t/**\n\t * Constructs a new cube texture.\n\t *\n\t * @param {Array<Image>} [images=[]] - An array holding a image for each side of a cube.\n\t * @param {number} [mapping=CubeReflectionMapping] - The texture mapping.\n\t * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n\t * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n\t * @param {number} [magFilter=LinearFilter] - The mag filter value.\n\t * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.\n\t * @param {number} [format=RGBAFormat] - The texture format.\n\t * @param {number} [type=UnsignedByteType] - The texture type.\n\t * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n\t * @param {string} [colorSpace=NoColorSpace] - The color space value.\n\t */\n\tconstructor( images = [], mapping = CubeReflectionMapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace ) {\n\n\t\tsuper( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCubeTexture = true;\n\n\t\t/**\n\t\t * If set to `true`, the texture is flipped along the vertical axis when\n\t\t * uploaded to the GPU.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.flipY = false;\n\n\t}\n\n\t/**\n\t * Alias for {@link CubeTexture#image}.\n\t *\n\t * @type {Array<Image>}\n\t */\n\tget images() {\n\n\t\treturn this.image;\n\n\t}\n\n\tset images( value ) {\n\n\t\tthis.image = value;\n\n\t}\n\n}\n\n/**\n * A cube render target used in context of {@link WebGLRenderer}.\n *\n * @augments WebGLRenderTarget\n */\nclass WebGLCubeRenderTarget extends WebGLRenderTarget {\n\n\t/**\n\t * Constructs a new cube render target.\n\t *\n\t * @param {number} [size=1] - The size of the render target.\n\t * @param {RenderTarget~Options} [options] - The configuration object.\n\t */\n\tconstructor( size = 1, options = {} ) {\n\n\t\tsuper( size, size, options );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isWebGLCubeRenderTarget = true;\n\n\t\tconst image = { width: size, height: size, depth: 1 };\n\t\tconst images = [ image, image, image, image, image, image ];\n\n\t\t/**\n\t\t * Overwritten with a different texture type.\n\t\t *\n\t\t * @type {DataArrayTexture}\n\t\t */\n\t\tthis.texture = new CubeTexture( images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace );\n\n\t\t// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)\n\t\t// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,\n\t\t// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.\n\n\t\t// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped\n\t\t// and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture\n\t\t// as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).\n\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\n\t}\n\n\t/**\n\t * Converts the given equirectangular texture to a cube map.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {Texture} texture - The equirectangular texture.\n\t * @return {WebGLCubeRenderTarget} A reference to this cube render target.\n\t */\n\tfromEquirectangularTexture( renderer, texture ) {\n\n\t\tthis.texture.type = texture.type;\n\t\tthis.texture.colorSpace = texture.colorSpace;\n\n\t\tthis.texture.generateMipmaps = texture.generateMipmaps;\n\t\tthis.texture.minFilter = texture.minFilter;\n\t\tthis.texture.magFilter = texture.magFilter;\n\n\t\tconst shader = {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: /* glsl */`\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t`,\n\n\t\t\tfragmentShader: /* glsl */`\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t`\n\t\t};\n\n\t\tconst geometry = new BoxGeometry( 5, 5, 5 );\n\n\t\tconst material = new ShaderMaterial( {\n\n\t\t\tname: 'CubemapFromEquirect',\n\n\t\t\tuniforms: cloneUniforms( shader.uniforms ),\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\tside: BackSide,\n\t\t\tblending: NoBlending\n\n\t\t} );\n\n\t\tmaterial.uniforms.tEquirect.value = texture;\n\n\t\tconst mesh = new Mesh( geometry, material );\n\n\t\tconst currentMinFilter = texture.minFilter;\n\n\t\t// Avoid blurred poles\n\t\tif ( texture.minFilter === LinearMipmapLinearFilter ) texture.minFilter = LinearFilter;\n\n\t\tconst camera = new CubeCamera( 1, 10, this );\n\t\tcamera.update( renderer, mesh );\n\n\t\ttexture.minFilter = currentMinFilter;\n\n\t\tmesh.geometry.dispose();\n\t\tmesh.material.dispose();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Clears this cube render target.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {boolean} [color=true] - Whether the color buffer should be cleared or not.\n\t * @param {boolean} [depth=true] - Whether the depth buffer should be cleared or not.\n\t * @param {boolean} [stencil=true] - Whether the stencil buffer should be cleared or not.\n\t */\n\tclear( renderer, color = true, depth = true, stencil = true ) {\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\trenderer.setRenderTarget( this, i );\n\n\t\t\trenderer.clear( color, depth, stencil );\n\n\t\t}\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n}\n\n/**\n * This is almost identical to an {@link Object3D}. Its purpose is to\n * make working with groups of objects syntactically clearer.\n *\n * ```js\n * // Create a group and add the two cubes.\n * // These cubes can now be rotated / scaled etc as a group.\n * const group = new THREE.Group();\n *\n * group.add( meshA );\n * group.add( meshB );\n *\n * scene.add( group );\n * ```\n *\n * @augments Object3D\n */\nclass Group extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isGroup = true;\n\n\t\tthis.type = 'Group';\n\n\t}\n\n}\n\nconst _moveEvent = { type: 'move' };\n\n/**\n * Class for representing a XR controller with its\n * different coordinate systems.\n *\n * @private\n */\nclass WebXRController {\n\n\t/**\n\t * Constructs a new XR controller.\n\t */\n\tconstructor() {\n\n\t\t/**\n\t\t * A group representing the target ray space\n\t\t * of the XR controller.\n\t\t *\n\t\t * @private\n\t\t * @type {?Group}\n\t\t * @default null\n\t\t */\n\t\tthis._targetRay = null;\n\n\t\t/**\n\t\t * A group representing the grip space\n\t\t * of the XR controller.\n\t\t *\n\t\t * @private\n\t\t * @type {?Group}\n\t\t * @default null\n\t\t */\n\t\tthis._grip = null;\n\n\t\t/**\n\t\t * A group representing the hand space\n\t\t * of the XR controller.\n\t\t *\n\t\t * @private\n\t\t * @type {?Group}\n\t\t * @default null\n\t\t */\n\t\tthis._hand = null;\n\n\t}\n\n\t/**\n\t * Returns a group representing the hand space of the XR controller.\n\t *\n\t * @return {Group} A group representing the hand space of the XR controller.\n\t */\n\tgetHandSpace() {\n\n\t\tif ( this._hand === null ) {\n\n\t\t\tthis._hand = new Group();\n\t\t\tthis._hand.matrixAutoUpdate = false;\n\t\t\tthis._hand.visible = false;\n\n\t\t\tthis._hand.joints = {};\n\t\t\tthis._hand.inputState = { pinching: false };\n\n\t\t}\n\n\t\treturn this._hand;\n\n\t}\n\n\t/**\n\t * Returns a group representing the target ray space of the XR controller.\n\t *\n\t * @return {Group} A group representing the target ray space of the XR controller.\n\t */\n\tgetTargetRaySpace() {\n\n\t\tif ( this._targetRay === null ) {\n\n\t\t\tthis._targetRay = new Group();\n\t\t\tthis._targetRay.matrixAutoUpdate = false;\n\t\t\tthis._targetRay.visible = false;\n\t\t\tthis._targetRay.hasLinearVelocity = false;\n\t\t\tthis._targetRay.linearVelocity = new Vector3();\n\t\t\tthis._targetRay.hasAngularVelocity = false;\n\t\t\tthis._targetRay.angularVelocity = new Vector3();\n\n\t\t}\n\n\t\treturn this._targetRay;\n\n\t}\n\n\t/**\n\t * Returns a group representing the grip space of the XR controller.\n\t *\n\t * @return {Group} A group representing the grip space of the XR controller.\n\t */\n\tgetGripSpace() {\n\n\t\tif ( this._grip === null ) {\n\n\t\t\tthis._grip = new Group();\n\t\t\tthis._grip.matrixAutoUpdate = false;\n\t\t\tthis._grip.visible = false;\n\t\t\tthis._grip.hasLinearVelocity = false;\n\t\t\tthis._grip.linearVelocity = new Vector3();\n\t\t\tthis._grip.hasAngularVelocity = false;\n\t\t\tthis._grip.angularVelocity = new Vector3();\n\n\t\t}\n\n\t\treturn this._grip;\n\n\t}\n\n\t/**\n\t * Dispatches the given event to the groups representing\n\t * the different coordinate spaces of the XR controller.\n\t *\n\t * @param {Object} event - The event to dispatch.\n\t * @return {WebXRController} A reference to this instance.\n\t */\n\tdispatchEvent( event ) {\n\n\t\tif ( this._targetRay !== null ) {\n\n\t\t\tthis._targetRay.dispatchEvent( event );\n\n\t\t}\n\n\t\tif ( this._grip !== null ) {\n\n\t\t\tthis._grip.dispatchEvent( event );\n\n\t\t}\n\n\t\tif ( this._hand !== null ) {\n\n\t\t\tthis._hand.dispatchEvent( event );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Connects the controller with the given XR input source.\n\t *\n\t * @param {XRInputSource} inputSource - The input source.\n\t * @return {WebXRController} A reference to this instance.\n\t */\n\tconnect( inputSource ) {\n\n\t\tif ( inputSource && inputSource.hand ) {\n\n\t\t\tconst hand = this._hand;\n\n\t\t\tif ( hand ) {\n\n\t\t\t\tfor ( const inputjoint of inputSource.hand.values() ) {\n\n\t\t\t\t\t// Initialize hand with joints when connected\n\t\t\t\t\tthis._getHandJoint( hand, inputjoint );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.dispatchEvent( { type: 'connected', data: inputSource } );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Disconnects the controller from the given XR input source.\n\t *\n\t * @param {XRInputSource} inputSource - The input source.\n\t * @return {WebXRController} A reference to this instance.\n\t */\n\tdisconnect( inputSource ) {\n\n\t\tthis.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\n\t\tif ( this._targetRay !== null ) {\n\n\t\t\tthis._targetRay.visible = false;\n\n\t\t}\n\n\t\tif ( this._grip !== null ) {\n\n\t\t\tthis._grip.visible = false;\n\n\t\t}\n\n\t\tif ( this._hand !== null ) {\n\n\t\t\tthis._hand.visible = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Updates the controller with the given input source, XR frame and reference space.\n\t * This updates the transformations of the groups that represent the different\n\t * coordinate systems of the controller.\n\t *\n\t * @param {XRInputSource} inputSource - The input source.\n\t * @param {XRFrame} frame - The XR frame.\n\t * @param {XRReferenceSpace} referenceSpace - The reference space.\n\t * @return {WebXRController} A reference to this instance.\n\t */\n\tupdate( inputSource, frame, referenceSpace ) {\n\n\t\tlet inputPose = null;\n\t\tlet gripPose = null;\n\t\tlet handPose = null;\n\n\t\tconst targetRay = this._targetRay;\n\t\tconst grip = this._grip;\n\t\tconst hand = this._hand;\n\n\t\tif ( inputSource && frame.session.visibilityState !== 'visible-blurred' ) {\n\n\t\t\tif ( hand && inputSource.hand ) {\n\n\t\t\t\thandPose = true;\n\n\t\t\t\tfor ( const inputjoint of inputSource.hand.values() ) {\n\n\t\t\t\t\t// Update the joints groups with the XRJoint poses\n\t\t\t\t\tconst jointPose = frame.getJointPose( inputjoint, referenceSpace );\n\n\t\t\t\t\t// The transform of this joint will be updated with the joint pose on each frame\n\t\t\t\t\tconst joint = this._getHandJoint( hand, inputjoint );\n\n\t\t\t\t\tif ( jointPose !== null ) {\n\n\t\t\t\t\t\tjoint.matrix.fromArray( jointPose.transform.matrix );\n\t\t\t\t\t\tjoint.matrix.decompose( joint.position, joint.rotation, joint.scale );\n\t\t\t\t\t\tjoint.matrixWorldNeedsUpdate = true;\n\t\t\t\t\t\tjoint.jointRadius = jointPose.radius;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tjoint.visible = jointPose !== null;\n\n\t\t\t\t}\n\n\t\t\t\t// Custom events\n\n\t\t\t\t// Check pinchz\n\t\t\t\tconst indexTip = hand.joints[ 'index-finger-tip' ];\n\t\t\t\tconst thumbTip = hand.joints[ 'thumb-tip' ];\n\t\t\t\tconst distance = indexTip.position.distanceTo( thumbTip.position );\n\n\t\t\t\tconst distanceToPinch = 0.02;\n\t\t\t\tconst threshold = 0.005;\n\n\t\t\t\tif ( hand.inputState.pinching && distance > distanceToPinch + threshold ) {\n\n\t\t\t\t\thand.inputState.pinching = false;\n\t\t\t\t\tthis.dispatchEvent( {\n\t\t\t\t\t\ttype: 'pinchend',\n\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\ttarget: this\n\t\t\t\t\t} );\n\n\t\t\t\t} else if ( ! hand.inputState.pinching && distance <= distanceToPinch - threshold ) {\n\n\t\t\t\t\thand.inputState.pinching = true;\n\t\t\t\t\tthis.dispatchEvent( {\n\t\t\t\t\t\ttype: 'pinchstart',\n\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\ttarget: this\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( grip !== null && inputSource.gripSpace ) {\n\n\t\t\t\t\tgripPose = frame.getPose( inputSource.gripSpace, referenceSpace );\n\n\t\t\t\t\tif ( gripPose !== null ) {\n\n\t\t\t\t\t\tgrip.matrix.fromArray( gripPose.transform.matrix );\n\t\t\t\t\t\tgrip.matrix.decompose( grip.position, grip.rotation, grip.scale );\n\t\t\t\t\t\tgrip.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t\t\tif ( gripPose.linearVelocity ) {\n\n\t\t\t\t\t\t\tgrip.hasLinearVelocity = true;\n\t\t\t\t\t\t\tgrip.linearVelocity.copy( gripPose.linearVelocity );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgrip.hasLinearVelocity = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( gripPose.angularVelocity ) {\n\n\t\t\t\t\t\t\tgrip.hasAngularVelocity = true;\n\t\t\t\t\t\t\tgrip.angularVelocity.copy( gripPose.angularVelocity );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgrip.hasAngularVelocity = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( targetRay !== null ) {\n\n\t\t\t\tinputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );\n\n\t\t\t\t// Some runtimes (namely Vive Cosmos with Vive OpenXR Runtime) have only grip space and ray space is equal to it\n\t\t\t\tif ( inputPose === null && gripPose !== null ) {\n\n\t\t\t\t\tinputPose = gripPose;\n\n\t\t\t\t}\n\n\t\t\t\tif ( inputPose !== null ) {\n\n\t\t\t\t\ttargetRay.matrix.fromArray( inputPose.transform.matrix );\n\t\t\t\t\ttargetRay.matrix.decompose( targetRay.position, targetRay.rotation, targetRay.scale );\n\t\t\t\t\ttargetRay.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t\tif ( inputPose.linearVelocity ) {\n\n\t\t\t\t\t\ttargetRay.hasLinearVelocity = true;\n\t\t\t\t\t\ttargetRay.linearVelocity.copy( inputPose.linearVelocity );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttargetRay.hasLinearVelocity = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( inputPose.angularVelocity ) {\n\n\t\t\t\t\t\ttargetRay.hasAngularVelocity = true;\n\t\t\t\t\t\ttargetRay.angularVelocity.copy( inputPose.angularVelocity );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttargetRay.hasAngularVelocity = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.dispatchEvent( _moveEvent );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t}\n\n\t\tif ( targetRay !== null ) {\n\n\t\t\ttargetRay.visible = ( inputPose !== null );\n\n\t\t}\n\n\t\tif ( grip !== null ) {\n\n\t\t\tgrip.visible = ( gripPose !== null );\n\n\t\t}\n\n\t\tif ( hand !== null ) {\n\n\t\t\thand.visible = ( handPose !== null );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a group representing the hand joint for the given input joint.\n\t *\n\t * @private\n\t * @param {Group} hand - The group representing the hand space.\n\t * @param {XRJointSpace} inputjoint - The hand joint data.\n\t * @return {Group} A group representing the hand joint for the given input joint.\n\t */\n\t_getHandJoint( hand, inputjoint ) {\n\n\t\tif ( hand.joints[ inputjoint.jointName ] === undefined ) {\n\n\t\t\tconst joint = new Group();\n\t\t\tjoint.matrixAutoUpdate = false;\n\t\t\tjoint.visible = false;\n\t\t\thand.joints[ inputjoint.jointName ] = joint;\n\n\t\t\thand.add( joint );\n\n\t\t}\n\n\t\treturn hand.joints[ inputjoint.jointName ];\n\n\t}\n\n}\n\n/**\n * This class can be used to define an exponential squared fog,\n * which gives a clear view near the camera and a faster than exponentially\n * densening fog farther from the camera.\n *\n * ```js\n * const scene = new THREE.Scene();\n * scene.fog = new THREE.FogExp2( 0xcccccc, 0.002 );\n * ```\n */\nclass FogExp2 {\n\n\t/**\n\t * Constructs a new fog.\n\t *\n\t * @param {number|Color} color - The fog's color.\n\t * @param {number} [density=0.00025] - Defines how fast the fog will grow dense.\n\t */\n\tconstructor( color, density = 0.00025 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isFogExp2 = true;\n\n\t\t/**\n\t\t * The name of the fog.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = '';\n\n\t\t/**\n\t\t * The fog's color.\n\t\t *\n\t\t * @type {Color}\n\t\t */\n\t\tthis.color = new Color( color );\n\n\t\t/**\n\t\t *  Defines how fast the fog will grow dense.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.00025\n\t\t */\n\t\tthis.density = density;\n\n\t}\n\n\t/**\n\t * Returns a new fog with copied values from this instance.\n\t *\n\t * @return {FogExp2} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new FogExp2( this.color, this.density );\n\n\t}\n\n\t/**\n\t * Serializes the fog into JSON.\n\t *\n\t * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n\t * @return {Object} A JSON object representing the serialized fog\n\t */\n\ttoJSON( /* meta */ ) {\n\n\t\treturn {\n\t\t\ttype: 'FogExp2',\n\t\t\tname: this.name,\n\t\t\tcolor: this.color.getHex(),\n\t\t\tdensity: this.density\n\t\t};\n\n\t}\n\n}\n\n/**\n * This class can be used to define a linear fog that grows linearly denser\n * with the distance.\n *\n * ```js\n * const scene = new THREE.Scene();\n * scene.fog = new THREE.Fog( 0xcccccc, 10, 15 );\n * ```\n */\nclass Fog {\n\n\t/**\n\t * Constructs a new fog.\n\t *\n\t * @param {number|Color} color - The fog's color.\n\t * @param {number} [near=1] - The minimum distance to start applying fog.\n\t * @param {number} [far=1000] - The maximum distance at which fog stops being calculated and applied.\n\t */\n\tconstructor( color, near = 1, far = 1000 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isFog = true;\n\n\t\t/**\n\t\t * The name of the fog.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = '';\n\n\t\t/**\n\t\t * The fog's color.\n\t\t *\n\t\t * @type {Color}\n\t\t */\n\t\tthis.color = new Color( color );\n\n\t\t/**\n\t\t * The minimum distance to start applying fog. Objects that are less than\n\t\t * `near` units from the active camera won't be affected by fog.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.near = near;\n\n\t\t/**\n\t\t * The maximum distance at which fog stops being calculated and applied.\n\t\t * Objects that are more than `far` units away from the active camera won't\n\t\t * be affected by fog.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1000\n\t\t */\n\t\tthis.far = far;\n\n\t}\n\n\t/**\n\t * Returns a new fog with copied values from this instance.\n\t *\n\t * @return {Fog} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new Fog( this.color, this.near, this.far );\n\n\t}\n\n\t/**\n\t * Serializes the fog into JSON.\n\t *\n\t * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n\t * @return {Object} A JSON object representing the serialized fog\n\t */\n\ttoJSON( /* meta */ ) {\n\n\t\treturn {\n\t\t\ttype: 'Fog',\n\t\t\tname: this.name,\n\t\t\tcolor: this.color.getHex(),\n\t\t\tnear: this.near,\n\t\t\tfar: this.far\n\t\t};\n\n\t}\n\n}\n\n/**\n * Scenes allow you to set up what is to be rendered and where by three.js.\n * This is where you place 3D objects like meshes, lines or lights.\n *\n * @augments Object3D\n */\nclass Scene extends Object3D {\n\n\t/**\n\t * Constructs a new scene.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isScene = true;\n\n\t\tthis.type = 'Scene';\n\n\t\t/**\n\t\t * Defines the background of the scene. Valid inputs are:\n\t\t *\n\t\t * - A color for defining a uniform colored background.\n\t\t * - A texture for defining a (flat) textured background.\n\t\t * - Cube textures or equirectangular textures for defining a skybox.\n\t\t *\n\t\t * @type {?(Color|Texture)}\n\t\t * @default null\n\t\t */\n\t\tthis.background = null;\n\n\t\t/**\n\t\t * Sets the environment map for all physical materials in the scene. However,\n\t\t * it's not possible to overwrite an existing texture assigned to the `envMap`\n\t\t * material property.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.environment = null;\n\n\t\t/**\n\t\t * A fog instance defining the type of fog that affects everything\n\t\t * rendered in the scene.\n\t\t *\n\t\t * @type {?(Fog|FogExp2)}\n\t\t * @default null\n\t\t */\n\t\tthis.fog = null;\n\n\t\t/**\n\t\t * Sets the blurriness of the background. Only influences environment maps\n\t\t * assigned to {@link Scene#background}. Valid input is a float between `0`\n\t\t * and `1`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.backgroundBlurriness = 0;\n\n\t\t/**\n\t\t * Attenuates the color of the background. Only applies to background textures.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.backgroundIntensity = 1;\n\n\t\t/**\n\t\t * The rotation of the background in radians. Only influences environment maps\n\t\t * assigned to {@link Scene#background}.\n\t\t *\n\t\t * @type {Euler}\n\t\t * @default (0,0,0)\n\t\t */\n\t\tthis.backgroundRotation = new Euler();\n\n\t\t/**\n\t\t * Attenuates the color of the environment. Only influences environment maps\n\t\t * assigned to {@link Scene#environment}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.environmentIntensity = 1;\n\n\t\t/**\n\t\t * The rotation of the environment map in radians. Only influences physical materials\n\t\t * in the scene when {@link Scene#environment} is used.\n\t\t *\n\t\t * @type {Euler}\n\t\t * @default (0,0,0)\n\t\t */\n\t\tthis.environmentRotation = new Euler();\n\n\t\t/**\n\t\t * Forces everything in the scene to be rendered with the defined material. It is possible\n\t\t * to exclude materials from override by setting {@link Material#allowOverride} to `false`.\n\t\t *\n\t\t * @type {?Material}\n\t\t * @default null\n\t\t */\n\t\tthis.overrideMaterial = null;\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );\n\n\t\t}\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tif ( source.background !== null ) this.background = source.background.clone();\n\t\tif ( source.environment !== null ) this.environment = source.environment.clone();\n\t\tif ( source.fog !== null ) this.fog = source.fog.clone();\n\n\t\tthis.backgroundBlurriness = source.backgroundBlurriness;\n\t\tthis.backgroundIntensity = source.backgroundIntensity;\n\t\tthis.backgroundRotation.copy( source.backgroundRotation );\n\n\t\tthis.environmentIntensity = source.environmentIntensity;\n\t\tthis.environmentRotation.copy( source.environmentRotation );\n\n\t\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\n\n\t\tif ( this.backgroundBlurriness > 0 ) data.object.backgroundBlurriness = this.backgroundBlurriness;\n\t\tif ( this.backgroundIntensity !== 1 ) data.object.backgroundIntensity = this.backgroundIntensity;\n\t\tdata.object.backgroundRotation = this.backgroundRotation.toArray();\n\n\t\tif ( this.environmentIntensity !== 1 ) data.object.environmentIntensity = this.environmentIntensity;\n\t\tdata.object.environmentRotation = this.environmentRotation.toArray();\n\n\t\treturn data;\n\n\t}\n\n}\n\n/**\n * \"Interleaved\" means that multiple attributes, possibly of different types,\n * (e.g., position, normal, uv, color) are packed into a single array buffer.\n *\n * An introduction into interleaved arrays can be found here: [Interleaved array basics]{@link https://blog.tojicode.com/2011/05/interleaved-array-basics.html}\n */\nclass InterleavedBuffer {\n\n\t/**\n\t * Constructs a new interleaved buffer.\n\t *\n\t * @param {TypedArray} array - A typed array with a shared buffer storing attribute data.\n\t * @param {number} stride - The number of typed-array elements per vertex.\n\t */\n\tconstructor( array, stride ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isInterleavedBuffer = true;\n\n\t\t/**\n\t\t * A typed array with a shared buffer storing attribute data.\n\t\t *\n\t\t * @type {TypedArray}\n\t\t */\n\t\tthis.array = array;\n\n\t\t/**\n\t\t * The number of typed-array elements per vertex.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.stride = stride;\n\n\t\t/**\n\t\t * The total number of elements in the array\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\n\t\t/**\n\t\t * Defines the intended usage pattern of the data store for optimization purposes.\n\t\t *\n\t\t * Note: After the initial use of a buffer, its usage cannot be changed. Instead,\n\t\t * instantiate a new one and set the desired usage before the next render.\n\t\t *\n\t\t * @type {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)}\n\t\t * @default StaticDrawUsage\n\t\t */\n\t\tthis.usage = StaticDrawUsage;\n\n\t\t/**\n\t\t * This can be used to only update some components of stored vectors (for example, just the\n\t\t * component related to color). Use the `addUpdateRange()` function to add ranges to this array.\n\t\t *\n\t\t * @type {Array<Object>}\n\t\t */\n\t\tthis.updateRanges = [];\n\n\t\t/**\n\t\t * A version number, incremented every time the `needsUpdate` is set to `true`.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.version = 0;\n\n\t\t/**\n\t\t * The UUID of the interleaved buffer.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.uuid = generateUUID();\n\n\t}\n\n\t/**\n\t * A callback function that is executed after the renderer has transferred the attribute array\n\t * data to the GPU.\n\t */\n\tonUploadCallback() {}\n\n\t/**\n\t * Flag to indicate that this attribute has changed and should be re-sent to\n\t * the GPU. Set this to `true` when you modify the value of the array.\n\t *\n\t * @type {number}\n\t * @default false\n\t * @param {boolean} value\n\t */\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\t/**\n\t * Sets the usage of this interleaved buffer.\n\t *\n\t * @param {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)} value - The usage to set.\n\t * @return {InterleavedBuffer} A reference to this interleaved buffer.\n\t */\n\tsetUsage( value ) {\n\n\t\tthis.usage = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds a range of data in the data array to be updated on the GPU.\n\t *\n\t * @param {number} start - Position at which to start update.\n\t * @param {number} count - The number of components to update.\n\t */\n\taddUpdateRange( start, count ) {\n\n\t\tthis.updateRanges.push( { start, count } );\n\n\t}\n\n\t/**\n\t * Clears the update ranges.\n\t */\n\tclearUpdateRanges() {\n\n\t\tthis.updateRanges.length = 0;\n\n\t}\n\n\t/**\n\t * Copies the values of the given interleaved buffer to this instance.\n\t *\n\t * @param {InterleavedBuffer} source - The interleaved buffer to copy.\n\t * @return {InterleavedBuffer} A reference to this instance.\n\t */\n\tcopy( source ) {\n\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.count = source.count;\n\t\tthis.stride = source.stride;\n\t\tthis.usage = source.usage;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies a vector from the given interleaved buffer to this one. The start\n\t * and destination position in the attribute buffers are represented by the\n\t * given indices.\n\t *\n\t * @param {number} index1 - The destination index into this interleaved buffer.\n\t * @param {InterleavedBuffer} interleavedBuffer - The interleaved buffer to copy from.\n\t * @param {number} index2 - The source index into the given interleaved buffer.\n\t * @return {InterleavedBuffer} A reference to this instance.\n\t */\n\tcopyAt( index1, interleavedBuffer, index2 ) {\n\n\t\tindex1 *= this.stride;\n\t\tindex2 *= interleavedBuffer.stride;\n\n\t\tfor ( let i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = interleavedBuffer.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given array data in the interleaved buffer.\n\t *\n\t * @param {(TypedArray|Array)} value - The array data to set.\n\t * @param {number} [offset=0] - The offset in this interleaved buffer's array.\n\t * @return {InterleavedBuffer} A reference to this instance.\n\t */\n\tset( value, offset = 0 ) {\n\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new interleaved buffer with copied values from this instance.\n\t *\n\t * @param {Object} [data] - An object with shared array buffers that allows to retain shared structures.\n\t * @return {InterleavedBuffer} A clone of this instance.\n\t */\n\tclone( data ) {\n\n\t\tif ( data.arrayBuffers === undefined ) {\n\n\t\t\tdata.arrayBuffers = {};\n\n\t\t}\n\n\t\tif ( this.array.buffer._uuid === undefined ) {\n\n\t\t\tthis.array.buffer._uuid = generateUUID();\n\n\t\t}\n\n\t\tif ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\n\n\t\t\tdata.arrayBuffers[ this.array.buffer._uuid ] = this.array.slice( 0 ).buffer;\n\n\t\t}\n\n\t\tconst array = new this.array.constructor( data.arrayBuffers[ this.array.buffer._uuid ] );\n\n\t\tconst ib = new this.constructor( array, this.stride );\n\t\tib.setUsage( this.usage );\n\n\t\treturn ib;\n\n\t}\n\n\t/**\n\t * Sets the given callback function that is executed after the Renderer has transferred\n\t * the array data to the GPU. Can be used to perform clean-up operations after\n\t * the upload when data are not needed anymore on the CPU side.\n\t *\n\t * @param {Function} callback - The `onUpload()` callback.\n\t * @return {InterleavedBuffer} A reference to this instance.\n\t */\n\tonUpload( callback ) {\n\n\t\tthis.onUploadCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Serializes the interleaved buffer into JSON.\n\t *\n\t * @param {Object} [data] - An optional value holding meta information about the serialization.\n\t * @return {Object} A JSON object representing the serialized interleaved buffer.\n\t */\n\ttoJSON( data ) {\n\n\t\tif ( data.arrayBuffers === undefined ) {\n\n\t\t\tdata.arrayBuffers = {};\n\n\t\t}\n\n\t\t// generate UUID for array buffer if necessary\n\n\t\tif ( this.array.buffer._uuid === undefined ) {\n\n\t\t\tthis.array.buffer._uuid = generateUUID();\n\n\t\t}\n\n\t\tif ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\n\n\t\t\tdata.arrayBuffers[ this.array.buffer._uuid ] = Array.from( new Uint32Array( this.array.buffer ) );\n\n\t\t}\n\n\t\t//\n\n\t\treturn {\n\t\t\tuuid: this.uuid,\n\t\t\tbuffer: this.array.buffer._uuid,\n\t\t\ttype: this.array.constructor.name,\n\t\t\tstride: this.stride\n\t\t};\n\n\t}\n\n}\n\nconst _vector$7 = /*@__PURE__*/ new Vector3();\n\n/**\n * An alternative version of a buffer attribute with interleaved data. Interleaved\n * attributes share a common interleaved data storage ({@link InterleavedBuffer}) and refer with\n * different offsets into the buffer.\n */\nclass InterleavedBufferAttribute {\n\n\t/**\n\t * Constructs a new interleaved buffer attribute.\n\t *\n\t * @param {InterleavedBuffer} interleavedBuffer - The buffer holding the interleaved data.\n\t * @param {number} itemSize - The item size.\n\t * @param {number} offset - The attribute offset into the buffer.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */\n\tconstructor( interleavedBuffer, itemSize, offset, normalized = false ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isInterleavedBufferAttribute = true;\n\n\t\t/**\n\t\t * The name of the buffer attribute.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = '';\n\n\t\t/**\n\t\t * The buffer holding the interleaved data.\n\t\t *\n\t\t * @type {InterleavedBuffer}\n\t\t */\n\t\tthis.data = interleavedBuffer;\n\n\t\t/**\n\t\t * The item size, see {@link BufferAttribute#itemSize}.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.itemSize = itemSize;\n\n\t\t/**\n\t\t * The attribute offset into the buffer.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.offset = offset;\n\n\t\t/**\n\t\t * Whether the data are normalized or not, see {@link BufferAttribute#normalized}\n\t\t *\n\t\t * @type {InterleavedBuffer}\n\t\t */\n\t\tthis.normalized = normalized;\n\n\t}\n\n\t/**\n\t * The item count of this buffer attribute.\n\t *\n\t * @type {number}\n\t * @readonly\n\t */\n\tget count() {\n\n\t\treturn this.data.count;\n\n\t}\n\n\t/**\n\t * The array holding the interleaved buffer attribute data.\n\t *\n\t * @type {TypedArray}\n\t */\n\tget array() {\n\n\t\treturn this.data.array;\n\n\t}\n\n\t/**\n\t * Flag to indicate that this attribute has changed and should be re-sent to\n\t * the GPU. Set this to `true` when you modify the value of the array.\n\t *\n\t * @type {number}\n\t * @default false\n\t * @param {boolean} value\n\t */\n\tset needsUpdate( value ) {\n\n\t\tthis.data.needsUpdate = value;\n\n\t}\n\n\t/**\n\t * Applies the given 4x4 matrix to the given attribute. Only works with\n\t * item size `3`.\n\t *\n\t * @param {Matrix4} m - The matrix to apply.\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\n\t */\n\tapplyMatrix4( m ) {\n\n\t\tfor ( let i = 0, l = this.data.count; i < l; i ++ ) {\n\n\t\t\t_vector$7.fromBufferAttribute( this, i );\n\n\t\t\t_vector$7.applyMatrix4( m );\n\n\t\t\tthis.setXYZ( i, _vector$7.x, _vector$7.y, _vector$7.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Applies the given 3x3 normal matrix to the given attribute. Only works with\n\t * item size `3`.\n\t *\n\t * @param {Matrix3} m - The normal matrix to apply.\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\n\t */\n\tapplyNormalMatrix( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$7.fromBufferAttribute( this, i );\n\n\t\t\t_vector$7.applyNormalMatrix( m );\n\n\t\t\tthis.setXYZ( i, _vector$7.x, _vector$7.y, _vector$7.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Applies the given 4x4 matrix to the given attribute. Only works with\n\t * item size `3` and with direction vectors.\n\t *\n\t * @param {Matrix4} m - The matrix to apply.\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\n\t */\n\ttransformDirection( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$7.fromBufferAttribute( this, i );\n\n\t\t\t_vector$7.transformDirection( m );\n\n\t\t\tthis.setXYZ( i, _vector$7.x, _vector$7.y, _vector$7.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the given component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} component - The component index.\n\t * @return {number} The returned value.\n\t */\n\tgetComponent( index, component ) {\n\n\t\tlet value = this.array[ index * this.data.stride + this.offset + component ];\n\n\t\tif ( this.normalized ) value = denormalize( value, this.array );\n\n\t\treturn value;\n\n\t}\n\n\t/**\n\t * Sets the given value to the given component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} component - The component index.\n\t * @param {number} value - The value to set.\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\n\t */\n\tsetComponent( index, component, value ) {\n\n\t\tif ( this.normalized ) value = normalize( value, this.array );\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + component ] = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the x component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} x - The value to set.\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\n\t */\n\tsetX( index, x ) {\n\n\t\tif ( this.normalized ) x = normalize( x, this.array );\n\n\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the y component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} y - The value to set.\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\n\t */\n\tsetY( index, y ) {\n\n\t\tif ( this.normalized ) y = normalize( y, this.array );\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the z component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} z - The value to set.\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\n\t */\n\tsetZ( index, z ) {\n\n\t\tif ( this.normalized ) z = normalize( z, this.array );\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the w component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} w - The value to set.\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\n\t */\n\tsetW( index, w ) {\n\n\t\tif ( this.normalized ) w = normalize( w, this.array );\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the x component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @return {number} The x component.\n\t */\n\tgetX( index ) {\n\n\t\tlet x = this.data.array[ index * this.data.stride + this.offset ];\n\n\t\tif ( this.normalized ) x = denormalize( x, this.array );\n\n\t\treturn x;\n\n\t}\n\n\t/**\n\t * Returns the y component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @return {number} The y component.\n\t */\n\tgetY( index ) {\n\n\t\tlet y = this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t\tif ( this.normalized ) y = denormalize( y, this.array );\n\n\t\treturn y;\n\n\t}\n\n\t/**\n\t * Returns the z component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @return {number} The z component.\n\t */\n\tgetZ( index ) {\n\n\t\tlet z = this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t\tif ( this.normalized ) z = denormalize( z, this.array );\n\n\t\treturn z;\n\n\t}\n\n\t/**\n\t * Returns the w component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @return {number} The w component.\n\t */\n\tgetW( index ) {\n\n\t\tlet w = this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t\tif ( this.normalized ) w = denormalize( w, this.array );\n\n\t\treturn w;\n\n\t}\n\n\t/**\n\t * Sets the x and y component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} x - The value for the x component to set.\n\t * @param {number} y - The value for the y component to set.\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\n\t */\n\tsetXY( index, x, y ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\n\t\t}\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the x, y and z component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} x - The value for the x component to set.\n\t * @param {number} y - The value for the y component to set.\n\t * @param {number} z - The value for the z component to set.\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\n\t */\n\tsetXYZ( index, x, y, z ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\n\t\t}\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the x, y, z and w component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} x - The value for the x component to set.\n\t * @param {number} y - The value for the y component to set.\n\t * @param {number} z - The value for the z component to set.\n\t * @param {number} w - The value for the w component to set.\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\n\t */\n\tsetXYZW( index, x, y, z, w ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\t\t\tw = normalize( w, this.array );\n\n\t\t}\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\t\tthis.data.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new buffer attribute with copied values from this instance.\n\t *\n\t * If no parameter is provided, cloning an interleaved buffer attribute will de-interleave buffer data.\n\t *\n\t * @param {Object} [data] - An object with interleaved buffers that allows to retain the interleaved property.\n\t * @return {BufferAttribute|InterleavedBufferAttribute} A clone of this instance.\n\t */\n\tclone( data ) {\n\n\t\tif ( data === undefined ) {\n\n\t\t\tconsole.log( 'THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.' );\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0; i < this.count; i ++ ) {\n\n\t\t\t\tconst index = i * this.data.stride + this.offset;\n\n\t\t\t\tfor ( let j = 0; j < this.itemSize; j ++ ) {\n\n\t\t\t\t\tarray.push( this.data.array[ index + j ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new BufferAttribute( new this.array.constructor( array ), this.itemSize, this.normalized );\n\n\t\t} else {\n\n\t\t\tif ( data.interleavedBuffers === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers = {};\n\n\t\t\t}\n\n\t\t\tif ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers[ this.data.uuid ] = this.data.clone( data );\n\n\t\t\t}\n\n\t\t\treturn new InterleavedBufferAttribute( data.interleavedBuffers[ this.data.uuid ], this.itemSize, this.offset, this.normalized );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Serializes the buffer attribute into JSON.\n\t *\n\t * If no parameter is provided, cloning an interleaved buffer attribute will de-interleave buffer data.\n\t *\n\t * @param {Object} [data] - An optional value holding meta information about the serialization.\n\t * @return {Object} A JSON object representing the serialized buffer attribute.\n\t */\n\ttoJSON( data ) {\n\n\t\tif ( data === undefined ) {\n\n\t\t\tconsole.log( 'THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.' );\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0; i < this.count; i ++ ) {\n\n\t\t\t\tconst index = i * this.data.stride + this.offset;\n\n\t\t\t\tfor ( let j = 0; j < this.itemSize; j ++ ) {\n\n\t\t\t\t\tarray.push( this.data.array[ index + j ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// de-interleave data and save it as an ordinary buffer attribute for now\n\n\t\t\treturn {\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tarray: array,\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\n\t\t} else {\n\n\t\t\t// save as true interleaved attribute\n\n\t\t\tif ( data.interleavedBuffers === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers = {};\n\n\t\t\t}\n\n\t\t\tif ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers[ this.data.uuid ] = this.data.toJSON( data );\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tisInterleavedBufferAttribute: true,\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\tdata: this.data.uuid,\n\t\t\t\toffset: this.offset,\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * A material for rendering instances of {@link Sprite}.\n *\n * ```js\n * const map = new THREE.TextureLoader().load( 'textures/sprite.png' );\n * const material = new THREE.SpriteMaterial( { map: map, color: 0xffffff } );\n *\n * const sprite = new THREE.Sprite( material );\n * sprite.scale.set(200, 200, 1)\n * scene.add( sprite );\n * ```\n *\n * @augments Material\n */\nclass SpriteMaterial extends Material {\n\n\t/**\n\t * Constructs a new sprite material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSpriteMaterial = true;\n\n\t\tthis.type = 'SpriteMaterial';\n\n\t\t/**\n\t\t * Color of the material.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */\n\t\tthis.color = new Color( 0xffffff );\n\n\t\t/**\n\t\t * The color map. May optionally include an alpha channel, typically combined\n\t\t * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n\t\t * color is modulated by the diffuse `color`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.map = null;\n\n\t\t/**\n\t\t * The alpha map is a grayscale texture that controls the opacity across the\n\t\t * surface (black: fully transparent; white: fully opaque).\n\t\t *\n\t\t * Only the color of the texture is used, ignoring the alpha channel if one\n\t\t * exists. For RGB and RGBA textures, the renderer will use the green channel\n\t\t * when sampling this texture due to the extra bit of precision provided for\n\t\t * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n\t\t * luminance/alpha textures will also still work as expected.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.alphaMap = null;\n\n\t\t/**\n\t\t * The rotation of the sprite in radians.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.rotation = 0;\n\n\t\t/**\n\t\t * Specifies whether size of the sprite is attenuated by the camera depth (perspective camera only).\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.sizeAttenuation = true;\n\n\t\t/**\n\t\t * Overwritten since sprite materials are transparent\n\t\t * by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.transparent = true;\n\n\t\t/**\n\t\t * Whether the material is affected by fog or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nlet _geometry;\n\nconst _intersectPoint = /*@__PURE__*/ new Vector3();\nconst _worldScale = /*@__PURE__*/ new Vector3();\nconst _mvPosition = /*@__PURE__*/ new Vector3();\n\nconst _alignedPosition = /*@__PURE__*/ new Vector2();\nconst _rotatedPosition = /*@__PURE__*/ new Vector2();\nconst _viewWorldMatrix = /*@__PURE__*/ new Matrix4();\n\nconst _vA = /*@__PURE__*/ new Vector3();\nconst _vB = /*@__PURE__*/ new Vector3();\nconst _vC = /*@__PURE__*/ new Vector3();\n\nconst _uvA = /*@__PURE__*/ new Vector2();\nconst _uvB = /*@__PURE__*/ new Vector2();\nconst _uvC = /*@__PURE__*/ new Vector2();\n\n/**\n * A sprite is a plane that always faces towards the camera, generally with a\n * partially transparent texture applied.\n *\n * Sprites do not cast shadows, setting {@link Object3D#castShadow} to `true` will\n * have no effect.\n *\n * ```js\n * const map = new THREE.TextureLoader().load( 'sprite.png' );\n * const material = new THREE.SpriteMaterial( { map: map } );\n *\n * const sprite = new THREE.Sprite( material );\n * scene.add( sprite );\n * ```\n *\n * @augments Object3D\n */\nclass Sprite extends Object3D {\n\n\t/**\n\t * Constructs a new sprite.\n\t *\n\t * @param {SpriteMaterial} [material] - The sprite material.\n\t */\n\tconstructor( material = new SpriteMaterial() ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSprite = true;\n\n\t\tthis.type = 'Sprite';\n\n\t\tif ( _geometry === undefined ) {\n\n\t\t\t_geometry = new BufferGeometry();\n\n\t\t\tconst float32Array = new Float32Array( [\n\t\t\t\t-0.5, -0.5, 0, 0, 0,\n\t\t\t\t0.5, -0.5, 0, 1, 0,\n\t\t\t\t0.5, 0.5, 0, 1, 1,\n\t\t\t\t-0.5, 0.5, 0, 0, 1\n\t\t\t] );\n\n\t\t\tconst interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\n\n\t\t\t_geometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\n\t\t\t_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\n\t\t\t_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\n\n\t\t}\n\n\t\t/**\n\t\t * The sprite geometry.\n\t\t *\n\t\t * @type {BufferGeometry}\n\t\t */\n\t\tthis.geometry = _geometry;\n\n\t\t/**\n\t\t * The sprite material.\n\t\t *\n\t\t * @type {SpriteMaterial}\n\t\t */\n\t\tthis.material = material;\n\n\t\t/**\n\t\t * The sprite's anchor point, and the point around which the sprite rotates.\n\t\t * A value of `(0.5, 0.5)` corresponds to the midpoint of the sprite. A value\n\t\t * of `(0, 0)` corresponds to the lower left corner of the sprite.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (0.5,0.5)\n\t\t */\n\t\tthis.center = new Vector2( 0.5, 0.5 );\n\n\t}\n\n\t/**\n\t * Computes intersection points between a casted ray and this sprite.\n\t *\n\t * @param {Raycaster} raycaster - The raycaster.\n\t * @param {Array<Object>} intersects - The target array that holds the intersection points.\n\t */\n\traycast( raycaster, intersects ) {\n\n\t\tif ( raycaster.camera === null ) {\n\n\t\t\tconsole.error( 'THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.' );\n\n\t\t}\n\n\t\t_worldScale.setFromMatrixScale( this.matrixWorld );\n\n\t\t_viewWorldMatrix.copy( raycaster.camera.matrixWorld );\n\t\tthis.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );\n\n\t\t_mvPosition.setFromMatrixPosition( this.modelViewMatrix );\n\n\t\tif ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {\n\n\t\t\t_worldScale.multiplyScalar( - _mvPosition.z );\n\n\t\t}\n\n\t\tconst rotation = this.material.rotation;\n\t\tlet sin, cos;\n\n\t\tif ( rotation !== 0 ) {\n\n\t\t\tcos = Math.cos( rotation );\n\t\t\tsin = Math.sin( rotation );\n\n\t\t}\n\n\t\tconst center = this.center;\n\n\t\ttransformVertex( _vA.set( -0.5, -0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\ttransformVertex( _vB.set( 0.5, -0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\ttransformVertex( _vC.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\n\t\t_uvA.set( 0, 0 );\n\t\t_uvB.set( 1, 0 );\n\t\t_uvC.set( 1, 1 );\n\n\t\t// check first triangle\n\t\tlet intersect = raycaster.ray.intersectTriangle( _vA, _vB, _vC, false, _intersectPoint );\n\n\t\tif ( intersect === null ) {\n\n\t\t\t// check second triangle\n\t\t\ttransformVertex( _vB.set( -0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\t_uvB.set( 0, 1 );\n\n\t\t\tintersect = raycaster.ray.intersectTriangle( _vA, _vC, _vB, false, _intersectPoint );\n\t\t\tif ( intersect === null ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst distance = raycaster.ray.origin.distanceTo( _intersectPoint );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\tintersects.push( {\n\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectPoint.clone(),\n\t\t\tuv: Triangle.getInterpolation( _intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() ),\n\t\t\tface: null,\n\t\t\tobject: this\n\n\t\t} );\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tif ( source.center !== undefined ) this.center.copy( source.center );\n\n\t\tthis.material = source.material;\n\n\t\treturn this;\n\n\t}\n\n}\n\nfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\n\n\t// compute position in camera space\n\t_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\n\n\t// to check if rotation is not zero\n\tif ( sin !== undefined ) {\n\n\t\t_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );\n\t\t_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );\n\n\t} else {\n\n\t\t_rotatedPosition.copy( _alignedPosition );\n\n\t}\n\n\n\tvertexPosition.copy( mvPosition );\n\tvertexPosition.x += _rotatedPosition.x;\n\tvertexPosition.y += _rotatedPosition.y;\n\n\t// transform to world space\n\tvertexPosition.applyMatrix4( _viewWorldMatrix );\n\n}\n\nconst _v1$2 = /*@__PURE__*/ new Vector3();\nconst _v2$1 = /*@__PURE__*/ new Vector3();\n\n/**\n * A component for providing a basic Level of Detail (LOD) mechanism.\n *\n * Every LOD level is associated with an object, and rendering can be switched\n * between them at the distances specified. Typically you would create, say,\n * three meshes, one for far away (low detail), one for mid range (medium\n * detail) and one for close up (high detail).\n *\n * ```js\n * const lod = new THREE.LOD();\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n *\n * //Create spheres with 3 levels of detail and create new LOD levels for them\n * for( let i = 0; i < 3; i++ ) {\n *\n * \tconst geometry = new THREE.IcosahedronGeometry( 10, 3 - i );\n * \tconst mesh = new THREE.Mesh( geometry, material );\n * \tlod.addLevel( mesh, i * 75 );\n *\n * }\n *\n * scene.add( lod );\n * ```\n *\n * @augments Object3D\n */\nclass LOD extends Object3D {\n\n\t/**\n\t * Constructs a new LOD.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLOD = true;\n\n\t\t/**\n\t\t * The current LOD index.\n\t\t *\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis._currentLevel = 0;\n\n\t\tthis.type = 'LOD';\n\n\t\tObject.defineProperties( this, {\n\t\t\t/**\n\t\t\t * This array holds the LOD levels.\n\t\t\t *\n\t\t\t * @name LOD#levels\n\t\t\t * @type {Array<{object:Object3D,distance:number,hysteresis:number}>}\n\t\t\t */\n\t\t\tlevels: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: []\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Whether the LOD object is updated automatically by the renderer per frame\n\t\t * or not. If set to `false`, you have to call {@link LOD#update} in the\n\t\t * render loop by yourself.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.autoUpdate = true;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source, false );\n\n\t\tconst levels = source.levels;\n\n\t\tfor ( let i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tconst level = levels[ i ];\n\n\t\t\tthis.addLevel( level.object.clone(), level.distance, level.hysteresis );\n\n\t\t}\n\n\t\tthis.autoUpdate = source.autoUpdate;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds a mesh that will display at a certain distance and greater. Typically\n\t * the further away the distance, the lower the detail on the mesh.\n\t *\n\t * @param {Object3D} object - The 3D object to display at this level.\n\t * @param {number} [distance=0] - The distance at which to display this level of detail.\n\t * @param {number} [hysteresis=0] - Threshold used to avoid flickering at LOD boundaries, as a fraction of distance.\n\t * @return {LOD} A reference to this instance.\n\t */\n\taddLevel( object, distance = 0, hysteresis = 0 ) {\n\n\t\tdistance = Math.abs( distance );\n\n\t\tconst levels = this.levels;\n\n\t\tlet l;\n\n\t\tfor ( l = 0; l < levels.length; l ++ ) {\n\n\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlevels.splice( l, 0, { distance: distance, hysteresis: hysteresis, object: object } );\n\n\t\tthis.add( object );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Removes an existing level, based on the distance from the camera.\n\t * Returns `true` when the level has been removed. Otherwise `false`.\n\t *\n\t * @param {number} distance - Distance of the level to remove.\n\t * @return {boolean} Whether the level has been removed or not.\n\t */\n\tremoveLevel( distance ) {\n\n\t\tconst levels = this.levels;\n\n\t\tfor ( let i = 0; i < levels.length; i ++ ) {\n\n\t\t\tif ( levels[ i ].distance === distance ) {\n\n\t\t\t\tconst removedElements = levels.splice( i, 1 );\n\t\t\t\tthis.remove( removedElements[ 0 ].object );\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\t/**\n\t * Returns the currently active LOD level index.\n\t *\n\t * @return {number} The current active LOD level index.\n\t */\n\tgetCurrentLevel() {\n\n\t\treturn this._currentLevel;\n\n\t}\n\n\t/**\n\t * Returns a reference to the first 3D object that is greater than\n\t * the given distance.\n\t *\n\t * @param {number} distance - The LOD distance.\n\t * @return {Object3D|null} The found 3D object. `null` if no 3D object has been found.\n\t */\n\tgetObjectForDistance( distance ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 0 ) {\n\n\t\t\tlet i, l;\n\n\t\t\tfor ( i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tlet levelDistance = levels[ i ].distance;\n\n\t\t\t\tif ( levels[ i ].object.visible ) {\n\n\t\t\t\t\tlevelDistance -= levelDistance * levels[ i ].hysteresis;\n\n\t\t\t\t}\n\n\t\t\t\tif ( distance < levelDistance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn levels[ i - 1 ].object;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t/**\n\t * Computes intersection points between a casted ray and this LOD.\n\t *\n\t * @param {Raycaster} raycaster - The raycaster.\n\t * @param {Array<Object>} intersects - The target array that holds the intersection points.\n\t */\n\traycast( raycaster, intersects ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 0 ) {\n\n\t\t\t_v1$2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tconst distance = raycaster.ray.origin.distanceTo( _v1$2 );\n\n\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates the LOD by computing which LOD level should be visible according\n\t * to the current distance of the given camera.\n\t *\n\t * @param {Camera} camera - The camera the scene is rendered with.\n\t */\n\tupdate( camera ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 1 ) {\n\n\t\t\t_v1$2.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t_v2$1.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tconst distance = _v1$2.distanceTo( _v2$1 ) / camera.zoom;\n\n\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\tlet i, l;\n\n\t\t\tfor ( i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tlet levelDistance = levels[ i ].distance;\n\n\t\t\t\tif ( levels[ i ].object.visible ) {\n\n\t\t\t\t\tlevelDistance -= levelDistance * levels[ i ].hysteresis;\n\n\t\t\t\t}\n\n\t\t\t\tif ( distance >= levelDistance ) {\n\n\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._currentLevel = i - 1;\n\n\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tif ( this.autoUpdate === false ) data.object.autoUpdate = false;\n\n\t\tdata.object.levels = [];\n\n\t\tconst levels = this.levels;\n\n\t\tfor ( let i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tconst level = levels[ i ];\n\n\t\t\tdata.object.levels.push( {\n\t\t\t\tobject: level.object.uuid,\n\t\t\t\tdistance: level.distance,\n\t\t\t\thysteresis: level.hysteresis\n\t\t\t} );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nconst _basePosition = /*@__PURE__*/ new Vector3();\n\nconst _skinIndex = /*@__PURE__*/ new Vector4();\nconst _skinWeight = /*@__PURE__*/ new Vector4();\n\nconst _vector3 = /*@__PURE__*/ new Vector3();\nconst _matrix4 = /*@__PURE__*/ new Matrix4();\nconst _vertex = /*@__PURE__*/ new Vector3();\n\nconst _sphere$5 = /*@__PURE__*/ new Sphere();\nconst _inverseMatrix$2 = /*@__PURE__*/ new Matrix4();\nconst _ray$2 = /*@__PURE__*/ new Ray();\n\n/**\n * A mesh that has a {@link Skeleton} that can then be used to animate the\n * vertices of the geometry with skinning/skeleton animation.\n *\n * Next to a valid skeleton, the skinned mesh requires skin indices and weights\n * as buffer attributes in its geometry. These attribute define which bones affect a single\n * vertex to a certain extend.\n *\n * Typically skinned meshes are not created manually but loaders like {@link GLTFLoader}\n * or {@link FBXLoader } import respective models.\n *\n * @augments Mesh\n */\nclass SkinnedMesh extends Mesh {\n\n\t/**\n\t * Constructs a new skinned mesh.\n\t *\n\t * @param {BufferGeometry} [geometry] - The mesh geometry.\n\t * @param {Material|Array<Material>} [material] - The mesh material.\n\t */\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSkinnedMesh = true;\n\n\t\tthis.type = 'SkinnedMesh';\n\n\t\t/**\n\t\t * `AttachedBindMode` means the skinned mesh shares the same world space as the skeleton.\n\t\t * This is not true when using `DetachedBindMode` which is useful when sharing a skeleton\n\t\t * across multiple skinned meshes.\n\t\t *\n\t\t * @type {(AttachedBindMode|DetachedBindMode)}\n\t\t * @default AttachedBindMode\n\t\t */\n\t\tthis.bindMode = AttachedBindMode;\n\n\t\t/**\n\t\t * The base matrix that is used for the bound bone transforms.\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */\n\t\tthis.bindMatrix = new Matrix4();\n\n\t\t/**\n\t\t * The base matrix that is used for resetting the bound bone transforms.\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */\n\t\tthis.bindMatrixInverse = new Matrix4();\n\n\t\t/**\n\t\t * The bounding box of the skinned mesh. Can be computed via {@link SkinnedMesh#computeBoundingBox}.\n\t\t *\n\t\t * @type {?Box3}\n\t\t * @default null\n\t\t */\n\t\tthis.boundingBox = null;\n\n\t\t/**\n\t\t * The bounding sphere of the skinned mesh. Can be computed via {@link SkinnedMesh#computeBoundingSphere}.\n\t\t *\n\t\t * @type {?Sphere}\n\t\t * @default null\n\t\t */\n\t\tthis.boundingSphere = null;\n\n\t}\n\n\t/**\n\t * Computes the bounding box of the skinned mesh, and updates {@link SkinnedMesh#boundingBox}.\n\t * The bounding box is not automatically computed by the engine; this method must be called by your app.\n\t * If the skinned mesh is animated, the bounding box should be recomputed per frame in order to reflect\n\t * the current animation state.\n\t */\n\tcomputeBoundingBox() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tthis.boundingBox.makeEmpty();\n\n\t\tconst positionAttribute = geometry.getAttribute( 'position' );\n\n\t\tfor ( let i = 0; i < positionAttribute.count; i ++ ) {\n\n\t\t\tthis.getVertexPosition( i, _vertex );\n\t\t\tthis.boundingBox.expandByPoint( _vertex );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Computes the bounding sphere of the skinned mesh, and updates {@link SkinnedMesh#boundingSphere}.\n\t * The bounding sphere is automatically computed by the engine once when it is needed, e.g., for ray casting\n\t * and view frustum culling. If the skinned mesh is animated, the bounding sphere should be recomputed\n\t * per frame in order to reflect the current animation state.\n\t */\n\tcomputeBoundingSphere() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tthis.boundingSphere.makeEmpty();\n\n\t\tconst positionAttribute = geometry.getAttribute( 'position' );\n\n\t\tfor ( let i = 0; i < positionAttribute.count; i ++ ) {\n\n\t\t\tthis.getVertexPosition( i, _vertex );\n\t\t\tthis.boundingSphere.expandByPoint( _vertex );\n\n\t\t}\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.bindMode = source.bindMode;\n\t\tthis.bindMatrix.copy( source.bindMatrix );\n\t\tthis.bindMatrixInverse.copy( source.bindMatrixInverse );\n\n\t\tthis.skeleton = source.skeleton;\n\n\t\tif ( source.boundingBox !== null ) this.boundingBox = source.boundingBox.clone();\n\t\tif ( source.boundingSphere !== null ) this.boundingSphere = source.boundingSphere.clone();\n\n\t\treturn this;\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst material = this.material;\n\t\tconst matrixWorld = this.matrixWorld;\n\n\t\tif ( material === undefined ) return;\n\n\t\t// test with bounding sphere in world space\n\n\t\tif ( this.boundingSphere === null ) this.computeBoundingSphere();\n\n\t\t_sphere$5.copy( this.boundingSphere );\n\t\t_sphere$5.applyMatrix4( matrixWorld );\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere$5 ) === false ) return;\n\n\t\t// convert ray to local space of skinned mesh\n\n\t\t_inverseMatrix$2.copy( matrixWorld ).invert();\n\t\t_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );\n\n\t\t// test with bounding box in local space\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tif ( _ray$2.intersectsBox( this.boundingBox ) === false ) return;\n\n\t\t}\n\n\t\t// test for intersections with geometry\n\n\t\tthis._computeIntersections( raycaster, intersects, _ray$2 );\n\n\t}\n\n\tgetVertexPosition( index, target ) {\n\n\t\tsuper.getVertexPosition( index, target );\n\n\t\tthis.applyBoneTransform( index, target );\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Binds the given skeleton to the skinned mesh.\n\t *\n\t * @param {Skeleton} skeleton - The skeleton to bind.\n\t * @param {Matrix4} [bindMatrix] - The bind matrix. If no bind matrix is provided,\n\t * the skinned mesh's world matrix will be used instead.\n\t */\n\tbind( skeleton, bindMatrix ) {\n\n\t\tthis.skeleton = skeleton;\n\n\t\tif ( bindMatrix === undefined ) {\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t}\n\n\t\tthis.bindMatrix.copy( bindMatrix );\n\t\tthis.bindMatrixInverse.copy( bindMatrix ).invert();\n\n\t}\n\n\t/**\n\t * This method sets the skinned mesh in the rest pose).\n\t */\n\tpose() {\n\n\t\tthis.skeleton.pose();\n\n\t}\n\n\t/**\n\t * Normalizes the skin weights which are defined as a buffer attribute\n\t * in the skinned mesh's geometry.\n\t */\n\tnormalizeSkinWeights() {\n\n\t\tconst vector = new Vector4();\n\n\t\tconst skinWeight = this.geometry.attributes.skinWeight;\n\n\t\tfor ( let i = 0, l = skinWeight.count; i < l; i ++ ) {\n\n\t\t\tvector.fromBufferAttribute( skinWeight, i );\n\n\t\t\tconst scale = 1.0 / vector.manhattanLength();\n\n\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\tvector.multiplyScalar( scale );\n\n\t\t\t} else {\n\n\t\t\t\tvector.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t}\n\n\t\t\tskinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );\n\n\t\t}\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tif ( this.bindMode === AttachedBindMode ) {\n\n\t\t\tthis.bindMatrixInverse.copy( this.matrixWorld ).invert();\n\n\t\t} else if ( this.bindMode === DetachedBindMode ) {\n\n\t\t\tthis.bindMatrixInverse.copy( this.bindMatrix ).invert();\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Applies the bone transform associated with the given index to the given\n\t * vertex position. Returns the updated vector.\n\t *\n\t * @param {number} index - The vertex index.\n\t * @param {Vector3} target - The target object that is used to store the method's result.\n\t * the skinned mesh's world matrix will be used instead.\n\t * @return {Vector3} The updated vertex position.\n\t */\n\tapplyBoneTransform( index, target ) {\n\n\t\tconst skeleton = this.skeleton;\n\t\tconst geometry = this.geometry;\n\n\t\t_skinIndex.fromBufferAttribute( geometry.attributes.skinIndex, index );\n\t\t_skinWeight.fromBufferAttribute( geometry.attributes.skinWeight, index );\n\n\t\t_basePosition.copy( target ).applyMatrix4( this.bindMatrix );\n\n\t\ttarget.set( 0, 0, 0 );\n\n\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\tconst weight = _skinWeight.getComponent( i );\n\n\t\t\tif ( weight !== 0 ) {\n\n\t\t\t\tconst boneIndex = _skinIndex.getComponent( i );\n\n\t\t\t\t_matrix4.multiplyMatrices( skeleton.bones[ boneIndex ].matrixWorld, skeleton.boneInverses[ boneIndex ] );\n\n\t\t\t\ttarget.addScaledVector( _vector3.copy( _basePosition ).applyMatrix4( _matrix4 ), weight );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn target.applyMatrix4( this.bindMatrixInverse );\n\n\t}\n\n}\n\n/**\n * A bone which is part of a {@link Skeleton}. The skeleton in turn is used by\n * the {@link SkinnedMesh}.\n *\n * ```js\n * const root = new THREE.Bone();\n * const child = new THREE.Bone();\n *\n * root.add( child );\n * child.position.y = 5;\n * ```\n *\n * @augments Object3D\n */\nclass Bone extends Object3D {\n\n\t/**\n\t * Constructs a new bone.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isBone = true;\n\n\t\tthis.type = 'Bone';\n\n\t}\n\n}\n\n/**\n * Creates a texture directly from raw buffer data.\n *\n * The interpretation of the data depends on type and format: If the type is\n * `UnsignedByteType`, a `Uint8Array` will be useful for addressing the\n * texel data. If the format is `RGBAFormat`, data needs four values for\n * one texel; Red, Green, Blue and Alpha (typically the opacity).\n *\n * @augments Texture\n */\nclass DataTexture extends Texture {\n\n\t/**\n\t * Constructs a new data texture.\n\t *\n\t * @param {?TypedArray} [data=null] - The buffer data.\n\t * @param {number} [width=1] - The width of the texture.\n\t * @param {number} [height=1] - The height of the texture.\n\t * @param {number} [format=RGBAFormat] - The texture format.\n\t * @param {number} [type=UnsignedByteType] - The texture type.\n\t * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n\t * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n\t * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n\t * @param {number} [magFilter=NearestFilter] - The mag filter value.\n\t * @param {number} [minFilter=NearestFilter] - The min filter value.\n\t * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n\t * @param {string} [colorSpace=NoColorSpace] - The color space.\n\t */\n\tconstructor( data = null, width = 1, height = 1, format, type, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, colorSpace ) {\n\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isDataTexture = true;\n\n\t\t/**\n\t\t * The image definition of a data texture.\n\t\t *\n\t\t * @type {{data:TypedArray,width:number,height:number}}\n\t\t */\n\t\tthis.image = { data: data, width: width, height: height };\n\n\t\t/**\n\t\t * Whether to generate mipmaps (if possible) for a texture.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.generateMipmaps = false;\n\n\t\t/**\n\t\t * If set to `true`, the texture is flipped along the vertical axis when\n\t\t * uploaded to the GPU.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.flipY = false;\n\n\t\t/**\n\t\t * Specifies the alignment requirements for the start of each pixel row in memory.\n\t\t *\n\t\t * Overwritten and set to `1` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default 1\n\t\t */\n\t\tthis.unpackAlignment = 1;\n\n\t}\n\n}\n\nconst _offsetMatrix = /*@__PURE__*/ new Matrix4();\nconst _identityMatrix = /*@__PURE__*/ new Matrix4();\n\n/**\n * Class for representing the armatures in `three.js`. The skeleton\n * is defined by a hierarchy of bones.\n *\n * ```js\n * const bones = [];\n *\n * const shoulder = new THREE.Bone();\n * const elbow = new THREE.Bone();\n * const hand = new THREE.Bone();\n *\n * shoulder.add( elbow );\n * elbow.add( hand );\n *\n * bones.push( shoulder , elbow, hand);\n *\n * shoulder.position.y = -5;\n * elbow.position.y = 0;\n * hand.position.y = 5;\n *\n * const armSkeleton = new THREE.Skeleton( bones );\n * ```\n */\nclass Skeleton {\n\n\t/**\n\t * Constructs a new skeleton.\n\t *\n\t * @param {Array<Bone>} [bones] - An array of bones.\n\t * @param {Array<Matrix4>} [boneInverses] - An array of bone inverse matrices.\n\t * If not provided, these matrices will be computed automatically via {@link Skeleton#calculateInverses}.\n\t */\n\tconstructor( bones = [], boneInverses = [] ) {\n\n\t\tthis.uuid = generateUUID();\n\n\t\t/**\n\t\t * An array of bones defining the skeleton.\n\t\t *\n\t\t * @type {Array<Bone>}\n\t\t */\n\t\tthis.bones = bones.slice( 0 );\n\n\t\t/**\n\t\t * An array of bone inverse matrices.\n\t\t *\n\t\t * @type {Array<Matrix4>}\n\t\t */\n\t\tthis.boneInverses = boneInverses;\n\n\t\t/**\n\t\t * An array buffer holding the bone data.\n\t\t * Input data for {@link Skeleton#boneTexture}.\n\t\t *\n\t\t * @type {?Float32Array}\n\t\t * @default null\n\t\t */\n\t\tthis.boneMatrices = null;\n\n\t\t/**\n\t\t * A texture holding the bone data for use\n\t\t * in the vertex shader.\n\t\t *\n\t\t * @type {?DataTexture}\n\t\t * @default null\n\t\t */\n\t\tthis.boneTexture = null;\n\n\t\tthis.init();\n\n\t}\n\n\t/**\n\t * Initializes the skeleton. This method gets automatically called by the constructor\n\t * but depending on how the skeleton is created it might be necessary to call this method\n\t * manually.\n\t */\n\tinit() {\n\n\t\tconst bones = this.bones;\n\t\tconst boneInverses = this.boneInverses;\n\n\t\tthis.boneMatrices = new Float32Array( bones.length * 16 );\n\n\t\t// calculate inverse bone matrices if necessary\n\n\t\tif ( boneInverses.length === 0 ) {\n\n\t\t\tthis.calculateInverses();\n\n\t\t} else {\n\n\t\t\t// handle special case\n\n\t\t\tif ( bones.length !== boneInverses.length ) {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.' );\n\n\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Computes the bone inverse matrices. This method resets {@link Skeleton#boneInverses}\n\t * and fills it with new matrices.\n\t */\n\tcalculateInverses() {\n\n\t\tthis.boneInverses.length = 0;\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst inverse = new Matrix4();\n\n\t\t\tif ( this.bones[ i ] ) {\n\n\t\t\t\tinverse.copy( this.bones[ i ].matrixWorld ).invert();\n\n\t\t\t}\n\n\t\t\tthis.boneInverses.push( inverse );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Resets the skeleton to the base pose.\n\t */\n\tpose() {\n\n\t\t// recover the bind-time world matrices\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst bone = this.bones[ i ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tbone.matrixWorld.copy( this.boneInverses[ i ] ).invert();\n\n\t\t\t}\n\n\t\t}\n\n\t\t// compute the local matrices, positions, rotations and scales\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst bone = this.bones[ i ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\tbone.matrix.copy( bone.parent.matrixWorld ).invert();\n\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Resets the skeleton to the base pose.\n\t */\n\tupdate() {\n\n\t\tconst bones = this.bones;\n\t\tconst boneInverses = this.boneInverses;\n\t\tconst boneMatrices = this.boneMatrices;\n\t\tconst boneTexture = this.boneTexture;\n\n\t\t// flatten bone matrices to array\n\n\t\tfor ( let i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\t// compute the offset between the current and the original transform\n\n\t\t\tconst matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;\n\n\t\t\t_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\n\t\t\t_offsetMatrix.toArray( boneMatrices, i * 16 );\n\n\t\t}\n\n\t\tif ( boneTexture !== null ) {\n\n\t\t\tboneTexture.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns a new skeleton with copied values from this instance.\n\t *\n\t * @return {Skeleton} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new Skeleton( this.bones, this.boneInverses );\n\n\t}\n\n\t/**\n\t * Computes a data texture for passing bone data to the vertex shader.\n\t *\n\t * @return {Skeleton} A reference of this instance.\n\t */\n\tcomputeBoneTexture() {\n\n\t\t// layout (1 matrix = 4 pixels)\n\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\t\tlet size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\tsize = Math.ceil( size / 4 ) * 4;\n\t\tsize = Math.max( size, 4 );\n\n\t\tconst boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n\t\tboneMatrices.set( this.boneMatrices ); // copy current values\n\n\t\tconst boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\n\t\tboneTexture.needsUpdate = true;\n\n\t\tthis.boneMatrices = boneMatrices;\n\t\tthis.boneTexture = boneTexture;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Searches through the skeleton's bone array and returns the first with a\n\t * matching name.\n\t *\n\t * @param {string} name - The name of the bone.\n\t * @return {Bone|undefined} The found bone. `undefined` if no bone has been found.\n\t */\n\tgetBoneByName( name ) {\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst bone = this.bones[ i ];\n\n\t\t\tif ( bone.name === name ) {\n\n\t\t\t\treturn bone;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose( ) {\n\n\t\tif ( this.boneTexture !== null ) {\n\n\t\t\tthis.boneTexture.dispose();\n\n\t\t\tthis.boneTexture = null;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Setups the skeleton by the given JSON and bones.\n\t *\n\t * @param {Object} json - The skeleton as serialized JSON.\n\t * @param {Object<string, Bone>} bones - An array of bones.\n\t * @return {Skeleton} A reference of this instance.\n\t */\n\tfromJSON( json, bones ) {\n\n\t\tthis.uuid = json.uuid;\n\n\t\tfor ( let i = 0, l = json.bones.length; i < l; i ++ ) {\n\n\t\t\tconst uuid = json.bones[ i ];\n\t\t\tlet bone = bones[ uuid ];\n\n\t\t\tif ( bone === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton: No bone found with UUID:', uuid );\n\t\t\t\tbone = new Bone();\n\n\t\t\t}\n\n\t\t\tthis.bones.push( bone );\n\t\t\tthis.boneInverses.push( new Matrix4().fromArray( json.boneInverses[ i ] ) );\n\n\t\t}\n\n\t\tthis.init();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Serializes the skeleton into JSON.\n\t *\n\t * @return {Object} A JSON object representing the serialized skeleton.\n\t * @see {@link ObjectLoader#parse}\n\t */\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.6,\n\t\t\t\ttype: 'Skeleton',\n\t\t\t\tgenerator: 'Skeleton.toJSON'\n\t\t\t},\n\t\t\tbones: [],\n\t\t\tboneInverses: []\n\t\t};\n\n\t\tdata.uuid = this.uuid;\n\n\t\tconst bones = this.bones;\n\t\tconst boneInverses = this.boneInverses;\n\n\t\tfor ( let i = 0, l = bones.length; i < l; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\t\t\tdata.bones.push( bone.uuid );\n\n\t\t\tconst boneInverse = boneInverses[ i ];\n\t\t\tdata.boneInverses.push( boneInverse.toArray() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\n/**\n * An instanced version of a buffer attribute.\n *\n * @augments BufferAttribute\n */\nclass InstancedBufferAttribute extends BufferAttribute {\n\n\t/**\n\t * Constructs a new instanced buffer attribute.\n\t *\n\t * @param {TypedArray} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t * @param {number} [meshPerAttribute=1] - How often a value of this buffer attribute should be repeated.\n\t */\n\tconstructor( array, itemSize, normalized, meshPerAttribute = 1 ) {\n\n\t\tsuper( array, itemSize, normalized );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isInstancedBufferAttribute = true;\n\n\t\t/**\n\t\t * Defines how often a value of this buffer attribute should be repeated. A\n\t\t * value of one means that each value of the instanced attribute is used for\n\t\t * a single instance. A value of two means that each value is used for two\n\t\t * consecutive instances (and so on).\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.meshPerAttribute = meshPerAttribute;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\n\t\tdata.isInstancedBufferAttribute = true;\n\n\t\treturn data;\n\n\t}\n\n}\n\nconst _instanceLocalMatrix = /*@__PURE__*/ new Matrix4();\nconst _instanceWorldMatrix = /*@__PURE__*/ new Matrix4();\n\nconst _instanceIntersects = [];\n\nconst _box3 = /*@__PURE__*/ new Box3();\nconst _identity = /*@__PURE__*/ new Matrix4();\nconst _mesh$1 = /*@__PURE__*/ new Mesh();\nconst _sphere$4 = /*@__PURE__*/ new Sphere();\n\n/**\n * A special version of a mesh with instanced rendering support. Use\n * this class if you have to render a large number of objects with the same\n * geometry and material(s) but with different world transformations. The usage\n * of 'InstancedMesh' will help you to reduce the number of draw calls and thus\n * improve the overall rendering performance in your application.\n *\n * @augments Mesh\n */\nclass InstancedMesh extends Mesh {\n\n\t/**\n\t * Constructs a new instanced mesh.\n\t *\n\t * @param {BufferGeometry} [geometry] - The mesh geometry.\n\t * @param {Material|Array<Material>} [material] - The mesh material.\n\t * @param {number} count - The number of instances.\n\t */\n\tconstructor( geometry, material, count ) {\n\n\t\tsuper( geometry, material );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isInstancedMesh = true;\n\n\t\t/**\n\t\t * Represents the local transformation of all instances. You have to set its\n\t\t * {@link BufferAttribute#needsUpdate} flag to true if you modify instanced data\n\t\t * via {@link InstancedMesh#setMatrixAt}.\n\t\t *\n\t\t * @type {InstancedBufferAttribute}\n\t\t */\n\t\tthis.instanceMatrix = new InstancedBufferAttribute( new Float32Array( count * 16 ), 16 );\n\n\t\t/**\n\t\t * Represents the color of all instances. You have to set its\n\t\t * {@link BufferAttribute#needsUpdate} flag to true if you modify instanced data\n\t\t * via {@link InstancedMesh#setColorAt}.\n\t\t *\n\t\t * @type {?InstancedBufferAttribute}\n\t\t * @default null\n\t\t */\n\t\tthis.instanceColor = null;\n\n\t\t/**\n\t\t * Represents the morph target weights of all instances. You have to set its\n\t\t * {@link Texture#needsUpdate} flag to true if you modify instanced data\n\t\t * via {@link InstancedMesh#setMorphAt}.\n\t\t *\n\t\t * @type {?DataTexture}\n\t\t * @default null\n\t\t */\n\t\tthis.morphTexture = null;\n\n\t\t/**\n\t\t * The number of instances.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.count = count;\n\n\t\t/**\n\t\t * The bounding box of the instanced mesh. Can be computed via {@link InstancedMesh#computeBoundingBox}.\n\t\t *\n\t\t * @type {?Box3}\n\t\t * @default null\n\t\t */\n\t\tthis.boundingBox = null;\n\n\t\t/**\n\t\t * The bounding sphere of the instanced mesh. Can be computed via {@link InstancedMesh#computeBoundingSphere}.\n\t\t *\n\t\t * @type {?Sphere}\n\t\t * @default null\n\t\t */\n\t\tthis.boundingSphere = null;\n\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tthis.setMatrixAt( i, _identity );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Computes the bounding box of the instanced mesh, and updates {@link InstancedMesh#boundingBox}.\n\t * The bounding box is not automatically computed by the engine; this method must be called by your app.\n\t * You may need to recompute the bounding box if an instance is transformed via {@link InstancedMesh#setMatrixAt}.\n\t */\n\tcomputeBoundingBox() {\n\n\t\tconst geometry = this.geometry;\n\t\tconst count = this.count;\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\tgeometry.computeBoundingBox();\n\n\t\t}\n\n\t\tthis.boundingBox.makeEmpty();\n\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tthis.getMatrixAt( i, _instanceLocalMatrix );\n\n\t\t\t_box3.copy( geometry.boundingBox ).applyMatrix4( _instanceLocalMatrix );\n\n\t\t\tthis.boundingBox.union( _box3 );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Computes the bounding sphere of the instanced mesh, and updates {@link InstancedMesh#boundingSphere}\n\t * The engine automatically computes the bounding sphere when it is needed, e.g., for ray casting or view frustum culling.\n\t * You may need to recompute the bounding sphere if an instance is transformed via {@link InstancedMesh#setMatrixAt}.\n\t */\n\tcomputeBoundingSphere() {\n\n\t\tconst geometry = this.geometry;\n\t\tconst count = this.count;\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tif ( geometry.boundingSphere === null ) {\n\n\t\t\tgeometry.computeBoundingSphere();\n\n\t\t}\n\n\t\tthis.boundingSphere.makeEmpty();\n\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tthis.getMatrixAt( i, _instanceLocalMatrix );\n\n\t\t\t_sphere$4.copy( geometry.boundingSphere ).applyMatrix4( _instanceLocalMatrix );\n\n\t\t\tthis.boundingSphere.union( _sphere$4 );\n\n\t\t}\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.instanceMatrix.copy( source.instanceMatrix );\n\n\t\tif ( source.morphTexture !== null ) this.morphTexture = source.morphTexture.clone();\n\t\tif ( source.instanceColor !== null ) this.instanceColor = source.instanceColor.clone();\n\n\t\tthis.count = source.count;\n\n\t\tif ( source.boundingBox !== null ) this.boundingBox = source.boundingBox.clone();\n\t\tif ( source.boundingSphere !== null ) this.boundingSphere = source.boundingSphere.clone();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Gets the color of the defined instance.\n\t *\n\t * @param {number} index - The instance index.\n\t * @param {Color} color - The target object that is used to store the method's result.\n\t */\n\tgetColorAt( index, color ) {\n\n\t\tcolor.fromArray( this.instanceColor.array, index * 3 );\n\n\t}\n\n\t/**\n\t * Gets the local transformation matrix of the defined instance.\n\t *\n\t * @param {number} index - The instance index.\n\t * @param {Matrix4} matrix - The target object that is used to store the method's result.\n\t */\n\tgetMatrixAt( index, matrix ) {\n\n\t\tmatrix.fromArray( this.instanceMatrix.array, index * 16 );\n\n\t}\n\n\t/**\n\t * Gets the morph target weights of the defined instance.\n\t *\n\t * @param {number} index - The instance index.\n\t * @param {Mesh} object - The target object that is used to store the method's result.\n\t */\n\tgetMorphAt( index, object ) {\n\n\t\tconst objectInfluences = object.morphTargetInfluences;\n\n\t\tconst array = this.morphTexture.source.data.data;\n\n\t\tconst len = objectInfluences.length + 1; // All influences + the baseInfluenceSum\n\n\t\tconst dataIndex = index * len + 1; // Skip the baseInfluenceSum at the beginning\n\n\t\tfor ( let i = 0; i < objectInfluences.length; i ++ ) {\n\n\t\t\tobjectInfluences[ i ] = array[ dataIndex + i ];\n\n\t\t}\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst raycastTimes = this.count;\n\n\t\t_mesh$1.geometry = this.geometry;\n\t\t_mesh$1.material = this.material;\n\n\t\tif ( _mesh$1.material === undefined ) return;\n\n\t\t// test with bounding sphere first\n\n\t\tif ( this.boundingSphere === null ) this.computeBoundingSphere();\n\n\t\t_sphere$4.copy( this.boundingSphere );\n\t\t_sphere$4.applyMatrix4( matrixWorld );\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere$4 ) === false ) return;\n\n\t\t// now test each instance\n\n\t\tfor ( let instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {\n\n\t\t\t// calculate the world matrix for each instance\n\n\t\t\tthis.getMatrixAt( instanceId, _instanceLocalMatrix );\n\n\t\t\t_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );\n\n\t\t\t// the mesh represents this single instance\n\n\t\t\t_mesh$1.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t_mesh$1.raycast( raycaster, _instanceIntersects );\n\n\t\t\t// process the result of raycast\n\n\t\t\tfor ( let i = 0, l = _instanceIntersects.length; i < l; i ++ ) {\n\n\t\t\t\tconst intersect = _instanceIntersects[ i ];\n\t\t\t\tintersect.instanceId = instanceId;\n\t\t\t\tintersect.object = this;\n\t\t\t\tintersects.push( intersect );\n\n\t\t\t}\n\n\t\t\t_instanceIntersects.length = 0;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the given color to the defined instance. Make sure you set the `needsUpdate` flag of\n\t * {@link InstancedMesh#instanceColor} to `true` after updating all the colors.\n\t *\n\t * @param {number} index - The instance index.\n\t * @param {Color} color - The instance color.\n\t */\n\tsetColorAt( index, color ) {\n\n\t\tif ( this.instanceColor === null ) {\n\n\t\t\tthis.instanceColor = new InstancedBufferAttribute( new Float32Array( this.instanceMatrix.count * 3 ).fill( 1 ), 3 );\n\n\t\t}\n\n\t\tcolor.toArray( this.instanceColor.array, index * 3 );\n\n\t}\n\n\t/**\n\t * Sets the given local transformation matrix to the defined instance. Make sure you set the `needsUpdate` flag of\n\t * {@link InstancedMesh#instanceMatrix} to `true` after updating all the colors.\n\t *\n\t * @param {number} index - The instance index.\n\t * @param {Matrix4} matrix - The local transformation.\n\t */\n\tsetMatrixAt( index, matrix ) {\n\n\t\tmatrix.toArray( this.instanceMatrix.array, index * 16 );\n\n\t}\n\n\t/**\n\t * Sets the morph target weights to the defined instance. Make sure you set the `needsUpdate` flag of\n\t * {@link InstancedMesh#morphTexture} to `true` after updating all the influences.\n\t *\n\t * @param {number} index - The instance index.\n\t * @param {Mesh} object -  A mesh which `morphTargetInfluences` property containing the morph target weights\n\t * of a single instance.\n\t */\n\tsetMorphAt( index, object ) {\n\n\t\tconst objectInfluences = object.morphTargetInfluences;\n\n\t\tconst len = objectInfluences.length + 1; // morphBaseInfluence + all influences\n\n\t\tif ( this.morphTexture === null ) {\n\n\t\t\tthis.morphTexture = new DataTexture( new Float32Array( len * this.count ), len, this.count, RedFormat, FloatType );\n\n\t\t}\n\n\t\tconst array = this.morphTexture.source.data.data;\n\n\t\tlet morphInfluencesSum = 0;\n\n\t\tfor ( let i = 0; i < objectInfluences.length; i ++ ) {\n\n\t\t\tmorphInfluencesSum += objectInfluences[ i ];\n\n\t\t}\n\n\t\tconst morphBaseInfluence = this.geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\n\t\tconst dataIndex = len * index;\n\n\t\tarray[ dataIndex ] = morphBaseInfluence;\n\n\t\tarray.set( objectInfluences, dataIndex + 1 );\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\tif ( this.morphTexture !== null ) {\n\n\t\t\tthis.morphTexture.dispose();\n\t\t\tthis.morphTexture = null;\n\n\t\t}\n\n\t}\n\n}\n\nconst _vector1 = /*@__PURE__*/ new Vector3();\nconst _vector2 = /*@__PURE__*/ new Vector3();\nconst _normalMatrix = /*@__PURE__*/ new Matrix3();\n\n/**\n * A two dimensional surface that extends infinitely in 3D space, represented\n * in [Hessian normal form]{@link http://mathworld.wolfram.com/HessianNormalForm.html}\n * by a unit length normal vector and a constant.\n */\nclass Plane {\n\n\t/**\n\t * Constructs a new plane.\n\t *\n\t * @param {Vector3} [normal=(1,0,0)] - A unit length vector defining the normal of the plane.\n\t * @param {number} [constant=0] - The signed distance from the origin to the plane.\n\t */\n\tconstructor( normal = new Vector3( 1, 0, 0 ), constant = 0 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isPlane = true;\n\n\t\t/**\n\t\t * A unit length vector defining the normal of the plane.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.normal = normal;\n\n\t\t/**\n\t\t * The signed distance from the origin to the plane.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.constant = constant;\n\n\t}\n\n\t/**\n\t * Sets the plane components by copying the given values.\n\t *\n\t * @param {Vector3} normal - The normal.\n\t * @param {number} constant - The constant.\n\t * @return {Plane} A reference to this plane.\n\t */\n\tset( normal, constant ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = constant;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the plane components by defining `x`, `y`, `z` as the\n\t * plane normal and `w` as the constant.\n\t *\n\t * @param {number} x - The value for the normal's x component.\n\t * @param {number} y - The value for the normal's y component.\n\t * @param {number} z - The value for the normal's z component.\n\t * @param {number} w - The constant value.\n\t * @return {Plane} A reference to this plane.\n\t */\n\tsetComponents( x, y, z, w ) {\n\n\t\tthis.normal.set( x, y, z );\n\t\tthis.constant = w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the plane from the given normal and coplanar point (that is a point\n\t * that lies onto the plane).\n\t *\n\t * @param {Vector3} normal - The normal.\n\t * @param {Vector3} point - A coplanar point.\n\t * @return {Plane} A reference to this plane.\n\t */\n\tsetFromNormalAndCoplanarPoint( normal, point ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = - point.dot( this.normal );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the plane from three coplanar points. The winding order is\n\t * assumed to be counter-clockwise, and determines the direction of\n\t * the plane normal.\n\t *\n\t * @param {Vector3} a - The first coplanar point.\n\t * @param {Vector3} b - The second coplanar point.\n\t * @param {Vector3} c - The third coplanar point.\n\t * @return {Plane} A reference to this plane.\n\t */\n\tsetFromCoplanarPoints( a, b, c ) {\n\n\t\tconst normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();\n\n\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the values of the given plane to this instance.\n\t *\n\t * @param {Plane} plane - The plane to copy.\n\t * @return {Plane} A reference to this plane.\n\t */\n\tcopy( plane ) {\n\n\t\tthis.normal.copy( plane.normal );\n\t\tthis.constant = plane.constant;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Normalizes the plane normal and adjusts the constant accordingly.\n\t *\n\t * @return {Plane} A reference to this plane.\n\t */\n\tnormalize() {\n\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\tconst inverseNormalLength = 1.0 / this.normal.length();\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\tthis.constant *= inverseNormalLength;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Negates both the plane normal and the constant.\n\t *\n\t * @return {Plane} A reference to this plane.\n\t */\n\tnegate() {\n\n\t\tthis.constant *= -1;\n\t\tthis.normal.negate();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the signed distance from the given point to this plane.\n\t *\n\t * @param {Vector3} point - The point to compute the distance for.\n\t * @return {number} The signed distance.\n\t */\n\tdistanceToPoint( point ) {\n\n\t\treturn this.normal.dot( point ) + this.constant;\n\n\t}\n\n\t/**\n\t * Returns the signed distance from the given sphere to this plane.\n\t *\n\t * @param {Sphere} sphere - The sphere to compute the distance for.\n\t * @return {number} The signed distance.\n\t */\n\tdistanceToSphere( sphere ) {\n\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t}\n\n\t/**\n\t * Projects a the given point onto the plane.\n\t *\n\t * @param {Vector3} point - The point to project.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The projected point on the plane.\n\t */\n\tprojectPoint( point, target ) {\n\n\t\treturn target.copy( point ).addScaledVector( this.normal, - this.distanceToPoint( point ) );\n\n\t}\n\n\t/**\n\t * Returns the intersection point of the passed line and the plane. Returns\n\t * `null` if the line does not intersect. Returns the line's starting point if\n\t * the line is coplanar with the plane.\n\t *\n\t * @param {Line3} line - The line to compute the intersection for.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {?Vector3} The intersection point.\n\t */\n\tintersectLine( line, target ) {\n\n\t\tconst direction = line.delta( _vector1 );\n\n\t\tconst denominator = this.normal.dot( direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\treturn target.copy( line.start );\n\n\t\t\t}\n\n\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn target.copy( line.start ).addScaledVector( direction, t );\n\n\t}\n\n\t/**\n\t * Returns `true` if the given line segment intersects with (passes through) the plane.\n\t *\n\t * @param {Line3} line - The line to test.\n\t * @return {boolean} Whether the given line segment intersects with the plane or not.\n\t */\n\tintersectsLine( line ) {\n\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\tconst startSign = this.distanceToPoint( line.start );\n\t\tconst endSign = this.distanceToPoint( line.end );\n\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t}\n\n\t/**\n\t * Returns `true` if the given bounding box intersects with the plane.\n\t *\n\t * @param {Box3} box - The bounding box to test.\n\t * @return {boolean} Whether the given bounding box intersects with the plane or not.\n\t */\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsPlane( this );\n\n\t}\n\n\t/**\n\t * Returns `true` if the given bounding sphere intersects with the plane.\n\t *\n\t * @param {Sphere} sphere - The bounding sphere to test.\n\t * @return {boolean} Whether the given bounding sphere intersects with the plane or not.\n\t */\n\tintersectsSphere( sphere ) {\n\n\t\treturn sphere.intersectsPlane( this );\n\n\t}\n\n\t/**\n\t * Returns a coplanar vector to the plane, by calculating the\n\t * projection of the normal at the origin onto the plane.\n\t *\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The coplanar point.\n\t */\n\tcoplanarPoint( target ) {\n\n\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t}\n\n\t/**\n\t * Apply a 4x4 matrix to the plane. The matrix must be an affine, homogeneous transform.\n\t *\n\t * The optional normal matrix can be pre-computed like so:\n\t * ```js\n\t * const optionalNormalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\n\t * ```\n\t *\n\t * @param {Matrix4} matrix - The transformation matrix.\n\t * @param {Matrix4} [optionalNormalMatrix] - A pre-computed normal matrix.\n\t * @return {Plane} A reference to this plane.\n\t */\n\tapplyMatrix4( matrix, optionalNormalMatrix ) {\n\n\t\tconst normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );\n\n\t\tconst referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );\n\n\t\tconst normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Translates the plane by the distance defined by the given offset vector.\n\t * Note that this only affects the plane constant and will not affect the normal vector.\n\t *\n\t * @param {Vector3} offset - The offset vector.\n\t * @return {Plane} A reference to this plane.\n\t */\n\ttranslate( offset ) {\n\n\t\tthis.constant -= offset.dot( this.normal );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this plane is equal with the given one.\n\t *\n\t * @param {Plane} plane - The plane to test for equality.\n\t * @return {boolean} Whether this plane is equal with the given one.\n\t */\n\tequals( plane ) {\n\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t}\n\n\t/**\n\t * Returns a new plane with copied values from this instance.\n\t *\n\t * @return {Plane} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _sphere$3 = /*@__PURE__*/ new Sphere();\nconst _vector$6 = /*@__PURE__*/ new Vector3();\n\n/**\n * Frustums are used to determine what is inside the camera's field of view.\n * They help speed up the rendering process - objects which lie outside a camera's\n * frustum can safely be excluded from rendering.\n *\n * This class is mainly intended for use internally by a renderer.\n */\nclass Frustum {\n\n\t/**\n\t * Constructs a new frustum.\n\t *\n\t * @param {Plane} [p0] - The first plane that encloses the frustum.\n\t * @param {Plane} [p1] - The second plane that encloses the frustum.\n\t * @param {Plane} [p2] - The third plane that encloses the frustum.\n\t * @param {Plane} [p3] - The fourth plane that encloses the frustum.\n\t * @param {Plane} [p4] - The fifth plane that encloses the frustum.\n\t * @param {Plane} [p5] - The sixth plane that encloses the frustum.\n\t */\n\tconstructor( p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane() ) {\n\n\t\t/**\n\t\t * This array holds the planes that enclose the frustum.\n\t\t *\n\t\t * @type {Array<Plane>}\n\t\t */\n\t\tthis.planes = [ p0, p1, p2, p3, p4, p5 ];\n\n\t}\n\n\t/**\n\t * Sets the frustum planes by copying the given planes.\n\t *\n\t * @param {Plane} [p0] - The first plane that encloses the frustum.\n\t * @param {Plane} [p1] - The second plane that encloses the frustum.\n\t * @param {Plane} [p2] - The third plane that encloses the frustum.\n\t * @param {Plane} [p3] - The fourth plane that encloses the frustum.\n\t * @param {Plane} [p4] - The fifth plane that encloses the frustum.\n\t * @param {Plane} [p5] - The sixth plane that encloses the frustum.\n\t * @return {Frustum} A reference to this frustum.\n\t */\n\tset( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tconst planes = this.planes;\n\n\t\tplanes[ 0 ].copy( p0 );\n\t\tplanes[ 1 ].copy( p1 );\n\t\tplanes[ 2 ].copy( p2 );\n\t\tplanes[ 3 ].copy( p3 );\n\t\tplanes[ 4 ].copy( p4 );\n\t\tplanes[ 5 ].copy( p5 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the values of the given frustum to this instance.\n\t *\n\t * @param {Frustum} frustum - The frustum to copy.\n\t * @return {Frustum} A reference to this frustum.\n\t */\n\tcopy( frustum ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the frustum planes from the given projection matrix.\n\t *\n\t * @param {Matrix4} m - The projection matrix.\n\t * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} coordinateSystem - The coordinate system.\n\t * @return {Frustum} A reference to this frustum.\n\t */\n\tsetFromProjectionMatrix( m, coordinateSystem = WebGLCoordinateSystem ) {\n\n\t\tconst planes = this.planes;\n\t\tconst me = m.elements;\n\t\tconst me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\tconst me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\tconst me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\tconst me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\n\t\tif ( coordinateSystem === WebGLCoordinateSystem ) {\n\n\t\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\t} else if ( coordinateSystem === WebGPUCoordinateSystem ) {\n\n\t\t\tplanes[ 5 ].setComponents( me2, me6, me10, me14 ).normalize();\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: ' + coordinateSystem );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if the 3D object's bounding sphere is intersecting this frustum.\n\t *\n\t * Note that the 3D object must have a geometry so that the bounding sphere can be calculated.\n\t *\n\t * @param {Object3D} object - The 3D object to test.\n\t * @return {boolean} Whether the 3D object's bounding sphere is intersecting this frustum or not.\n\t */\n\tintersectsObject( object ) {\n\n\t\tif ( object.boundingSphere !== undefined ) {\n\n\t\t\tif ( object.boundingSphere === null ) object.computeBoundingSphere();\n\n\t\t\t_sphere$3.copy( object.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\t} else {\n\n\t\t\tconst geometry = object.geometry;\n\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$3.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\t}\n\n\t\treturn this.intersectsSphere( _sphere$3 );\n\n\t}\n\n\t/**\n\t * Returns `true` if the given sprite is intersecting this frustum.\n\t *\n\t * @param {Sprite} sprite - The sprite to test.\n\t * @return {boolean} Whether the sprite is intersecting this frustum or not.\n\t */\n\tintersectsSprite( sprite ) {\n\n\t\t_sphere$3.center.set( 0, 0, 0 );\n\t\t_sphere$3.radius = 0.7071067811865476;\n\t\t_sphere$3.applyMatrix4( sprite.matrixWorld );\n\n\t\treturn this.intersectsSphere( _sphere$3 );\n\n\t}\n\n\t/**\n\t * Returns `true` if the given bounding sphere is intersecting this frustum.\n\t *\n\t * @param {Sphere} sphere - The bounding sphere to test.\n\t * @return {boolean} Whether the bounding sphere is intersecting this frustum or not.\n\t */\n\tintersectsSphere( sphere ) {\n\n\t\tconst planes = this.planes;\n\t\tconst center = sphere.center;\n\t\tconst negRadius = - sphere.radius;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst distance = planes[ i ].distanceToPoint( center );\n\n\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * Returns `true` if the given bounding box is intersecting this frustum.\n\t *\n\t * @param {Box3} box - The bounding box to test.\n\t * @return {boolean} Whether the bounding box is intersecting this frustum or not.\n\t */\n\tintersectsBox( box ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst plane = planes[ i ];\n\n\t\t\t// corner at max distance\n\n\t\t\t_vector$6.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t_vector$6.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t_vector$6.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\tif ( plane.distanceToPoint( _vector$6 ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * Returns `true` if the given point lies within the frustum.\n\t *\n\t * @param {Vector3} point - The point to test.\n\t * @return {boolean} Whether the point lies within this frustum or not.\n\t */\n\tcontainsPoint( point ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * Returns a new frustum with copied values from this instance.\n\t *\n\t * @return {Frustum} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _projScreenMatrix$2 = /*@__PURE__*/ new Matrix4();\nconst _frustum$1 = /*@__PURE__*/ new Frustum();\n\n/**\n * FrustumArray is used to determine if an object is visible in at least one camera\n * from an array of cameras. This is particularly useful for multi-view renderers.\n*/\nclass FrustumArray {\n\n\t/**\n\t * Constructs a new frustum array.\n\t *\n\t */\n\tconstructor() {\n\n\t\t/**\n\t\t * The coordinate system to use.\n\t\t *\n\t\t * @type {WebGLCoordinateSystem|WebGPUCoordinateSystem}\n\t\t * @default WebGLCoordinateSystem\n\t\t */\n\t\tthis.coordinateSystem = WebGLCoordinateSystem;\n\n\t}\n\n\t/**\n\t * Returns `true` if the 3D object's bounding sphere is intersecting any frustum\n\t * from the camera array.\n\t *\n\t * @param {Object3D} object - The 3D object to test.\n\t * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.\n\t * @return {boolean} Whether the 3D object is visible in any camera.\n\t */\n\tintersectsObject( object, cameraArray ) {\n\n\t\tif ( ! cameraArray.isArrayCamera || cameraArray.cameras.length === 0 ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tfor ( let i = 0; i < cameraArray.cameras.length; i ++ ) {\n\n\t\t\tconst camera = cameraArray.cameras[ i ];\n\n\t\t\t_projScreenMatrix$2.multiplyMatrices(\n\t\t\t\tcamera.projectionMatrix,\n\t\t\t\tcamera.matrixWorldInverse\n\t\t\t);\n\n\t\t\t_frustum$1.setFromProjectionMatrix(\n\t\t\t\t_projScreenMatrix$2,\n\t\t\t\tthis.coordinateSystem\n\t\t\t);\n\n\t\t\tif ( _frustum$1.intersectsObject( object ) ) {\n\n\t\t\t\treturn true; // Object is visible in at least one camera\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn false; // Not visible in any camera\n\n\t}\n\n\t/**\n\t * Returns `true` if the given sprite is intersecting any frustum\n\t * from the camera array.\n\t *\n\t * @param {Sprite} sprite - The sprite to test.\n\t * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.\n\t * @return {boolean} Whether the sprite is visible in any camera.\n\t */\n\tintersectsSprite( sprite, cameraArray ) {\n\n\t\tif ( ! cameraArray || ! cameraArray.cameras || cameraArray.cameras.length === 0 ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tfor ( let i = 0; i < cameraArray.cameras.length; i ++ ) {\n\n\t\t\tconst camera = cameraArray.cameras[ i ];\n\n\t\t\t_projScreenMatrix$2.multiplyMatrices(\n\t\t\t\tcamera.projectionMatrix,\n\t\t\t\tcamera.matrixWorldInverse\n\t\t\t);\n\n\t\t\t_frustum$1.setFromProjectionMatrix(\n\t\t\t\t_projScreenMatrix$2,\n\t\t\t\tthis.coordinateSystem\n\t\t\t);\n\n\t\t\tif ( _frustum$1.intersectsSprite( sprite ) ) {\n\n\t\t\t\treturn true; // Sprite is visible in at least one camera\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn false; // Not visible in any camera\n\n\t}\n\n\t/**\n\t * Returns `true` if the given bounding sphere is intersecting any frustum\n\t * from the camera array.\n\t *\n\t * @param {Sphere} sphere - The bounding sphere to test.\n\t * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.\n\t * @return {boolean} Whether the sphere is visible in any camera.\n\t */\n\tintersectsSphere( sphere, cameraArray ) {\n\n\t\tif ( ! cameraArray || ! cameraArray.cameras || cameraArray.cameras.length === 0 ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tfor ( let i = 0; i < cameraArray.cameras.length; i ++ ) {\n\n\t\t\tconst camera = cameraArray.cameras[ i ];\n\n\t\t\t_projScreenMatrix$2.multiplyMatrices(\n\t\t\t\tcamera.projectionMatrix,\n\t\t\t\tcamera.matrixWorldInverse\n\t\t\t);\n\n\t\t\t_frustum$1.setFromProjectionMatrix(\n\t\t\t\t_projScreenMatrix$2,\n\t\t\t\tthis.coordinateSystem\n\t\t\t);\n\n\t\t\tif ( _frustum$1.intersectsSphere( sphere ) ) {\n\n\t\t\t\treturn true; // Sphere is visible in at least one camera\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn false; // Not visible in any camera\n\n\t}\n\n\t/**\n\t * Returns `true` if the given bounding box is intersecting any frustum\n\t * from the camera array.\n\t *\n\t * @param {Box3} box - The bounding box to test.\n\t * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.\n\t * @return {boolean} Whether the box is visible in any camera.\n\t */\n\tintersectsBox( box, cameraArray ) {\n\n\t\tif ( ! cameraArray || ! cameraArray.cameras || cameraArray.cameras.length === 0 ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tfor ( let i = 0; i < cameraArray.cameras.length; i ++ ) {\n\n\t\t\tconst camera = cameraArray.cameras[ i ];\n\n\t\t\t_projScreenMatrix$2.multiplyMatrices(\n\t\t\t\tcamera.projectionMatrix,\n\t\t\t\tcamera.matrixWorldInverse\n\t\t\t);\n\n\t\t\t_frustum$1.setFromProjectionMatrix(\n\t\t\t\t_projScreenMatrix$2,\n\t\t\t\tthis.coordinateSystem\n\t\t\t);\n\n\t\t\tif ( _frustum$1.intersectsBox( box ) ) {\n\n\t\t\t\treturn true; // Box is visible in at least one camera\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn false; // Not visible in any camera\n\n\t}\n\n\t/**\n\t * Returns `true` if the given point lies within any frustum\n\t * from the camera array.\n\t *\n\t * @param {Vector3} point - The point to test.\n\t * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.\n\t * @return {boolean} Whether the point is visible in any camera.\n\t */\n\tcontainsPoint( point, cameraArray ) {\n\n\t\tif ( ! cameraArray || ! cameraArray.cameras || cameraArray.cameras.length === 0 ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tfor ( let i = 0; i < cameraArray.cameras.length; i ++ ) {\n\n\t\t\tconst camera = cameraArray.cameras[ i ];\n\n\t\t\t_projScreenMatrix$2.multiplyMatrices(\n\t\t\t\tcamera.projectionMatrix,\n\t\t\t\tcamera.matrixWorldInverse\n\t\t\t);\n\n\t\t\t_frustum$1.setFromProjectionMatrix(\n\t\t\t\t_projScreenMatrix$2,\n\t\t\t\tthis.coordinateSystem\n\t\t\t);\n\n\t\t\tif ( _frustum$1.containsPoint( point ) ) {\n\n\t\t\t\treturn true; // Point is visible in at least one camera\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn false; // Not visible in any camera\n\n\t}\n\n\t/**\n\t * Returns a new frustum array with copied values from this instance.\n\t *\n\t * @return {FrustumArray} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new FrustumArray();\n\n\t}\n\n}\n\nfunction ascIdSort( a, b ) {\n\n\treturn a - b;\n\n}\n\nfunction sortOpaque( a, b ) {\n\n\treturn a.z - b.z;\n\n}\n\nfunction sortTransparent( a, b ) {\n\n\treturn b.z - a.z;\n\n}\n\nclass MultiDrawRenderList {\n\n\tconstructor() {\n\n\t\tthis.index = 0;\n\t\tthis.pool = [];\n\t\tthis.list = [];\n\n\t}\n\n\tpush( start, count, z, index ) {\n\n\t\tconst pool = this.pool;\n\t\tconst list = this.list;\n\t\tif ( this.index >= pool.length ) {\n\n\t\t\tpool.push( {\n\n\t\t\t\tstart: -1,\n\t\t\t\tcount: -1,\n\t\t\t\tz: -1,\n\t\t\t\tindex: -1,\n\n\t\t\t} );\n\n\t\t}\n\n\t\tconst item = pool[ this.index ];\n\t\tlist.push( item );\n\t\tthis.index ++;\n\n\t\titem.start = start;\n\t\titem.count = count;\n\t\titem.z = z;\n\t\titem.index = index;\n\n\t}\n\n\treset() {\n\n\t\tthis.list.length = 0;\n\t\tthis.index = 0;\n\n\t}\n\n}\n\nconst _matrix$1 = /*@__PURE__*/ new Matrix4();\nconst _whiteColor = /*@__PURE__*/ new Color( 1, 1, 1 );\nconst _frustum = /*@__PURE__*/ new Frustum();\nconst _frustumArray = /*@__PURE__*/ new FrustumArray();\nconst _box$1 = /*@__PURE__*/ new Box3();\nconst _sphere$2 = /*@__PURE__*/ new Sphere();\nconst _vector$5 = /*@__PURE__*/ new Vector3();\nconst _forward = /*@__PURE__*/ new Vector3();\nconst _temp = /*@__PURE__*/ new Vector3();\nconst _renderList = /*@__PURE__*/ new MultiDrawRenderList();\nconst _mesh = /*@__PURE__*/ new Mesh();\nconst _batchIntersects = [];\n\n// copies data from attribute \"src\" into \"target\" starting at \"targetOffset\"\nfunction copyAttributeData( src, target, targetOffset = 0 ) {\n\n\tconst itemSize = target.itemSize;\n\tif ( src.isInterleavedBufferAttribute || src.array.constructor !== target.array.constructor ) {\n\n\t\t// use the component getters and setters if the array data cannot\n\t\t// be copied directly\n\t\tconst vertexCount = src.count;\n\t\tfor ( let i = 0; i < vertexCount; i ++ ) {\n\n\t\t\tfor ( let c = 0; c < itemSize; c ++ ) {\n\n\t\t\t\ttarget.setComponent( i + targetOffset, c, src.getComponent( i, c ) );\n\n\t\t\t}\n\n\t\t}\n\n\t} else {\n\n\t\t// faster copy approach using typed array set function\n\t\ttarget.array.set( src.array, targetOffset * itemSize );\n\n\t}\n\n\ttarget.needsUpdate = true;\n\n}\n\n// safely copies array contents to a potentially smaller array\nfunction copyArrayContents( src, target ) {\n\n\tif ( src.constructor !== target.constructor ) {\n\n\t\t// if arrays are of a different type (eg due to index size increasing) then data must be per-element copied\n\t\tconst len = Math.min( src.length, target.length );\n\t\tfor ( let i = 0; i < len; i ++ ) {\n\n\t\t\ttarget[ i ] = src[ i ];\n\n\t\t}\n\n\t} else {\n\n\t\t// if the arrays use the same data layout we can use a fast block copy\n\t\tconst len = Math.min( src.length, target.length );\n\t\ttarget.set( new src.constructor( src.buffer, 0, len ) );\n\n\t}\n\n}\n\n/**\n * A special version of a mesh with multi draw batch rendering support. Use\n * this class if you have to render a large number of objects with the same\n * material but with different geometries or world transformations. The usage of\n * `BatchedMesh` will help you to reduce the number of draw calls and thus improve the overall\n * rendering performance in your application.\n *\n * ```js\n * const box = new THREE.BoxGeometry( 1, 1, 1 );\n * const sphere = new THREE.SphereGeometry( 1, 12, 12 );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n *\n * // initialize and add geometries into the batched mesh\n * const batchedMesh = new BatchedMesh( 10, 5000, 10000, material );\n * const boxGeometryId = batchedMesh.addGeometry( box );\n * const sphereGeometryId = batchedMesh.addGeometry( sphere );\n *\n * // create instances of those geometries\n * const boxInstancedId1 = batchedMesh.addInstance( boxGeometryId );\n * const boxInstancedId2 = batchedMesh.addInstance( boxGeometryId );\n *\n * const sphereInstancedId1 = batchedMesh.addInstance( sphereGeometryId );\n * const sphereInstancedId2 = batchedMesh.addInstance( sphereGeometryId );\n *\n * // position the geometries\n * batchedMesh.setMatrixAt( boxInstancedId1, boxMatrix1 );\n * batchedMesh.setMatrixAt( boxInstancedId2, boxMatrix2 );\n *\n * batchedMesh.setMatrixAt( sphereInstancedId1, sphereMatrix1 );\n * batchedMesh.setMatrixAt( sphereInstancedId2, sphereMatrix2 );\n *\n * scene.add( batchedMesh );\n * ```\n *\n * @augments Mesh\n */\nclass BatchedMesh extends Mesh {\n\n\t/**\n\t * Constructs a new batched mesh.\n\t *\n\t * @param {number} maxInstanceCount - The maximum number of individual instances planned to be added and rendered.\n\t * @param {number} maxVertexCount - The maximum number of vertices to be used by all unique geometries.\n\t * @param {number} [maxIndexCount=maxVertexCount*2] - The maximum number of indices to be used by all unique geometries\n\t * @param {Material|Array<Material>} [material] - The mesh material.\n\t */\n\tconstructor( maxInstanceCount, maxVertexCount, maxIndexCount = maxVertexCount * 2, material ) {\n\n\t\tsuper( new BufferGeometry(), material );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isBatchedMesh = true;\n\n\t\t/**\n\t\t * When set ot `true`, the individual objects of a batch are frustum culled.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.perObjectFrustumCulled = true;\n\n\t\t/**\n\t\t * When set to `true`, the individual objects of a batch are sorted to improve overdraw-related artifacts.\n\t\t * If the material is marked as \"transparent\" objects are rendered back to front and if not then they are\n\t\t * rendered front to back.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.sortObjects = true;\n\n\t\t/**\n\t\t * The bounding box of the batched mesh. Can be computed via {@link BatchedMesh#computeBoundingBox}.\n\t\t *\n\t\t * @type {?Box3}\n\t\t * @default null\n\t\t */\n\t\tthis.boundingBox = null;\n\n\t\t/**\n\t\t * The bounding sphere of the batched mesh. Can be computed via {@link BatchedMesh#computeBoundingSphere}.\n\t\t *\n\t\t * @type {?Sphere}\n\t\t * @default null\n\t\t */\n\t\tthis.boundingSphere = null;\n\n\t\t/**\n\t\t * Takes a sort a function that is run before render. The function takes a list of instances to\n\t\t * sort and a camera. The objects in the list include a \"z\" field to perform a depth-ordered\n\t\t * sort with.\n\t\t *\n\t\t * @type {?Function}\n\t\t * @default null\n\t\t */\n\t\tthis.customSort = null;\n\n\t\t// stores visible, active, and geometry id per instance and reserved buffer ranges for geometries\n\t\tthis._instanceInfo = [];\n\t\tthis._geometryInfo = [];\n\n\t\t// instance, geometry ids that have been set as inactive, and are available to be overwritten\n\t\tthis._availableInstanceIds = [];\n\t\tthis._availableGeometryIds = [];\n\n\t\t// used to track where the next point is that geometry should be inserted\n\t\tthis._nextIndexStart = 0;\n\t\tthis._nextVertexStart = 0;\n\t\tthis._geometryCount = 0;\n\n\t\t// flags\n\t\tthis._visibilityChanged = true;\n\t\tthis._geometryInitialized = false;\n\n\t\t// cached user options\n\t\tthis._maxInstanceCount = maxInstanceCount;\n\t\tthis._maxVertexCount = maxVertexCount;\n\t\tthis._maxIndexCount = maxIndexCount;\n\n\t\t// buffers for multi draw\n\t\tthis._multiDrawCounts = new Int32Array( maxInstanceCount );\n\t\tthis._multiDrawStarts = new Int32Array( maxInstanceCount );\n\t\tthis._multiDrawCount = 0;\n\t\tthis._multiDrawInstances = null;\n\n\t\t// Local matrix per geometry by using data texture\n\t\tthis._matricesTexture = null;\n\t\tthis._indirectTexture = null;\n\t\tthis._colorsTexture = null;\n\n\t\tthis._initMatricesTexture();\n\t\tthis._initIndirectTexture();\n\n\t}\n\n\t/**\n\t * The maximum number of individual instances that can be stored in the batch.\n\t *\n\t * @type {number}\n\t * @readonly\n\t */\n\tget maxInstanceCount() {\n\n\t\treturn this._maxInstanceCount;\n\n\t}\n\n\t/**\n\t * The instance count.\n\t *\n\t * @type {number}\n\t * @readonly\n\t */\n\tget instanceCount() {\n\n\t\treturn this._instanceInfo.length - this._availableInstanceIds.length;\n\n\t}\n\n\t/**\n\t * The number of unused vertices.\n\t *\n\t * @type {number}\n\t * @readonly\n\t */\n\tget unusedVertexCount() {\n\n\t\treturn this._maxVertexCount - this._nextVertexStart;\n\n\t}\n\n\t/**\n\t * The number of unused indices.\n\t *\n\t * @type {number}\n\t * @readonly\n\t */\n\tget unusedIndexCount() {\n\n\t\treturn this._maxIndexCount - this._nextIndexStart;\n\n\t}\n\n\t_initMatricesTexture() {\n\n\t\t// layout (1 matrix = 4 pixels)\n\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t//  with  8x8  pixel texture max   16 matrices * 4 pixels =  (8 * 8)\n\t\t//       16x16 pixel texture max   64 matrices * 4 pixels = (16 * 16)\n\t\t//       32x32 pixel texture max  256 matrices * 4 pixels = (32 * 32)\n\t\t//       64x64 pixel texture max 1024 matrices * 4 pixels = (64 * 64)\n\n\t\tlet size = Math.sqrt( this._maxInstanceCount * 4 ); // 4 pixels needed for 1 matrix\n\t\tsize = Math.ceil( size / 4 ) * 4;\n\t\tsize = Math.max( size, 4 );\n\n\t\tconst matricesArray = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n\t\tconst matricesTexture = new DataTexture( matricesArray, size, size, RGBAFormat, FloatType );\n\n\t\tthis._matricesTexture = matricesTexture;\n\n\t}\n\n\t_initIndirectTexture() {\n\n\t\tlet size = Math.sqrt( this._maxInstanceCount );\n\t\tsize = Math.ceil( size );\n\n\t\tconst indirectArray = new Uint32Array( size * size );\n\t\tconst indirectTexture = new DataTexture( indirectArray, size, size, RedIntegerFormat, UnsignedIntType );\n\n\t\tthis._indirectTexture = indirectTexture;\n\n\t}\n\n\t_initColorsTexture() {\n\n\t\tlet size = Math.sqrt( this._maxInstanceCount );\n\t\tsize = Math.ceil( size );\n\n\t\t// 4 floats per RGBA pixel initialized to white\n\t\tconst colorsArray = new Float32Array( size * size * 4 ).fill( 1 );\n\t\tconst colorsTexture = new DataTexture( colorsArray, size, size, RGBAFormat, FloatType );\n\t\tcolorsTexture.colorSpace = ColorManagement.workingColorSpace;\n\n\t\tthis._colorsTexture = colorsTexture;\n\n\t}\n\n\t_initializeGeometry( reference ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst maxVertexCount = this._maxVertexCount;\n\t\tconst maxIndexCount = this._maxIndexCount;\n\t\tif ( this._geometryInitialized === false ) {\n\n\t\t\tfor ( const attributeName in reference.attributes ) {\n\n\t\t\t\tconst srcAttribute = reference.getAttribute( attributeName );\n\t\t\t\tconst { array, itemSize, normalized } = srcAttribute;\n\n\t\t\t\tconst dstArray = new array.constructor( maxVertexCount * itemSize );\n\t\t\t\tconst dstAttribute = new BufferAttribute( dstArray, itemSize, normalized );\n\n\t\t\t\tgeometry.setAttribute( attributeName, dstAttribute );\n\n\t\t\t}\n\n\t\t\tif ( reference.getIndex() !== null ) {\n\n\t\t\t\t// Reserve last u16 index for primitive restart.\n\t\t\t\tconst indexArray = maxVertexCount > 65535\n\t\t\t\t\t? new Uint32Array( maxIndexCount )\n\t\t\t\t\t: new Uint16Array( maxIndexCount );\n\n\t\t\t\tgeometry.setIndex( new BufferAttribute( indexArray, 1 ) );\n\n\t\t\t}\n\n\t\t\tthis._geometryInitialized = true;\n\n\t\t}\n\n\t}\n\n\t// Make sure the geometry is compatible with the existing combined geometry attributes\n\t_validateGeometry( geometry ) {\n\n\t\t// check to ensure the geometries are using consistent attributes and indices\n\t\tconst batchGeometry = this.geometry;\n\t\tif ( Boolean( geometry.getIndex() ) !== Boolean( batchGeometry.getIndex() ) ) {\n\n\t\t\tthrow new Error( 'THREE.BatchedMesh: All geometries must consistently have \"index\".' );\n\n\t\t}\n\n\t\tfor ( const attributeName in batchGeometry.attributes ) {\n\n\t\t\tif ( ! geometry.hasAttribute( attributeName ) ) {\n\n\t\t\t\tthrow new Error( `THREE.BatchedMesh: Added geometry missing \"${ attributeName }\". All geometries must have consistent attributes.` );\n\n\t\t\t}\n\n\t\t\tconst srcAttribute = geometry.getAttribute( attributeName );\n\t\t\tconst dstAttribute = batchGeometry.getAttribute( attributeName );\n\t\t\tif ( srcAttribute.itemSize !== dstAttribute.itemSize || srcAttribute.normalized !== dstAttribute.normalized ) {\n\n\t\t\t\tthrow new Error( 'THREE.BatchedMesh: All attributes must have a consistent itemSize and normalized value.' );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Validates the instance defined by the given ID.\n\t *\n\t * @param {number} instanceId - The instance to validate.\n\t */\n\tvalidateInstanceId( instanceId ) {\n\n\t\tconst instanceInfo = this._instanceInfo;\n\t\tif ( instanceId < 0 || instanceId >= instanceInfo.length || instanceInfo[ instanceId ].active === false ) {\n\n\t\t\tthrow new Error( `THREE.BatchedMesh: Invalid instanceId ${instanceId}. Instance is either out of range or has been deleted.` );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Validates the geometry defined by the given ID.\n\t *\n\t * @param {number} geometryId - The geometry to validate.\n\t */\n\tvalidateGeometryId( geometryId ) {\n\n\t\tconst geometryInfoList = this._geometryInfo;\n\t\tif ( geometryId < 0 || geometryId >= geometryInfoList.length || geometryInfoList[ geometryId ].active === false ) {\n\n\t\t\tthrow new Error( `THREE.BatchedMesh: Invalid geometryId ${geometryId}. Geometry is either out of range or has been deleted.` );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Takes a sort a function that is run before render. The function takes a list of instances to\n\t * sort and a camera. The objects in the list include a \"z\" field to perform a depth-ordered sort with.\n\t *\n\t * @param {Function} func - The custom sort function.\n\t * @return {BatchedMesh} A reference to this batched mesh.\n\t */\n\tsetCustomSort( func ) {\n\n\t\tthis.customSort = func;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes the bounding box, updating {@link BatchedMesh#boundingBox}.\n\t * Bounding boxes aren't computed by default. They need to be explicitly computed,\n\t * otherwise they are `null`.\n\t */\n\tcomputeBoundingBox() {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tconst boundingBox = this.boundingBox;\n\t\tconst instanceInfo = this._instanceInfo;\n\n\t\tboundingBox.makeEmpty();\n\t\tfor ( let i = 0, l = instanceInfo.length; i < l; i ++ ) {\n\n\t\t\tif ( instanceInfo[ i ].active === false ) continue;\n\n\t\t\tconst geometryId = instanceInfo[ i ].geometryIndex;\n\t\t\tthis.getMatrixAt( i, _matrix$1 );\n\t\t\tthis.getBoundingBoxAt( geometryId, _box$1 ).applyMatrix4( _matrix$1 );\n\t\t\tboundingBox.union( _box$1 );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Computes the bounding sphere, updating {@link BatchedMesh#boundingSphere}.\n\t * Bounding spheres aren't computed by default. They need to be explicitly computed,\n\t * otherwise they are `null`.\n\t */\n\tcomputeBoundingSphere() {\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tconst boundingSphere = this.boundingSphere;\n\t\tconst instanceInfo = this._instanceInfo;\n\n\t\tboundingSphere.makeEmpty();\n\t\tfor ( let i = 0, l = instanceInfo.length; i < l; i ++ ) {\n\n\t\t\tif ( instanceInfo[ i ].active === false ) continue;\n\n\t\t\tconst geometryId = instanceInfo[ i ].geometryIndex;\n\t\t\tthis.getMatrixAt( i, _matrix$1 );\n\t\t\tthis.getBoundingSphereAt( geometryId, _sphere$2 ).applyMatrix4( _matrix$1 );\n\t\t\tboundingSphere.union( _sphere$2 );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Adds a new instance to the batch using the geometry of the given ID and returns\n\t * a new id referring to the new instance to be used by other functions.\n\t *\n\t * @param {number} geometryId - The ID of a previously added geometry via {@link BatchedMesh#addGeometry}.\n\t * @return {number} The instance ID.\n\t */\n\taddInstance( geometryId ) {\n\n\t\tconst atCapacity = this._instanceInfo.length >= this.maxInstanceCount;\n\n\t\t// ensure we're not over geometry\n\t\tif ( atCapacity && this._availableInstanceIds.length === 0 ) {\n\n\t\t\tthrow new Error( 'THREE.BatchedMesh: Maximum item count reached.' );\n\n\t\t}\n\n\t\tconst instanceInfo = {\n\t\t\tvisible: true,\n\t\t\tactive: true,\n\t\t\tgeometryIndex: geometryId,\n\t\t};\n\n\t\tlet drawId = null;\n\n\t\t// Prioritize using previously freed instance ids\n\t\tif ( this._availableInstanceIds.length > 0 ) {\n\n\t\t\tthis._availableInstanceIds.sort( ascIdSort );\n\n\t\t\tdrawId = this._availableInstanceIds.shift();\n\t\t\tthis._instanceInfo[ drawId ] = instanceInfo;\n\n\t\t} else {\n\n\t\t\tdrawId = this._instanceInfo.length;\n\t\t\tthis._instanceInfo.push( instanceInfo );\n\n\t\t}\n\n\t\tconst matricesTexture = this._matricesTexture;\n\t\t_matrix$1.identity().toArray( matricesTexture.image.data, drawId * 16 );\n\t\tmatricesTexture.needsUpdate = true;\n\n\t\tconst colorsTexture = this._colorsTexture;\n\t\tif ( colorsTexture ) {\n\n\t\t\t_whiteColor.toArray( colorsTexture.image.data, drawId * 4 );\n\t\t\tcolorsTexture.needsUpdate = true;\n\n\t\t}\n\n\t\tthis._visibilityChanged = true;\n\t\treturn drawId;\n\n\t}\n\n\t/**\n\t * Adds the given geometry to the batch and returns the associated\n\t * geometry id referring to it to be used in other functions.\n\t *\n\t * @param {BufferGeometry} geometry - The geometry to add.\n\t * @param {number} [reservedVertexCount=-1] - Optional parameter specifying the amount of\n\t * vertex buffer space to reserve for the added geometry. This is necessary if it is planned\n\t * to set a new geometry at this index at a later time that is larger than the original geometry.\n\t * Defaults to the length of the given geometry vertex buffer.\n\t * @param {number} [reservedIndexCount=-1] - Optional parameter specifying the amount of index\n\t * buffer space to reserve for the added geometry. This is necessary if it is planned to set a\n\t * new geometry at this index at a later time that is larger than the original geometry. Defaults to\n\t * the length of the given geometry index buffer.\n\t * @return {number} The geometry ID.\n\t */\n\taddGeometry( geometry, reservedVertexCount = -1, reservedIndexCount = -1 ) {\n\n\t\tthis._initializeGeometry( geometry );\n\n\t\tthis._validateGeometry( geometry );\n\n\t\tconst geometryInfo = {\n\t\t\t// geometry information\n\t\t\tvertexStart: -1,\n\t\t\tvertexCount: -1,\n\t\t\treservedVertexCount: -1,\n\n\t\t\tindexStart: -1,\n\t\t\tindexCount: -1,\n\t\t\treservedIndexCount: -1,\n\n\t\t\t// draw range information\n\t\t\tstart: -1,\n\t\t\tcount: -1,\n\n\t\t\t// state\n\t\t\tboundingBox: null,\n\t\t\tboundingSphere: null,\n\t\t\tactive: true,\n\t\t};\n\n\t\tconst geometryInfoList = this._geometryInfo;\n\t\tgeometryInfo.vertexStart = this._nextVertexStart;\n\t\tgeometryInfo.reservedVertexCount = reservedVertexCount === -1 ? geometry.getAttribute( 'position' ).count : reservedVertexCount;\n\n\t\tconst index = geometry.getIndex();\n\t\tconst hasIndex = index !== null;\n\t\tif ( hasIndex ) {\n\n\t\t\tgeometryInfo.indexStart = this._nextIndexStart;\n\t\t\tgeometryInfo.reservedIndexCount = reservedIndexCount === -1 ? index.count : reservedIndexCount;\n\n\t\t}\n\n\t\tif (\n\t\t\tgeometryInfo.indexStart !== -1 &&\n\t\t\tgeometryInfo.indexStart + geometryInfo.reservedIndexCount > this._maxIndexCount ||\n\t\t\tgeometryInfo.vertexStart + geometryInfo.reservedVertexCount > this._maxVertexCount\n\t\t) {\n\n\t\t\tthrow new Error( 'THREE.BatchedMesh: Reserved space request exceeds the maximum buffer size.' );\n\n\t\t}\n\n\t\t// update id\n\t\tlet geometryId;\n\t\tif ( this._availableGeometryIds.length > 0 ) {\n\n\t\t\tthis._availableGeometryIds.sort( ascIdSort );\n\n\t\t\tgeometryId = this._availableGeometryIds.shift();\n\t\t\tgeometryInfoList[ geometryId ] = geometryInfo;\n\n\n\t\t} else {\n\n\t\t\tgeometryId = this._geometryCount;\n\t\t\tthis._geometryCount ++;\n\t\t\tgeometryInfoList.push( geometryInfo );\n\n\t\t}\n\n\t\t// update the geometry\n\t\tthis.setGeometryAt( geometryId, geometry );\n\n\t\t// increment the next geometry position\n\t\tthis._nextIndexStart = geometryInfo.indexStart + geometryInfo.reservedIndexCount;\n\t\tthis._nextVertexStart = geometryInfo.vertexStart + geometryInfo.reservedVertexCount;\n\n\t\treturn geometryId;\n\n\t}\n\n\t/**\n\t * Replaces the geometry at the given ID with the provided geometry. Throws an error if there\n\t * is not enough space reserved for geometry. Calling this will change all instances that are\n\t * rendering that geometry.\n\t *\n\t * @param {number} geometryId - The ID of the geometry that should be replaced with the given geometry.\n\t * @param {BufferGeometry} geometry - The new geometry.\n\t * @return {number} The geometry ID.\n\t */\n\tsetGeometryAt( geometryId, geometry ) {\n\n\t\tif ( geometryId >= this._geometryCount ) {\n\n\t\t\tthrow new Error( 'THREE.BatchedMesh: Maximum geometry count reached.' );\n\n\t\t}\n\n\t\tthis._validateGeometry( geometry );\n\n\t\tconst batchGeometry = this.geometry;\n\t\tconst hasIndex = batchGeometry.getIndex() !== null;\n\t\tconst dstIndex = batchGeometry.getIndex();\n\t\tconst srcIndex = geometry.getIndex();\n\t\tconst geometryInfo = this._geometryInfo[ geometryId ];\n\t\tif (\n\t\t\thasIndex &&\n\t\t\tsrcIndex.count > geometryInfo.reservedIndexCount ||\n\t\t\tgeometry.attributes.position.count > geometryInfo.reservedVertexCount\n\t\t) {\n\n\t\t\tthrow new Error( 'THREE.BatchedMesh: Reserved space not large enough for provided geometry.' );\n\n\t\t}\n\n\t\t// copy geometry buffer data over\n\t\tconst vertexStart = geometryInfo.vertexStart;\n\t\tconst reservedVertexCount = geometryInfo.reservedVertexCount;\n\t\tgeometryInfo.vertexCount = geometry.getAttribute( 'position' ).count;\n\n\t\tfor ( const attributeName in batchGeometry.attributes ) {\n\n\t\t\t// copy attribute data\n\t\t\tconst srcAttribute = geometry.getAttribute( attributeName );\n\t\t\tconst dstAttribute = batchGeometry.getAttribute( attributeName );\n\t\t\tcopyAttributeData( srcAttribute, dstAttribute, vertexStart );\n\n\t\t\t// fill the rest in with zeroes\n\t\t\tconst itemSize = srcAttribute.itemSize;\n\t\t\tfor ( let i = srcAttribute.count, l = reservedVertexCount; i < l; i ++ ) {\n\n\t\t\t\tconst index = vertexStart + i;\n\t\t\t\tfor ( let c = 0; c < itemSize; c ++ ) {\n\n\t\t\t\t\tdstAttribute.setComponent( index, c, 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tdstAttribute.needsUpdate = true;\n\t\t\tdstAttribute.addUpdateRange( vertexStart * itemSize, reservedVertexCount * itemSize );\n\n\t\t}\n\n\t\t// copy index\n\t\tif ( hasIndex ) {\n\n\t\t\tconst indexStart = geometryInfo.indexStart;\n\t\t\tconst reservedIndexCount = geometryInfo.reservedIndexCount;\n\t\t\tgeometryInfo.indexCount = geometry.getIndex().count;\n\n\t\t\t// copy index data over\n\t\t\tfor ( let i = 0; i < srcIndex.count; i ++ ) {\n\n\t\t\t\tdstIndex.setX( indexStart + i, vertexStart + srcIndex.getX( i ) );\n\n\t\t\t}\n\n\t\t\t// fill the rest in with zeroes\n\t\t\tfor ( let i = srcIndex.count, l = reservedIndexCount; i < l; i ++ ) {\n\n\t\t\t\tdstIndex.setX( indexStart + i, vertexStart );\n\n\t\t\t}\n\n\t\t\tdstIndex.needsUpdate = true;\n\t\t\tdstIndex.addUpdateRange( indexStart, geometryInfo.reservedIndexCount );\n\n\t\t}\n\n\t\t// update the draw range\n\t\tgeometryInfo.start = hasIndex ? geometryInfo.indexStart : geometryInfo.vertexStart;\n\t\tgeometryInfo.count = hasIndex ? geometryInfo.indexCount : geometryInfo.vertexCount;\n\n\t\t// store the bounding boxes\n\t\tgeometryInfo.boundingBox = null;\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tgeometryInfo.boundingBox = geometry.boundingBox.clone();\n\n\t\t}\n\n\t\tgeometryInfo.boundingSphere = null;\n\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\tgeometryInfo.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t}\n\n\t\tthis._visibilityChanged = true;\n\t\treturn geometryId;\n\n\t}\n\n\t/**\n\t * Deletes the geometry defined by the given ID from this batch. Any instances referencing\n\t * this geometry will also be removed as a side effect.\n\t *\n\t * @param {number} geometryId - The ID of the geometry to remove from the batch.\n\t * @return {BatchedMesh} A reference to this batched mesh.\n\t */\n\tdeleteGeometry( geometryId ) {\n\n\t\tconst geometryInfoList = this._geometryInfo;\n\t\tif ( geometryId >= geometryInfoList.length || geometryInfoList[ geometryId ].active === false ) {\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\t// delete any instances associated with this geometry\n\t\tconst instanceInfo = this._instanceInfo;\n\t\tfor ( let i = 0, l = instanceInfo.length; i < l; i ++ ) {\n\n\t\t\tif ( instanceInfo[ i ].active && instanceInfo[ i ].geometryIndex === geometryId ) {\n\n\t\t\t\tthis.deleteInstance( i );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometryInfoList[ geometryId ].active = false;\n\t\tthis._availableGeometryIds.push( geometryId );\n\t\tthis._visibilityChanged = true;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Deletes an existing instance from the batch using the given ID.\n\t *\n\t * @param {number} instanceId - The ID of the instance to remove from the batch.\n\t * @return {BatchedMesh} A reference to this batched mesh.\n\t */\n\tdeleteInstance( instanceId ) {\n\n\t\tthis.validateInstanceId( instanceId );\n\n\t\tthis._instanceInfo[ instanceId ].active = false;\n\t\tthis._availableInstanceIds.push( instanceId );\n\t\tthis._visibilityChanged = true;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Repacks the sub geometries in [name] to remove any unused space remaining from\n\t * previously deleted geometry, freeing up space to add new geometry.\n\t *\n\t * @param {number} instanceId - The ID of the instance to remove from the batch.\n\t * @return {BatchedMesh} A reference to this batched mesh.\n\t */\n\toptimize() {\n\n\t\t// track the next indices to copy data to\n\t\tlet nextVertexStart = 0;\n\t\tlet nextIndexStart = 0;\n\n\t\t// Iterate over all geometry ranges in order sorted from earliest in the geometry buffer to latest\n\t\t// in the geometry buffer. Because draw range objects can be reused there is no guarantee of their order.\n\t\tconst geometryInfoList = this._geometryInfo;\n\t\tconst indices = geometryInfoList\n\t\t\t.map( ( e, i ) => i )\n\t\t\t.sort( ( a, b ) => {\n\n\t\t\t\treturn geometryInfoList[ a ].vertexStart - geometryInfoList[ b ].vertexStart;\n\n\t\t\t} );\n\n\t\tconst geometry = this.geometry;\n\t\tfor ( let i = 0, l = geometryInfoList.length; i < l; i ++ ) {\n\n\t\t\t// if a geometry range is inactive then don't copy anything\n\t\t\tconst index = indices[ i ];\n\t\t\tconst geometryInfo = geometryInfoList[ index ];\n\t\t\tif ( geometryInfo.active === false ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\t// if a geometry contains an index buffer then shift it, as well\n\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\tif ( geometryInfo.indexStart !== nextIndexStart ) {\n\n\t\t\t\t\tconst { indexStart, vertexStart, reservedIndexCount } = geometryInfo;\n\t\t\t\t\tconst index = geometry.index;\n\t\t\t\t\tconst array = index.array;\n\n\t\t\t\t\t// shift the index pointers based on how the vertex data will shift\n\t\t\t\t\t// adjusting the index must happen first so the original vertex start value is available\n\t\t\t\t\tconst elementDelta = nextVertexStart - vertexStart;\n\t\t\t\t\tfor ( let j = indexStart; j < indexStart + reservedIndexCount; j ++ ) {\n\n\t\t\t\t\t\tarray[ j ] = array[ j ] + elementDelta;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tindex.array.copyWithin( nextIndexStart, indexStart, indexStart + reservedIndexCount );\n\t\t\t\t\tindex.addUpdateRange( nextIndexStart, reservedIndexCount );\n\n\t\t\t\t\tgeometryInfo.indexStart = nextIndexStart;\n\n\t\t\t\t}\n\n\t\t\t\tnextIndexStart += geometryInfo.reservedIndexCount;\n\n\t\t\t}\n\n\t\t\t// if a geometry needs to be moved then copy attribute data to overwrite unused space\n\t\t\tif ( geometryInfo.vertexStart !== nextVertexStart ) {\n\n\t\t\t\tconst { vertexStart, reservedVertexCount } = geometryInfo;\n\t\t\t\tconst attributes = geometry.attributes;\n\t\t\t\tfor ( const key in attributes ) {\n\n\t\t\t\t\tconst attribute = attributes[ key ];\n\t\t\t\t\tconst { array, itemSize } = attribute;\n\t\t\t\t\tarray.copyWithin( nextVertexStart * itemSize, vertexStart * itemSize, ( vertexStart + reservedVertexCount ) * itemSize );\n\t\t\t\t\tattribute.addUpdateRange( nextVertexStart * itemSize, reservedVertexCount * itemSize );\n\n\t\t\t\t}\n\n\t\t\t\tgeometryInfo.vertexStart = nextVertexStart;\n\n\t\t\t}\n\n\t\t\tnextVertexStart += geometryInfo.reservedVertexCount;\n\t\t\tgeometryInfo.start = geometry.index ? geometryInfo.indexStart : geometryInfo.vertexStart;\n\n\t\t\t// step the next geometry points to the shifted position\n\t\t\tthis._nextIndexStart = geometry.index ? geometryInfo.indexStart + geometryInfo.reservedIndexCount : 0;\n\t\t\tthis._nextVertexStart = geometryInfo.vertexStart + geometryInfo.reservedVertexCount;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the bounding box for the given geometry.\n\t *\n\t * @param {number} geometryId - The ID of the geometry to return the bounding box for.\n\t * @param {Box3} target - The target object that is used to store the method's result.\n\t * @return {Box3|null} The geometry's bounding box. Returns `null` if no geometry has been found for the given ID.\n\t */\n\tgetBoundingBoxAt( geometryId, target ) {\n\n\t\tif ( geometryId >= this._geometryCount ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// compute bounding box\n\t\tconst geometry = this.geometry;\n\t\tconst geometryInfo = this._geometryInfo[ geometryId ];\n\t\tif ( geometryInfo.boundingBox === null ) {\n\n\t\t\tconst box = new Box3();\n\t\t\tconst index = geometry.index;\n\t\t\tconst position = geometry.attributes.position;\n\t\t\tfor ( let i = geometryInfo.start, l = geometryInfo.start + geometryInfo.count; i < l; i ++ ) {\n\n\t\t\t\tlet iv = i;\n\t\t\t\tif ( index ) {\n\n\t\t\t\t\tiv = index.getX( iv );\n\n\t\t\t\t}\n\n\t\t\t\tbox.expandByPoint( _vector$5.fromBufferAttribute( position, iv ) );\n\n\t\t\t}\n\n\t\t\tgeometryInfo.boundingBox = box;\n\n\t\t}\n\n\t\ttarget.copy( geometryInfo.boundingBox );\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Returns the bounding sphere for the given geometry.\n\t *\n\t * @param {number} geometryId - The ID of the geometry to return the bounding sphere for.\n\t * @param {Sphere} target - The target object that is used to store the method's result.\n\t * @return {Sphere|null} The geometry's bounding sphere. Returns `null` if no geometry has been found for the given ID.\n\t */\n\tgetBoundingSphereAt( geometryId, target ) {\n\n\t\tif ( geometryId >= this._geometryCount ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// compute bounding sphere\n\t\tconst geometry = this.geometry;\n\t\tconst geometryInfo = this._geometryInfo[ geometryId ];\n\t\tif ( geometryInfo.boundingSphere === null ) {\n\n\t\t\tconst sphere = new Sphere();\n\t\t\tthis.getBoundingBoxAt( geometryId, _box$1 );\n\t\t\t_box$1.getCenter( sphere.center );\n\n\t\t\tconst index = geometry.index;\n\t\t\tconst position = geometry.attributes.position;\n\n\t\t\tlet maxRadiusSq = 0;\n\t\t\tfor ( let i = geometryInfo.start, l = geometryInfo.start + geometryInfo.count; i < l; i ++ ) {\n\n\t\t\t\tlet iv = i;\n\t\t\t\tif ( index ) {\n\n\t\t\t\t\tiv = index.getX( iv );\n\n\t\t\t\t}\n\n\t\t\t\t_vector$5.fromBufferAttribute( position, iv );\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, sphere.center.distanceToSquared( _vector$5 ) );\n\n\t\t\t}\n\n\t\t\tsphere.radius = Math.sqrt( maxRadiusSq );\n\t\t\tgeometryInfo.boundingSphere = sphere;\n\n\t\t}\n\n\t\ttarget.copy( geometryInfo.boundingSphere );\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Sets the given local transformation matrix to the defined instance.\n\t * Negatively scaled matrices are not supported.\n\t *\n\t * @param {number} instanceId - The ID of an instance to set the matrix of.\n\t * @param {Matrix4} matrix - A 4x4 matrix representing the local transformation of a single instance.\n\t * @return {BatchedMesh} A reference to this batched mesh.\n\t */\n\tsetMatrixAt( instanceId, matrix ) {\n\n\t\tthis.validateInstanceId( instanceId );\n\n\t\tconst matricesTexture = this._matricesTexture;\n\t\tconst matricesArray = this._matricesTexture.image.data;\n\t\tmatrix.toArray( matricesArray, instanceId * 16 );\n\t\tmatricesTexture.needsUpdate = true;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the local transformation matrix of the defined instance.\n\t *\n\t * @param {number} instanceId - The ID of an instance to get the matrix of.\n\t * @param {Matrix4} matrix - The target object that is used to store the method's result.\n\t * @return {Matrix4} The instance's local transformation matrix.\n\t */\n\tgetMatrixAt( instanceId, matrix ) {\n\n\t\tthis.validateInstanceId( instanceId );\n\t\treturn matrix.fromArray( this._matricesTexture.image.data, instanceId * 16 );\n\n\t}\n\n\t/**\n\t * Sets the given color to the defined instance.\n\t *\n\t * @param {number} instanceId - The ID of an instance to set the color of.\n\t * @param {Color} color - The color to set the instance to.\n\t * @return {BatchedMesh} A reference to this batched mesh.\n\t */\n\tsetColorAt( instanceId, color ) {\n\n\t\tthis.validateInstanceId( instanceId );\n\n\t\tif ( this._colorsTexture === null ) {\n\n\t\t\tthis._initColorsTexture();\n\n\t\t}\n\n\t\tcolor.toArray( this._colorsTexture.image.data, instanceId * 4 );\n\t\tthis._colorsTexture.needsUpdate = true;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the color of the defined instance.\n\t *\n\t * @param {number} instanceId - The ID of an instance to get the color of.\n\t * @param {Color} color - The target object that is used to store the method's result.\n\t * @return {Color} The instance's color.\n\t */\n\tgetColorAt( instanceId, color ) {\n\n\t\tthis.validateInstanceId( instanceId );\n\t\treturn color.fromArray( this._colorsTexture.image.data, instanceId * 4 );\n\n\t}\n\n\t/**\n\t * Sets the visibility of the instance.\n\t *\n\t * @param {number} instanceId - The id of the instance to set the visibility of.\n\t * @param {boolean} visible - Whether the instance is visible or not.\n\t * @return {BatchedMesh} A reference to this batched mesh.\n\t */\n\tsetVisibleAt( instanceId, visible ) {\n\n\t\tthis.validateInstanceId( instanceId );\n\n\t\tif ( this._instanceInfo[ instanceId ].visible === visible ) {\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tthis._instanceInfo[ instanceId ].visible = visible;\n\t\tthis._visibilityChanged = true;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the visibility state of the defined instance.\n\t *\n\t * @param {number} instanceId - The ID of an instance to get the visibility state of.\n\t * @return {boolean} Whether the instance is visible or not.\n\t */\n\tgetVisibleAt( instanceId ) {\n\n\t\tthis.validateInstanceId( instanceId );\n\n\t\treturn this._instanceInfo[ instanceId ].visible;\n\n\t}\n\n\t/**\n\t * Sets the geometry ID of the instance at the given index.\n\t *\n\t * @param {number} instanceId - The ID of the instance to set the geometry ID of.\n\t * @param {number} geometryId - The geometry ID to be use by the instance.\n\t * @return {BatchedMesh} A reference to this batched mesh.\n\t */\n\tsetGeometryIdAt( instanceId, geometryId ) {\n\n\t\tthis.validateInstanceId( instanceId );\n\t\tthis.validateGeometryId( geometryId );\n\n\t\tthis._instanceInfo[ instanceId ].geometryIndex = geometryId;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the geometry ID of the defined instance.\n\t *\n\t * @param {number} instanceId - The ID of an instance to get the geometry ID of.\n\t * @return {number} The instance's geometry ID.\n\t */\n\tgetGeometryIdAt( instanceId ) {\n\n\t\tthis.validateInstanceId( instanceId );\n\n\t\treturn this._instanceInfo[ instanceId ].geometryIndex;\n\n\t}\n\n\t/**\n\t * Get the range representing the subset of triangles related to the attached geometry,\n\t * indicating the starting offset and count, or `null` if invalid.\n\t *\n\t * @param {number} geometryId - The id of the geometry to get the range of.\n\t * @param {Object} [target] - The target object that is used to store the method's result.\n\t * @return {{\n\t * \tvertexStart:number,vertexCount:number,reservedVertexCount:number,\n\t * \tindexStart:number,indexCount:number,reservedIndexCount:number,\n\t * \tstart:number,count:number\n\t * }} The result object with range data.\n\t */\n\tgetGeometryRangeAt( geometryId, target = {} ) {\n\n\t\tthis.validateGeometryId( geometryId );\n\n\t\tconst geometryInfo = this._geometryInfo[ geometryId ];\n\t\ttarget.vertexStart = geometryInfo.vertexStart;\n\t\ttarget.vertexCount = geometryInfo.vertexCount;\n\t\ttarget.reservedVertexCount = geometryInfo.reservedVertexCount;\n\n\t\ttarget.indexStart = geometryInfo.indexStart;\n\t\ttarget.indexCount = geometryInfo.indexCount;\n\t\ttarget.reservedIndexCount = geometryInfo.reservedIndexCount;\n\n\t\ttarget.start = geometryInfo.start;\n\t\ttarget.count = geometryInfo.count;\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Resizes the necessary buffers to support the provided number of instances.\n\t * If the provided arguments shrink the number of instances but there are not enough\n\t * unused Ids at the end of the list then an error is thrown.\n\t *\n\t * @param {number} maxInstanceCount - The max number of individual instances that can be added and rendered by the batch.\n\t*/\n\tsetInstanceCount( maxInstanceCount ) {\n\n\t\t// shrink the available instances as much as possible\n\t\tconst availableInstanceIds = this._availableInstanceIds;\n\t\tconst instanceInfo = this._instanceInfo;\n\t\tavailableInstanceIds.sort( ascIdSort );\n\t\twhile ( availableInstanceIds[ availableInstanceIds.length - 1 ] === instanceInfo.length ) {\n\n\t\t\tinstanceInfo.pop();\n\t\t\tavailableInstanceIds.pop();\n\n\t\t}\n\n\t\t// throw an error if it can't be shrunk to the desired size\n\t\tif ( maxInstanceCount < instanceInfo.length ) {\n\n\t\t\tthrow new Error( `BatchedMesh: Instance ids outside the range ${ maxInstanceCount } are being used. Cannot shrink instance count.` );\n\n\t\t}\n\n\t\t// copy the multi draw counts\n\t\tconst multiDrawCounts = new Int32Array( maxInstanceCount );\n\t\tconst multiDrawStarts = new Int32Array( maxInstanceCount );\n\t\tcopyArrayContents( this._multiDrawCounts, multiDrawCounts );\n\t\tcopyArrayContents( this._multiDrawStarts, multiDrawStarts );\n\n\t\tthis._multiDrawCounts = multiDrawCounts;\n\t\tthis._multiDrawStarts = multiDrawStarts;\n\t\tthis._maxInstanceCount = maxInstanceCount;\n\n\t\t// update texture data for instance sampling\n\t\tconst indirectTexture = this._indirectTexture;\n\t\tconst matricesTexture = this._matricesTexture;\n\t\tconst colorsTexture = this._colorsTexture;\n\n\t\tindirectTexture.dispose();\n\t\tthis._initIndirectTexture();\n\t\tcopyArrayContents( indirectTexture.image.data, this._indirectTexture.image.data );\n\n\t\tmatricesTexture.dispose();\n\t\tthis._initMatricesTexture();\n\t\tcopyArrayContents( matricesTexture.image.data, this._matricesTexture.image.data );\n\n\t\tif ( colorsTexture ) {\n\n\t\t\tcolorsTexture.dispose();\n\t\t\tthis._initColorsTexture();\n\t\t\tcopyArrayContents( colorsTexture.image.data, this._colorsTexture.image.data );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Resizes the available space in the batch's vertex and index buffer attributes to the provided sizes.\n\t * If the provided arguments shrink the geometry buffers but there is not enough unused space at the\n\t * end of the geometry attributes then an error is thrown.\n\t *\n\t * @param {number} maxVertexCount - The maximum number of vertices to be used by all unique geometries to resize to.\n\t * @param {number} maxIndexCount - The maximum number of indices to be used by all unique geometries to resize to.\n\t*/\n\tsetGeometrySize( maxVertexCount, maxIndexCount ) {\n\n\t\t// Check if we can shrink to the requested vertex attribute size\n\t\tconst validRanges = [ ...this._geometryInfo ].filter( info => info.active );\n\t\tconst requiredVertexLength = Math.max( ...validRanges.map( range => range.vertexStart + range.reservedVertexCount ) );\n\t\tif ( requiredVertexLength > maxVertexCount ) {\n\n\t\t\tthrow new Error( `BatchedMesh: Geometry vertex values are being used outside the range ${ maxIndexCount }. Cannot shrink further.` );\n\n\t\t}\n\n\t\t// Check if we can shrink to the requested index attribute size\n\t\tif ( this.geometry.index ) {\n\n\t\t\tconst requiredIndexLength = Math.max( ...validRanges.map( range => range.indexStart + range.reservedIndexCount ) );\n\t\t\tif ( requiredIndexLength > maxIndexCount ) {\n\n\t\t\t\tthrow new Error( `BatchedMesh: Geometry index values are being used outside the range ${ maxIndexCount }. Cannot shrink further.` );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\t// dispose of the previous geometry\n\t\tconst oldGeometry = this.geometry;\n\t\toldGeometry.dispose();\n\n\t\t// recreate the geometry needed based on the previous variant\n\t\tthis._maxVertexCount = maxVertexCount;\n\t\tthis._maxIndexCount = maxIndexCount;\n\n\t\tif ( this._geometryInitialized ) {\n\n\t\t\tthis._geometryInitialized = false;\n\t\t\tthis.geometry = new BufferGeometry();\n\t\t\tthis._initializeGeometry( oldGeometry );\n\n\t\t}\n\n\t\t// copy data from the previous geometry\n\t\tconst geometry = this.geometry;\n\t\tif ( oldGeometry.index ) {\n\n\t\t\tcopyArrayContents( oldGeometry.index.array, geometry.index.array );\n\n\t\t}\n\n\t\tfor ( const key in oldGeometry.attributes ) {\n\n\t\t\tcopyArrayContents( oldGeometry.attributes[ key ].array, geometry.attributes[ key ].array );\n\n\t\t}\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst instanceInfo = this._instanceInfo;\n\t\tconst geometryInfoList = this._geometryInfo;\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst batchGeometry = this.geometry;\n\n\t\t// iterate over each geometry\n\t\t_mesh.material = this.material;\n\t\t_mesh.geometry.index = batchGeometry.index;\n\t\t_mesh.geometry.attributes = batchGeometry.attributes;\n\t\tif ( _mesh.geometry.boundingBox === null ) {\n\n\t\t\t_mesh.geometry.boundingBox = new Box3();\n\n\t\t}\n\n\t\tif ( _mesh.geometry.boundingSphere === null ) {\n\n\t\t\t_mesh.geometry.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tfor ( let i = 0, l = instanceInfo.length; i < l; i ++ ) {\n\n\t\t\tif ( ! instanceInfo[ i ].visible || ! instanceInfo[ i ].active ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tconst geometryId = instanceInfo[ i ].geometryIndex;\n\t\t\tconst geometryInfo = geometryInfoList[ geometryId ];\n\t\t\t_mesh.geometry.setDrawRange( geometryInfo.start, geometryInfo.count );\n\n\t\t\t// get the intersects\n\t\t\tthis.getMatrixAt( i, _mesh.matrixWorld ).premultiply( matrixWorld );\n\t\t\tthis.getBoundingBoxAt( geometryId, _mesh.geometry.boundingBox );\n\t\t\tthis.getBoundingSphereAt( geometryId, _mesh.geometry.boundingSphere );\n\t\t\t_mesh.raycast( raycaster, _batchIntersects );\n\n\t\t\t// add batch id to the intersects\n\t\t\tfor ( let j = 0, l = _batchIntersects.length; j < l; j ++ ) {\n\n\t\t\t\tconst intersect = _batchIntersects[ j ];\n\t\t\t\tintersect.object = this;\n\t\t\t\tintersect.batchId = i;\n\t\t\t\tintersects.push( intersect );\n\n\t\t\t}\n\n\t\t\t_batchIntersects.length = 0;\n\n\t\t}\n\n\t\t_mesh.material = null;\n\t\t_mesh.geometry.index = null;\n\t\t_mesh.geometry.attributes = {};\n\t\t_mesh.geometry.setDrawRange( 0, Infinity );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.geometry = source.geometry.clone();\n\t\tthis.perObjectFrustumCulled = source.perObjectFrustumCulled;\n\t\tthis.sortObjects = source.sortObjects;\n\t\tthis.boundingBox = source.boundingBox !== null ? source.boundingBox.clone() : null;\n\t\tthis.boundingSphere = source.boundingSphere !== null ? source.boundingSphere.clone() : null;\n\n\t\tthis._geometryInfo = source._geometryInfo.map( info => ( {\n\t\t\t...info,\n\n\t\t\tboundingBox: info.boundingBox !== null ? info.boundingBox.clone() : null,\n\t\t\tboundingSphere: info.boundingSphere !== null ? info.boundingSphere.clone() : null,\n\t\t} ) );\n\t\tthis._instanceInfo = source._instanceInfo.map( info => ( { ...info } ) );\n\n\t\tthis._availableInstanceIds = source._availableInstanceIds.slice();\n\t\tthis._availableGeometryIds = source._availableGeometryIds.slice();\n\n\t\tthis._nextIndexStart = source._nextIndexStart;\n\t\tthis._nextVertexStart = source._nextVertexStart;\n\t\tthis._geometryCount = source._geometryCount;\n\n\t\tthis._maxInstanceCount = source._maxInstanceCount;\n\t\tthis._maxVertexCount = source._maxVertexCount;\n\t\tthis._maxIndexCount = source._maxIndexCount;\n\n\t\tthis._geometryInitialized = source._geometryInitialized;\n\t\tthis._multiDrawCounts = source._multiDrawCounts.slice();\n\t\tthis._multiDrawStarts = source._multiDrawStarts.slice();\n\n\t\tthis._indirectTexture = source._indirectTexture.clone();\n\t\tthis._indirectTexture.image.data = this._indirectTexture.image.data.slice();\n\n\t\tthis._matricesTexture = source._matricesTexture.clone();\n\t\tthis._matricesTexture.image.data = this._matricesTexture.image.data.slice();\n\n\t\tif ( this._colorsTexture !== null ) {\n\n\t\t\tthis._colorsTexture = source._colorsTexture.clone();\n\t\t\tthis._colorsTexture.image.data = this._colorsTexture.image.data.slice();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\t// Assuming the geometry is not shared with other meshes\n\t\tthis.geometry.dispose();\n\n\t\tthis._matricesTexture.dispose();\n\t\tthis._matricesTexture = null;\n\n\t\tthis._indirectTexture.dispose();\n\t\tthis._indirectTexture = null;\n\n\t\tif ( this._colorsTexture !== null ) {\n\n\t\t\tthis._colorsTexture.dispose();\n\t\t\tthis._colorsTexture = null;\n\n\t\t}\n\n\t}\n\n\tonBeforeRender( renderer, scene, camera, geometry, material/*, _group*/ ) {\n\n\t\t// if visibility has not changed and frustum culling and object sorting is not required\n\t\t// then skip iterating over all items\n\t\tif ( ! this._visibilityChanged && ! this.perObjectFrustumCulled && ! this.sortObjects ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// the indexed version of the multi draw function requires specifying the start\n\t\t// offset in bytes.\n\t\tconst index = geometry.getIndex();\n\t\tconst bytesPerElement = index === null ? 1 : index.array.BYTES_PER_ELEMENT;\n\n\t\tconst instanceInfo = this._instanceInfo;\n\t\tconst multiDrawStarts = this._multiDrawStarts;\n\t\tconst multiDrawCounts = this._multiDrawCounts;\n\t\tconst geometryInfoList = this._geometryInfo;\n\t\tconst perObjectFrustumCulled = this.perObjectFrustumCulled;\n\t\tconst indirectTexture = this._indirectTexture;\n\t\tconst indirectArray = indirectTexture.image.data;\n\n\t\tconst frustum = camera.isArrayCamera ? _frustumArray : _frustum;\n\t\t// prepare the frustum in the local frame\n\t\tif ( perObjectFrustumCulled && ! camera.isArrayCamera ) {\n\n\t\t\t_matrix$1\n\t\t\t\t.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse )\n\t\t\t\t.multiply( this.matrixWorld );\n\t\t\t_frustum.setFromProjectionMatrix(\n\t\t\t\t_matrix$1,\n\t\t\t\trenderer.coordinateSystem\n\t\t\t);\n\n\t\t}\n\n\t\tlet multiDrawCount = 0;\n\t\tif ( this.sortObjects ) {\n\n\t\t\t// get the camera position in the local frame\n\t\t\t_matrix$1.copy( this.matrixWorld ).invert();\n\t\t\t_vector$5.setFromMatrixPosition( camera.matrixWorld ).applyMatrix4( _matrix$1 );\n\t\t\t_forward.set( 0, 0, -1 ).transformDirection( camera.matrixWorld ).transformDirection( _matrix$1 );\n\n\t\t\tfor ( let i = 0, l = instanceInfo.length; i < l; i ++ ) {\n\n\t\t\t\tif ( instanceInfo[ i ].visible && instanceInfo[ i ].active ) {\n\n\t\t\t\t\tconst geometryId = instanceInfo[ i ].geometryIndex;\n\n\t\t\t\t\t// get the bounds in world space\n\t\t\t\t\tthis.getMatrixAt( i, _matrix$1 );\n\t\t\t\t\tthis.getBoundingSphereAt( geometryId, _sphere$2 ).applyMatrix4( _matrix$1 );\n\n\t\t\t\t\t// determine whether the batched geometry is within the frustum\n\t\t\t\t\tlet culled = false;\n\t\t\t\t\tif ( perObjectFrustumCulled ) {\n\n\t\t\t\t\t\tculled = ! frustum.intersectsSphere( _sphere$2, camera );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! culled ) {\n\n\t\t\t\t\t\t// get the distance from camera used for sorting\n\t\t\t\t\t\tconst geometryInfo = geometryInfoList[ geometryId ];\n\t\t\t\t\t\tconst z = _temp.subVectors( _sphere$2.center, _vector$5 ).dot( _forward );\n\t\t\t\t\t\t_renderList.push( geometryInfo.start, geometryInfo.count, z, i );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Sort the draw ranges and prep for rendering\n\t\t\tconst list = _renderList.list;\n\t\t\tconst customSort = this.customSort;\n\t\t\tif ( customSort === null ) {\n\n\t\t\t\tlist.sort( material.transparent ? sortTransparent : sortOpaque );\n\n\t\t\t} else {\n\n\t\t\t\tcustomSort.call( this, list, camera );\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0, l = list.length; i < l; i ++ ) {\n\n\t\t\t\tconst item = list[ i ];\n\t\t\t\tmultiDrawStarts[ multiDrawCount ] = item.start * bytesPerElement;\n\t\t\t\tmultiDrawCounts[ multiDrawCount ] = item.count;\n\t\t\t\tindirectArray[ multiDrawCount ] = item.index;\n\t\t\t\tmultiDrawCount ++;\n\n\t\t\t}\n\n\t\t\t_renderList.reset();\n\n\t\t} else {\n\n\t\t\tfor ( let i = 0, l = instanceInfo.length; i < l; i ++ ) {\n\n\t\t\t\tif ( instanceInfo[ i ].visible && instanceInfo[ i ].active ) {\n\n\t\t\t\t\tconst geometryId = instanceInfo[ i ].geometryIndex;\n\n\t\t\t\t\t// determine whether the batched geometry is within the frustum\n\t\t\t\t\tlet culled = false;\n\t\t\t\t\tif ( perObjectFrustumCulled ) {\n\n\t\t\t\t\t\t// get the bounds in world space\n\t\t\t\t\t\tthis.getMatrixAt( i, _matrix$1 );\n\t\t\t\t\t\tthis.getBoundingSphereAt( geometryId, _sphere$2 ).applyMatrix4( _matrix$1 );\n\t\t\t\t\t\tculled = ! frustum.intersectsSphere( _sphere$2, camera );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! culled ) {\n\n\t\t\t\t\t\tconst geometryInfo = geometryInfoList[ geometryId ];\n\t\t\t\t\t\tmultiDrawStarts[ multiDrawCount ] = geometryInfo.start * bytesPerElement;\n\t\t\t\t\t\tmultiDrawCounts[ multiDrawCount ] = geometryInfo.count;\n\t\t\t\t\t\tindirectArray[ multiDrawCount ] = i;\n\t\t\t\t\t\tmultiDrawCount ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tindirectTexture.needsUpdate = true;\n\t\tthis._multiDrawCount = multiDrawCount;\n\t\tthis._visibilityChanged = false;\n\n\t}\n\n\tonBeforeShadow( renderer, object, camera, shadowCamera, geometry, depthMaterial/* , group */ ) {\n\n\t\tthis.onBeforeRender( renderer, null, shadowCamera, geometry, depthMaterial );\n\n\t}\n\n}\n\n/**\n * A material for rendering line primitives.\n *\n * Materials define the appearance of renderable 3D objects.\n *\n * ```js\n * const material = new THREE.LineBasicMaterial( { color: 0xffffff } );\n * ```\n *\n * @augments Material\n */\nclass LineBasicMaterial extends Material {\n\n\t/**\n\t * Constructs a new line basic material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLineBasicMaterial = true;\n\n\t\tthis.type = 'LineBasicMaterial';\n\n\t\t/**\n\t\t * Color of the material.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */\n\t\tthis.color = new Color( 0xffffff );\n\n\t\t/**\n\t\t * Sets the color of the lines using data from a texture. The texture map\n\t\t * color is modulated by the diffuse `color`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.map = null;\n\n\t\t/**\n\t\t * Controls line thickness or lines.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}. WebGL and WebGPU\n\t\t * ignore this setting and always render line primitives with a\n\t\t * width of one pixel.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.linewidth = 1;\n\n\t\t/**\n\t\t * Defines appearance of line ends.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('butt'|'round'|'square')}\n\t\t * @default 'round'\n\t\t */\n\t\tthis.linecap = 'round';\n\n\t\t/**\n\t\t * Defines appearance of line joints.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('round'|'bevel'|'miter')}\n\t\t * @default 'round'\n\t\t */\n\t\tthis.linejoin = 'round';\n\n\t\t/**\n\t\t * Whether the material is affected by fog or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.linewidth = source.linewidth;\n\t\tthis.linecap = source.linecap;\n\t\tthis.linejoin = source.linejoin;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _vStart = /*@__PURE__*/ new Vector3();\nconst _vEnd = /*@__PURE__*/ new Vector3();\n\nconst _inverseMatrix$1 = /*@__PURE__*/ new Matrix4();\nconst _ray$1 = /*@__PURE__*/ new Ray();\nconst _sphere$1 = /*@__PURE__*/ new Sphere();\n\nconst _intersectPointOnRay = /*@__PURE__*/ new Vector3();\nconst _intersectPointOnSegment = /*@__PURE__*/ new Vector3();\n\n/**\n * A continuous line. The line are rendered by connecting consecutive\n * vertices with straight lines.\n *\n * ```js\n * const material = new THREE.LineBasicMaterial( { color: 0x0000ff } );\n *\n * const points = [];\n * points.push( new THREE.Vector3( - 10, 0, 0 ) );\n * points.push( new THREE.Vector3( 0, 10, 0 ) );\n * points.push( new THREE.Vector3( 10, 0, 0 ) );\n *\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const line = new THREE.Line( geometry, material );\n * scene.add( line );\n * ```\n *\n * @augments Object3D\n */\nclass Line extends Object3D {\n\n\t/**\n\t * Constructs a new line.\n\t *\n\t * @param {BufferGeometry} [geometry] - The line geometry.\n\t * @param {Material|Array<Material>} [material] - The line material.\n\t */\n\tconstructor( geometry = new BufferGeometry(), material = new LineBasicMaterial() ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLine = true;\n\n\t\tthis.type = 'Line';\n\n\t\t/**\n\t\t * The line geometry.\n\t\t *\n\t\t * @type {BufferGeometry}\n\t\t */\n\t\tthis.geometry = geometry;\n\n\t\t/**\n\t\t * The line material.\n\t\t *\n\t\t * @type {Material|Array<Material>}\n\t\t * @default LineBasicMaterial\n\t\t */\n\t\tthis.material = material;\n\n\t\t/**\n\t\t * A dictionary representing the morph targets in the geometry. The key is the\n\t\t * morph targets name, the value its attribute index. This member is `undefined`\n\t\t * by default and only set when morph targets are detected in the geometry.\n\t\t *\n\t\t * @type {Object<String,number>|undefined}\n\t\t * @default undefined\n\t\t */\n\t\tthis.morphTargetDictionary = undefined;\n\n\t\t/**\n\t\t * An array of weights typically in the range `[0,1]` that specify how much of the morph\n\t\t * is applied. This member is `undefined` by default and only set when morph targets are\n\t\t * detected in the geometry.\n\t\t *\n\t\t * @type {Array<number>|undefined}\n\t\t * @default undefined\n\t\t */\n\t\tthis.morphTargetInfluences = undefined;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.material = Array.isArray( source.material ) ? source.material.slice() : source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes an array of distance values which are necessary for rendering dashed lines.\n\t * For each vertex in the geometry, the method calculates the cumulative length from the\n\t * current point to the very beginning of the line.\n\t *\n\t * @return {Line} A reference to this line.\n\t */\n\tcomputeLineDistances() {\n\n\t\tconst geometry = this.geometry;\n\n\t\t// we assume non-indexed geometry\n\n\t\tif ( geometry.index === null ) {\n\n\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\tconst lineDistances = [ 0 ];\n\n\t\t\tfor ( let i = 1, l = positionAttribute.count; i < l; i ++ ) {\n\n\t\t\t\t_vStart.fromBufferAttribute( positionAttribute, i - 1 );\n\t\t\t\t_vEnd.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\tlineDistances[ i ] += _vStart.distanceTo( _vEnd );\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes intersection points between a casted ray and this line.\n\t *\n\t * @param {Raycaster} raycaster - The raycaster.\n\t * @param {Array<Object>} intersects - The target array that holds the intersection points.\n\t */\n\traycast( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst threshold = raycaster.params.Line.threshold;\n\t\tconst drawRange = geometry.drawRange;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere$1.copy( geometry.boundingSphere );\n\t\t_sphere$1.applyMatrix4( matrixWorld );\n\t\t_sphere$1.radius += threshold;\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere$1 ) === false ) return;\n\n\t\t//\n\n\t\t_inverseMatrix$1.copy( matrixWorld ).invert();\n\t\t_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );\n\n\t\tconst localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\tconst localThresholdSq = localThreshold * localThreshold;\n\n\t\tconst step = this.isLineSegments ? 2 : 1;\n\n\t\tconst index = geometry.index;\n\t\tconst attributes = geometry.attributes;\n\t\tconst positionAttribute = attributes.position;\n\n\t\tif ( index !== null ) {\n\n\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( let i = start, l = end - 1; i < l; i += step ) {\n\n\t\t\t\tconst a = index.getX( i );\n\t\t\t\tconst b = index.getX( i + 1 );\n\n\t\t\t\tconst intersect = checkIntersection( this, raycaster, _ray$1, localThresholdSq, a, b, i );\n\n\t\t\t\tif ( intersect ) {\n\n\t\t\t\t\tintersects.push( intersect );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.isLineLoop ) {\n\n\t\t\t\tconst a = index.getX( end - 1 );\n\t\t\t\tconst b = index.getX( start );\n\n\t\t\t\tconst intersect = checkIntersection( this, raycaster, _ray$1, localThresholdSq, a, b, end - 1 );\n\n\t\t\t\tif ( intersect ) {\n\n\t\t\t\t\tintersects.push( intersect );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\tconst end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( let i = start, l = end - 1; i < l; i += step ) {\n\n\t\t\t\tconst intersect = checkIntersection( this, raycaster, _ray$1, localThresholdSq, i, i + 1, i );\n\n\t\t\t\tif ( intersect ) {\n\n\t\t\t\t\tintersects.push( intersect );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.isLineLoop ) {\n\n\t\t\t\tconst intersect = checkIntersection( this, raycaster, _ray$1, localThresholdSq, end - 1, start, end - 1 );\n\n\t\t\t\tif ( intersect ) {\n\n\t\t\t\t\tintersects.push( intersect );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the values of {@link Line#morphTargetDictionary} and {@link Line#morphTargetInfluences}\n\t * to make sure existing morph targets can influence this 3D object.\n\t */\n\tupdateMorphTargets() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst morphAttributes = geometry.morphAttributes;\n\t\tconst keys = Object.keys( morphAttributes );\n\n\t\tif ( keys.length > 0 ) {\n\n\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nfunction checkIntersection( object, raycaster, ray, thresholdSq, a, b, i ) {\n\n\tconst positionAttribute = object.geometry.attributes.position;\n\n\t_vStart.fromBufferAttribute( positionAttribute, a );\n\t_vEnd.fromBufferAttribute( positionAttribute, b );\n\n\tconst distSq = ray.distanceSqToSegment( _vStart, _vEnd, _intersectPointOnRay, _intersectPointOnSegment );\n\n\tif ( distSq > thresholdSq ) return;\n\n\t_intersectPointOnRay.applyMatrix4( object.matrixWorld ); // Move back to world space for distance calculation\n\n\tconst distance = raycaster.ray.origin.distanceTo( _intersectPointOnRay );\n\n\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\treturn {\n\n\t\tdistance: distance,\n\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t// point: raycaster.ray.at( distance ),\n\t\tpoint: _intersectPointOnSegment.clone().applyMatrix4( object.matrixWorld ),\n\t\tindex: i,\n\t\tface: null,\n\t\tfaceIndex: null,\n\t\tbarycoord: null,\n\t\tobject: object\n\n\t};\n\n}\n\nconst _start = /*@__PURE__*/ new Vector3();\nconst _end = /*@__PURE__*/ new Vector3();\n\n/**\n * A series of lines drawn between pairs of vertices.\n *\n * @augments Line\n */\nclass LineSegments extends Line {\n\n\t/**\n\t * Constructs a new line segments.\n\t *\n\t * @param {BufferGeometry} [geometry] - The line geometry.\n\t * @param {Material|Array<Material>} [material] - The line material.\n\t */\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLineSegments = true;\n\n\t\tthis.type = 'LineSegments';\n\n\t}\n\n\tcomputeLineDistances() {\n\n\t\tconst geometry = this.geometry;\n\n\t\t// we assume non-indexed geometry\n\n\t\tif ( geometry.index === null ) {\n\n\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\tconst lineDistances = [];\n\n\t\t\tfor ( let i = 0, l = positionAttribute.count; i < l; i += 2 ) {\n\n\t\t\t\t_start.fromBufferAttribute( positionAttribute, i );\n\t\t\t\t_end.fromBufferAttribute( positionAttribute, i + 1 );\n\n\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start.distanceTo( _end );\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A continuous line. This is nearly the same as {@link Line} the only difference\n * is that the last vertex is connected with the first vertex in order to close\n * the line to form a loop.\n *\n * @augments Line\n */\nclass LineLoop extends Line {\n\n\t/**\n\t * Constructs a new line loop.\n\t *\n\t * @param {BufferGeometry} [geometry] - The line geometry.\n\t * @param {Material|Array<Material>} [material] - The line material.\n\t */\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLineLoop = true;\n\n\t\tthis.type = 'LineLoop';\n\n\t}\n\n}\n\n/**\n * A material for rendering point primitives.\n *\n * Materials define the appearance of renderable 3D objects.\n *\n * ```js\n * const vertices = [];\n *\n * for ( let i = 0; i < 10000; i ++ ) {\n * \tconst x = THREE.MathUtils.randFloatSpread( 2000 );\n * \tconst y = THREE.MathUtils.randFloatSpread( 2000 );\n * \tconst z = THREE.MathUtils.randFloatSpread( 2000 );\n *\n * \tvertices.push( x, y, z );\n * }\n *\n * const geometry = new THREE.BufferGeometry();\n * geometry.setAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );\n * const material = new THREE.PointsMaterial( { color: 0x888888 } );\n * const points = new THREE.Points( geometry, material );\n * scene.add( points );\n * ```\n *\n * @augments Material\n */\nclass PointsMaterial extends Material {\n\n\t/**\n\t * Constructs a new points material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isPointsMaterial = true;\n\n\t\tthis.type = 'PointsMaterial';\n\n\t\t/**\n\t\t * Color of the material.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */\n\t\tthis.color = new Color( 0xffffff );\n\n\t\t/**\n\t\t * The color map. May optionally include an alpha channel, typically combined\n\t\t * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n\t\t * color is modulated by the diffuse `color`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.map = null;\n\n\t\t/**\n\t\t * The alpha map is a grayscale texture that controls the opacity across the\n\t\t * surface (black: fully transparent; white: fully opaque).\n\t\t *\n\t\t * Only the color of the texture is used, ignoring the alpha channel if one\n\t\t * exists. For RGB and RGBA textures, the renderer will use the green channel\n\t\t * when sampling this texture due to the extra bit of precision provided for\n\t\t * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n\t\t * luminance/alpha textures will also still work as expected.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.alphaMap = null;\n\n\t\t/**\n\t\t * Defines the size of the points in pixels.\n\t\t *\n\t\t * Might be capped if the value exceeds hardware dependent parameters like [gl.ALIASED_POINT_SIZE_RANGE]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getParamete}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.size = 1;\n\n\t\t/**\n\t\t * Specifies whether size of individual points is attenuated by the camera depth (perspective camera only).\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.sizeAttenuation = true;\n\n\t\t/**\n\t\t * Whether the material is affected by fog or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.size = source.size;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _inverseMatrix = /*@__PURE__*/ new Matrix4();\nconst _ray = /*@__PURE__*/ new Ray();\nconst _sphere = /*@__PURE__*/ new Sphere();\nconst _position$2 = /*@__PURE__*/ new Vector3();\n\n/**\n * A class for displaying points or point clouds.\n *\n * @augments Object3D\n */\nclass Points extends Object3D {\n\n\t/**\n\t * Constructs a new point cloud.\n\t *\n\t * @param {BufferGeometry} [geometry] - The points geometry.\n\t * @param {Material|Array<Material>} [material] - The points material.\n\t */\n\tconstructor( geometry = new BufferGeometry(), material = new PointsMaterial() ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isPoints = true;\n\n\t\tthis.type = 'Points';\n\n\t\t/**\n\t\t * The points geometry.\n\t\t *\n\t\t * @type {BufferGeometry}\n\t\t */\n\t\tthis.geometry = geometry;\n\n\t\t/**\n\t\t * The line material.\n\t\t *\n\t\t * @type {Material|Array<Material>}\n\t\t * @default PointsMaterial\n\t\t */\n\t\tthis.material = material;\n\n\t\t/**\n\t\t * A dictionary representing the morph targets in the geometry. The key is the\n\t\t * morph targets name, the value its attribute index. This member is `undefined`\n\t\t * by default and only set when morph targets are detected in the geometry.\n\t\t *\n\t\t * @type {Object<String,number>|undefined}\n\t\t * @default undefined\n\t\t */\n\t\tthis.morphTargetDictionary = undefined;\n\n\t\t/**\n\t\t * An array of weights typically in the range `[0,1]` that specify how much of the morph\n\t\t * is applied. This member is `undefined` by default and only set when morph targets are\n\t\t * detected in the geometry.\n\t\t *\n\t\t * @type {Array<number>|undefined}\n\t\t * @default undefined\n\t\t */\n\t\tthis.morphTargetInfluences = undefined;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.material = Array.isArray( source.material ) ? source.material.slice() : source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes intersection points between a casted ray and this point cloud.\n\t *\n\t * @param {Raycaster} raycaster - The raycaster.\n\t * @param {Array<Object>} intersects - The target array that holds the intersection points.\n\t */\n\traycast( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst threshold = raycaster.params.Points.threshold;\n\t\tconst drawRange = geometry.drawRange;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere.copy( geometry.boundingSphere );\n\t\t_sphere.applyMatrix4( matrixWorld );\n\t\t_sphere.radius += threshold;\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) return;\n\n\t\t//\n\n\t\t_inverseMatrix.copy( matrixWorld ).invert();\n\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\n\n\t\tconst localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\tconst localThresholdSq = localThreshold * localThreshold;\n\n\t\tconst index = geometry.index;\n\t\tconst attributes = geometry.attributes;\n\t\tconst positionAttribute = attributes.position;\n\n\t\tif ( index !== null ) {\n\n\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( let i = start, il = end; i < il; i ++ ) {\n\n\t\t\t\tconst a = index.getX( i );\n\n\t\t\t\t_position$2.fromBufferAttribute( positionAttribute, a );\n\n\t\t\t\ttestPoint( _position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\tconst end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( let i = start, l = end; i < l; i ++ ) {\n\n\t\t\t\t_position$2.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\ttestPoint( _position$2, i, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the values of {@link Points#morphTargetDictionary} and {@link Points#morphTargetInfluences}\n\t * to make sure existing morph targets can influence this 3D object.\n\t */\n\tupdateMorphTargets() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst morphAttributes = geometry.morphAttributes;\n\t\tconst keys = Object.keys( morphAttributes );\n\n\t\tif ( keys.length > 0 ) {\n\n\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nfunction testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {\n\n\tconst rayPointDistanceSq = _ray.distanceSqToPoint( point );\n\n\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\tconst intersectPoint = new Vector3();\n\n\t\t_ray.closestPointToPoint( point, intersectPoint );\n\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\tconst distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\tintersects.push( {\n\n\t\t\tdistance: distance,\n\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\tpoint: intersectPoint,\n\t\t\tindex: index,\n\t\t\tface: null,\n\t\t\tfaceIndex: null,\n\t\t\tbarycoord: null,\n\t\t\tobject: object\n\n\t\t} );\n\n\t}\n\n}\n\n/**\n * A texture for use with a video.\n *\n * ```js\n * // assuming you have created a HTML video element with id=\"video\"\n * const video = document.getElementById( 'video' );\n * const texture = new THREE.VideoTexture( video );\n * ```\n *\n * Note: After the initial use of a texture, its dimensions, format, and type\n * cannot be changed. Instead, call {@link Texture#dispose} on the texture and instantiate a new one.\n *\n * @augments Texture\n */\nclass VideoTexture extends Texture {\n\n\t/**\n\t * Constructs a new video texture.\n\t *\n\t * @param {HTMLVideoElement} video - The video element to use as a data source for the texture.\n\t * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n\t * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n\t * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n\t * @param {number} [magFilter=LinearFilter] - The mag filter value.\n\t * @param {number} [minFilter=LinearFilter] - The min filter value.\n\t * @param {number} [format=RGBAFormat] - The texture format.\n\t * @param {number} [type=UnsignedByteType] - The texture type.\n\t * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n\t */\n\tconstructor( video, mapping, wrapS, wrapT, magFilter = LinearFilter, minFilter = LinearFilter, format, type, anisotropy ) {\n\n\t\tsuper( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isVideoTexture = true;\n\n\t\t/**\n\t\t * Whether to generate mipmaps (if possible) for a texture.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.generateMipmaps = false;\n\n\t\tconst scope = this;\n\n\t\tfunction updateVideo() {\n\n\t\t\tscope.needsUpdate = true;\n\t\t\tvideo.requestVideoFrameCallback( updateVideo );\n\n\t\t}\n\n\t\tif ( 'requestVideoFrameCallback' in video ) {\n\n\t\t\tvideo.requestVideoFrameCallback( updateVideo );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.image ).copy( this );\n\n\t}\n\n\t/**\n\t * This method is called automatically by the renderer and sets {@link Texture#needsUpdate}\n\t * to `true` every time a new frame is available.\n\t *\n\t * Only relevant if `requestVideoFrameCallback` is not supported in the browser.\n\t */\n\tupdate() {\n\n\t\tconst video = this.image;\n\t\tconst hasVideoFrameCallback = 'requestVideoFrameCallback' in video;\n\n\t\tif ( hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\tthis.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * This class can be used as an alternative way to define video data. Instead of using\n * an instance of `HTMLVideoElement` like with `VideoTexture`, `VideoFrameTexture` expects each frame is\n * defined manually via {@link VideoFrameTexture#setFrame}. A typical use case for this module is when\n * video frames are decoded with the WebCodecs API.\n *\n * ```js\n * const texture = new THREE.VideoFrameTexture();\n * texture.setFrame( frame );\n * ```\n *\n * @augments VideoTexture\n */\nclass VideoFrameTexture extends VideoTexture {\n\n\t/**\n\t * Constructs a new video frame texture.\n\t *\n\t * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n\t * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n\t * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n\t * @param {number} [magFilter=LinearFilter] - The mag filter value.\n\t * @param {number} [minFilter=LinearFilter] - The min filter value.\n\t * @param {number} [format=RGBAFormat] - The texture format.\n\t * @param {number} [type=UnsignedByteType] - The texture type.\n\t * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n\t */\n\tconstructor( mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tsuper( {}, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isVideoFrameTexture = true;\n\n\t}\n\n\t/**\n\t * This method overwritten with an empty implementation since\n\t * this type of texture is updated via `setFrame()`.\n\t */\n\tupdate() {}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this ); // restoring Texture.clone()\n\n\t}\n\n\t/**\n\t * Sets the current frame of the video. This will automatically update the texture\n\t * so the data can be used for rendering.\n\t *\n\t * @param {VideoFrame} frame - The video frame.\n\t */\n\tsetFrame( frame ) {\n\n\t\tthis.image = frame;\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\n/**\n * This class can only be used in combination with `copyFramebufferToTexture()` methods\n * of renderers. It extracts the contents of the current bound framebuffer and provides it\n * as a texture for further usage.\n *\n * ```js\n * const pixelRatio = window.devicePixelRatio;\n * const textureSize = 128 * pixelRatio;\n *\n * const frameTexture = new FramebufferTexture( textureSize, textureSize );\n *\n * // calculate start position for copying part of the frame data\n * const vector = new Vector2();\n * vector.x = ( window.innerWidth * pixelRatio / 2 ) - ( textureSize / 2 );\n * vector.y = ( window.innerHeight * pixelRatio / 2 ) - ( textureSize / 2 );\n *\n * renderer.render( scene, camera );\n *\n * // copy part of the rendered frame into the framebuffer texture\n * renderer.copyFramebufferToTexture( frameTexture, vector );\n * ```\n *\n * @augments Texture\n */\nclass FramebufferTexture extends Texture {\n\n\t/**\n\t * Constructs a new framebuffer texture.\n\t *\n\t * @param {number} width - The width of the texture.\n\t * @param {number} height - The height of the texture.\n\t */\n\tconstructor( width, height ) {\n\n\t\tsuper( { width, height } );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isFramebufferTexture = true;\n\n\t\t/**\n\t\t * How the texture is sampled when a texel covers more than one pixel.\n\t\t *\n\t\t * Overwritten and set to `NearestFilter` by default to disable filtering.\n\t\t *\n\t\t * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n\t\t * @default NearestFilter\n\t\t */\n\t\tthis.magFilter = NearestFilter;\n\n\t\t/**\n\t\t * How the texture is sampled when a texel covers less than one pixel.\n\t\t *\n\t\t * Overwritten and set to `NearestFilter` by default to disable filtering.\n\t\t *\n\t\t * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\n\t\t * @default NearestFilter\n\t\t */\n\t\tthis.minFilter = NearestFilter;\n\n\t\t/**\n\t\t * Whether to generate mipmaps (if possible) for a texture.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.generateMipmaps = false;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\n/**\n * Creates a texture based on data in compressed form.\n *\n * These texture are usually loaded with {@link CompressedTextureLoader}.\n *\n * @augments Texture\n */\nclass CompressedTexture extends Texture {\n\n\t/**\n\t * Constructs a new compressed texture.\n\t *\n\t * @param {Array<Object>} mipmaps - This array holds for all mipmaps (including the bases mip)\n\t * the data and dimensions.\n\t * @param {number} width - The width of the texture.\n\t * @param {number} height - The height of the texture.\n\t * @param {number} [format=RGBAFormat] - The texture format.\n\t * @param {number} [type=UnsignedByteType] - The texture type.\n\t * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n\t * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n\t * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n\t * @param {number} [magFilter=LinearFilter] - The mag filter value.\n\t * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.\n\t * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n\t * @param {string} [colorSpace=NoColorSpace] - The color space.\n\t */\n\tconstructor( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, colorSpace ) {\n\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCompressedTexture = true;\n\n\t\t/**\n\t\t * The image property of a compressed texture just defines its dimensions.\n\t\t *\n\t\t * @type {{width:number,height:number}}\n\t\t */\n\t\tthis.image = { width: width, height: height };\n\n\t\t/**\n\t\t * This array holds for all mipmaps (including the bases mip) the data and dimensions.\n\t\t *\n\t\t * @type {Array<Object>}\n\t\t */\n\t\tthis.mipmaps = mipmaps;\n\n\t\t/**\n\t\t * If set to `true`, the texture is flipped along the vertical axis when\n\t\t * uploaded to the GPU.\n\t\t *\n\t\t * Overwritten and set to `false` by default since it is not possible to\n\t\t * flip compressed textures.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @readonly\n\t\t */\n\t\tthis.flipY = false;\n\n\t\t/**\n\t\t * Whether to generate mipmaps (if possible) for a texture.\n\t\t *\n\t\t * Overwritten and set to `false` by default since it is not\n\t\t * possible to generate mipmaps for compressed data. Mipmaps\n\t\t * must be embedded in the compressed texture file.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @readonly\n\t\t */\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n}\n\n/**\n * Creates a texture 2D array based on data in compressed form.\n *\n * These texture are usually loaded with {@link CompressedTextureLoader}.\n *\n * @augments CompressedTexture\n */\nclass CompressedArrayTexture extends CompressedTexture {\n\n\t/**\n\t * Constructs a new compressed array texture.\n\t *\n\t * @param {Array<Object>} mipmaps - This array holds for all mipmaps (including the bases mip)\n\t * the data and dimensions.\n\t * @param {number} width - The width of the texture.\n\t * @param {number} height - The height of the texture.\n\t * @param {number} depth - The depth of the texture.\n\t * @param {number} [format=RGBAFormat] - The min filter value.\n\t * @param {number} [type=UnsignedByteType] - The min filter value.\n\t */\n\tconstructor( mipmaps, width, height, depth, format, type ) {\n\n\t\tsuper( mipmaps, width, height, format, type );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCompressedArrayTexture = true;\n\n\t\t/**\n\t\t * The image property of a compressed texture just defines its dimensions.\n\t\t *\n\t\t * @name CompressedArrayTexture#image\n\t\t * @type {{width:number,height:number,depth:number}}\n\t\t */\n\t\tthis.image.depth = depth;\n\n\t\t/**\n\t\t * This defines how the texture is wrapped in the depth and corresponds to\n\t\t * *W* in UVW mapping.\n\t\t *\n\t\t * @type {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)}\n\t\t * @default ClampToEdgeWrapping\n\t\t */\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\t/**\n\t\t * A set of all layers which need to be updated in the texture.\n\t\t *\n\t\t * @type {Set<number>}\n\t\t */\n\t\tthis.layerUpdates = new Set();\n\n\t}\n\n\t/**\n\t * Describes that a specific layer of the texture needs to be updated.\n\t * Normally when {@link Texture#needsUpdate} is set to `true`, the\n\t * entire compressed texture array is sent to the GPU. Marking specific\n\t * layers will only transmit subsets of all mipmaps associated with a\n\t * specific depth in the array which is often much more performant.\n\t *\n\t * @param {number} layerIndex - The layer index that should be updated.\n\t */\n\taddLayerUpdate( layerIndex ) {\n\n\t\tthis.layerUpdates.add( layerIndex );\n\n\t}\n\n\t/**\n\t * Resets the layer updates registry.\n\t */\n\tclearLayerUpdates() {\n\n\t\tthis.layerUpdates.clear();\n\n\t}\n\n}\n\n/**\n * Creates a cube texture based on data in compressed form.\n *\n * These texture are usually loaded with {@link CompressedTextureLoader}.\n *\n * @augments CompressedTexture\n */\nclass CompressedCubeTexture extends CompressedTexture {\n\n\t/**\n\t * Constructs a new compressed texture.\n\t *\n\t * @param {Array<CompressedTexture>} images - An array of compressed textures.\n\t * @param {number} [format=RGBAFormat] - The texture format.\n\t * @param {number} [type=UnsignedByteType] - The texture type.\n\t */\n\tconstructor( images, format, type ) {\n\n\t\tsuper( undefined, images[ 0 ].width, images[ 0 ].height, format, type, CubeReflectionMapping );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCompressedCubeTexture = true;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCubeTexture = true;\n\n\t\tthis.image = images;\n\n\t}\n\n}\n\n/**\n * Creates a texture from a canvas element.\n *\n * This is almost the same as the base texture class, except that it sets {@link Texture#needsUpdate}\n * to `true` immediately since a canvas can directly be used for rendering.\n *\n * @augments Texture\n */\nclass CanvasTexture extends Texture {\n\n\t/**\n\t * Constructs a new texture.\n\t *\n\t * @param {HTMLCanvasElement} [canvas] - The HTML canvas element.\n\t * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n\t * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n\t * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n\t * @param {number} [magFilter=LinearFilter] - The mag filter value.\n\t * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.\n\t * @param {number} [format=RGBAFormat] - The texture format.\n\t * @param {number} [type=UnsignedByteType] - The texture type.\n\t * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n\t */\n\tconstructor( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tsuper( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCanvasTexture = true;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\n/**\n * This class can be used to automatically save the depth information of a\n * rendering into a texture.\n *\n * @augments Texture\n */\nclass DepthTexture extends Texture {\n\n\t/**\n\t * Constructs a new depth texture.\n\t *\n\t * @param {number} width - The width of the texture.\n\t * @param {number} height - The height of the texture.\n\t * @param {number} [type=UnsignedIntType] - The texture type.\n\t * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n\t * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n\t * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n\t * @param {number} [magFilter=LinearFilter] - The mag filter value.\n\t * @param {number} [minFilter=LinearFilter] - The min filter value.\n\t * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n\t * @param {number} [format=DepthFormat] - The texture format.\n\t */\n\tconstructor( width, height, type = UnsignedIntType, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, format = DepthFormat ) {\n\n\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\n\n\t\t}\n\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isDepthTexture = true;\n\n\t\t/**\n\t\t * The image property of a depth texture just defines its dimensions.\n\t\t *\n\t\t * @type {{width:number,height:number}}\n\t\t */\n\t\tthis.image = { width: width, height: height };\n\n\t\t/**\n\t\t * If set to `true`, the texture is flipped along the vertical axis when\n\t\t * uploaded to the GPU.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.flipY = false;\n\n\t\t/**\n\t\t * Whether to generate mipmaps (if possible) for a texture.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.generateMipmaps = false;\n\n\t\t/**\n\t\t * Code corresponding to the depth compare function.\n\t\t *\n\t\t * @type {?(NeverCompare|LessCompare|EqualCompare|LessEqualCompare|GreaterCompare|NotEqualCompare|GreaterEqualCompare|AlwaysCompare)}\n\t\t * @default null\n\t\t */\n\t\tthis.compareFunction = null;\n\n\t}\n\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.source = new Source( Object.assign( {}, source.image ) ); // see #30540\n\t\tthis.compareFunction = source.compareFunction;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tif ( this.compareFunction !== null ) data.compareFunction = this.compareFunction;\n\n\t\treturn data;\n\n\t}\n\n}\n\n/**\n * Creates an array of depth textures.\n *\n * @augments DepthTexture\n */\nclass DepthArrayTexture extends DepthTexture {\n\n\t/**\n\t * Constructs a new depth array texture.\n\t *\n\t * @param {number} [width=1] - The width of the texture.\n\t * @param {number} [height=1] - The height of the texture.\n\t * @param {number} [depth=1] - The depth of the texture.\n\t */\n\tconstructor( width = 1, height = 1, depth = 1 ) {\n\n\t\tsuper( width, height );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isDepthArrayTexture = true;\n\n\t\t/**\n\t\t * The image definition of a depth texture.\n\t\t *\n\t\t * @type {{width:number,height:number,depth:number}}\n\t\t */\n\t\tthis.image = { width: width, height: height, depth: depth };\n\n\t\t/**\n\t\t * If set to `true`, the texture is flipped along the vertical axis when\n\t\t * uploaded to the GPU.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.flipY = false;\n\n\t\t/**\n\t\t * Whether to generate mipmaps (if possible) for a texture.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.generateMipmaps = false;\n\n\t\t/**\n\t\t * Code corresponding to the depth compare function.\n\t\t *\n\t\t * @type {?(NeverCompare|LessCompare|EqualCompare|LessEqualCompare|GreaterCompare|NotEqualCompare|GreaterEqualCompare|AlwaysCompare)}\n\t\t * @default null\n\t\t */\n\t\tthis.compareFunction = null;\n\n\t\t/**\n\t\t * A set of all layers which need to be updated in the texture.\n\t\t *\n\t\t * @type {Set<number>}\n\t\t */\n\t\tthis.layerUpdates = new Set();\n\n\t}\n\n\t/**\n\t * Describes that a specific layer of the texture needs to be updated.\n\t * Normally when {@link Texture#needsUpdate} is set to `true`, the\n\t * entire slice is sent to the GPU. Marking specific\n\t * layers will only transmit subsets of all mipmaps associated with a\n\t * specific depth in the array which is often much more performant.\n\t *\n\t * @param {number} layerIndex - The layer index that should be updated.\n\t */\n\taddLayerUpdate( layerIndex ) {\n\n\t\tthis.layerUpdates.add( layerIndex );\n\n\t}\n\n\t/**\n\t * Resets the layer updates registry.\n\t */\n\tclearLayerUpdates() {\n\n\t\tthis.layerUpdates.clear();\n\n\t}\n\n}\n\n/**\n * A geometry class for representing a capsule.\n *\n * ```js\n * const geometry = new THREE.CapsuleGeometry( 1, 1, 4, 8, 1 );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n * const capsule = new THREE.Mesh( geometry, material );\n * scene.add( capsule );\n * ```\n *\n * @augments BufferGeometry\n */\nclass CapsuleGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new capsule geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the capsule.\n\t * @param {number} [height=1] - Height of the middle section.\n\t * @param {number} [capSegments=4] - Number of curve segments used to build each cap.\n\t * @param {number} [radialSegments=8] - Number of segmented faces around the circumference of the capsule. Must be an integer >= 3.\n\t * @param {number} [heightSegments=1] - Number of rows of faces along the height of the middle section. Must be an integer >= 1.\n\t */\n\tconstructor( radius = 1, height = 1, capSegments = 4, radialSegments = 8, heightSegments = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CapsuleGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tcapSegments: capSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t};\n\n\t\theight = Math.max( 0, height );\n\t\tcapSegments = Math.max( 1, Math.floor( capSegments ) );\n\t\tradialSegments = Math.max( 3, Math.floor( radialSegments ) );\n\t\theightSegments = Math.max( 1, Math.floor( heightSegments ) );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst halfHeight = height / 2;\n\t\tconst capArcLength = ( Math.PI / 2 ) * radius;\n\t\tconst cylinderPartLength = height;\n\t\tconst totalArcLength = 2 * capArcLength + cylinderPartLength;\n\n\t\tconst numVerticalSegments = capSegments * 2 + heightSegments;\n\t\tconst verticesPerRow = radialSegments + 1;\n\n\t\tconst normal = new Vector3();\n\t\tconst vertex = new Vector3();\n\n\t\t// generate vertices, normals, and uvs\n\n\t\tfor ( let iy = 0; iy <= numVerticalSegments; iy ++ ) {\n\n\t\t\tlet currentArcLength = 0;\n\t\t\tlet profileY = 0;\n\t\t\tlet profileRadius = 0;\n\t\t\tlet normalYComponent = 0;\n\n\t\t\tif ( iy <= capSegments ) {\n\n\t\t\t\t// bottom cap\n\t\t\t\tconst segmentProgress = iy / capSegments;\n\t\t\t\tconst angle = ( segmentProgress * Math.PI ) / 2;\n\t\t\t\tprofileY = - halfHeight - radius * Math.cos( angle );\n\t\t\t\tprofileRadius = radius * Math.sin( angle );\n\t\t\t\tnormalYComponent = - radius * Math.cos( angle );\n\t\t\t\tcurrentArcLength = segmentProgress * capArcLength;\n\n\t\t\t} else if ( iy <= capSegments + heightSegments ) {\n\n\t\t\t\t// middle section\n\t\t\t\tconst segmentProgress = ( iy - capSegments ) / heightSegments;\n\t\t\t\tprofileY = - halfHeight + segmentProgress * height;\n\t\t\t\tprofileRadius = radius;\n\t\t\t\tnormalYComponent = 0;\n\t\t\t\tcurrentArcLength = capArcLength + segmentProgress * cylinderPartLength;\n\n\t\t\t} else {\n\n\t\t\t\t// top cap\n\t\t\t\tconst segmentProgress =\n\t\t\t\t\t( iy - capSegments - heightSegments ) / capSegments;\n\t\t\t\tconst angle = ( segmentProgress * Math.PI ) / 2;\n\t\t\t\tprofileY = halfHeight + radius * Math.sin( angle );\n\t\t\t\tprofileRadius = radius * Math.cos( angle );\n\t\t\t\tnormalYComponent = radius * Math.sin( angle );\n\t\t\t\tcurrentArcLength =\n\t\t\t\t\tcapArcLength + cylinderPartLength + segmentProgress * capArcLength;\n\n\t\t\t}\n\n\t\t\tconst v = Math.max( 0, Math.min( 1, currentArcLength / totalArcLength ) );\n\n\n\t\t\t// special case for the poles\n\n\t\t\tlet uOffset = 0;\n\n\t\t\tif ( iy === 0 ) {\n\n\t\t\t\tuOffset = 0.5 / radialSegments;\n\n\t\t\t} else if ( iy === numVerticalSegments ) {\n\n\t\t\t\tuOffset = -0.5 / radialSegments;\n\n\t\t\t}\n\n\t\t\tfor ( let ix = 0; ix <= radialSegments; ix ++ ) {\n\n\t\t\t\tconst u = ix / radialSegments;\n\t\t\t\tconst theta = u * Math.PI * 2;\n\n\t\t\t\tconst sinTheta = Math.sin( theta );\n\t\t\t\tconst cosTheta = Math.cos( theta );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = - profileRadius * cosTheta;\n\t\t\t\tvertex.y = profileY;\n\t\t\t\tvertex.z = profileRadius * sinTheta;\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.set(\n\t\t\t\t\t- profileRadius * cosTheta,\n\t\t\t\t\tnormalYComponent,\n\t\t\t\t\tprofileRadius * sinTheta\n\t\t\t\t);\n\t\t\t\tnormal.normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u + uOffset, v );\n\n\t\t\t}\n\n\t\t\tif ( iy > 0 ) {\n\n\t\t\t\tconst prevIndexRow = ( iy - 1 ) * verticesPerRow;\n\t\t\t\tfor ( let ix = 0; ix < radialSegments; ix ++ ) {\n\n\t\t\t\t\tconst i1 = prevIndexRow + ix;\n\t\t\t\t\tconst i2 = prevIndexRow + ix + 1;\n\t\t\t\t\tconst i3 = iy * verticesPerRow + ix;\n\t\t\t\t\tconst i4 = iy * verticesPerRow + ix + 1;\n\n\t\t\t\t\tindices.push( i1, i2, i3 );\n\t\t\t\t\tindices.push( i2, i4, i3 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {CapsuleGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new CapsuleGeometry( data.radius, data.height, data.capSegments, data.radialSegments, data.heightSegments );\n\n\t}\n\n}\n\n/**\n * A simple shape of Euclidean geometry. It is constructed from a\n * number of triangular segments that are oriented around a central point and\n * extend as far out as a given radius. It is built counter-clockwise from a\n * start angle and a given central angle. It can also be used to create\n * regular polygons, where the number of segments determines the number of\n * sides.\n *\n * ```js\n * const geometry = new THREE.CircleGeometry( 5, 32 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const circle = new THREE.Mesh( geometry, material );\n * scene.add( circle )\n * ```\n *\n * @augments BufferGeometry\n */\nclass CircleGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new circle geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the circle.\n\t * @param {number} [segments=32] - Number of segments (triangles), minimum = `3`.\n\t * @param {number} [thetaStart=0] - Start angle for first segment in radians.\n\t * @param {number} [thetaLength=Math.PI*2] - The central angle, often called theta,\n\t * of the circular sector in radians. The default value results in a complete circle.\n\t */\n\tconstructor( radius = 1, segments = 32, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CircleGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tsegments = Math.max( 3, segments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst vertex = new Vector3();\n\t\tconst uv = new Vector2();\n\n\t\t// center point\n\n\t\tvertices.push( 0, 0, 0 );\n\t\tnormals.push( 0, 0, 1 );\n\t\tuvs.push( 0.5, 0.5 );\n\n\t\tfor ( let s = 0, i = 3; s <= segments; s ++, i += 3 ) {\n\n\t\t\tconst segment = thetaStart + s / segments * thetaLength;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t// uvs\n\n\t\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\n\t\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\n\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let i = 1; i <= segments; i ++ ) {\n\n\t\t\tindices.push( i, i + 1, 0 );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {CircleGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new CircleGeometry( data.radius, data.segments, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\n/**\n * A geometry class for representing a cylinder.\n *\n * ```js\n * const geometry = new THREE.CylinderGeometry( 5, 5, 20, 32 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const cylinder = new THREE.Mesh( geometry, material );\n * scene.add( cylinder );\n * ```\n *\n * @augments BufferGeometry\n */\nclass CylinderGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new cylinder geometry.\n\t *\n\t * @param {number} [radiusTop=1] - Radius of the cylinder at the top.\n\t * @param {number} [radiusBottom=1] - Radius of the cylinder at the bottom.\n\t * @param {number} [height=1] - Height of the cylinder.\n\t * @param {number} [radialSegments=32] - Number of segmented faces around the circumference of the cylinder.\n\t * @param {number} [heightSegments=1] - Number of rows of faces along the height of the cylinder.\n\t * @param {boolean} [openEnded=false] - Whether the base of the cylinder is open or capped.\n\t * @param {number} [thetaStart=0] - Start angle for first segment, in radians.\n\t * @param {number} [thetaLength=Math.PI*2] - The central angle, often called theta, of the circular sector, in radians.\n\t * The default value results in a complete cylinder.\n\t */\n\tconstructor( radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CylinderGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tconst scope = this;\n\n\t\tradialSegments = Math.floor( radialSegments );\n\t\theightSegments = Math.floor( heightSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tlet index = 0;\n\t\tconst indexArray = [];\n\t\tconst halfHeight = height / 2;\n\t\tlet groupStart = 0;\n\n\t\t// generate geometry\n\n\t\tgenerateTorso();\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tif ( radiusTop > 0 ) generateCap( true );\n\t\t\tif ( radiusBottom > 0 ) generateCap( false );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction generateTorso() {\n\n\t\t\tconst normal = new Vector3();\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tlet groupCount = 0;\n\n\t\t\t// this will be used to calculate the normal\n\t\t\tconst slope = ( radiusBottom - radiusTop ) / height;\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( let y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\t\tconst indexRow = [];\n\n\t\t\t\tconst v = y / heightSegments;\n\n\t\t\t\t// calculate the radius of the current row\n\n\t\t\t\tconst radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\t\tfor ( let x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\t\tconst u = x / radialSegments;\n\n\t\t\t\t\tconst theta = u * thetaLength + thetaStart;\n\n\t\t\t\t\tconst sinTheta = Math.sin( theta );\n\t\t\t\t\tconst cosTheta = Math.cos( theta );\n\n\t\t\t\t\t// vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t// normal\n\n\t\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\t// uv\n\n\t\t\t\t\tuvs.push( u, 1 - v );\n\n\t\t\t\t\t// save index of vertex in respective row\n\n\t\t\t\t\tindexRow.push( index ++ );\n\n\t\t\t\t}\n\n\t\t\t\t// now save vertices of the row in our index array\n\n\t\t\t\tindexArray.push( indexRow );\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( let x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tfor ( let y = 0; y < heightSegments; y ++ ) {\n\n\t\t\t\t\t// we use the index array to access the correct indices\n\n\t\t\t\t\tconst a = indexArray[ y ][ x ];\n\t\t\t\t\tconst b = indexArray[ y + 1 ][ x ];\n\t\t\t\t\tconst c = indexArray[ y + 1 ][ x + 1 ];\n\t\t\t\t\tconst d = indexArray[ y ][ x + 1 ];\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tif ( radiusTop > 0 || y !== 0 ) {\n\n\t\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\t\tgroupCount += 3;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( radiusBottom > 0 || y !== heightSegments - 1 ) {\n\n\t\t\t\t\t\tindices.push( b, c, d );\n\t\t\t\t\t\tgroupCount += 3;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t\tfunction generateCap( top ) {\n\n\t\t\t// save the index of the first center vertex\n\t\t\tconst centerIndexStart = index;\n\n\t\t\tconst uv = new Vector2();\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tlet groupCount = 0;\n\n\t\t\tconst radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\t\tconst sign = ( top === true ) ? 1 : -1;\n\n\t\t\t// first we generate the center vertex data of the cap.\n\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\tfor ( let x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertices.push( 0, halfHeight * sign, 0 );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( 0.5, 0.5 );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// save the index of the last center vertex\n\t\t\tconst centerIndexEnd = index;\n\n\t\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\t\tfor ( let x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\tconst u = x / radialSegments;\n\t\t\t\tconst theta = u * thetaLength + thetaStart;\n\n\t\t\t\tconst cosTheta = Math.cos( theta );\n\t\t\t\tconst sinTheta = Math.sin( theta );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( let x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tconst c = centerIndexStart + x;\n\t\t\t\tconst i = centerIndexEnd + x;\n\n\t\t\t\tif ( top === true ) {\n\n\t\t\t\t\t// face top\n\n\t\t\t\t\tindices.push( i, i + 1, c );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// face bottom\n\n\t\t\t\t\tindices.push( i + 1, i, c );\n\n\t\t\t\t}\n\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {CylinderGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new CylinderGeometry( data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\n/**\n * A geometry class for representing a cone.\n *\n * ```js\n * const geometry = new THREE.ConeGeometry( 5, 20, 32 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const cone = new THREE.Mesh(geometry, material );\n * scene.add( cone );\n * ```\n *\n * @augments CylinderGeometry\n */\nclass ConeGeometry extends CylinderGeometry {\n\n\t/**\n\t * Constructs a new cone geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the cone base.\n\t * @param {number} [height=1] - Height of the cone.\n\t * @param {number} [radialSegments=32] - Number of segmented faces around the circumference of the cone.\n\t * @param {number} [heightSegments=1] - Number of rows of faces along the height of the cone.\n\t * @param {boolean} [openEnded=false] - Whether the base of the cone is open or capped.\n\t * @param {number} [thetaStart=0] - Start angle for first segment, in radians.\n\t * @param {number} [thetaLength=Math.PI*2] - The central angle, often called theta, of the circular sector, in radians.\n\t * The default value results in a complete cone.\n\t */\n\tconstructor( radius = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper( 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {ConeGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new ConeGeometry( data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\n/**\n * A polyhedron is a solid in three dimensions with flat faces. This class\n * will take an array of vertices, project them onto a sphere, and then\n * divide them up to the desired level of detail.\n *\n * @augments BufferGeometry\n */\nclass PolyhedronGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new polyhedron geometry.\n\t *\n\t * @param {Array<number>} [vertices] - A flat array of vertices describing the base shape.\n\t * @param {Array<number>} [indices] - A flat array of indices describing the base shape.\n\t * @param {number} [radius=1] - The radius of the shape.\n\t * @param {number} [detail=0] - How many levels to subdivide the geometry. The more detail, the smoother the shape.\n\t */\n\tconstructor( vertices = [], indices = [], radius = 1, detail = 0 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'PolyhedronGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\t// default buffer data\n\n\t\tconst vertexBuffer = [];\n\t\tconst uvBuffer = [];\n\n\t\t// the subdivision creates the vertex buffer data\n\n\t\tsubdivide( detail );\n\n\t\t// all vertices should lie on a conceptual sphere with a given radius\n\n\t\tapplyRadius( radius );\n\n\t\t// finally, create the uv data\n\n\t\tgenerateUVs();\n\n\t\t// build non-indexed geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\n\n\t\tif ( detail === 0 ) {\n\n\t\t\tthis.computeVertexNormals(); // flat normals\n\n\t\t} else {\n\n\t\t\tthis.normalizeNormals(); // smooth normals\n\n\t\t}\n\n\t\t// helper functions\n\n\t\tfunction subdivide( detail ) {\n\n\t\t\tconst a = new Vector3();\n\t\t\tconst b = new Vector3();\n\t\t\tconst c = new Vector3();\n\n\t\t\t// iterate over all faces and apply a subdivision with the given detail value\n\n\t\t\tfor ( let i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t// get the vertices of the face\n\n\t\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\n\t\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\n\t\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\n\n\t\t\t\t// perform subdivision\n\n\t\t\t\tsubdivideFace( a, b, c, detail );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction subdivideFace( a, b, c, detail ) {\n\n\t\t\tconst cols = detail + 1;\n\n\t\t\t// we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\tconst v = [];\n\n\t\t\t// construct all of the vertices for this subdivision\n\n\t\t\tfor ( let i = 0; i <= cols; i ++ ) {\n\n\t\t\t\tv[ i ] = [];\n\n\t\t\t\tconst aj = a.clone().lerp( c, i / cols );\n\t\t\t\tconst bj = b.clone().lerp( c, i / cols );\n\n\t\t\t\tconst rows = cols - i;\n\n\t\t\t\tfor ( let j = 0; j <= rows; j ++ ) {\n\n\t\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// construct all of the faces\n\n\t\t\tfor ( let i = 0; i < cols; i ++ ) {\n\n\t\t\t\tfor ( let j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n\t\t\t\t\tconst k = Math.floor( j / 2 );\n\n\t\t\t\t\tif ( j % 2 === 0 ) {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\t\t\t\t\t\tpushVertex( v[ i ][ k ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction applyRadius( radius ) {\n\n\t\t\tconst vertex = new Vector3();\n\n\t\t\t// iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\tfor ( let i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvertex.normalize().multiplyScalar( radius );\n\n\t\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\n\t\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\n\t\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tfor ( let i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tconst u = azimuth( vertex ) / 2 / Math.PI + 0.5;\n\t\t\t\tconst v = inclination( vertex ) / Math.PI + 0.5;\n\t\t\t\tuvBuffer.push( u, 1 - v );\n\n\t\t\t}\n\n\t\t\tcorrectUVs();\n\n\t\t\tcorrectSeam();\n\n\t\t}\n\n\t\tfunction correctSeam() {\n\n\t\t\t// handle case when face straddles the seam, see #3269\n\n\t\t\tfor ( let i = 0; i < uvBuffer.length; i += 6 ) {\n\n\t\t\t\t// uv data of a single face\n\n\t\t\t\tconst x0 = uvBuffer[ i + 0 ];\n\t\t\t\tconst x1 = uvBuffer[ i + 2 ];\n\t\t\t\tconst x2 = uvBuffer[ i + 4 ];\n\n\t\t\t\tconst max = Math.max( x0, x1, x2 );\n\t\t\t\tconst min = Math.min( x0, x1, x2 );\n\n\t\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t\t\tif ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;\n\t\t\t\t\tif ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;\n\t\t\t\t\tif ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction pushVertex( vertex ) {\n\n\t\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tfunction getVertexByIndex( index, vertex ) {\n\n\t\t\tconst stride = index * 3;\n\n\t\t\tvertex.x = vertices[ stride + 0 ];\n\t\t\tvertex.y = vertices[ stride + 1 ];\n\t\t\tvertex.z = vertices[ stride + 2 ];\n\n\t\t}\n\n\t\tfunction correctUVs() {\n\n\t\t\tconst a = new Vector3();\n\t\t\tconst b = new Vector3();\n\t\t\tconst c = new Vector3();\n\n\t\t\tconst centroid = new Vector3();\n\n\t\t\tconst uvA = new Vector2();\n\t\t\tconst uvB = new Vector2();\n\t\t\tconst uvC = new Vector2();\n\n\t\t\tfor ( let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\n\n\t\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\n\t\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\n\t\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\n\n\t\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\n\t\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\n\t\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\n\n\t\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\n\n\t\t\t\tconst azi = azimuth( centroid );\n\n\t\t\t\tcorrectUV( uvA, j + 0, a, azi );\n\t\t\t\tcorrectUV( uvB, j + 2, b, azi );\n\t\t\t\tcorrectUV( uvC, j + 4, c, azi );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction correctUV( uv, stride, vector, azimuth ) {\n\n\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = uv.x - 1;\n\n\t\t\t}\n\n\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\t\tfunction azimuth( vector ) {\n\n\t\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t\t}\n\n\n\t\t// Angle above the XZ plane.\n\n\t\tfunction inclination( vector ) {\n\n\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {PolyhedronGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new PolyhedronGeometry( data.vertices, data.indices, data.radius, data.details );\n\n\t}\n\n}\n\n/**\n * A geometry class for representing a dodecahedron.\n *\n * ```js\n * const geometry = new THREE.DodecahedronGeometry();\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const dodecahedron = new THREE.Mesh( geometry, material );\n * scene.add( dodecahedron );\n * ```\n *\n * @augments PolyhedronGeometry\n */\nclass DodecahedronGeometry extends PolyhedronGeometry {\n\n\t/**\n\t * Constructs a new dodecahedron geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the dodecahedron.\n\t * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a dodecahedron.\n\t */\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\tconst r = 1 / t;\n\n\t\tconst vertices = [\n\n\t\t\t// (±1, ±1, ±1)\n\t\t\t-1, -1, -1,\t-1, -1, 1,\n\t\t\t-1, 1, -1, -1, 1, 1,\n\t\t\t1, -1, -1, 1, -1, 1,\n\t\t\t1, 1, -1, 1, 1, 1,\n\n\t\t\t// (0, ±1/φ, ±φ)\n\t\t\t0, - r, - t, 0, - r, t,\n\t\t\t0, r, - t, 0, r, t,\n\n\t\t\t// (±1/φ, ±φ, 0)\n\t\t\t- r, - t, 0, - r, t, 0,\n\t\t\tr, - t, 0, r, t, 0,\n\n\t\t\t// (±φ, 0, ±1/φ)\n\t\t\t- t, 0, - r, t, 0, - r,\n\t\t\t- t, 0, r, t, 0, r\n\t\t];\n\n\t\tconst indices = [\n\t\t\t3, 11, 7, \t3, 7, 15, \t3, 15, 13,\n\t\t\t7, 19, 17, \t7, 17, 6, \t7, 6, 15,\n\t\t\t17, 4, 8, \t17, 8, 10, \t17, 10, 6,\n\t\t\t8, 0, 16, \t8, 16, 2, \t8, 2, 10,\n\t\t\t0, 12, 1, \t0, 1, 18, \t0, 18, 16,\n\t\t\t6, 10, 2, \t6, 2, 13, \t6, 13, 15,\n\t\t\t2, 16, 18, \t2, 18, 3, \t2, 3, 13,\n\t\t\t18, 1, 9, \t18, 9, 11, \t18, 11, 3,\n\t\t\t4, 14, 12, \t4, 12, 0, \t4, 0, 8,\n\t\t\t11, 9, 5, \t11, 5, 19, \t11, 19, 7,\n\t\t\t19, 5, 14, \t19, 14, 4, \t19, 4, 17,\n\t\t\t1, 12, 14, \t1, 14, 5, \t1, 5, 9\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'DodecahedronGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {DodecahedronGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new DodecahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\nconst _v0 = /*@__PURE__*/ new Vector3();\nconst _v1$1 = /*@__PURE__*/ new Vector3();\nconst _normal = /*@__PURE__*/ new Vector3();\nconst _triangle = /*@__PURE__*/ new Triangle();\n\n/**\n * Can be used as a helper object to view the edges of a geometry.\n *\n * ```js\n * const geometry = new THREE.BoxGeometry();\n * const edges = new THREE.EdgesGeometry( geometry );\n * const line = new THREE.LineSegments( edges );\n * scene.add( line );\n * ```\n *\n * Note: It is not yet possible to serialize/deserialize instances of this class.\n *\n * @augments BufferGeometry\n */\nclass EdgesGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new edges geometry.\n\t *\n\t * @param {?BufferGeometry} [geometry=null] - The geometry.\n\t * @param {number} [thresholdAngle=1] - An edge is only rendered if the angle (in degrees)\n\t * between the face normals of the adjoining faces exceeds this value.\n\t */\n\tconstructor( geometry = null, thresholdAngle = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'EdgesGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tgeometry: geometry,\n\t\t\tthresholdAngle: thresholdAngle\n\t\t};\n\n\t\tif ( geometry !== null ) {\n\n\t\t\tconst precisionPoints = 4;\n\t\t\tconst precision = Math.pow( 10, precisionPoints );\n\t\t\tconst thresholdDot = Math.cos( DEG2RAD * thresholdAngle );\n\n\t\t\tconst indexAttr = geometry.getIndex();\n\t\t\tconst positionAttr = geometry.getAttribute( 'position' );\n\t\t\tconst indexCount = indexAttr ? indexAttr.count : positionAttr.count;\n\n\t\t\tconst indexArr = [ 0, 0, 0 ];\n\t\t\tconst vertKeys = [ 'a', 'b', 'c' ];\n\t\t\tconst hashes = new Array( 3 );\n\n\t\t\tconst edgeData = {};\n\t\t\tconst vertices = [];\n\t\t\tfor ( let i = 0; i < indexCount; i += 3 ) {\n\n\t\t\t\tif ( indexAttr ) {\n\n\t\t\t\t\tindexArr[ 0 ] = indexAttr.getX( i );\n\t\t\t\t\tindexArr[ 1 ] = indexAttr.getX( i + 1 );\n\t\t\t\t\tindexArr[ 2 ] = indexAttr.getX( i + 2 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tindexArr[ 0 ] = i;\n\t\t\t\t\tindexArr[ 1 ] = i + 1;\n\t\t\t\t\tindexArr[ 2 ] = i + 2;\n\n\t\t\t\t}\n\n\t\t\t\tconst { a, b, c } = _triangle;\n\t\t\t\ta.fromBufferAttribute( positionAttr, indexArr[ 0 ] );\n\t\t\t\tb.fromBufferAttribute( positionAttr, indexArr[ 1 ] );\n\t\t\t\tc.fromBufferAttribute( positionAttr, indexArr[ 2 ] );\n\t\t\t\t_triangle.getNormal( _normal );\n\n\t\t\t\t// create hashes for the edge from the vertices\n\t\t\t\thashes[ 0 ] = `${ Math.round( a.x * precision ) },${ Math.round( a.y * precision ) },${ Math.round( a.z * precision ) }`;\n\t\t\t\thashes[ 1 ] = `${ Math.round( b.x * precision ) },${ Math.round( b.y * precision ) },${ Math.round( b.z * precision ) }`;\n\t\t\t\thashes[ 2 ] = `${ Math.round( c.x * precision ) },${ Math.round( c.y * precision ) },${ Math.round( c.z * precision ) }`;\n\n\t\t\t\t// skip degenerate triangles\n\t\t\t\tif ( hashes[ 0 ] === hashes[ 1 ] || hashes[ 1 ] === hashes[ 2 ] || hashes[ 2 ] === hashes[ 0 ] ) {\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t// iterate over every edge\n\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t// get the first and next vertex making up the edge\n\t\t\t\t\tconst jNext = ( j + 1 ) % 3;\n\t\t\t\t\tconst vecHash0 = hashes[ j ];\n\t\t\t\t\tconst vecHash1 = hashes[ jNext ];\n\t\t\t\t\tconst v0 = _triangle[ vertKeys[ j ] ];\n\t\t\t\t\tconst v1 = _triangle[ vertKeys[ jNext ] ];\n\n\t\t\t\t\tconst hash = `${ vecHash0 }_${ vecHash1 }`;\n\t\t\t\t\tconst reverseHash = `${ vecHash1 }_${ vecHash0 }`;\n\n\t\t\t\t\tif ( reverseHash in edgeData && edgeData[ reverseHash ] ) {\n\n\t\t\t\t\t\t// if we found a sibling edge add it into the vertex array if\n\t\t\t\t\t\t// it meets the angle threshold and delete the edge from the map.\n\t\t\t\t\t\tif ( _normal.dot( edgeData[ reverseHash ].normal ) <= thresholdDot ) {\n\n\t\t\t\t\t\t\tvertices.push( v0.x, v0.y, v0.z );\n\t\t\t\t\t\t\tvertices.push( v1.x, v1.y, v1.z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedgeData[ reverseHash ] = null;\n\n\t\t\t\t\t} else if ( ! ( hash in edgeData ) ) {\n\n\t\t\t\t\t\t// if we've already got an edge here then skip adding a new one\n\t\t\t\t\t\tedgeData[ hash ] = {\n\n\t\t\t\t\t\t\tindex0: indexArr[ j ],\n\t\t\t\t\t\t\tindex1: indexArr[ jNext ],\n\t\t\t\t\t\t\tnormal: _normal.clone(),\n\n\t\t\t\t\t\t};\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// iterate over all remaining, unmatched edges and add them to the vertex array\n\t\t\tfor ( const key in edgeData ) {\n\n\t\t\t\tif ( edgeData[ key ] ) {\n\n\t\t\t\t\tconst { index0, index1 } = edgeData[ key ];\n\t\t\t\t\t_v0.fromBufferAttribute( positionAttr, index0 );\n\t\t\t\t\t_v1$1.fromBufferAttribute( positionAttr, index1 );\n\n\t\t\t\t\tvertices.push( _v0.x, _v0.y, _v0.z );\n\t\t\t\t\tvertices.push( _v1$1.x, _v1$1.y, _v1$1.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * An abstract base class for creating an analytic curve object that contains methods\n * for interpolation.\n *\n * @abstract\n */\nclass Curve {\n\n\t/**\n\t * Constructs a new curve.\n\t */\n\tconstructor() {\n\n\t\t/**\n\t\t * The type property is used for detecting the object type\n\t\t * in context of serialization/deserialization.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.type = 'Curve';\n\n\t\t/**\n\t\t * This value determines the amount of divisions when calculating the\n\t\t * cumulative segment lengths of a curve via {@link Curve#getLengths}. To ensure\n\t\t * precision when using methods like {@link Curve#getSpacedPoints}, it is\n\t\t * recommended to increase the value of this property if the curve is very large.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 200\n\t\t */\n\t\tthis.arcLengthDivisions = 200;\n\n\t\t/**\n\t\t * Must be set to `true` if the curve parameters have changed.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.needsUpdate = false;\n\n\t\t/**\n\t\t * An internal cache that holds precomputed curve length values.\n\t\t *\n\t\t * @private\n\t\t * @type {?Array<number>}\n\t\t * @default null\n\t\t */\n\t\tthis.cacheArcLengths = null;\n\n\t}\n\n\t/**\n\t * This method returns a vector in 2D or 3D space (depending on the curve definition)\n\t * for the given interpolation factor.\n\t *\n\t * @abstract\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {(Vector2|Vector3)} The position on the curve. It can be a 2D or 3D vector depending on the curve definition.\n\t */\n\tgetPoint( /* t, optionalTarget */ ) {\n\n\t\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\n\n\t}\n\n\t/**\n\t * This method returns a vector in 2D or 3D space (depending on the curve definition)\n\t * for the given interpolation factor. Unlike {@link Curve#getPoint}, this method honors the length\n\t * of the curve which equidistant samples.\n\t *\n\t * @param {number} u - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {(Vector2|Vector3)} The position on the curve. It can be a 2D or 3D vector depending on the curve definition.\n\t */\n\tgetPointAt( u, optionalTarget ) {\n\n\t\tconst t = this.getUtoTmapping( u );\n\t\treturn this.getPoint( t, optionalTarget );\n\n\t}\n\n\t/**\n\t * This method samples the curve via {@link Curve#getPoint} and returns an array of points representing\n\t * the curve shape.\n\t *\n\t * @param {number} [divisions=5] - The number of divisions.\n\t * @return {Array<(Vector2|Vector3)>} An array holding the sampled curve values. The number of points is `divisions + 1`.\n\t */\n\tgetPoints( divisions = 5 ) {\n\n\t\tconst points = [];\n\n\t\tfor ( let d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\t// Get sequence of points using getPointAt( u )\n\n\t/**\n\t * This method samples the curve via {@link Curve#getPointAt} and returns an array of points representing\n\t * the curve shape. Unlike {@link Curve#getPoints}, this method returns equi-spaced points across the entire\n\t * curve.\n\t *\n\t * @param {number} [divisions=5] - The number of divisions.\n\t * @return {Array<(Vector2|Vector3)>} An array holding the sampled curve values. The number of points is `divisions + 1`.\n\t */\n\tgetSpacedPoints( divisions = 5 ) {\n\n\t\tconst points = [];\n\n\t\tfor ( let d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\t/**\n\t * Returns the total arc length of the curve.\n\t *\n\t * @return {number} The length of the curve.\n\t */\n\tgetLength() {\n\n\t\tconst lengths = this.getLengths();\n\t\treturn lengths[ lengths.length - 1 ];\n\n\t}\n\n\t/**\n\t * Returns an array of cumulative segment lengths of the curve.\n\t *\n\t * @param {number} [divisions=this.arcLengthDivisions] - The number of divisions.\n\t * @return {Array<number>} An array holding the cumulative segment lengths.\n\t */\n\tgetLengths( divisions = this.arcLengthDivisions ) {\n\n\t\tif ( this.cacheArcLengths &&\n\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\n\t\t\t! this.needsUpdate ) {\n\n\t\t\treturn this.cacheArcLengths;\n\n\t\t}\n\n\t\tthis.needsUpdate = false;\n\n\t\tconst cache = [];\n\t\tlet current, last = this.getPoint( 0 );\n\t\tlet sum = 0;\n\n\t\tcache.push( 0 );\n\n\t\tfor ( let p = 1; p <= divisions; p ++ ) {\n\n\t\t\tcurrent = this.getPoint( p / divisions );\n\t\t\tsum += current.distanceTo( last );\n\t\t\tcache.push( sum );\n\t\t\tlast = current;\n\n\t\t}\n\n\t\tthis.cacheArcLengths = cache;\n\n\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\n\t}\n\n\t/**\n\t * Update the cumulative segment distance cache. The method must be called\n\t * every time curve parameters are changed. If an updated curve is part of a\n\t * composed curve like {@link CurvePath}, this method must be called on the\n\t * composed curve, too.\n\t */\n\tupdateArcLengths() {\n\n\t\tthis.needsUpdate = true;\n\t\tthis.getLengths();\n\n\t}\n\n\t/**\n\t * Given an interpolation factor in the range `[0,1]`, this method returns an updated\n\t * interpolation factor in the same range that can be ued to sample equidistant points\n\t * from a curve.\n\t *\n\t * @param {number} u - The interpolation factor.\n\t * @param {?number} distance - An optional distance on the curve.\n\t * @return {number} The updated interpolation factor.\n\t */\n\tgetUtoTmapping( u, distance = null ) {\n\n\t\tconst arcLengths = this.getLengths();\n\n\t\tlet i = 0;\n\t\tconst il = arcLengths.length;\n\n\t\tlet targetArcLength; // The targeted u distance value to get\n\n\t\tif ( distance ) {\n\n\t\t\ttargetArcLength = distance;\n\n\t\t} else {\n\n\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t}\n\n\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\tlet low = 0, high = il - 1, comparison;\n\n\t\twhile ( low <= high ) {\n\n\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\tlow = i + 1;\n\n\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\thigh = i - 1;\n\n\t\t\t} else {\n\n\t\t\t\thigh = i;\n\t\t\t\tbreak;\n\n\t\t\t\t// DONE\n\n\t\t\t}\n\n\t\t}\n\n\t\ti = high;\n\n\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\treturn i / ( il - 1 );\n\n\t\t}\n\n\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\tconst lengthBefore = arcLengths[ i ];\n\t\tconst lengthAfter = arcLengths[ i + 1 ];\n\n\t\tconst segmentLength = lengthAfter - lengthBefore;\n\n\t\t// determine where we are between the 'before' and 'after' points\n\n\t\tconst segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t// add that fractional amount to t\n\n\t\tconst t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\treturn t;\n\n\t}\n\n\t/**\n\t * Returns a unit vector tangent for the given interpolation factor.\n\t * If the derived curve does not implement its tangent derivation,\n\t * two points a small delta apart will be used to find its gradient\n\t * which seems to give a reasonable approximation.\n\t *\n\t * @param {number} t - The interpolation factor.\n\t * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {(Vector2|Vector3)} The tangent vector.\n\t */\n\tgetTangent( t, optionalTarget ) {\n\n\t\tconst delta = 0.0001;\n\t\tlet t1 = t - delta;\n\t\tlet t2 = t + delta;\n\n\t\t// Capping in case of danger\n\n\t\tif ( t1 < 0 ) t1 = 0;\n\t\tif ( t2 > 1 ) t2 = 1;\n\n\t\tconst pt1 = this.getPoint( t1 );\n\t\tconst pt2 = this.getPoint( t2 );\n\n\t\tconst tangent = optionalTarget || ( ( pt1.isVector2 ) ? new Vector2() : new Vector3() );\n\n\t\ttangent.copy( pt2 ).sub( pt1 ).normalize();\n\n\t\treturn tangent;\n\n\t}\n\n\t/**\n\t * Same as {@link Curve#getTangent} but with equidistant samples.\n\t *\n\t * @param {number} u - The interpolation factor.\n\t * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {(Vector2|Vector3)} The tangent vector.\n\t * @see {@link Curve#getPointAt}\n\t */\n\tgetTangentAt( u, optionalTarget ) {\n\n\t\tconst t = this.getUtoTmapping( u );\n\t\treturn this.getTangent( t, optionalTarget );\n\n\t}\n\n\t/**\n\t * Generates the Frenet Frames. Requires a curve definition in 3D space. Used\n\t * in geometries like {@link TubeGeometry} or {@link ExtrudeGeometry}.\n\t *\n\t * @param {number} segments - The number of segments.\n\t * @param {boolean} [closed=false] - Whether the curve is closed or not.\n\t * @return {{tangents: Array<Vector3>, normals: Array<Vector3>, binormals: Array<Vector3>}} The Frenet Frames.\n\t */\n\tcomputeFrenetFrames( segments, closed = false ) {\n\n\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n\t\tconst normal = new Vector3();\n\n\t\tconst tangents = [];\n\t\tconst normals = [];\n\t\tconst binormals = [];\n\n\t\tconst vec = new Vector3();\n\t\tconst mat = new Matrix4();\n\n\t\t// compute the tangent vectors for each segment on the curve\n\n\t\tfor ( let i = 0; i <= segments; i ++ ) {\n\n\t\t\tconst u = i / segments;\n\n\t\t\ttangents[ i ] = this.getTangentAt( u, new Vector3() );\n\n\t\t}\n\n\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t// and in the direction of the minimum tangent xyz component\n\n\t\tnormals[ 0 ] = new Vector3();\n\t\tbinormals[ 0 ] = new Vector3();\n\t\tlet min = Number.MAX_VALUE;\n\t\tconst tx = Math.abs( tangents[ 0 ].x );\n\t\tconst ty = Math.abs( tangents[ 0 ].y );\n\t\tconst tz = Math.abs( tangents[ 0 ].z );\n\n\t\tif ( tx <= min ) {\n\n\t\t\tmin = tx;\n\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t}\n\n\t\tif ( ty <= min ) {\n\n\t\t\tmin = ty;\n\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t}\n\n\t\tif ( tz <= min ) {\n\n\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t}\n\n\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\n\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\tfor ( let i = 1; i <= segments; i ++ ) {\n\n\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n\t\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\t\tvec.normalize();\n\n\t\t\t\tconst theta = Math.acos( clamp( tangents[ i - 1 ].dot( tangents[ i ] ), -1, 1 ) ); // clamp for floating pt errors\n\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t\t}\n\n\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t}\n\n\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\t\tif ( closed === true ) {\n\n\t\t\tlet theta = Math.acos( clamp( normals[ 0 ].dot( normals[ segments ] ), -1, 1 ) );\n\t\t\ttheta /= segments;\n\n\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\n\n\t\t\t\ttheta = - theta;\n\n\t\t\t}\n\n\t\t\tfor ( let i = 1; i <= segments; i ++ ) {\n\n\t\t\t\t// twist a little...\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\ttangents: tangents,\n\t\t\tnormals: normals,\n\t\t\tbinormals: binormals\n\t\t};\n\n\t}\n\n\t/**\n\t * Returns a new curve with copied values from this instance.\n\t *\n\t * @return {Curve} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\t/**\n\t * Copies the values of the given curve to this instance.\n\t *\n\t * @param {Curve} source - The curve to copy.\n\t * @return {Curve} A reference to this curve.\n\t */\n\tcopy( source ) {\n\n\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Serializes the curve into JSON.\n\t *\n\t * @return {Object} A JSON object representing the serialized curve.\n\t * @see {@link ObjectLoader#parse}\n\t */\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.6,\n\t\t\t\ttype: 'Curve',\n\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t}\n\t\t};\n\n\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\tdata.type = this.type;\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * Deserializes the curve from the given JSON.\n\t *\n\t * @param {Object} json - The JSON holding the serialized curve.\n\t * @return {Curve} A reference to this curve.\n\t */\n\tfromJSON( json ) {\n\n\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A curve representing an ellipse.\n *\n * ```js\n * const curve = new THREE.EllipseCurve(\n * \t0, 0,\n * \t10, 10,\n * \t0, 2 * Math.PI,\n * \tfalse,\n * \t0\n * );\n *\n * const points = curve.getPoints( 50 );\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const material = new THREE.LineBasicMaterial( { color: 0xff0000 } );\n *\n * // Create the final object to add to the scene\n * const ellipse = new THREE.Line( geometry, material );\n * ```\n *\n * @augments Curve\n */\nclass EllipseCurve extends Curve {\n\n\t/**\n\t * Constructs a new ellipse curve.\n\t *\n\t * @param {number} [aX=0] - The X center of the ellipse.\n\t * @param {number} [aY=0] - The Y center of the ellipse.\n\t * @param {number} [xRadius=1] - The radius of the ellipse in the x direction.\n\t * @param {number} [yRadius=1] - The radius of the ellipse in the y direction.\n\t * @param {number} [aStartAngle=0] - The start angle of the curve in radians starting from the positive X axis.\n\t * @param {number} [aEndAngle=Math.PI*2] - The end angle of the curve in radians starting from the positive X axis.\n\t * @param {boolean} [aClockwise=false] - Whether the ellipse is drawn clockwise or not.\n\t * @param {number} [aRotation=0] - The rotation angle of the ellipse in radians, counterclockwise from the positive X axis.\n\t */\n\tconstructor( aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isEllipseCurve = true;\n\n\t\tthis.type = 'EllipseCurve';\n\n\t\t/**\n\t\t * The X center of the ellipse.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.aX = aX;\n\n\t\t/**\n\t\t * The Y center of the ellipse.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.aY = aY;\n\n\t\t/**\n\t\t * The radius of the ellipse in the x direction.\n\t\t * Setting the this value equal to the {@link EllipseCurve#yRadius} will result in a circle.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.xRadius = xRadius;\n\n\t\t/**\n\t\t * The radius of the ellipse in the y direction.\n\t\t * Setting the this value equal to the {@link EllipseCurve#xRadius} will result in a circle.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.yRadius = yRadius;\n\n\t\t/**\n\t\t * The start angle of the curve in radians starting from the positive X axis.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.aStartAngle = aStartAngle;\n\n\t\t/**\n\t\t * The end angle of the curve in radians starting from the positive X axis.\n\t\t *\n\t\t * @type {number}\n\t\t * @default Math.PI*2\n\t\t */\n\t\tthis.aEndAngle = aEndAngle;\n\n\t\t/**\n\t\t * Whether the ellipse is drawn clockwise or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.aClockwise = aClockwise;\n\n\t\t/**\n\t\t * The rotation angle of the ellipse in radians, counterclockwise from the positive X axis.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.aRotation = aRotation;\n\n\t}\n\n\t/**\n\t * Returns a point on the curve.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector2} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst twoPi = Math.PI * 2;\n\t\tlet deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\tconst samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n\t\t// ensures that deltaAngle is 0 .. 2 PI\n\t\twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\n\t\twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n\n\t\tif ( deltaAngle < Number.EPSILON ) {\n\n\t\t\tif ( samePoints ) {\n\n\t\t\t\tdeltaAngle = 0;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.aClockwise === true && ! samePoints ) {\n\n\t\t\tif ( deltaAngle === twoPi ) {\n\n\t\t\t\tdeltaAngle = - twoPi;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst angle = this.aStartAngle + t * deltaAngle;\n\t\tlet x = this.aX + this.xRadius * Math.cos( angle );\n\t\tlet y = this.aY + this.yRadius * Math.sin( angle );\n\n\t\tif ( this.aRotation !== 0 ) {\n\n\t\t\tconst cos = Math.cos( this.aRotation );\n\t\t\tconst sin = Math.sin( this.aRotation );\n\n\t\t\tconst tx = x - this.aX;\n\t\t\tconst ty = y - this.aY;\n\n\t\t\t// Rotate the point about the center of the ellipse.\n\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\ty = tx * sin + ty * cos + this.aY;\n\n\t\t}\n\n\t\treturn point.set( x, y );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.aX = source.aX;\n\t\tthis.aY = source.aY;\n\n\t\tthis.xRadius = source.xRadius;\n\t\tthis.yRadius = source.yRadius;\n\n\t\tthis.aStartAngle = source.aStartAngle;\n\t\tthis.aEndAngle = source.aEndAngle;\n\n\t\tthis.aClockwise = source.aClockwise;\n\n\t\tthis.aRotation = source.aRotation;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.aX = this.aX;\n\t\tdata.aY = this.aY;\n\n\t\tdata.xRadius = this.xRadius;\n\t\tdata.yRadius = this.yRadius;\n\n\t\tdata.aStartAngle = this.aStartAngle;\n\t\tdata.aEndAngle = this.aEndAngle;\n\n\t\tdata.aClockwise = this.aClockwise;\n\n\t\tdata.aRotation = this.aRotation;\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.aX = json.aX;\n\t\tthis.aY = json.aY;\n\n\t\tthis.xRadius = json.xRadius;\n\t\tthis.yRadius = json.yRadius;\n\n\t\tthis.aStartAngle = json.aStartAngle;\n\t\tthis.aEndAngle = json.aEndAngle;\n\n\t\tthis.aClockwise = json.aClockwise;\n\n\t\tthis.aRotation = json.aRotation;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A curve representing an arc.\n *\n * @augments EllipseCurve\n */\nclass ArcCurve extends EllipseCurve {\n\n\t/**\n\t * Constructs a new arc curve.\n\t *\n\t * @param {number} [aX=0] - The X center of the ellipse.\n\t * @param {number} [aY=0] - The Y center of the ellipse.\n\t * @param {number} [aRadius=1] - The radius of the ellipse in the x direction.\n\t * @param {number} [aStartAngle=0] - The start angle of the curve in radians starting from the positive X axis.\n\t * @param {number} [aEndAngle=Math.PI*2] - The end angle of the curve in radians starting from the positive X axis.\n\t * @param {boolean} [aClockwise=false] - Whether the ellipse is drawn clockwise or not.\n\t */\n\tconstructor( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tsuper( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isArcCurve = true;\n\n\t\tthis.type = 'ArcCurve';\n\n\t}\n\n}\n\nfunction CubicPoly() {\n\n\t/**\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t* cusps and self-intersections in non-uniform catmull rom curves.\n\t* http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t*\n\t* curve.type accepts centripetal(default), chordal and catmullrom\n\t* curve.tension is used for catmullrom which defaults to 0.5\n\t*/\n\n\t/*\n\tBased on an optimized c++ solution in\n\t- http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t- http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tlet c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n\n\t/*\n\t * Compute coefficients for a cubic polynomial\n\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t * such that\n\t *   p(0) = x0, p(1) = x1\n\t *  and\n\t *   p'(0) = t0, p'(1) = t1.\n\t */\n\tfunction init( x0, x1, t0, t1 ) {\n\n\t\tc0 = x0;\n\t\tc1 = t0;\n\t\tc2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t}\n\n\treturn {\n\n\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\n\n\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t\t},\n\n\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\tlet t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\tlet t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\tt1 *= dt1;\n\t\t\tt2 *= dt1;\n\n\t\t\tinit( x1, x2, t1, t2 );\n\n\t\t},\n\n\t\tcalc: function ( t ) {\n\n\t\t\tconst t2 = t * t;\n\t\t\tconst t3 = t2 * t;\n\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\n\t\t}\n\n\t};\n\n}\n\n//\n\nconst tmp = /*@__PURE__*/ new Vector3();\nconst px = /*@__PURE__*/ new CubicPoly();\nconst py = /*@__PURE__*/ new CubicPoly();\nconst pz = /*@__PURE__*/ new CubicPoly();\n\n/**\n * A curve representing a Catmull-Rom spline.\n *\n * ```js\n * //Create a closed wavey loop\n * const curve = new THREE.CatmullRomCurve3( [\n * \tnew THREE.Vector3( -10, 0, 10 ),\n * \tnew THREE.Vector3( -5, 5, 5 ),\n * \tnew THREE.Vector3( 0, 0, 0 ),\n * \tnew THREE.Vector3( 5, -5, 5 ),\n * \tnew THREE.Vector3( 10, 0, 10 )\n * ] );\n *\n * const points = curve.getPoints( 50 );\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const material = new THREE.LineBasicMaterial( { color: 0xff0000 } );\n *\n * // Create the final object to add to the scene\n * const curveObject = new THREE.Line( geometry, material );\n * ```\n *\n * @augments Curve\n */\nclass CatmullRomCurve3 extends Curve {\n\n\t/**\n\t * Constructs a new Catmull-Rom curve.\n\t *\n\t * @param {Array<Vector3>} [points] - An array of 3D points defining the curve.\n\t * @param {boolean} [closed=false] - Whether the curve is closed or not.\n\t * @param {('centripetal'|'chordal'|'catmullrom')} [curveType='centripetal'] - The curve type.\n\t * @param {number} [tension=0.5] - Tension of the curve.\n\t */\n\tconstructor( points = [], closed = false, curveType = 'centripetal', tension = 0.5 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCatmullRomCurve3 = true;\n\n\t\tthis.type = 'CatmullRomCurve3';\n\n\t\t/**\n\t\t * An array of 3D points defining the curve.\n\t\t *\n\t\t * @type {Array<Vector3>}\n\t\t */\n\t\tthis.points = points;\n\n\t\t/**\n\t\t * Whether the curve is closed or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.closed = closed;\n\n\t\t/**\n\t\t * The curve type.\n\t\t *\n\t\t * @type {('centripetal'|'chordal'|'catmullrom')}\n\t\t * @default 'centripetal'\n\t\t */\n\t\tthis.curveType = curveType;\n\n\t\t/**\n\t\t * Tension of the curve.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.5\n\t\t */\n\t\tthis.tension = tension;\n\n\t}\n\n\t/**\n\t * Returns a point on the curve.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst points = this.points;\n\t\tconst l = points.length;\n\n\t\tconst p = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\tlet intPoint = Math.floor( p );\n\t\tlet weight = p - intPoint;\n\n\t\tif ( this.closed ) {\n\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\n\n\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\t\tintPoint = l - 2;\n\t\t\tweight = 1;\n\n\t\t}\n\n\t\tlet p0, p3; // 4 points (p1 & p2 defined below)\n\n\t\tif ( this.closed || intPoint > 0 ) {\n\n\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate first point\n\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\tp0 = tmp;\n\n\t\t}\n\n\t\tconst p1 = points[ intPoint % l ];\n\t\tconst p2 = points[ ( intPoint + 1 ) % l ];\n\n\t\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate last point\n\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\tp3 = tmp;\n\n\t\t}\n\n\t\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\n\n\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\tconst pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\tlet dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\tlet dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\tlet dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t\t// safety check for repeated points\n\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\n\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t\t} else if ( this.curveType === 'catmullrom' ) {\n\n\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\n\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\n\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\n\n\t\t}\n\n\t\tpoint.set(\n\t\t\tpx.calc( weight ),\n\t\t\tpy.calc( weight ),\n\t\t\tpz.calc( weight )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\tthis.closed = source.closed;\n\t\tthis.curveType = source.curveType;\n\t\tthis.tension = source.tension;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.points = [];\n\n\t\tfor ( let i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\tdata.closed = this.closed;\n\t\tdata.curveType = this.curveType;\n\t\tdata.tension = this.tension;\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = json.points[ i ];\n\t\t\tthis.points.push( new Vector3().fromArray( point ) );\n\n\t\t}\n\n\t\tthis.closed = json.closed;\n\t\tthis.curveType = json.curveType;\n\t\tthis.tension = json.tension;\n\n\t\treturn this;\n\n\t}\n\n}\n\n// Bezier Curves formulas obtained from: https://en.wikipedia.org/wiki/B%C3%A9zier_curve\n\n/**\n * Computes a point on a Catmull-Rom spline.\n *\n * @param {number} t - The interpolation factor.\n * @param {number} p0 - The first control point.\n * @param {number} p1 - The second control point.\n * @param {number} p2 - The third control point.\n * @param {number} p3 - The fourth control point.\n * @return {number} The calculated point on a Catmull-Rom spline.\n */\nfunction CatmullRom( t, p0, p1, p2, p3 ) {\n\n\tconst v0 = ( p2 - p0 ) * 0.5;\n\tconst v1 = ( p3 - p1 ) * 0.5;\n\tconst t2 = t * t;\n\tconst t3 = t * t2;\n\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( -3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n}\n\n//\n\nfunction QuadraticBezierP0( t, p ) {\n\n\tconst k = 1 - t;\n\treturn k * k * p;\n\n}\n\nfunction QuadraticBezierP1( t, p ) {\n\n\treturn 2 * ( 1 - t ) * t * p;\n\n}\n\nfunction QuadraticBezierP2( t, p ) {\n\n\treturn t * t * p;\n\n}\n\n/**\n * Computes a point on a Quadratic Bezier curve.\n *\n * @param {number} t - The interpolation factor.\n * @param {number} p0 - The first control point.\n * @param {number} p1 - The second control point.\n * @param {number} p2 - The third control point.\n * @return {number} The calculated point on a Quadratic Bezier curve.\n */\nfunction QuadraticBezier( t, p0, p1, p2 ) {\n\n\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\n\t\tQuadraticBezierP2( t, p2 );\n\n}\n\n//\n\nfunction CubicBezierP0( t, p ) {\n\n\tconst k = 1 - t;\n\treturn k * k * k * p;\n\n}\n\nfunction CubicBezierP1( t, p ) {\n\n\tconst k = 1 - t;\n\treturn 3 * k * k * t * p;\n\n}\n\nfunction CubicBezierP2( t, p ) {\n\n\treturn 3 * ( 1 - t ) * t * t * p;\n\n}\n\nfunction CubicBezierP3( t, p ) {\n\n\treturn t * t * t * p;\n\n}\n\n/**\n * Computes a point on a Cubic Bezier curve.\n *\n * @param {number} t - The interpolation factor.\n * @param {number} p0 - The first control point.\n * @param {number} p1 - The second control point.\n * @param {number} p2 - The third control point.\n * @param {number} p3 - The fourth control point.\n * @return {number} The calculated point on a Cubic Bezier curve.\n */\nfunction CubicBezier( t, p0, p1, p2, p3 ) {\n\n\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\n\t\tCubicBezierP3( t, p3 );\n\n}\n\n/**\n * A curve representing a 2D Cubic Bezier curve.\n *\n * ```js\n * const curve = new THREE.CubicBezierCurve(\n * \tnew THREE.Vector2( - 0, 0 ),\n * \tnew THREE.Vector2( - 5, 15 ),\n * \tnew THREE.Vector2( 20, 15 ),\n * \tnew THREE.Vector2( 10, 0 )\n * );\n *\n * const points = curve.getPoints( 50 );\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const material = new THREE.LineBasicMaterial( { color: 0xff0000 } );\n *\n * // Create the final object to add to the scene\n * const curveObject = new THREE.Line( geometry, material );\n * ```\n *\n * @augments Curve\n */\nclass CubicBezierCurve extends Curve {\n\n\t/**\n\t * Constructs a new Cubic Bezier curve.\n\t *\n\t * @param {Vector2} [v0] - The start point.\n\t * @param {Vector2} [v1] - The first control point.\n\t * @param {Vector2} [v2] - The second control point.\n\t * @param {Vector2} [v3] - The end point.\n\t */\n\tconstructor( v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2() ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCubicBezierCurve = true;\n\n\t\tthis.type = 'CubicBezierCurve';\n\n\t\t/**\n\t\t * The start point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.v0 = v0;\n\n\t\t/**\n\t\t * The first control point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.v1 = v1;\n\n\t\t/**\n\t\t * The second control point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.v2 = v2;\n\n\t\t/**\n\t\t * The end point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.v3 = v3;\n\n\t}\n\n\t/**\n\t * Returns a point on the curve.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector2} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A curve representing a 3D Cubic Bezier curve.\n *\n * @augments Curve\n */\nclass CubicBezierCurve3 extends Curve {\n\n\t/**\n\t * Constructs a new Cubic Bezier curve.\n\t *\n\t * @param {Vector3} [v0] - The start point.\n\t * @param {Vector3} [v1] - The first control point.\n\t * @param {Vector3} [v2] - The second control point.\n\t * @param {Vector3} [v3] - The end point.\n\t */\n\tconstructor( v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v3 = new Vector3() ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCubicBezierCurve3 = true;\n\n\t\tthis.type = 'CubicBezierCurve3';\n\n\t\t/**\n\t\t * The start point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.v0 = v0;\n\n\t\t/**\n\t\t * The first control point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.v1 = v1;\n\n\t\t/**\n\t\t * The second control point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.v2 = v2;\n\n\t\t/**\n\t\t * The end point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.v3 = v3;\n\n\t}\n\n\t/**\n\t * Returns a point on the curve.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\n\t\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A curve representing a 2D line segment.\n *\n * @augments Curve\n */\nclass LineCurve extends Curve {\n\n\t/**\n\t * Constructs a new line curve.\n\t *\n\t * @param {Vector2} [v1] - The start point.\n\t * @param {Vector2} [v2] - The end point.\n\t */\n\tconstructor( v1 = new Vector2(), v2 = new Vector2() ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLineCurve = true;\n\n\t\tthis.type = 'LineCurve';\n\n\t\t/**\n\t\t * The start point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.v1 = v1;\n\n\t\t/**\n\t\t * The end point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.v2 = v2;\n\n\t}\n\n\t/**\n\t * Returns a point on the line.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the line. Must be in the range `[0,1]`.\n\t * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector2} The position on the line.\n\t */\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t}\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\tgetPointAt( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t}\n\n\tgetTangent( t, optionalTarget = new Vector2() ) {\n\n\t\treturn optionalTarget.subVectors( this.v2, this.v1 ).normalize();\n\n\t}\n\n\tgetTangentAt( u, optionalTarget ) {\n\n\t\treturn this.getTangent( u, optionalTarget );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A curve representing a 3D line segment.\n *\n * @augments Curve\n */\nclass LineCurve3 extends Curve {\n\n\t/**\n\t * Constructs a new line curve.\n\t *\n\t * @param {Vector3} [v1] - The start point.\n\t * @param {Vector3} [v2] - The end point.\n\t */\n\tconstructor( v1 = new Vector3(), v2 = new Vector3() ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLineCurve3 = true;\n\n\t\tthis.type = 'LineCurve3';\n\n\t\t/**\n\t\t * The start point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.v1 = v1;\n\n\t\t/**\n\t\t * The end point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.v2 = v2;\n\n\t}\n\n\t/**\n\t * Returns a point on the line.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the line. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the line.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t}\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\tgetPointAt( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t}\n\n\tgetTangent( t, optionalTarget = new Vector3() ) {\n\n\t\treturn optionalTarget.subVectors( this.v2, this.v1 ).normalize();\n\n\t}\n\n\tgetTangentAt( u, optionalTarget ) {\n\n\t\treturn this.getTangent( u, optionalTarget );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A curve representing a 2D Quadratic Bezier curve.\n *\n * ```js\n * const curve = new THREE.QuadraticBezierCurve(\n * \tnew THREE.Vector2( - 10, 0 ),\n * \tnew THREE.Vector2( 20, 15 ),\n * \tnew THREE.Vector2( 10, 0 )\n * )\n *\n * const points = curve.getPoints( 50 );\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const material = new THREE.LineBasicMaterial( { color: 0xff0000 } );\n *\n * // Create the final object to add to the scene\n * const curveObject = new THREE.Line( geometry, material );\n * ```\n *\n * @augments Curve\n */\nclass QuadraticBezierCurve extends Curve {\n\n\t/**\n\t * Constructs a new Quadratic Bezier curve.\n\t *\n\t * @param {Vector2} [v0] - The start point.\n\t * @param {Vector2} [v1] - The control point.\n\t * @param {Vector2} [v2] - The end point.\n\t */\n\tconstructor( v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2() ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isQuadraticBezierCurve = true;\n\n\t\tthis.type = 'QuadraticBezierCurve';\n\n\t\t/**\n\t\t * The start point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.v0 = v0;\n\n\t\t/**\n\t\t * The control point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.v1 = v1;\n\n\t\t/**\n\t\t * The end point.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.v2 = v2;\n\n\t}\n\n\t/**\n\t * Returns a point on the curve.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector2} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A curve representing a 3D Quadratic Bezier curve.\n *\n * @augments Curve\n */\nclass QuadraticBezierCurve3 extends Curve {\n\n\t/**\n\t * Constructs a new Quadratic Bezier curve.\n\t *\n\t * @param {Vector3} [v0] - The start point.\n\t * @param {Vector3} [v1] - The control point.\n\t * @param {Vector3} [v2] - The end point.\n\t */\n\tconstructor( v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3() ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isQuadraticBezierCurve3 = true;\n\n\t\tthis.type = 'QuadraticBezierCurve3';\n\n\t\t/**\n\t\t * The start point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.v0 = v0;\n\n\t\t/**\n\t\t * The control point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.v1 = v1;\n\n\t\t/**\n\t\t * The end point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.v2 = v2;\n\n\t}\n\n\t/**\n\t * Returns a point on the curve.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\n\t\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A curve representing a 2D spline curve.\n *\n * ```js\n * // Create a sine-like wave\n * const curve = new THREE.SplineCurve( [\n * \tnew THREE.Vector2( -10, 0 ),\n * \tnew THREE.Vector2( -5, 5 ),\n * \tnew THREE.Vector2( 0, 0 ),\n * \tnew THREE.Vector2( 5, -5 ),\n * \tnew THREE.Vector2( 10, 0 )\n * ] );\n *\n * const points = curve.getPoints( 50 );\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const material = new THREE.LineBasicMaterial( { color: 0xff0000 } );\n *\n * // Create the final object to add to the scene\n * const splineObject = new THREE.Line( geometry, material );\n * ```\n *\n * @augments Curve\n */\nclass SplineCurve extends Curve {\n\n\t/**\n\t * Constructs a new 2D spline curve.\n\t *\n\t * @param {Array<Vector2>} [points] -  An array of 2D points defining the curve.\n\t */\n\tconstructor( points = [] ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSplineCurve = true;\n\n\t\tthis.type = 'SplineCurve';\n\n\t\t/**\n\t\t * An array of 2D points defining the curve.\n\t\t *\n\t\t * @type {Array<Vector2>}\n\t\t */\n\t\tthis.points = points;\n\n\t}\n\n\t/**\n\t * Returns a point on the curve.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector2} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst points = this.points;\n\t\tconst p = ( points.length - 1 ) * t;\n\n\t\tconst intPoint = Math.floor( p );\n\t\tconst weight = p - intPoint;\n\n\t\tconst p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\t\tconst p1 = points[ intPoint ];\n\t\tconst p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tconst p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\tpoint.set(\n\t\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\n\t\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.points = [];\n\n\t\tfor ( let i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = json.points[ i ];\n\t\t\tthis.points.push( new Vector2().fromArray( point ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nvar Curves = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tArcCurve: ArcCurve,\n\tCatmullRomCurve3: CatmullRomCurve3,\n\tCubicBezierCurve: CubicBezierCurve,\n\tCubicBezierCurve3: CubicBezierCurve3,\n\tEllipseCurve: EllipseCurve,\n\tLineCurve: LineCurve,\n\tLineCurve3: LineCurve3,\n\tQuadraticBezierCurve: QuadraticBezierCurve,\n\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\tSplineCurve: SplineCurve\n});\n\n/**\n * A base class extending {@link Curve}. `CurvePath` is simply an\n * array of connected curves, but retains the API of a curve.\n *\n * @augments Curve\n */\nclass CurvePath extends Curve {\n\n\t/**\n\t * Constructs a new curve path.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'CurvePath';\n\n\t\t/**\n\t\t * An array of curves defining the\n\t\t * path.\n\t\t *\n\t\t * @type {Array<Curve>}\n\t\t */\n\t\tthis.curves = [];\n\n\t\t/**\n\t\t * Whether the path should automatically be closed\n\t\t * by a line curve.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.autoClose = false;\n\n\t}\n\n\t/**\n\t * Adds a curve to this curve path.\n\t *\n\t * @param {Curve} curve - The curve to add.\n\t */\n\tadd( curve ) {\n\n\t\tthis.curves.push( curve );\n\n\t}\n\n\t/**\n\t * Adds a line curve to close the path.\n\t *\n\t * @return {CurvePath} A reference to this curve path.\n\t */\n\tclosePath() {\n\n\t\t// Add a line curve if start and end of lines are not connected\n\t\tconst startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\tconst endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\tconst lineType = ( startPoint.isVector2 === true ) ? 'LineCurve' : 'LineCurve3';\n\t\t\tthis.curves.push( new Curves[ lineType ]( endPoint, startPoint ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * This method returns a vector in 2D or 3D space (depending on the curve definitions)\n\t * for the given interpolation factor.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {?(Vector2|Vector3)} The position on the curve. It can be a 2D or 3D vector depending on the curve definition.\n\t */\n\tgetPoint( t, optionalTarget ) {\n\n\t\t// To get accurate point with reference to\n\t\t// entire path distance at time t,\n\t\t// following has to be done:\n\n\t\t// 1. Length of each sub path have to be known\n\t\t// 2. Locate and identify type of curve\n\t\t// 3. Get t for the curve\n\t\t// 4. Return curve.getPointAt(t')\n\n\t\tconst d = t * this.getLength();\n\t\tconst curveLengths = this.getCurveLengths();\n\t\tlet i = 0;\n\n\t\t// To think about boundaries points.\n\n\t\twhile ( i < curveLengths.length ) {\n\n\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\tconst diff = curveLengths[ i ] - d;\n\t\t\t\tconst curve = this.curves[ i ];\n\n\t\t\t\tconst segmentLength = curve.getLength();\n\t\t\t\tconst u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n\t\t\t\treturn curve.getPointAt( u, optionalTarget );\n\n\t\t\t}\n\n\t\t\ti ++;\n\n\t\t}\n\n\t\treturn null;\n\n\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t}\n\n\tgetLength() {\n\n\t\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t// getPoint() depends on getLength\n\n\t\tconst lens = this.getCurveLengths();\n\t\treturn lens[ lens.length - 1 ];\n\n\t}\n\n\tupdateArcLengths() {\n\n\t\t// cacheLengths must be recalculated.\n\n\t\tthis.needsUpdate = true;\n\t\tthis.cacheLengths = null;\n\t\tthis.getCurveLengths();\n\n\t}\n\n\t/**\n\t * Returns list of cumulative curve lengths of the defined curves.\n\t *\n\t * @return {Array<number>} The curve lengths.\n\t */\n\tgetCurveLengths() {\n\n\t\t// Compute lengths and cache them\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\t\t// We use cache values if curves and cache array are same length\n\n\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\treturn this.cacheLengths;\n\n\t\t}\n\n\t\t// Get length of sub-curve\n\t\t// Push sums into cached array\n\n\t\tconst lengths = [];\n\t\tlet sums = 0;\n\n\t\tfor ( let i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\tsums += this.curves[ i ].getLength();\n\t\t\tlengths.push( sums );\n\n\t\t}\n\n\t\tthis.cacheLengths = lengths;\n\n\t\treturn lengths;\n\n\t}\n\n\tgetSpacedPoints( divisions = 40 ) {\n\n\t\tconst points = [];\n\n\t\tfor ( let i = 0; i <= divisions; i ++ ) {\n\n\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t}\n\n\t\tif ( this.autoClose ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\tgetPoints( divisions = 12 ) {\n\n\t\tconst points = [];\n\t\tlet last;\n\n\t\tfor ( let i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n\t\t\tconst curve = curves[ i ];\n\t\t\tconst resolution = curve.isEllipseCurve ? divisions * 2\n\t\t\t\t: ( curve.isLineCurve || curve.isLineCurve3 ) ? 1\n\t\t\t\t\t: curve.isSplineCurve ? divisions * curve.points.length\n\t\t\t\t\t\t: divisions;\n\n\t\t\tconst pts = curve.getPoints( resolution );\n\n\t\t\tfor ( let j = 0; j < pts.length; j ++ ) {\n\n\t\t\t\tconst point = pts[ j ];\n\n\t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\tpoints.push( point );\n\t\t\t\tlast = point;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.curves = [];\n\n\t\tfor ( let i = 0, l = source.curves.length; i < l; i ++ ) {\n\n\t\t\tconst curve = source.curves[ i ];\n\n\t\t\tthis.curves.push( curve.clone() );\n\n\t\t}\n\n\t\tthis.autoClose = source.autoClose;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.autoClose = this.autoClose;\n\t\tdata.curves = [];\n\n\t\tfor ( let i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\tconst curve = this.curves[ i ];\n\t\t\tdata.curves.push( curve.toJSON() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.autoClose = json.autoClose;\n\t\tthis.curves = [];\n\n\t\tfor ( let i = 0, l = json.curves.length; i < l; i ++ ) {\n\n\t\t\tconst curve = json.curves[ i ];\n\t\t\tthis.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A 2D path representation. The class provides methods for creating paths\n * and contours of 2D shapes similar to the 2D Canvas API.\n *\n * ```js\n * const path = new THREE.Path();\n *\n * path.lineTo( 0, 0.8 );\n * path.quadraticCurveTo( 0, 1, 0.2, 1 );\n * path.lineTo( 1, 1 );\n *\n * const points = path.getPoints();\n *\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n * const material = new THREE.LineBasicMaterial( { color: 0xffffff } );\n *\n * const line = new THREE.Line( geometry, material );\n * scene.add( line );\n * ```\n *\n * @augments CurvePath\n */\nclass Path extends CurvePath {\n\n\t/**\n\t * Constructs a new path.\n\t *\n\t * @param {Array<Vector2>} [points] - An array of 2D points defining the path.\n\t */\n\tconstructor( points ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Path';\n\n\t\t/**\n\t\t * The current offset of the path. Any new curve added will start here.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.currentPoint = new Vector2();\n\n\t\tif ( points ) {\n\n\t\t\tthis.setFromPoints( points );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Creates a path from the given list of points. The points are added\n\t * to the path as instances of {@link LineCurve}.\n\t *\n\t * @param {Array<Vector2>} points - An array of 2D points.\n\t * @return {Path} A reference to this path.\n\t */\n\tsetFromPoints( points ) {\n\n\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\n\n\t\tfor ( let i = 1, l = points.length; i < l; i ++ ) {\n\n\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Moves {@link Path#currentPoint} to the given point.\n\t *\n\t * @param {number} x - The x coordinate.\n\t * @param {number} y - The y coordinate.\n\t * @return {Path} A reference to this path.\n\t */\n\tmoveTo( x, y ) {\n\n\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an instance of {@link LineCurve} to the path by connecting\n\t * the current point with the given one.\n\t *\n\t * @param {number} x - The x coordinate of the end point.\n\t * @param {number} y - The y coordinate of the end point.\n\t * @return {Path} A reference to this path.\n\t */\n\tlineTo( x, y ) {\n\n\t\tconst curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( x, y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an instance of {@link QuadraticBezierCurve} to the path by connecting\n\t * the current point with the given one.\n\t *\n\t * @param {number} aCPx - The x coordinate of the control point.\n\t * @param {number} aCPy - The y coordinate of the control point.\n\t * @param {number} aX - The x coordinate of the end point.\n\t * @param {number} aY - The y coordinate of the end point.\n\t * @return {Path} A reference to this path.\n\t */\n\tquadraticCurveTo( aCPx, aCPy, aX, aY ) {\n\n\t\tconst curve = new QuadraticBezierCurve(\n\t\t\tthis.currentPoint.clone(),\n\t\t\tnew Vector2( aCPx, aCPy ),\n\t\t\tnew Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an instance of {@link CubicBezierCurve} to the path by connecting\n\t * the current point with the given one.\n\t *\n\t * @param {number} aCP1x - The x coordinate of the first control point.\n\t * @param {number} aCP1y - The y coordinate of the first control point.\n\t * @param {number} aCP2x - The x coordinate of the second control point.\n\t * @param {number} aCP2y - The y coordinate of the second control point.\n\t * @param {number} aX - The x coordinate of the end point.\n\t * @param {number} aY - The y coordinate of the end point.\n\t * @return {Path} A reference to this path.\n\t */\n\tbezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\tconst curve = new CubicBezierCurve(\n\t\t\tthis.currentPoint.clone(),\n\t\t\tnew Vector2( aCP1x, aCP1y ),\n\t\t\tnew Vector2( aCP2x, aCP2y ),\n\t\t\tnew Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an instance of {@link SplineCurve} to the path by connecting\n\t * the current point with the given list of points.\n\t *\n\t * @param {Array<Vector2>} pts - An array of points in 2D space.\n\t * @return {Path} A reference to this path.\n\t */\n\tsplineThru( pts ) {\n\n\t\tconst npts = [ this.currentPoint.clone() ].concat( pts );\n\n\t\tconst curve = new SplineCurve( npts );\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an arc as an instance of {@link EllipseCurve} to the path, positioned relative\n\t * to the current point.\n\t *\n\t * @param {number} aX - The x coordinate of the center of the arc offsetted from the previous curve.\n\t * @param {number} aY - The y coordinate of the center of the arc offsetted from the previous curve.\n\t * @param {number} aRadius - The radius of the arc.\n\t * @param {number} aStartAngle - The start angle in radians.\n\t * @param {number} aEndAngle - The end angle in radians.\n\t * @param {boolean} [aClockwise=false] - Whether to sweep the arc clockwise or not.\n\t * @return {Path} A reference to this path.\n\t */\n\tarc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tconst x0 = this.currentPoint.x;\n\t\tconst y0 = this.currentPoint.y;\n\n\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an absolutely positioned arc as an instance of {@link EllipseCurve} to the path.\n\t *\n\t * @param {number} aX - The x coordinate of the center of the arc.\n\t * @param {number} aY - The y coordinate of the center of the arc.\n\t * @param {number} aRadius - The radius of the arc.\n\t * @param {number} aStartAngle - The start angle in radians.\n\t * @param {number} aEndAngle - The end angle in radians.\n\t * @param {boolean} [aClockwise=false] - Whether to sweep the arc clockwise or not.\n\t * @return {Path} A reference to this path.\n\t */\n\tabsarc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an ellipse as an instance of {@link EllipseCurve} to the path, positioned relative\n\t * to the current point\n\t *\n\t * @param {number} aX - The x coordinate of the center of the ellipse offsetted from the previous curve.\n\t * @param {number} aY - The y coordinate of the center of the ellipse offsetted from the previous curve.\n\t * @param {number} xRadius - The radius of the ellipse in the x axis.\n\t * @param {number} yRadius - The radius of the ellipse in the y axis.\n\t * @param {number} aStartAngle - The start angle in radians.\n\t * @param {number} aEndAngle - The end angle in radians.\n\t * @param {boolean} [aClockwise=false] - Whether to sweep the ellipse clockwise or not.\n\t * @param {number} [aRotation=0] - The rotation angle of the ellipse in radians, counterclockwise from the positive X axis.\n\t * @return {Path} A reference to this path.\n\t */\n\tellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tconst x0 = this.currentPoint.x;\n\t\tconst y0 = this.currentPoint.y;\n\n\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an absolutely positioned ellipse as an instance of {@link EllipseCurve} to the path.\n\t *\n\t * @param {number} aX - The x coordinate of the absolute center of the ellipse.\n\t * @param {number} aY - The y coordinate of the absolute center of the ellipse.\n\t * @param {number} xRadius - The radius of the ellipse in the x axis.\n\t * @param {number} yRadius - The radius of the ellipse in the y axis.\n\t * @param {number} aStartAngle - The start angle in radians.\n\t * @param {number} aEndAngle - The end angle in radians.\n\t * @param {boolean} [aClockwise=false] - Whether to sweep the ellipse clockwise or not.\n\t * @param {number} [aRotation=0] - The rotation angle of the ellipse in radians, counterclockwise from the positive X axis.\n\t * @return {Path} A reference to this path.\n\t */\n\tabsellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tconst curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\tif ( this.curves.length > 0 ) {\n\n\t\t\t// if a previous curve is present, attempt to join\n\t\t\tconst firstPoint = curve.getPoint( 0 );\n\n\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.curves.push( curve );\n\n\t\tconst lastPoint = curve.getPoint( 1 );\n\t\tthis.currentPoint.copy( lastPoint );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.currentPoint.copy( source.currentPoint );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.currentPoint = this.currentPoint.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.currentPoint.fromArray( json.currentPoint );\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * Defines an arbitrary 2d shape plane using paths with optional holes. It\n * can be used with {@link ExtrudeGeometry}, {@link ShapeGeometry}, to get\n * points, or to get triangulated faces.\n *\n * ```js\n * const heartShape = new THREE.Shape();\n *\n * heartShape.moveTo( 25, 25 );\n * heartShape.bezierCurveTo( 25, 25, 20, 0, 0, 0 );\n * heartShape.bezierCurveTo( - 30, 0, - 30, 35, - 30, 35 );\n * heartShape.bezierCurveTo( - 30, 55, - 10, 77, 25, 95 );\n * heartShape.bezierCurveTo( 60, 77, 80, 55, 80, 35 );\n * heartShape.bezierCurveTo( 80, 35, 80, 0, 50, 0 );\n * heartShape.bezierCurveTo( 35, 0, 25, 25, 25, 25 );\n *\n * const extrudeSettings = {\n * \tdepth: 8,\n * \tbevelEnabled: true,\n * \tbevelSegments: 2,\n * \tsteps: 2,\n * \tbevelSize: 1,\n * \tbevelThickness: 1\n * };\n *\n * const geometry = new THREE.ExtrudeGeometry( heartShape, extrudeSettings );\n * const mesh = new THREE.Mesh( geometry, new THREE.MeshBasicMaterial() );\n * ```\n *\n * @augments Path\n */\nclass Shape extends Path {\n\n\t/**\n\t * Constructs a new shape.\n\t *\n\t * @param {Array<Vector2>} [points] - An array of 2D points defining the shape.\n\t */\n\tconstructor( points ) {\n\n\t\tsuper( points );\n\n\t\t/**\n\t\t * The UUID of the shape.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.type = 'Shape';\n\n\t\t/**\n\t\t * Defines the holes in the shape. Hole definitions must use the\n\t\t * opposite winding order (CW/CCW) than the outer shape.\n\t\t *\n\t\t * @type {Array<Path>}\n\t\t * @readonly\n\t\t */\n\t\tthis.holes = [];\n\n\t}\n\n\t/**\n\t * Returns an array representing each contour of the holes\n\t * as a list of 2D points.\n\t *\n\t * @param {number} divisions - The fineness of the result.\n\t * @return {Array<Array<Vector2>>} The holes as a series of 2D points.\n\t */\n\tgetPointsHoles( divisions ) {\n\n\t\tconst holesPts = [];\n\n\t\tfor ( let i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t}\n\n\t\treturn holesPts;\n\n\t}\n\n\t// get points of shape and holes (keypoints based on segments parameter)\n\n\t/**\n\t * Returns an object that holds contour data for the shape and its holes as\n\t * arrays of 2D points.\n\t *\n\t * @param {number} divisions - The fineness of the result.\n\t * @return {{shape:Array<Vector2>,holes:Array<Array<Vector2>>}} An object with contour data.\n\t */\n\textractPoints( divisions ) {\n\n\t\treturn {\n\n\t\t\tshape: this.getPoints( divisions ),\n\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t};\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.holes = [];\n\n\t\tfor ( let i = 0, l = source.holes.length; i < l; i ++ ) {\n\n\t\t\tconst hole = source.holes[ i ];\n\n\t\t\tthis.holes.push( hole.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.holes = [];\n\n\t\tfor ( let i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tconst hole = this.holes[ i ];\n\t\t\tdata.holes.push( hole.toJSON() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.uuid = json.uuid;\n\t\tthis.holes = [];\n\n\t\tfor ( let i = 0, l = json.holes.length; i < l; i ++ ) {\n\n\t\t\tconst hole = json.holes[ i ];\n\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\n/* eslint-disable */\n// copy of mapbox/earcut version 3.0.1\n// https://github.com/mapbox/earcut/tree/v3.0.1\n\nfunction earcut(data, holeIndices, dim = 2) {\n\n    const hasHoles = holeIndices && holeIndices.length;\n    const outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n    let outerNode = linkedList(data, 0, outerLen, dim, true);\n    const triangles = [];\n\n    if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\n    let minX, minY, invSize;\n\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n    if (data.length > 80 * dim) {\n        minX = Infinity;\n        minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n\n        for (let i = dim; i < outerLen; i += dim) {\n            const x = data[i];\n            const y = data[i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n        }\n\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n        invSize = Math.max(maxX - minX, maxY - minY);\n        invSize = invSize !== 0 ? 32767 / invSize : 0;\n    }\n\n    earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);\n\n    return triangles;\n}\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data, start, end, dim, clockwise) {\n    let last;\n\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\n        for (let i = start; i < end; i += dim) last = insertNode(i / dim | 0, data[i], data[i + 1], last);\n    } else {\n        for (let i = end - dim; i >= start; i -= dim) last = insertNode(i / dim | 0, data[i], data[i + 1], last);\n    }\n\n    if (last && equals(last, last.next)) {\n        removeNode(last);\n        last = last.next;\n    }\n\n    return last;\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end) {\n    if (!start) return start;\n    if (!end) end = start;\n\n    let p = start,\n        again;\n    do {\n        again = false;\n\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n            removeNode(p);\n            p = end = p.prev;\n            if (p === p.next) break;\n            again = true;\n\n        } else {\n            p = p.next;\n        }\n    } while (again || p !== end);\n\n    return end;\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n    if (!ear) return;\n\n    // interlink polygon nodes in z-order\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\n    let stop = ear;\n\n    // iterate through ears, slicing them one by one\n    while (ear.prev !== ear.next) {\n        const prev = ear.prev;\n        const next = ear.next;\n\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n            triangles.push(prev.i, ear.i, next.i); // cut off the triangle\n\n            removeNode(ear);\n\n            // skipping the next vertex leads to less sliver triangles\n            ear = next.next;\n            stop = next.next;\n\n            continue;\n        }\n\n        ear = next;\n\n        // if we looped through the whole remaining polygon and can't find any more ears\n        if (ear === stop) {\n            // try filtering points and slicing again\n            if (!pass) {\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\n            // if this didn't work, try curing all small self-intersections locally\n            } else if (pass === 1) {\n                ear = cureLocalIntersections(filterPoints(ear), triangles);\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n            // as a last resort, try splitting the remaining polygon into two\n            } else if (pass === 2) {\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\n            }\n\n            break;\n        }\n    }\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n    const a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // now make sure we don't have other points inside the potential ear\n    const ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n    // triangle bbox\n    const x0 = Math.min(ax, bx, cx),\n        y0 = Math.min(ay, by, cy),\n        x1 = Math.max(ax, bx, cx),\n        y1 = Math.max(ay, by, cy);\n\n    let p = c.next;\n    while (p !== a) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 &&\n            pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.next;\n    }\n\n    return true;\n}\n\nfunction isEarHashed(ear, minX, minY, invSize) {\n    const a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    const ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n    // triangle bbox\n    const x0 = Math.min(ax, bx, cx),\n        y0 = Math.min(ay, by, cy),\n        x1 = Math.max(ax, bx, cx),\n        y1 = Math.max(ay, by, cy);\n\n    // z-order range for the current triangle bbox;\n    const minZ = zOrder(x0, y0, minX, minY, invSize),\n        maxZ = zOrder(x1, y1, minX, minY, invSize);\n\n    let p = ear.prevZ,\n        n = ear.nextZ;\n\n    // look for points inside the triangle in both directions\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n            pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n\n        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n            pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    // look for remaining points in decreasing z-order\n    while (p && p.z >= minZ) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n            pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n    }\n\n    // look for remaining points in increasing z-order\n    while (n && n.z <= maxZ) {\n        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n            pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    return true;\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles) {\n    let p = start;\n    do {\n        const a = p.prev,\n            b = p.next.next;\n\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\n            triangles.push(a.i, p.i, b.i);\n\n            // remove two nodes involved\n            removeNode(p);\n            removeNode(p.next);\n\n            p = start = b;\n        }\n        p = p.next;\n    } while (p !== start);\n\n    return filterPoints(p);\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n    // look for a valid diagonal that divides the polygon into two\n    let a = start;\n    do {\n        let b = a.next.next;\n        while (b !== a.prev) {\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\n                // split the polygon in two by the diagonal\n                let c = splitPolygon(a, b);\n\n                // filter colinear points around the cuts\n                a = filterPoints(a, a.next);\n                c = filterPoints(c, c.next);\n\n                // run earcut on each half\n                earcutLinked(a, triangles, dim, minX, minY, invSize, 0);\n                earcutLinked(c, triangles, dim, minX, minY, invSize, 0);\n                return;\n            }\n            b = b.next;\n        }\n        a = a.next;\n    } while (a !== start);\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n    const queue = [];\n\n    for (let i = 0, len = holeIndices.length; i < len; i++) {\n        const start = holeIndices[i] * dim;\n        const end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n        const list = linkedList(data, start, end, dim, false);\n        if (list === list.next) list.steiner = true;\n        queue.push(getLeftmost(list));\n    }\n\n    queue.sort(compareXYSlope);\n\n    // process holes from left to right\n    for (let i = 0; i < queue.length; i++) {\n        outerNode = eliminateHole(queue[i], outerNode);\n    }\n\n    return outerNode;\n}\n\nfunction compareXYSlope(a, b) {\n    let result = a.x - b.x;\n    // when the left-most point of 2 holes meet at a vertex, sort the holes counterclockwise so that when we find\n    // the bridge to the outer shell is always the point that they meet at.\n    if (result === 0) {\n        result = a.y - b.y;\n        if (result === 0) {\n            const aSlope = (a.next.y - a.y) / (a.next.x - a.x);\n            const bSlope = (b.next.y - b.y) / (b.next.x - b.x);\n            result = aSlope - bSlope;\n        }\n    }\n    return result;\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n    const bridge = findHoleBridge(hole, outerNode);\n    if (!bridge) {\n        return outerNode;\n    }\n\n    const bridgeReverse = splitPolygon(bridge, hole);\n\n    // filter collinear points around the cuts\n    filterPoints(bridgeReverse, bridgeReverse.next);\n    return filterPoints(bridge, bridge.next);\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n    let p = outerNode;\n    const hx = hole.x;\n    const hy = hole.y;\n    let qx = -Infinity;\n    let m;\n\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    // unless they intersect at a vertex, then choose the vertex\n    if (equals(hole, p)) return p;\n    do {\n        if (equals(hole, p.next)) return p.next;\n        else if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n            const x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n            if (x <= hx && x > qx) {\n                qx = x;\n                m = p.x < p.next.x ? p : p.next;\n                if (x === hx) return m; // hole touches outer segment; pick leftmost endpoint\n            }\n        }\n        p = p.next;\n    } while (p !== outerNode);\n\n    if (!m) return null;\n\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n\n    const stop = m;\n    const mx = m.x;\n    const my = m.y;\n    let tanMin = Infinity;\n\n    p = m;\n\n    do {\n        if (hx >= p.x && p.x >= mx && hx !== p.x &&\n                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\n            const tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n            if (locallyInside(p, hole) &&\n                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {\n                m = p;\n                tanMin = tan;\n            }\n        }\n\n        p = p.next;\n    } while (p !== stop);\n\n    return m;\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector(m, p) {\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n    let p = start;\n    do {\n        if (p.z === 0) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n        p.prevZ = p.prev;\n        p.nextZ = p.next;\n        p = p.next;\n    } while (p !== start);\n\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n\n    sortLinked(p);\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n    let numMerges;\n    let inSize = 1;\n\n    do {\n        let p = list;\n        let e;\n        list = null;\n        let tail = null;\n        numMerges = 0;\n\n        while (p) {\n            numMerges++;\n            let q = p;\n            let pSize = 0;\n            for (let i = 0; i < inSize; i++) {\n                pSize++;\n                q = q.nextZ;\n                if (!q) break;\n            }\n            let qSize = inSize;\n\n            while (pSize > 0 || (qSize > 0 && q)) {\n\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n                    e = p;\n                    p = p.nextZ;\n                    pSize--;\n                } else {\n                    e = q;\n                    q = q.nextZ;\n                    qSize--;\n                }\n\n                if (tail) tail.nextZ = e;\n                else list = e;\n\n                e.prevZ = tail;\n                tail = e;\n            }\n\n            p = q;\n        }\n\n        tail.nextZ = null;\n        inSize *= 2;\n\n    } while (numMerges > 1);\n\n    return list;\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n    // coords are transformed into non-negative 15-bit integer range\n    x = (x - minX) * invSize | 0;\n    y = (y - minY) * invSize | 0;\n\n    x = (x | (x << 8)) & 0x00FF00FF;\n    x = (x | (x << 4)) & 0x0F0F0F0F;\n    x = (x | (x << 2)) & 0x33333333;\n    x = (x | (x << 1)) & 0x55555555;\n\n    y = (y | (y << 8)) & 0x00FF00FF;\n    y = (y | (y << 4)) & 0x0F0F0F0F;\n    y = (y | (y << 2)) & 0x33333333;\n    y = (y | (y << 1)) & 0x55555555;\n\n    return x | (y << 1);\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n    let p = start,\n        leftmost = start;\n    do {\n        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\n        p = p.next;\n    } while (p !== start);\n\n    return leftmost;\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return (cx - px) * (ay - py) >= (ax - px) * (cy - py) &&\n           (ax - px) * (by - py) >= (bx - px) * (ay - py) &&\n           (bx - px) * (cy - py) >= (cx - px) * (by - py);\n}\n\n// check if a point lies within a convex triangle but false if its equal to the first point of the triangle\nfunction pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, px, py) {\n    return !(ax === px && ay === py) && pointInTriangle(ax, ay, bx, by, cx, cy, px, py);\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges\n           (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible\n            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n}\n\n// signed area of a triangle\nfunction area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n\n// check if two points are equal\nfunction equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n}\n\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n    const o1 = sign(area(p1, q1, p2));\n    const o2 = sign(area(p1, q1, q2));\n    const o3 = sign(area(p2, q2, p1));\n    const o4 = sign(area(p2, q2, q1));\n\n    if (o1 !== o2 && o3 !== o4) return true; // general case\n\n    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n    return false;\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment(p, q, r) {\n    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n}\n\nfunction sign(num) {\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n    let p = a;\n    do {\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n                intersects(p, p.next, a, b)) return true;\n        p = p.next;\n    } while (p !== a);\n\n    return false;\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0 ?\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n    let p = a;\n    let inside = false;\n    const px = (a.x + b.x) / 2;\n    const py = (a.y + b.y) / 2;\n    do {\n        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\n                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\n            inside = !inside;\n        p = p.next;\n    } while (p !== a);\n\n    return inside;\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n    const a2 = createNode(a.i, a.x, a.y),\n        b2 = createNode(b.i, b.x, b.y),\n        an = a.next,\n        bp = b.prev;\n\n    a.next = b;\n    b.prev = a;\n\n    a2.next = an;\n    an.prev = a2;\n\n    b2.next = a2;\n    a2.prev = b2;\n\n    bp.next = b2;\n    b2.prev = bp;\n\n    return b2;\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n    const p = createNode(i, x, y);\n\n    if (!last) {\n        p.prev = p;\n        p.next = p;\n\n    } else {\n        p.next = last.next;\n        p.prev = last;\n        last.next.prev = p;\n        last.next = p;\n    }\n    return p;\n}\n\nfunction removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction createNode(i, x, y) {\n    return {\n        i, // vertex index in coordinates array\n        x, y, // vertex coordinates\n        prev: null, // previous and next vertex nodes in a polygon ring\n        next: null,\n        z: 0, // z-order curve value\n        prevZ: null, // previous and next nodes in z-order\n        nextZ: null,\n        steiner: false // indicates whether this is a steiner point\n    };\n}\n\nfunction signedArea(data, start, end, dim) {\n    let sum = 0;\n    for (let i = start, j = end - dim; i < end; i += dim) {\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n        j = i;\n    }\n    return sum;\n}\n\nclass Earcut {\n\n\t/**\n\t * Triangulates the given shape definition by returning an array of triangles.\n\t *\n\t * @param {Array<number>} data - An array with 2D points.\n\t * @param {Array<number>} holeIndices - An array with indices defining holes.\n\t * @param {number} [dim=2] - The number of coordinates per vertex in the input array.\n\t * @return {Array<number>} An array representing the triangulated faces. Each face is defined by three consecutive numbers\n\t * representing vertex indices.\n\t */\n\tstatic triangulate( data, holeIndices, dim = 2 ) {\n\n\t\treturn earcut( data, holeIndices, dim );\n\n\t}\n\n}\n\n/**\n * A class containing utility functions for shapes.\n *\n * @hideconstructor\n */\nclass ShapeUtils {\n\n\t/**\n\t * Calculate area of a ( 2D ) contour polygon.\n\t *\n\t * @param {Array<Vector2>} contour - An array of 2D points.\n\t * @return {number} The area.\n\t */\n\tstatic area( contour ) {\n\n\t\tconst n = contour.length;\n\t\tlet a = 0.0;\n\n\t\tfor ( let p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t}\n\n\t\treturn a * 0.5;\n\n\t}\n\n\t/**\n\t * Returns `true` if the given contour uses a clockwise winding order.\n\t *\n\t * @param {Array<Vector2>} pts - An array of 2D points defining a polygon.\n\t * @return {boolean} Whether the given contour uses a clockwise winding order or not.\n\t */\n\tstatic isClockWise( pts ) {\n\n\t\treturn ShapeUtils.area( pts ) < 0;\n\n\t}\n\n\t/**\n\t * Triangulates the given shape definition.\n\t *\n\t * @param {Array<Vector2>} contour - An array of 2D points defining the contour.\n\t * @param {Array<Array<Vector2>>} holes - An array that holds arrays of 2D points defining the holes.\n\t * @return {Array<Array<number>>} An array that holds for each face definition an array with three indices.\n\t */\n\tstatic triangulateShape( contour, holes ) {\n\n\t\tconst vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\t\tconst holeIndices = []; // array of hole indices\n\t\tconst faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\tremoveDupEndPts( contour );\n\t\taddContour( vertices, contour );\n\n\t\t//\n\n\t\tlet holeIndex = contour.length;\n\n\t\tholes.forEach( removeDupEndPts );\n\n\t\tfor ( let i = 0; i < holes.length; i ++ ) {\n\n\t\t\tholeIndices.push( holeIndex );\n\t\t\tholeIndex += holes[ i ].length;\n\t\t\taddContour( vertices, holes[ i ] );\n\n\t\t}\n\n\t\t//\n\n\t\tconst triangles = Earcut.triangulate( vertices, holeIndices );\n\n\t\t//\n\n\t\tfor ( let i = 0; i < triangles.length; i += 3 ) {\n\n\t\t\tfaces.push( triangles.slice( i, i + 3 ) );\n\n\t\t}\n\n\t\treturn faces;\n\n\t}\n\n}\n\nfunction removeDupEndPts( points ) {\n\n\tconst l = points.length;\n\n\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n\t\tpoints.pop();\n\n\t}\n\n}\n\nfunction addContour( vertices, contour ) {\n\n\tfor ( let i = 0; i < contour.length; i ++ ) {\n\n\t\tvertices.push( contour[ i ].x );\n\t\tvertices.push( contour[ i ].y );\n\n\t}\n\n}\n\n/**\n * Creates extruded geometry from a path shape.\n *\n * ```js\n * const length = 12, width = 8;\n *\n * const shape = new THREE.Shape();\n * shape.moveTo( 0,0 );\n * shape.lineTo( 0, width );\n * shape.lineTo( length, width );\n * shape.lineTo( length, 0 );\n * shape.lineTo( 0, 0 );\n *\n * const geometry = new THREE.ExtrudeGeometry( shape );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n * const mesh = new THREE.Mesh( geometry, material ) ;\n * scene.add( mesh );\n * ```\n *\n * @augments BufferGeometry\n */\nclass ExtrudeGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new extrude geometry.\n\t *\n\t * @param {Shape|Array<Shape>} [shapes] - A shape or an array of shapes.\n\t * @param {ExtrudeGeometry~Options} [options] - The extrude settings.\n\t */\n\tconstructor( shapes = new Shape( [ new Vector2( 0.5, 0.5 ), new Vector2( -0.5, 0.5 ), new Vector2( -0.5, -0.5 ), new Vector2( 0.5, -0.5 ) ] ), options = {} ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ExtrudeGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\t\tconst scope = this;\n\n\t\tconst verticesArray = [];\n\t\tconst uvArray = [];\n\n\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tconst shape = shapes[ i ];\n\t\t\taddShape( shape );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\n\n\t\tthis.computeVertexNormals();\n\n\t\t// functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tconst placeholder = [];\n\n\t\t\t// options\n\n\t\t\tconst curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\tconst steps = options.steps !== undefined ? options.steps : 1;\n\t\t\tconst depth = options.depth !== undefined ? options.depth : 1;\n\n\t\t\tlet bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\tlet bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 0.2;\n\t\t\tlet bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 0.1;\n\t\t\tlet bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n\t\t\tlet bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\t\t\tconst extrudePath = options.extrudePath;\n\n\t\t\tconst uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\n\n\t\t\t//\n\n\t\t\tlet extrudePts, extrudeByPath = false;\n\t\t\tlet splineTube, binormal, normal, position2;\n\n\t\t\tif ( extrudePath ) {\n\n\t\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\t\t\textrudeByPath = true;\n\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t\t\t// SETUP TNB variables\n\n\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\tsplineTube = extrudePath.computeFrenetFrames( steps, false );\n\n\t\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\tbinormal = new Vector3();\n\t\t\t\tnormal = new Vector3();\n\t\t\t\tposition2 = new Vector3();\n\n\t\t\t}\n\n\t\t\t// Safeguards if bevels are not enabled\n\n\t\t\tif ( ! bevelEnabled ) {\n\n\t\t\t\tbevelSegments = 0;\n\t\t\t\tbevelThickness = 0;\n\t\t\t\tbevelSize = 0;\n\t\t\t\tbevelOffset = 0;\n\n\t\t\t}\n\n\t\t\t// Variables initialization\n\n\t\t\tconst shapePoints = shape.extractPoints( curveSegments );\n\n\t\t\tlet vertices = shapePoints.shape;\n\t\t\tconst holes = shapePoints.holes;\n\n\t\t\tconst reverse = ! ShapeUtils.isClockWise( vertices );\n\n\t\t\tif ( reverse ) {\n\n\t\t\t\tvertices = vertices.reverse();\n\n\t\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\n\t\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/**Merges index-adjacent points that are within a threshold distance of each other. Array is modified in-place. Threshold distance is empirical, and scaled based on the magnitude of point coordinates.\n\t\t\t * @param {Array<Vector2>} points\n\t\t\t*/\n\t\t\tfunction mergeOverlappingPoints( points ) {\n\n\t\t\t\tconst THRESHOLD = 1e-10;\n\t\t\t\tconst THRESHOLD_SQ = THRESHOLD * THRESHOLD;\n\t\t\t\tlet prevPos = points[ 0 ];\n\t\t\t\tfor ( let i = 1; i <= points.length; i ++ ) {\n\n\t\t\t\t\tconst currentIndex = i % points.length;\n\t\t\t\t\tconst currentPos = points[ currentIndex ];\n\t\t\t\t\tconst dx = currentPos.x - prevPos.x;\n\t\t\t\t\tconst dy = currentPos.y - prevPos.y;\n\t\t\t\t\tconst distSq = dx * dx + dy * dy;\n\n\t\t\t\t\tconst scalingFactorSqrt = Math.max(\n\t\t\t\t\t\tMath.abs( currentPos.x ),\n\t\t\t\t\t\tMath.abs( currentPos.y ),\n\t\t\t\t\t\tMath.abs( prevPos.x ),\n\t\t\t\t\t\tMath.abs( prevPos.y )\n\t\t\t\t\t);\n\t\t\t\t\tconst thresholdSqScaled = THRESHOLD_SQ * scalingFactorSqrt * scalingFactorSqrt;\n\t\t\t\t\tif ( distSq <= thresholdSqScaled ) {\n\n\t\t\t\t\t\tpoints.splice( currentIndex, 1 );\n\t\t\t\t\t\ti --;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tprevPos = currentPos;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tmergeOverlappingPoints( vertices );\n\t\t\tholes.forEach( mergeOverlappingPoints );\n\n\t\t\tconst numHoles = holes.length;\n\n\t\t\t/* Vertices */\n\n\t\t\tconst contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\tfor ( let h = 0; h < numHoles; h ++ ) {\n\n\t\t\t\tconst ahole = holes[ h ];\n\n\t\t\t\tvertices = vertices.concat( ahole );\n\n\t\t\t}\n\n\n\t\t\tfunction scalePt2( pt, vec, size ) {\n\n\t\t\t\tif ( ! vec ) console.error( 'THREE.ExtrudeGeometry: vec does not exist' );\n\n\t\t\t\treturn pt.clone().addScaledVector( vec, size );\n\n\t\t\t}\n\n\t\t\tconst vlen = vertices.length;\n\n\n\t\t\t// Find directions for point movement\n\n\n\t\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t//\n\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\t\t\tlet v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\n\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\tconst v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\tconst v_next_x = inNext.x - inPt.x,\n\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\n\t\t\t\tconst v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t\t\t// check for collinear edges\n\t\t\t\tconst collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not collinear\n\n\t\t\t\t\t// length of vectors for normalizing\n\n\t\t\t\t\tconst v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\t\t\tconst v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\t\t\tconst ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\t\t\tconst ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\t\t\tconst ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\t\t\tconst ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\t\t\tconst sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\n\t\t\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\t\t// vector from inPt to intersection point\n\n\t\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t//  but prevent crazy spikes\n\t\t\t\t\tconst v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// handle special case of collinear edges\n\n\t\t\t\t\tlet direction_eq = false; // assumes: opposite\n\n\t\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( direction_eq ) {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t\t\t}\n\n\n\t\t\tconst contourMovements = [];\n\n\t\t\tfor ( let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\tif ( j === il ) j = 0;\n\t\t\t\tif ( k === il ) k = 0;\n\n\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t\t\t}\n\n\t\t\tconst holesMovements = [];\n\t\t\tlet oneHoleMovements, verticesMovements = contourMovements.concat();\n\n\t\t\tfor ( let h = 0, hl = numHoles; h < hl; h ++ ) {\n\n\t\t\t\tconst ahole = holes[ h ];\n\n\t\t\t\toneHoleMovements = [];\n\n\t\t\t\tfor ( let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\t\tif ( j === il ) j = 0;\n\t\t\t\t\tif ( k === il ) k = 0;\n\n\t\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n\t\t\t\t}\n\n\t\t\t\tholesMovements.push( oneHoleMovements );\n\t\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t\t\t}\n\n\t\t\tlet faces;\n\n\t\t\tif ( bevelSegments === 0 ) {\n\n\t\t\t\tfaces = ShapeUtils.triangulateShape( contour, holes );\n\n\t\t\t} else {\n\n\t\t\t\tconst contractedContourVertices = [];\n\t\t\t\tconst expandedHoleVertices = [];\n\n\t\t\t\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\t\t\t\tfor ( let b = 0; b < bevelSegments; b ++ ) {\n\n\t\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\t\t\t\tconst t = b / bevelSegments;\n\t\t\t\t\tconst z = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\t\tconst bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t\t// contract shape\n\n\t\t\t\t\tfor ( let i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst vert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n\t\t\t\t\t\tv( vert.x, vert.y, - z );\n\t\t\t\t\t\tif ( t === 0 ) contractedContourVertices.push( vert );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// expand holes\n\n\t\t\t\t\tfor ( let h = 0, hl = numHoles; h < hl; h ++ ) {\n\n\t\t\t\t\t\tconst ahole = holes[ h ];\n\t\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\t\t\t\t\t\tconst oneHoleVertices = [];\n\t\t\t\t\t\tfor ( let i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tconst vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\t\tv( vert.x, vert.y, - z );\n\t\t\t\t\t\t\tif ( t === 0 ) oneHoleVertices.push( vert );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( t === 0 ) expandedHoleVertices.push( oneHoleVertices );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfaces = ShapeUtils.triangulateShape( contractedContourVertices, expandedHoleVertices );\n\n\t\t\t}\n\n\t\t\tconst flen = faces.length;\n\n\t\t\tconst bs = bevelSize + bevelOffset;\n\n\t\t\t// Back facing vertices\n\n\t\t\tfor ( let i = 0; i < vlen; i ++ ) {\n\n\t\t\t\tconst vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert.x, vert.y, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Add stepped vertices...\n\t\t\t// Including front facing vertices\n\n\t\t\tfor ( let s = 1; s <= steps; s ++ ) {\n\n\t\t\t\tfor ( let i = 0; i < vlen; i ++ ) {\n\n\t\t\t\t\tconst vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\tv( vert.x, vert.y, depth / steps * s );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// Add bevel segments planes\n\n\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t\t\tfor ( let b = bevelSegments - 1; b >= 0; b -- ) {\n\n\t\t\t\tconst t = b / bevelSegments;\n\t\t\t\tconst z = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tconst bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( let i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst vert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( let i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/* Faces */\n\n\t\t\t// Top and bottom faces\n\n\t\t\tbuildLidFaces();\n\n\t\t\t// Sides faces\n\n\t\t\tbuildSideFaces();\n\n\n\t\t\t/////  Internal functions\n\n\t\t\tfunction buildLidFaces() {\n\n\t\t\t\tconst start = verticesArray.length / 3;\n\n\t\t\t\tif ( bevelEnabled ) {\n\n\t\t\t\t\tlet layer = 0; // steps + 1\n\t\t\t\t\tlet offset = vlen * layer;\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\toffset = vlen * layer;\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 0 );\n\n\t\t\t}\n\n\t\t\t// Create faces for the z-sides of the shape\n\n\t\t\tfunction buildSideFaces() {\n\n\t\t\t\tconst start = verticesArray.length / 3;\n\t\t\t\tlet layeroffset = 0;\n\t\t\t\tsidewalls( contour, layeroffset );\n\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\t\t\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t\t\t//, true\n\t\t\t\t\tlayeroffset += ahole.length;\n\n\t\t\t\t}\n\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 1 );\n\n\n\t\t\t}\n\n\t\t\tfunction sidewalls( contour, layeroffset ) {\n\n\t\t\t\tlet i = contour.length;\n\n\t\t\t\twhile ( -- i >= 0 ) {\n\n\t\t\t\t\tconst j = i;\n\t\t\t\t\tlet k = i - 1;\n\t\t\t\t\tif ( k < 0 ) k = contour.length - 1;\n\n\t\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\tfor ( let s = 0, sl = ( steps + bevelSegments * 2 ); s < sl; s ++ ) {\n\n\t\t\t\t\t\tconst slen1 = vlen * s;\n\t\t\t\t\t\tconst slen2 = vlen * ( s + 1 );\n\n\t\t\t\t\t\tconst a = layeroffset + j + slen1,\n\t\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\t\t\tf4( a, b, c, d );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction v( x, y, z ) {\n\n\t\t\t\tplaceholder.push( x );\n\t\t\t\tplaceholder.push( y );\n\t\t\t\tplaceholder.push( z );\n\n\t\t\t}\n\n\n\t\t\tfunction f3( a, b, c ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\n\t\t\t\tconst nextIndex = verticesArray.length / 3;\n\t\t\t\tconst uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\n\t\t\t}\n\n\t\t\tfunction f4( a, b, c, d ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( d );\n\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\t\t\t\taddVertex( d );\n\n\n\t\t\t\tconst nextIndex = verticesArray.length / 3;\n\t\t\t\tconst uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t}\n\n\t\t\tfunction addVertex( index ) {\n\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\n\n\t\t\t}\n\n\n\t\t\tfunction addUV( vector2 ) {\n\n\t\t\t\tuvArray.push( vector2.x );\n\t\t\t\tuvArray.push( vector2.y );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tconst shapes = this.parameters.shapes;\n\t\tconst options = this.parameters.options;\n\n\t\treturn toJSON$1( shapes, options, data );\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @param {Array<Shape>} shapes - An array of shapes.\n\t * @return {ExtrudeGeometry} A new instance.\n\t */\n\tstatic fromJSON( data, shapes ) {\n\n\t\tconst geometryShapes = [];\n\n\t\tfor ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\tconst shape = shapes[ data.shapes[ j ] ];\n\n\t\t\tgeometryShapes.push( shape );\n\n\t\t}\n\n\t\tconst extrudePath = data.options.extrudePath;\n\n\t\tif ( extrudePath !== undefined ) {\n\n\t\t\tdata.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );\n\n\t\t}\n\n\t\treturn new ExtrudeGeometry( geometryShapes, data.options );\n\n\t}\n\n}\n\nconst WorldUVGenerator = {\n\n\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\n\n\t\tconst a_x = vertices[ indexA * 3 ];\n\t\tconst a_y = vertices[ indexA * 3 + 1 ];\n\t\tconst b_x = vertices[ indexB * 3 ];\n\t\tconst b_y = vertices[ indexB * 3 + 1 ];\n\t\tconst c_x = vertices[ indexC * 3 ];\n\t\tconst c_y = vertices[ indexC * 3 + 1 ];\n\n\t\treturn [\n\t\t\tnew Vector2( a_x, a_y ),\n\t\t\tnew Vector2( b_x, b_y ),\n\t\t\tnew Vector2( c_x, c_y )\n\t\t];\n\n\t},\n\n\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\n\n\t\tconst a_x = vertices[ indexA * 3 ];\n\t\tconst a_y = vertices[ indexA * 3 + 1 ];\n\t\tconst a_z = vertices[ indexA * 3 + 2 ];\n\t\tconst b_x = vertices[ indexB * 3 ];\n\t\tconst b_y = vertices[ indexB * 3 + 1 ];\n\t\tconst b_z = vertices[ indexB * 3 + 2 ];\n\t\tconst c_x = vertices[ indexC * 3 ];\n\t\tconst c_y = vertices[ indexC * 3 + 1 ];\n\t\tconst c_z = vertices[ indexC * 3 + 2 ];\n\t\tconst d_x = vertices[ indexD * 3 ];\n\t\tconst d_y = vertices[ indexD * 3 + 1 ];\n\t\tconst d_z = vertices[ indexD * 3 + 2 ];\n\n\t\tif ( Math.abs( a_y - b_y ) < Math.abs( a_x - b_x ) ) {\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_x, 1 - a_z ),\n\t\t\t\tnew Vector2( b_x, 1 - b_z ),\n\t\t\t\tnew Vector2( c_x, 1 - c_z ),\n\t\t\t\tnew Vector2( d_x, 1 - d_z )\n\t\t\t];\n\n\t\t} else {\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_y, 1 - a_z ),\n\t\t\t\tnew Vector2( b_y, 1 - b_z ),\n\t\t\t\tnew Vector2( c_y, 1 - c_z ),\n\t\t\t\tnew Vector2( d_y, 1 - d_z )\n\t\t\t];\n\n\t\t}\n\n\t}\n\n};\n\nfunction toJSON$1( shapes, options, data ) {\n\n\tdata.shapes = [];\n\n\tif ( Array.isArray( shapes ) ) {\n\n\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tconst shape = shapes[ i ];\n\n\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t}\n\n\t} else {\n\n\t\tdata.shapes.push( shapes.uuid );\n\n\t}\n\n\tdata.options = Object.assign( {}, options );\n\n\tif ( options.extrudePath !== undefined ) data.options.extrudePath = options.extrudePath.toJSON();\n\n\treturn data;\n\n}\n\n/**\n * A geometry class for representing an icosahedron.\n *\n * ```js\n * const geometry = new THREE.IcosahedronGeometry();\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const icosahedron = new THREE.Mesh( geometry, material );\n * scene.add( icosahedron );\n * ```\n *\n * @augments PolyhedronGeometry\n */\nclass IcosahedronGeometry extends PolyhedronGeometry {\n\n\t/**\n\t * Constructs a new icosahedron geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the icosahedron.\n\t * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a icosahedron.\n\t */\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\t\tconst vertices = [\n\t\t\t-1, t, 0, \t1, t, 0, \t-1, - t, 0, \t1, - t, 0,\n\t\t\t0, -1, t, \t0, 1, t,\t0, -1, - t, \t0, 1, - t,\n\t\t\tt, 0, -1, \tt, 0, 1, \t- t, 0, -1, \t- t, 0, 1\n\t\t];\n\n\t\tconst indices = [\n\t\t\t0, 11, 5, \t0, 5, 1, \t0, 1, 7, \t0, 7, 10, \t0, 10, 11,\n\t\t\t1, 5, 9, \t5, 11, 4,\t11, 10, 2,\t10, 7, 6,\t7, 1, 8,\n\t\t\t3, 9, 4, \t3, 4, 2,\t3, 2, 6,\t3, 6, 8,\t3, 8, 9,\n\t\t\t4, 9, 5, \t2, 4, 11,\t6, 2, 10,\t8, 6, 7,\t9, 8, 1\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'IcosahedronGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {IcosahedronGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new IcosahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\n/**\n * Creates meshes with axial symmetry like vases. The lathe rotates around the Y axis.\n *\n * ```js\n * const points = [];\n * for ( let i = 0; i < 10; i ++ ) {\n * \tpoints.push( new THREE.Vector2( Math.sin( i * 0.2 ) * 10 + 5, ( i - 5 ) * 2 ) );\n * }\n * const geometry = new THREE.LatheGeometry( points );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const lathe = new THREE.Mesh( geometry, material );\n * scene.add( lathe );\n * ```\n *\n * @augments BufferGeometry\n */\nclass LatheGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new lathe geometry.\n\t *\n\t * @param {Array<Vector2|Vector3>} [points] - An array of points in 2D space. The x-coordinate of each point\n\t * must be greater than zero.\n\t * @param {number} [segments=12] - The number of circumference segments to generate.\n\t * @param {number} [phiStart=0] - The starting angle in radians.\n\t * @param {number} [phiLength=Math.PI*2] - The radian (0 to 2PI) range of the lathed section 2PI is a\n\t * closed lathe, less than 2PI is a portion.\n\t */\n\tconstructor( points = [ new Vector2( 0, -0.5 ), new Vector2( 0.5, 0 ), new Vector2( 0, 0.5 ) ], segments = 12, phiStart = 0, phiLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'LatheGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tsegments = Math.floor( segments );\n\n\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\tphiLength = clamp( phiLength, 0, Math.PI * 2 );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst uvs = [];\n\t\tconst initNormals = [];\n\t\tconst normals = [];\n\n\t\t// helper variables\n\n\t\tconst inverseSegments = 1.0 / segments;\n\t\tconst vertex = new Vector3();\n\t\tconst uv = new Vector2();\n\t\tconst normal = new Vector3();\n\t\tconst curNormal = new Vector3();\n\t\tconst prevNormal = new Vector3();\n\t\tlet dx = 0;\n\t\tlet dy = 0;\n\n\t\t// pre-compute normals for initial \"meridian\"\n\n\t\tfor ( let j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\tswitch ( j ) {\n\n\t\t\t\tcase 0:\t\t\t\t// special handling for 1st vertex on path\n\n\t\t\t\t\tdx = points[ j + 1 ].x - points[ j ].x;\n\t\t\t\t\tdy = points[ j + 1 ].y - points[ j ].y;\n\n\t\t\t\t\tnormal.x = dy * 1.0;\n\t\t\t\t\tnormal.y = - dx;\n\t\t\t\t\tnormal.z = dy * 0.0;\n\n\t\t\t\t\tprevNormal.copy( normal );\n\n\t\t\t\t\tnormal.normalize();\n\n\t\t\t\t\tinitNormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ( points.length - 1 ):\t// special handling for last Vertex on path\n\n\t\t\t\t\tinitNormals.push( prevNormal.x, prevNormal.y, prevNormal.z );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\t\t\t// default handling for all vertices in between\n\n\t\t\t\t\tdx = points[ j + 1 ].x - points[ j ].x;\n\t\t\t\t\tdy = points[ j + 1 ].y - points[ j ].y;\n\n\t\t\t\t\tnormal.x = dy * 1.0;\n\t\t\t\t\tnormal.y = - dx;\n\t\t\t\t\tnormal.z = dy * 0.0;\n\n\t\t\t\t\tcurNormal.copy( normal );\n\n\t\t\t\t\tnormal.x += prevNormal.x;\n\t\t\t\t\tnormal.y += prevNormal.y;\n\t\t\t\t\tnormal.z += prevNormal.z;\n\n\t\t\t\t\tnormal.normalize();\n\n\t\t\t\t\tinitNormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\tprevNormal.copy( curNormal );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate vertices, uvs and normals\n\n\t\tfor ( let i = 0; i <= segments; i ++ ) {\n\n\t\t\tconst phi = phiStart + i * inverseSegments * phiLength;\n\n\t\t\tconst sin = Math.sin( phi );\n\t\t\tconst cos = Math.cos( phi );\n\n\t\t\tfor ( let j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\t\tvertex.y = points[ j ].y;\n\t\t\t\tvertex.z = points[ j ].x * cos;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = i / segments;\n\t\t\t\tuv.y = j / ( points.length - 1 );\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t// normal\n\n\t\t\t\tconst x = initNormals[ 3 * j + 0 ] * sin;\n\t\t\t\tconst y = initNormals[ 3 * j + 1 ];\n\t\t\t\tconst z = initNormals[ 3 * j + 0 ] * cos;\n\n\t\t\t\tnormals.push( x, y, z );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let i = 0; i < segments; i ++ ) {\n\n\t\t\tfor ( let j = 0; j < ( points.length - 1 ); j ++ ) {\n\n\t\t\t\tconst base = j + i * points.length;\n\n\t\t\t\tconst a = base;\n\t\t\t\tconst b = base + points.length;\n\t\t\t\tconst c = base + points.length + 1;\n\t\t\t\tconst d = base + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( c, d, b );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {LatheGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new LatheGeometry( data.points, data.segments, data.phiStart, data.phiLength );\n\n\t}\n\n}\n\n/**\n * A geometry class for representing an octahedron.\n *\n * ```js\n * const geometry = new THREE.OctahedronGeometry();\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const octahedron = new THREE.Mesh( geometry, material );\n * scene.add( octahedron );\n * ```\n *\n * @augments PolyhedronGeometry\n */\nclass OctahedronGeometry extends PolyhedronGeometry {\n\n\t/**\n\t * Constructs a new octahedron geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the octahedron.\n\t * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a octahedron.\n\t */\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst vertices = [\n\t\t\t1, 0, 0, \t-1, 0, 0,\t0, 1, 0,\n\t\t\t0, -1, 0, \t0, 0, 1,\t0, 0, -1\n\t\t];\n\n\t\tconst indices = [\n\t\t\t0, 2, 4,\t0, 4, 3,\t0, 3, 5,\n\t\t\t0, 5, 2,\t1, 2, 5,\t1, 5, 3,\n\t\t\t1, 3, 4,\t1, 4, 2\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'OctahedronGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {OctahedronGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new OctahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\n/**\n * A geometry class for representing a plane.\n *\n * ```js\n * const geometry = new THREE.PlaneGeometry( 1, 1 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00, side: THREE.DoubleSide } );\n * const plane = new THREE.Mesh( geometry, material );\n * scene.add( plane );\n * ```\n *\n * @augments BufferGeometry\n */\nclass PlaneGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new plane geometry.\n\t *\n\t * @param {number} [width=1] - The width along the X axis.\n\t * @param {number} [height=1] - The height along the Y axis\n\t * @param {number} [widthSegments=1] - The number of segments along the X axis.\n\t * @param {number} [heightSegments=1] - The number of segments along the Y axis.\n\t */\n\tconstructor( width = 1, height = 1, widthSegments = 1, heightSegments = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'PlaneGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\tconst width_half = width / 2;\n\t\tconst height_half = height / 2;\n\n\t\tconst gridX = Math.floor( widthSegments );\n\t\tconst gridY = Math.floor( heightSegments );\n\n\t\tconst gridX1 = gridX + 1;\n\t\tconst gridY1 = gridY + 1;\n\n\t\tconst segment_width = width / gridX;\n\t\tconst segment_height = height / gridY;\n\n\t\t//\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\tfor ( let iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tconst y = iy * segment_height - height_half;\n\n\t\t\tfor ( let ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tconst x = ix * segment_width - width_half;\n\n\t\t\t\tvertices.push( x, - y, 0 );\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( let ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\tconst a = ix + gridX1 * iy;\n\t\t\t\tconst b = ix + gridX1 * ( iy + 1 );\n\t\t\t\tconst c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tconst d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {PlaneGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new PlaneGeometry( data.width, data.height, data.widthSegments, data.heightSegments );\n\n\t}\n\n}\n\n/**\n * A class for generating a two-dimensional ring geometry.\n *\n * ```js\n * const geometry = new THREE.RingGeometry( 1, 5, 32 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00, side: THREE.DoubleSide } );\n * const mesh = new THREE.Mesh( geometry, material );\n * scene.add( mesh );\n * ```\n *\n * @augments BufferGeometry\n */\nclass RingGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new ring geometry.\n\t *\n\t * @param {number} [innerRadius=0.5] - The inner radius of the ring.\n\t * @param {number} [outerRadius=1] - The outer radius of the ring.\n\t * @param {number} [thetaSegments=32] - Number of segments. A higher number means the ring will be more round. Minimum is `3`.\n\t * @param {number} [phiSegments=1] - Number of segments per ring segment. Minimum is `1`.\n\t * @param {number} [thetaStart=0] - Starting angle in radians.\n\t * @param {number} [thetaLength=Math.PI*2] - Central angle in radians.\n\t */\n\tconstructor( innerRadius = 0.5, outerRadius = 1, thetaSegments = 32, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'RingGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthetaSegments = Math.max( 3, thetaSegments );\n\t\tphiSegments = Math.max( 1, phiSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// some helper variables\n\n\t\tlet radius = innerRadius;\n\t\tconst radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\t\tconst vertex = new Vector3();\n\t\tconst uv = new Vector2();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let j = 0; j <= phiSegments; j ++ ) {\n\n\t\t\tfor ( let i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\t\t// values are generate from the inside of the ring to the outside\n\n\t\t\t\tconst segment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t}\n\n\t\t\t// increase the radius for next row of vertices\n\n\t\t\tradius += radiusStep;\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let j = 0; j < phiSegments; j ++ ) {\n\n\t\t\tconst thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n\t\t\tfor ( let i = 0; i < thetaSegments; i ++ ) {\n\n\t\t\t\tconst segment = i + thetaSegmentLevel;\n\n\t\t\t\tconst a = segment;\n\t\t\t\tconst b = segment + thetaSegments + 1;\n\t\t\t\tconst c = segment + thetaSegments + 2;\n\t\t\t\tconst d = segment + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {RingGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new RingGeometry( data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\n/**\n * Creates an one-sided polygonal geometry from one or more path shapes.\n *\n * ```js\n * const arcShape = new THREE.Shape()\n *\t.moveTo( 5, 1 )\n *\t.absarc( 1, 1, 4, 0, Math.PI * 2, false );\n *\n * const geometry = new THREE.ShapeGeometry( arcShape );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00, side: THREE.DoubleSide } );\n * const mesh = new THREE.Mesh( geometry, material ) ;\n * scene.add( mesh );\n * ```\n *\n * @augments BufferGeometry\n */\nclass ShapeGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new shape geometry.\n\t *\n\t * @param {Shape|Array<Shape>} [shapes] - A shape or an array of shapes.\n\t * @param {number} [curveSegments=12] - Number of segments per shape.\n\t */\n\tconstructor( shapes = new Shape( [ new Vector2( 0, 0.5 ), new Vector2( -0.5, -0.5 ), new Vector2( 0.5, -0.5 ) ] ), curveSegments = 12 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ShapeGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tlet groupStart = 0;\n\t\tlet groupCount = 0;\n\n\t\t// allow single and array values for \"shapes\" parameter\n\n\t\tif ( Array.isArray( shapes ) === false ) {\n\n\t\t\taddShape( shapes );\n\n\t\t} else {\n\n\t\t\tfor ( let i = 0; i < shapes.length; i ++ ) {\n\n\t\t\t\taddShape( shapes[ i ] );\n\n\t\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t\tgroupCount = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\n\t\t// helper functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tconst indexOffset = vertices.length / 3;\n\t\t\tconst points = shape.extractPoints( curveSegments );\n\n\t\t\tlet shapeVertices = points.shape;\n\t\t\tconst shapeHoles = points.holes;\n\n\t\t\t// check direction of vertices\n\n\t\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\n\n\t\t\t\tshapeVertices = shapeVertices.reverse();\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tconst shapeHole = shapeHoles[ i ];\n\n\t\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\n\n\t\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\n\n\t\t\t// join vertices of inner and outer paths to a single array\n\n\t\t\tfor ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tconst shapeHole = shapeHoles[ i ];\n\t\t\t\tshapeVertices = shapeVertices.concat( shapeHole );\n\n\t\t\t}\n\n\t\t\t// vertices, normals, uvs\n\n\t\t\tfor ( let i = 0, l = shapeVertices.length; i < l; i ++ ) {\n\n\t\t\t\tconst vertex = shapeVertices[ i ];\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, 0 );\n\t\t\t\tnormals.push( 0, 0, 1 );\n\t\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\n\n\t\t\t}\n\n\t\t\t// indices\n\n\t\t\tfor ( let i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tconst face = faces[ i ];\n\n\t\t\t\tconst a = face[ 0 ] + indexOffset;\n\t\t\t\tconst b = face[ 1 ] + indexOffset;\n\t\t\t\tconst c = face[ 2 ] + indexOffset;\n\n\t\t\t\tindices.push( a, b, c );\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tconst shapes = this.parameters.shapes;\n\n\t\treturn toJSON( shapes, data );\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @param {Array<Shape>} shapes - An array of shapes.\n\t * @return {ShapeGeometry} A new instance.\n\t */\n\tstatic fromJSON( data, shapes ) {\n\n\t\tconst geometryShapes = [];\n\n\t\tfor ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\tconst shape = shapes[ data.shapes[ j ] ];\n\n\t\t\tgeometryShapes.push( shape );\n\n\t\t}\n\n\t\treturn new ShapeGeometry( geometryShapes, data.curveSegments );\n\n\t}\n\n}\n\nfunction toJSON( shapes, data ) {\n\n\tdata.shapes = [];\n\n\tif ( Array.isArray( shapes ) ) {\n\n\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tconst shape = shapes[ i ];\n\n\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t}\n\n\t} else {\n\n\t\tdata.shapes.push( shapes.uuid );\n\n\t}\n\n\treturn data;\n\n}\n\n/**\n * A class for generating a sphere geometry.\n *\n * ```js\n * const geometry = new THREE.SphereGeometry( 15, 32, 16 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const sphere = new THREE.Mesh( geometry, material );\n * scene.add( sphere );\n * ```\n *\n * @augments BufferGeometry\n */\nclass SphereGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new sphere geometry.\n\t *\n\t * @param {number} [radius=1] - The sphere radius.\n\t * @param {number} [widthSegments=32] - The number of horizontal segments. Minimum value is `3`.\n\t * @param {number} [heightSegments=16] - The number of vertical segments. Minimum value is `2`.\n\t * @param {number} [phiStart=0] - The horizontal starting angle in radians.\n\t * @param {number} [phiLength=Math.PI*2] - The horizontal sweep angle size.\n\t * @param {number} [thetaStart=0] - The vertical starting angle in radians.\n\t * @param {number} [thetaLength=Math.PI] - The vertical sweep angle size.\n\t */\n\tconstructor( radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'SphereGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) );\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) );\n\n\t\tconst thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );\n\n\t\tlet index = 0;\n\t\tconst grid = [];\n\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let iy = 0; iy <= heightSegments; iy ++ ) {\n\n\t\t\tconst verticesRow = [];\n\n\t\t\tconst v = iy / heightSegments;\n\n\t\t\t// special case for the poles\n\n\t\t\tlet uOffset = 0;\n\n\t\t\tif ( iy === 0 && thetaStart === 0 ) {\n\n\t\t\t\tuOffset = 0.5 / widthSegments;\n\n\t\t\t} else if ( iy === heightSegments && thetaEnd === Math.PI ) {\n\n\t\t\t\tuOffset = -0.5 / widthSegments;\n\n\t\t\t}\n\n\t\t\tfor ( let ix = 0; ix <= widthSegments; ix ++ ) {\n\n\t\t\t\tconst u = ix / widthSegments;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.copy( vertex ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u + uOffset, 1 - v );\n\n\t\t\t\tverticesRow.push( index ++ );\n\n\t\t\t}\n\n\t\t\tgrid.push( verticesRow );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let iy = 0; iy < heightSegments; iy ++ ) {\n\n\t\t\tfor ( let ix = 0; ix < widthSegments; ix ++ ) {\n\n\t\t\t\tconst a = grid[ iy ][ ix + 1 ];\n\t\t\t\tconst b = grid[ iy ][ ix ];\n\t\t\t\tconst c = grid[ iy + 1 ][ ix ];\n\t\t\t\tconst d = grid[ iy + 1 ][ ix + 1 ];\n\n\t\t\t\tif ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );\n\t\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {SphereGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new SphereGeometry( data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\n/**\n * A geometry class for representing an tetrahedron.\n *\n * ```js\n * const geometry = new THREE.TetrahedronGeometry();\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const tetrahedron = new THREE.Mesh( geometry, material );\n * scene.add( tetrahedron );\n * ```\n *\n * @augments PolyhedronGeometry\n */\nclass TetrahedronGeometry extends PolyhedronGeometry {\n\n\t/**\n\t * Constructs a new tetrahedron geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the tetrahedron.\n\t * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a tetrahedron.\n\t */\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst vertices = [\n\t\t\t1, 1, 1, \t-1, -1, 1, \t-1, 1, -1, \t1, -1, -1\n\t\t];\n\n\t\tconst indices = [\n\t\t\t2, 1, 0, \t0, 3, 2,\t1, 3, 0,\t2, 3, 1\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'TetrahedronGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {TetrahedronGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new TetrahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\n/**\n * A geometry class for representing an torus.\n *\n * ```js\n * const geometry = new THREE.TorusGeometry( 10, 3, 16, 100 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const torus = new THREE.Mesh( geometry, material );\n * scene.add( torus );\n * ```\n *\n * @augments BufferGeometry\n */\nclass TorusGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new torus geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the torus, from the center of the torus to the center of the tube.\n\t * @param {number} [tube=0.4] - Radius of the tube. Must be smaller than `radius`.\n\t * @param {number} [radialSegments=12] - The number of radial segments.\n\t * @param {number} [tubularSegments=48] - The number of tubular segments.\n\t * @param {number} [arc=Math.PI*2] - Central angle in radians.\n\t */\n\tconstructor( radius = 1, tube = 0.4, radialSegments = 12, tubularSegments = 48, arc = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'TorusGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tradialSegments = Math.floor( radialSegments );\n\t\ttubularSegments = Math.floor( tubularSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst center = new Vector3();\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( let i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tconst u = i / tubularSegments * arc;\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\t\tcenter.y = radius * Math.sin( u );\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( let j = 1; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( let i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tconst a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\t\tconst b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\t\tconst c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\t\tconst d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {TorusGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new TorusGeometry( data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc );\n\n\t}\n\n}\n\n/**\n * Creates a torus knot, the particular shape of which is defined by a pair\n * of coprime integers, p and q. If p and q are not coprime, the result will\n * be a torus link.\n *\n * ```js\n * const geometry = new THREE.TorusKnotGeometry( 10, 3, 100, 16 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const torusKnot = new THREE.Mesh( geometry, material );\n * scene.add( torusKnot );\n * ```\n *\n * @augments BufferGeometry\n */\nclass TorusKnotGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new torus knot geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the torus knot.\n\t * @param {number} [tube=0.4] - Radius of the tube.\n\t * @param {number} [tubularSegments=64] - The number of tubular segments.\n\t * @param {number} [radialSegments=8] - The number of radial segments.\n\t * @param {number} [p=2] - This value determines, how many times the geometry winds around its axis of rotational symmetry.\n\t * @param {number} [q=3] - This value determines, how many times the geometry winds around a circle in the interior of the torus.\n\t */\n\tconstructor( radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p = 2, q = 3 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'TorusKnotGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\ttubularSegments = Math.floor( tubularSegments );\n\t\tradialSegments = Math.floor( radialSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\tconst P1 = new Vector3();\n\t\tconst P2 = new Vector3();\n\n\t\tconst B = new Vector3();\n\t\tconst T = new Vector3();\n\t\tconst N = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segment\n\n\t\t\tconst u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t\t// calculate orthonormal basis\n\n\t\t\tT.subVectors( P2, P1 );\n\t\t\tN.addVectors( P2, P1 );\n\t\t\tB.crossVectors( T, N );\n\t\t\tN.crossVectors( B, T );\n\n\t\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\t\tB.normalize();\n\t\t\tN.normalize();\n\n\t\t\tfor ( let j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\t\t\t\tconst cx = - tube * Math.cos( v );\n\t\t\t\tconst cy = tube * Math.sin( v );\n\n\t\t\t\t// now calculate the final vertex position.\n\t\t\t\t// first we orient the extrusion with our basis vectors, then we add it to the current position on the curve\n\n\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( let j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\tfor ( let i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tconst a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\tconst b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\tconst c = ( radialSegments + 1 ) * j + i;\n\t\t\t\tconst d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// this function calculates the current position on the torus curve\n\n\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\t\tconst cu = Math.cos( u );\n\t\t\tconst su = Math.sin( u );\n\t\t\tconst quOverP = q / p * u;\n\t\t\tconst cs = Math.cos( quOverP );\n\n\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {TorusKnotGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new TorusKnotGeometry( data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q );\n\n\t}\n\n}\n\n/**\n * Creates a tube that extrudes along a 3D curve.\n *\n * ```js\n * class CustomSinCurve extends THREE.Curve {\n *\n * \tgetPoint( t, optionalTarget = new THREE.Vector3() ) {\n *\n * \t\tconst tx = t * 3 - 1.5;\n * \t\tconst ty = Math.sin( 2 * Math.PI * t );\n * \t\tconst tz = 0;\n *\n * \t\treturn optionalTarget.set( tx, ty, tz );\n * \t}\n *\n * }\n *\n * const path = new CustomSinCurve( 10 );\n * const geometry = new THREE.TubeGeometry( path, 20, 2, 8, false );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n * const mesh = new THREE.Mesh( geometry, material );\n * scene.add( mesh );\n * ```\n *\n * @augments BufferGeometry\n */\nclass TubeGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new tube geometry.\n\t *\n\t * @param {Curve} [path=QuadraticBezierCurve3] - A 3D curve defining the path of the tube.\n\t * @param {number} [tubularSegments=64] - The number of segments that make up the tube.\n\t * @param {number} [radius=1] -The radius of the tube.\n\t * @param {number} [radialSegments=8] - The number of segments that make up the cross-section.\n\t * @param {boolean} [closed=false] - Whether the tube is closed or not.\n\t */\n\tconstructor( path = new QuadraticBezierCurve3( new Vector3( -1, -1, 0 ), new Vector3( -1, 1, 0 ), new Vector3( 1, 1, 0 ) ), tubularSegments = 64, radius = 1, radialSegments = 8, closed = false ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'TubeGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\tconst frames = path.computeFrenetFrames( tubularSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = frames.tangents;\n\t\tthis.normals = frames.normals;\n\t\tthis.binormals = frames.binormals;\n\n\t\t// helper variables\n\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\t\tconst uv = new Vector2();\n\t\tlet P = new Vector3();\n\n\t\t// buffer\n\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\t\tconst indices = [];\n\n\t\t// create buffer data\n\n\t\tgenerateBufferData();\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// functions\n\n\t\tfunction generateBufferData() {\n\n\t\t\tfor ( let i = 0; i < tubularSegments; i ++ ) {\n\n\t\t\t\tgenerateSegment( i );\n\n\t\t\t}\n\n\t\t\t// if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t// at the regular position on the given path\n\t\t\t//\n\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\t\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\n\n\t\t\t// uvs are generated in a separate function.\n\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\tgenerateUVs();\n\n\t\t\t// finally create faces\n\n\t\t\tgenerateIndices();\n\n\t\t}\n\n\t\tfunction generateSegment( i ) {\n\n\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\n\t\t\tP = path.getPointAt( i / tubularSegments, P );\n\n\t\t\t// retrieve corresponding normal and binormal\n\n\t\t\tconst N = frames.normals[ i ];\n\t\t\tconst B = frames.binormals[ i ];\n\n\t\t\t// generate normals and vertices for the current segment\n\n\t\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\tconst sin = Math.sin( v );\n\t\t\t\tconst cos = - Math.cos( v );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.x = ( cos * N.x + sin * B.x );\n\t\t\t\tnormal.y = ( cos * N.y + sin * B.y );\n\t\t\t\tnormal.z = ( cos * N.z + sin * B.z );\n\t\t\t\tnormal.normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\tvertex.z = P.z + radius * normal.z;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateIndices() {\n\n\t\t\tfor ( let j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\t\tfor ( let i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t\tconst a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\t\tconst b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\t\tconst c = ( radialSegments + 1 ) * j + i;\n\t\t\t\t\tconst d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tfor ( let i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\tuv.y = j / radialSegments;\n\n\t\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.path = this.parameters.path.toJSON();\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {TubeGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\n\t\t// User defined curves or instances of CurvePath will not be deserialized.\n\t\treturn new TubeGeometry(\n\t\t\tnew Curves[ data.path.type ]().fromJSON( data.path ),\n\t\t\tdata.tubularSegments,\n\t\t\tdata.radius,\n\t\t\tdata.radialSegments,\n\t\t\tdata.closed\n\t\t);\n\n\t}\n\n}\n\n/**\n * Can be used as a helper object to visualize a geometry as a wireframe.\n *\n * ```js\n * const geometry = new THREE.SphereGeometry();\n *\n * const wireframe = new THREE.WireframeGeometry( geometry );\n *\n * const line = new THREE.LineSegments( wireframe );\n * line.material.depthWrite = false;\n * line.material.opacity = 0.25;\n * line.material.transparent = true;\n *\n * scene.add( line );\n * ```\n *\n * Note: It is not yet possible to serialize/deserialize instances of this class.\n *\n * @augments BufferGeometry\n */\nclass WireframeGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new wireframe geometry.\n\t *\n\t * @param {?BufferGeometry} [geometry=null] - The geometry.\n\t */\n\tconstructor( geometry = null ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'WireframeGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tgeometry: geometry\n\t\t};\n\n\t\tif ( geometry !== null ) {\n\n\t\t\t// buffer\n\n\t\t\tconst vertices = [];\n\t\t\tconst edges = new Set();\n\n\t\t\t// helper variables\n\n\t\t\tconst start = new Vector3();\n\t\t\tconst end = new Vector3();\n\n\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t// indexed BufferGeometry\n\n\t\t\t\tconst position = geometry.attributes.position;\n\t\t\t\tconst indices = geometry.index;\n\t\t\t\tlet groups = geometry.groups;\n\n\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\n\n\t\t\t\t}\n\n\t\t\t\t// create a data structure that contains all edges without duplicates\n\n\t\t\t\tfor ( let o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\t\tconst group = groups[ o ];\n\n\t\t\t\t\tconst groupStart = group.start;\n\t\t\t\t\tconst groupCount = group.count;\n\n\t\t\t\t\tfor ( let i = groupStart, l = ( groupStart + groupCount ); i < l; i += 3 ) {\n\n\t\t\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\tconst index1 = indices.getX( i + j );\n\t\t\t\t\t\t\tconst index2 = indices.getX( i + ( j + 1 ) % 3 );\n\n\t\t\t\t\t\t\tstart.fromBufferAttribute( position, index1 );\n\t\t\t\t\t\t\tend.fromBufferAttribute( position, index2 );\n\n\t\t\t\t\t\t\tif ( isUniqueEdge( start, end, edges ) === true ) {\n\n\t\t\t\t\t\t\t\tvertices.push( start.x, start.y, start.z );\n\t\t\t\t\t\t\t\tvertices.push( end.x, end.y, end.z );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed BufferGeometry\n\n\t\t\t\tconst position = geometry.attributes.position;\n\n\t\t\t\tfor ( let i = 0, l = ( position.count / 3 ); i < l; i ++ ) {\n\n\t\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\n\t\t\t\t\t\tconst index1 = 3 * i + j;\n\t\t\t\t\t\tconst index2 = 3 * i + ( ( j + 1 ) % 3 );\n\n\t\t\t\t\t\tstart.fromBufferAttribute( position, index1 );\n\t\t\t\t\t\tend.fromBufferAttribute( position, index2 );\n\n\t\t\t\t\t\tif ( isUniqueEdge( start, end, edges ) === true ) {\n\n\t\t\t\t\t\t\tvertices.push( start.x, start.y, start.z );\n\t\t\t\t\t\t\tvertices.push( end.x, end.y, end.z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// build geometry\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n}\n\nfunction isUniqueEdge( start, end, edges ) {\n\n\tconst hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;\n\tconst hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`; // coincident edge\n\n\tif ( edges.has( hash1 ) === true || edges.has( hash2 ) === true ) {\n\n\t\treturn false;\n\n\t} else {\n\n\t\tedges.add( hash1 );\n\t\tedges.add( hash2 );\n\t\treturn true;\n\n\t}\n\n}\n\nvar Geometries = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tBoxGeometry: BoxGeometry,\n\tCapsuleGeometry: CapsuleGeometry,\n\tCircleGeometry: CircleGeometry,\n\tConeGeometry: ConeGeometry,\n\tCylinderGeometry: CylinderGeometry,\n\tDodecahedronGeometry: DodecahedronGeometry,\n\tEdgesGeometry: EdgesGeometry,\n\tExtrudeGeometry: ExtrudeGeometry,\n\tIcosahedronGeometry: IcosahedronGeometry,\n\tLatheGeometry: LatheGeometry,\n\tOctahedronGeometry: OctahedronGeometry,\n\tPlaneGeometry: PlaneGeometry,\n\tPolyhedronGeometry: PolyhedronGeometry,\n\tRingGeometry: RingGeometry,\n\tShapeGeometry: ShapeGeometry,\n\tSphereGeometry: SphereGeometry,\n\tTetrahedronGeometry: TetrahedronGeometry,\n\tTorusGeometry: TorusGeometry,\n\tTorusKnotGeometry: TorusKnotGeometry,\n\tTubeGeometry: TubeGeometry,\n\tWireframeGeometry: WireframeGeometry\n});\n\n/**\n * This material can receive shadows, but otherwise is completely transparent.\n *\n * ```js\n * const geometry = new THREE.PlaneGeometry( 2000, 2000 );\n * geometry.rotateX( - Math.PI / 2 );\n *\n * const material = new THREE.ShadowMaterial();\n * material.opacity = 0.2;\n *\n * const plane = new THREE.Mesh( geometry, material );\n * plane.position.y = -200;\n * plane.receiveShadow = true;\n * scene.add( plane );\n * ```\n *\n * @augments Material\n */\nclass ShadowMaterial extends Material {\n\n\t/**\n\t * Constructs a new shadow material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isShadowMaterial = true;\n\n\t\tthis.type = 'ShadowMaterial';\n\n\t\t/**\n\t\t * Color of the material.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (0,0,0)\n\t\t */\n\t\tthis.color = new Color( 0x000000 );\n\n\t\t/**\n\t\t * Overwritten since shadow materials are transparent\n\t\t * by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.transparent = true;\n\n\t\t/**\n\t\t * Whether the material is affected by fog or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * This class works just like {@link ShaderMaterial}, except that definitions\n * of built-in uniforms and attributes are not automatically prepended to the\n * GLSL shader code.\n *\n * `RawShaderMaterial` can only be used with {@link WebGLRenderer}.\n *\n * @augments ShaderMaterial\n */\nclass RawShaderMaterial extends ShaderMaterial {\n\n\t/**\n\t * Constructs a new raw shader material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper( parameters );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isRawShaderMaterial = true;\n\n\t\tthis.type = 'RawShaderMaterial';\n\n\t}\n\n}\n\n/**\n * A standard physically based material, using Metallic-Roughness workflow.\n *\n * Physically based rendering (PBR) has recently become the standard in many\n * 3D applications, such as [Unity]{@link https://blogs.unity3d.com/2014/10/29/physically-based-shading-in-unity-5-a-primer/},\n * [Unreal]{@link https://docs.unrealengine.com/latest/INT/Engine/Rendering/Materials/PhysicallyBased/} and\n * [3D Studio Max]{@link http://area.autodesk.com/blogs/the-3ds-max-blog/what039s-new-for-rendering-in-3ds-max-2017}.\n *\n * This approach differs from older approaches in that instead of using\n * approximations for the way in which light interacts with a surface, a\n * physically correct model is used. The idea is that, instead of tweaking\n * materials to look good under specific lighting, a material can be created\n * that will react 'correctly' under all lighting scenarios.\n *\n * In practice this gives a more accurate and realistic looking result than\n * the {@link MeshLambertMaterial} or {@link MeshPhongMaterial}, at the cost of\n * being somewhat more computationally expensive. `MeshStandardMaterial` uses per-fragment\n * shading.\n *\n * Note that for best results you should always specify an environment map when using this material.\n *\n * For a non-technical introduction to the concept of PBR and how to set up a\n * PBR material, check out these articles by the people at [marmoset]{@link https://www.marmoset.co}:\n *\n * - [Basic Theory of Physically Based Rendering]{@link https://www.marmoset.co/posts/basic-theory-of-physically-based-rendering/}\n * - [Physically Based Rendering and You Can Too]{@link https://www.marmoset.co/posts/physically-based-rendering-and-you-can-too/}\n *\n * Technical details of the approach used in three.js (and most other PBR systems) can be found is this\n * [paper from Disney]{@link https://media.disneyanimation.com/uploads/production/publication_asset/48/asset/s2012_pbs_disney_brdf_notes_v3.pdf}\n * (pdf), by Brent Burley.\n *\n * @augments Material\n */\nclass MeshStandardMaterial extends Material {\n\n\t/**\n\t * Constructs a new mesh standard material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMeshStandardMaterial = true;\n\n\t\tthis.type = 'MeshStandardMaterial';\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\t/**\n\t\t * Color of the material.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\t/**\n\t\t * How rough the material appears. `0.0` means a smooth mirror reflection, `1.0`\n\t\t * means fully diffuse. If `roughnessMap` is also provided,\n\t\t * both values are multiplied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.roughness = 1.0;\n\n\t\t/**\n\t\t * How much the material is like a metal. Non-metallic materials such as wood\n\t\t * or stone use `0.0`, metallic use `1.0`, with nothing (usually) in between.\n\t\t * A value between `0.0` and `1.0` could be used for a rusty metal look.\n\t\t * If `metalnessMap` is also provided, both values are multiplied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.metalness = 0.0;\n\n\t\t/**\n\t\t * The color map. May optionally include an alpha channel, typically combined\n\t\t * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n\t\t * color is modulated by the diffuse `color`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.map = null;\n\n\t\t/**\n\t\t * The light map. Requires a second set of UVs.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.lightMap = null;\n\n\t\t/**\n\t\t * Intensity of the baked light.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\t/**\n\t\t * The red channel of this texture is used as the ambient occlusion map.\n\t\t * Requires a second set of UVs.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.aoMap = null;\n\n\t\t/**\n\t\t * Intensity of the ambient occlusion effect. Range is `[0,1]`, where `0`\n\t\t * disables ambient occlusion. Where intensity is `1` and the AO map's\n\t\t * red channel is also `1`, ambient light is fully occluded on a surface.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\t/**\n\t\t * Emissive (light) color of the material, essentially a solid color\n\t\t * unaffected by other lighting.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (0,0,0)\n\t\t */\n\t\tthis.emissive = new Color( 0x000000 );\n\n\t\t/**\n\t\t * Intensity of the emissive light. Modulates the emissive color.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.emissiveIntensity = 1.0;\n\n\t\t/**\n\t\t * Set emissive (glow) map. The emissive map color is modulated by the\n\t\t * emissive color and the emissive intensity. If you have an emissive map,\n\t\t * be sure to set the emissive color to something other than black.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.emissiveMap = null;\n\n\t\t/**\n\t\t * The texture to create a bump map. The black and white values map to the\n\t\t * perceived depth in relation to the lights. Bump doesn't actually affect\n\t\t * the geometry of the object, only the lighting. If a normal map is defined\n\t\t * this will be ignored.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.bumpMap = null;\n\n\t\t/**\n\t\t * How much the bump map affects the material. Typical range is `[0,1]`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.bumpScale = 1;\n\n\t\t/**\n\t\t * The texture to create a normal map. The RGB values affect the surface\n\t\t * normal for each pixel fragment and change the way the color is lit. Normal\n\t\t * maps do not change the actual shape of the surface, only the lighting. In\n\t\t * case the material has a normal map authored using the left handed\n\t\t * convention, the `y` component of `normalScale` should be negated to compensate\n\t\t * for the different handedness.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.normalMap = null;\n\n\t\t/**\n\t\t * The type of normal map.\n\t\t *\n\t\t * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}\n\t\t * @default TangentSpaceNormalMap\n\t\t */\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\n\t\t/**\n\t\t * How much the normal map affects the material. Typical value range is `[0,1]`.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (1,1)\n\t\t */\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\t/**\n\t\t * The displacement map affects the position of the mesh's vertices. Unlike\n\t\t * other maps which only affect the light and shade of the material the\n\t\t * displaced vertices can cast shadows, block other objects, and otherwise\n\t\t * act as real geometry. The displacement texture is an image where the value\n\t\t * of each pixel (white being the highest) is mapped against, and\n\t\t * repositions, the vertices of the mesh.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.displacementMap = null;\n\n\t\t/**\n\t\t * How much the displacement map affects the mesh (where black is no\n\t\t * displacement, and white is maximum displacement). Without a displacement\n\t\t * map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.displacementScale = 1;\n\n\t\t/**\n\t\t * The offset of the displacement map's values on the mesh's vertices.\n\t\t * The bias is added to the scaled sample of the displacement map.\n\t\t * Without a displacement map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.displacementBias = 0;\n\n\t\t/**\n\t\t * The green channel of this texture is used to alter the roughness of the\n\t\t * material.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.roughnessMap = null;\n\n\t\t/**\n\t\t * The blue channel of this texture is used to alter the metalness of the\n\t\t * material.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.metalnessMap = null;\n\n\t\t/**\n\t\t * The alpha map is a grayscale texture that controls the opacity across the\n\t\t * surface (black: fully transparent; white: fully opaque).\n\t\t *\n\t\t * Only the color of the texture is used, ignoring the alpha channel if one\n\t\t * exists. For RGB and RGBA textures, the renderer will use the green channel\n\t\t * when sampling this texture due to the extra bit of precision provided for\n\t\t * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n\t\t * luminance/alpha textures will also still work as expected.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.alphaMap = null;\n\n\t\t/**\n\t\t * The environment map. To ensure a physically correct rendering, environment maps\n\t\t * are internally pre-processed with {@link PMREMGenerator}.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.envMap = null;\n\n\t\t/**\n\t\t * The rotation of the environment map in radians.\n\t\t *\n\t\t * @type {Euler}\n\t\t * @default (0,0,0)\n\t\t */\n\t\tthis.envMapRotation = new Euler();\n\n\t\t/**\n\t\t * Scales the effect of the environment map by multiplying its color.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.envMapIntensity = 1.0;\n\n\t\t/**\n\t\t * Renders the geometry as a wireframe.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.wireframe = false;\n\n\t\t/**\n\t\t * Controls the thickness of the wireframe.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.wireframeLinewidth = 1;\n\n\t\t/**\n\t\t * Defines appearance of wireframe ends.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('round'|'bevel'|'miter')}\n\t\t * @default 'round'\n\t\t */\n\t\tthis.wireframeLinecap = 'round';\n\n\t\t/**\n\t\t * Defines appearance of wireframe joints.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('round'|'bevel'|'miter')}\n\t\t * @default 'round'\n\t\t */\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\t/**\n\t\t * Whether the material is rendered with flat shading or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.flatShading = false;\n\n\t\t/**\n\t\t * Whether the material is affected by fog or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.color.copy( source.color );\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.roughnessMap = source.roughnessMap;\n\n\t\tthis.metalnessMap = source.metalnessMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapRotation.copy( source.envMapRotation );\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * An extension of the {@link MeshStandardMaterial}, providing more advanced\n * physically-based rendering properties:\n *\n * - Anisotropy: Ability to represent the anisotropic property of materials\n * as observable with brushed metals.\n * - Clearcoat: Some materials — like car paints, carbon fiber, and wet surfaces — require\n * a clear, reflective layer on top of another layer that may be irregular or rough.\n * Clearcoat approximates this effect, without the need for a separate transparent surface.\n * - Iridescence: Allows to render the effect where hue varies  depending on the viewing\n * angle and illumination angle. This can be seen on soap bubbles, oil films, or on the\n * wings of many insects.\n * - Physically-based transparency: One limitation of {@link Material#opacity} is that highly\n * transparent materials are less reflective. Physically-based transmission provides a more\n * realistic option for thin, transparent surfaces like glass.\n * - Advanced reflectivity: More flexible reflectivity for non-metallic materials.\n * - Sheen: Can be used for representing cloth and fabric materials.\n *\n * As a result of these complex shading features, `MeshPhysicalMaterial` has a\n * higher performance cost, per pixel, than other three.js materials. Most\n * effects are disabled by default, and add cost as they are enabled. For\n * best results, always specify an environment map when using this material.\n *\n * @augments MeshStandardMaterial\n */\nclass MeshPhysicalMaterial extends MeshStandardMaterial {\n\n\t/**\n\t * Constructs a new mesh physical material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMeshPhysicalMaterial = true;\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.type = 'MeshPhysicalMaterial';\n\n\t\t/**\n\t\t * The rotation of the anisotropy in tangent, bitangent space, measured in radians\n\t\t * counter-clockwise from the tangent. When `anisotropyMap` is present, this\n\t\t * property provides additional rotation to the vectors in the texture.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.anisotropyRotation = 0;\n\n\t\t/**\n\t\t * Red and green channels represent the anisotropy direction in `[-1, 1]` tangent,\n\t\t * bitangent space, to be rotated by `anisotropyRotation`. The blue channel\n\t\t * contains strength as `[0, 1]` to be multiplied by `anisotropy`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.anisotropyMap = null;\n\n\t\t/**\n\t\t * The red channel of this texture is multiplied against `clearcoat`,\n\t\t * for per-pixel control over a coating's intensity.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.clearcoatMap = null;\n\n\t\t/**\n\t\t * Roughness of the clear coat layer, from `0.0` to `1.0`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.clearcoatRoughness = 0.0;\n\n\t\t/**\n\t\t * The green channel of this texture is multiplied against\n\t\t * `clearcoatRoughness`, for per-pixel control over a coating's roughness.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.clearcoatRoughnessMap = null;\n\n\t\t/**\n\t\t * How much `clearcoatNormalMap` affects the clear coat layer, from\n\t\t * `(0,0)` to `(1,1)`.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (1,1)\n\t\t */\n\t\tthis.clearcoatNormalScale = new Vector2( 1, 1 );\n\n\t\t/**\n\t\t * Can be used to enable independent normals for the clear coat layer.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.clearcoatNormalMap = null;\n\n\t\t/**\n\t\t * Index-of-refraction for non-metallic materials, from `1.0` to `2.333`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1.5\n\t\t */\n\t\tthis.ior = 1.5;\n\n\t\t/**\n\t\t * Degree of reflectivity, from `0.0` to `1.0`. Default is `0.5`, which\n\t\t * corresponds to an index-of-refraction of `1.5`.\n\t\t *\n\t\t * This models the reflectivity of non-metallic materials. It has no effect\n\t\t * when `metalness` is `1.0`\n\t\t *\n\t\t * @name MeshPhysicalMaterial#reflectivity\n\t\t * @type {number}\n\t\t * @default 0.5\n\t\t */\n\t\tObject.defineProperty( this, 'reflectivity', {\n\t\t\tget: function () {\n\n\t\t\t\treturn ( clamp( 2.5 * ( this.ior - 1 ) / ( this.ior + 1 ), 0, 1 ) );\n\n\t\t\t},\n\t\t\tset: function ( reflectivity ) {\n\n\t\t\t\tthis.ior = ( 1 + 0.4 * reflectivity ) / ( 1 - 0.4 * reflectivity );\n\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * The red channel of this texture is multiplied against `iridescence`, for per-pixel\n\t\t * control over iridescence.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.iridescenceMap = null;\n\n\t\t/**\n\t\t * Strength of the iridescence RGB color shift effect, represented by an index-of-refraction.\n\t\t * Between `1.0` to `2.333`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1.3\n\t\t */\n\t\tthis.iridescenceIOR = 1.3;\n\n\t\t/**\n\t\t *Array of exactly 2 elements, specifying minimum and maximum thickness of the iridescence layer.\n\t\t Thickness of iridescence layer has an equivalent effect of the one `thickness` has on `ior`.\n\t\t *\n\t\t * @type {Array<number,number>}\n\t\t * @default [100,400]\n\t\t */\n\t\tthis.iridescenceThicknessRange = [ 100, 400 ];\n\n\t\t/**\n\t\t * A texture that defines the thickness of the iridescence layer, stored in the green channel.\n\t\t * Minimum and maximum values of thickness are defined by `iridescenceThicknessRange` array:\n\t\t * - `0.0` in the green channel will result in thickness equal to first element of the array.\n\t\t * - `1.0` in the green channel will result in thickness equal to second element of the array.\n\t\t * - Values in-between will linearly interpolate between the elements of the array.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.iridescenceThicknessMap = null;\n\n\t\t/**\n\t\t * The sheen tint.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (0,0,0)\n\t\t */\n\t\tthis.sheenColor = new Color( 0x000000 );\n\n\t\t/**\n\t\t * The RGB channels of this texture are multiplied against  `sheenColor`, for per-pixel control\n\t\t * over sheen tint.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.sheenColorMap = null;\n\n\t\t/**\n\t\t * Roughness of the sheen layer, from `0.0` to `1.0`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.sheenRoughness = 1.0;\n\n\t\t/**\n\t\t * The alpha channel of this texture is multiplied against `sheenRoughness`, for per-pixel control\n\t\t * over sheen roughness.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.sheenRoughnessMap = null;\n\n\t\t/**\n\t\t * The red channel of this texture is multiplied against `transmission`, for per-pixel control over\n\t\t * optical transparency.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.transmissionMap = null;\n\n\t\t/**\n\t\t * The thickness of the volume beneath the surface. The value is given in the\n\t\t * coordinate space of the mesh. If the value is `0` the material is\n\t\t * thin-walled. Otherwise the material is a volume boundary.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.thickness = 0;\n\n\t\t/**\n\t\t * A texture that defines the thickness, stored in the green channel. This will\n\t\t * be multiplied by `thickness`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.thicknessMap = null;\n\n\t\t/**\n\t\t * Density of the medium given as the average distance that light travels in\n\t\t * the medium before interacting with a particle. The value is given in world\n\t\t * space units, and must be greater than zero.\n\t\t *\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */\n\t\tthis.attenuationDistance = Infinity;\n\n\t\t/**\n\t\t * The color that white light turns into due to absorption when reaching the\n\t\t * attenuation distance.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */\n\t\tthis.attenuationColor = new Color( 1, 1, 1 );\n\n\t\t/**\n\t\t * A float that scales the amount of specular reflection for non-metals only.\n\t\t * When set to zero, the model is effectively Lambertian. From `0.0` to `1.0`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.specularIntensity = 1.0;\n\n\t\t/**\n\t\t * The alpha channel of this texture is multiplied against `specularIntensity`,\n\t\t * for per-pixel control over specular intensity.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.specularIntensityMap = null;\n\n\t\t/**\n\t\t * Tints the specular reflection at normal incidence for non-metals only.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */\n\t\tthis.specularColor = new Color( 1, 1, 1 );\n\n\t\t/**\n\t\t * The RGB channels of this texture are multiplied against `specularColor`,\n\t\t * for per-pixel control over specular color.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.specularColorMap = null;\n\n\t\tthis._anisotropy = 0;\n\t\tthis._clearcoat = 0;\n\t\tthis._dispersion = 0;\n\t\tthis._iridescence = 0;\n\t\tthis._sheen = 0.0;\n\t\tthis._transmission = 0;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\t/**\n\t * The anisotropy strength.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget anisotropy() {\n\n\t\treturn this._anisotropy;\n\n\t}\n\n\tset anisotropy( value ) {\n\n\t\tif ( this._anisotropy > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._anisotropy = value;\n\n\t}\n\n\t/**\n\t * Represents the intensity of the clear coat layer, from `0.0` to `1.0`. Use\n\t * clear coat related properties to enable multilayer materials that have a\n\t * thin translucent layer over the base layer.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget clearcoat() {\n\n\t\treturn this._clearcoat;\n\n\t}\n\n\tset clearcoat( value ) {\n\n\t\tif ( this._clearcoat > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._clearcoat = value;\n\n\t}\n\t/**\n\t * The intensity of the iridescence layer, simulating RGB color shift based on the angle between\n\t * the surface and the viewer, from `0.0` to `1.0`.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget iridescence() {\n\n\t\treturn this._iridescence;\n\n\t}\n\n\tset iridescence( value ) {\n\n\t\tif ( this._iridescence > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._iridescence = value;\n\n\t}\n\n\t/**\n\t * Defines the strength of the angular separation of colors (chromatic aberration) transmitting\n\t * through a relatively clear volume. Any value zero or larger is valid, the typical range of\n\t * realistic values is `[0, 1]`. This property can be only be used with transmissive objects.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget dispersion() {\n\n\t\treturn this._dispersion;\n\n\t}\n\n\tset dispersion( value ) {\n\n\t\tif ( this._dispersion > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._dispersion = value;\n\n\t}\n\n\t/**\n\t * The intensity of the sheen layer, from `0.0` to `1.0`.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget sheen() {\n\n\t\treturn this._sheen;\n\n\t}\n\n\tset sheen( value ) {\n\n\t\tif ( this._sheen > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._sheen = value;\n\n\t}\n\n\t/**\n\t * Degree of transmission (or optical transparency), from `0.0` to `1.0`.\n\t *\n\t * Thin, transparent or semitransparent, plastic or glass materials remain\n\t * largely reflective even if they are fully transmissive. The transmission\n\t * property can be used to model these materials.\n\t *\n\t * When transmission is non-zero, `opacity` should be  set to `1`.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget transmission() {\n\n\t\treturn this._transmission;\n\n\t}\n\n\tset transmission( value ) {\n\n\t\tif ( this._transmission > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._transmission = value;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.anisotropy = source.anisotropy;\n\t\tthis.anisotropyRotation = source.anisotropyRotation;\n\t\tthis.anisotropyMap = source.anisotropyMap;\n\n\t\tthis.clearcoat = source.clearcoat;\n\t\tthis.clearcoatMap = source.clearcoatMap;\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\t\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\tthis.clearcoatNormalScale.copy( source.clearcoatNormalScale );\n\n\t\tthis.dispersion = source.dispersion;\n\t\tthis.ior = source.ior;\n\n\t\tthis.iridescence = source.iridescence;\n\t\tthis.iridescenceMap = source.iridescenceMap;\n\t\tthis.iridescenceIOR = source.iridescenceIOR;\n\t\tthis.iridescenceThicknessRange = [ ...source.iridescenceThicknessRange ];\n\t\tthis.iridescenceThicknessMap = source.iridescenceThicknessMap;\n\n\t\tthis.sheen = source.sheen;\n\t\tthis.sheenColor.copy( source.sheenColor );\n\t\tthis.sheenColorMap = source.sheenColorMap;\n\t\tthis.sheenRoughness = source.sheenRoughness;\n\t\tthis.sheenRoughnessMap = source.sheenRoughnessMap;\n\n\t\tthis.transmission = source.transmission;\n\t\tthis.transmissionMap = source.transmissionMap;\n\n\t\tthis.thickness = source.thickness;\n\t\tthis.thicknessMap = source.thicknessMap;\n\t\tthis.attenuationDistance = source.attenuationDistance;\n\t\tthis.attenuationColor.copy( source.attenuationColor );\n\n\t\tthis.specularIntensity = source.specularIntensity;\n\t\tthis.specularIntensityMap = source.specularIntensityMap;\n\t\tthis.specularColor.copy( source.specularColor );\n\t\tthis.specularColorMap = source.specularColorMap;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A material for shiny surfaces with specular highlights.\n *\n * The material uses a non-physically based [Blinn-Phong]{@link https://en.wikipedia.org/wiki/Blinn-Phong_shading_model}\n * model for calculating reflectance. Unlike the Lambertian model used in the\n * {@link MeshLambertMaterial} this can simulate shiny surfaces with specular\n * highlights (such as varnished wood). `MeshPhongMaterial` uses per-fragment shading.\n *\n * Performance will generally be greater when using this material over the\n * {@link MeshStandardMaterial} or {@link MeshPhysicalMaterial}, at the cost of\n * some graphical accuracy.\n *\n * @augments Material\n */\nclass MeshPhongMaterial extends Material {\n\n\t/**\n\t * Constructs a new mesh phong material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMeshPhongMaterial = true;\n\n\t\tthis.type = 'MeshPhongMaterial';\n\n\t\t/**\n\t\t * Color of the material.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\t/**\n\t\t * Specular color of the material. The default color is set to `0x111111` (very dark grey)\n\t\t *\n\t\t * This defines how shiny the material is and the color of its shine.\n\t\t *\n\t\t * @type {Color}\n\t\t */\n\t\tthis.specular = new Color( 0x111111 );\n\n\t\t/**\n\t\t * How shiny the specular highlight is; a higher value gives a sharper highlight.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 30\n\t\t */\n\t\tthis.shininess = 30;\n\n\t\t/**\n\t\t * The color map. May optionally include an alpha channel, typically combined\n\t\t * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n\t\t * color is modulated by the diffuse `color`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.map = null;\n\n\t\t/**\n\t\t * The light map. Requires a second set of UVs.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.lightMap = null;\n\n\t\t/**\n\t\t * Intensity of the baked light.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\t/**\n\t\t * The red channel of this texture is used as the ambient occlusion map.\n\t\t * Requires a second set of UVs.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.aoMap = null;\n\n\t\t/**\n\t\t * Intensity of the ambient occlusion effect. Range is `[0,1]`, where `0`\n\t\t * disables ambient occlusion. Where intensity is `1` and the AO map's\n\t\t * red channel is also `1`, ambient light is fully occluded on a surface.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\t/**\n\t\t * Emissive (light) color of the material, essentially a solid color\n\t\t * unaffected by other lighting.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (0,0,0)\n\t\t */\n\t\tthis.emissive = new Color( 0x000000 );\n\n\t\t/**\n\t\t * Intensity of the emissive light. Modulates the emissive color.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.emissiveIntensity = 1.0;\n\n\t\t/**\n\t\t * Set emissive (glow) map. The emissive map color is modulated by the\n\t\t * emissive color and the emissive intensity. If you have an emissive map,\n\t\t * be sure to set the emissive color to something other than black.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.emissiveMap = null;\n\n\t\t/**\n\t\t * The texture to create a bump map. The black and white values map to the\n\t\t * perceived depth in relation to the lights. Bump doesn't actually affect\n\t\t * the geometry of the object, only the lighting. If a normal map is defined\n\t\t * this will be ignored.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.bumpMap = null;\n\n\t\t/**\n\t\t * How much the bump map affects the material. Typical range is `[0,1]`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.bumpScale = 1;\n\n\t\t/**\n\t\t * The texture to create a normal map. The RGB values affect the surface\n\t\t * normal for each pixel fragment and change the way the color is lit. Normal\n\t\t * maps do not change the actual shape of the surface, only the lighting. In\n\t\t * case the material has a normal map authored using the left handed\n\t\t * convention, the `y` component of `normalScale` should be negated to compensate\n\t\t * for the different handedness.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.normalMap = null;\n\n\t\t/**\n\t\t * The type of normal map.\n\t\t *\n\t\t * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}\n\t\t * @default TangentSpaceNormalMap\n\t\t */\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\n\t\t/**\n\t\t * How much the normal map affects the material. Typical value range is `[0,1]`.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (1,1)\n\t\t */\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\t/**\n\t\t * The displacement map affects the position of the mesh's vertices. Unlike\n\t\t * other maps which only affect the light and shade of the material the\n\t\t * displaced vertices can cast shadows, block other objects, and otherwise\n\t\t * act as real geometry. The displacement texture is an image where the value\n\t\t * of each pixel (white being the highest) is mapped against, and\n\t\t * repositions, the vertices of the mesh.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.displacementMap = null;\n\n\t\t/**\n\t\t * How much the displacement map affects the mesh (where black is no\n\t\t * displacement, and white is maximum displacement). Without a displacement\n\t\t * map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.displacementScale = 1;\n\n\t\t/**\n\t\t * The offset of the displacement map's values on the mesh's vertices.\n\t\t * The bias is added to the scaled sample of the displacement map.\n\t\t * Without a displacement map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.displacementBias = 0;\n\n\t\t/**\n\t\t * The specular map value affects both how much the specular surface\n\t\t * highlight contributes and how much of the environment map affects the\n\t\t * surface.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.specularMap = null;\n\n\t\t/**\n\t\t * The alpha map is a grayscale texture that controls the opacity across the\n\t\t * surface (black: fully transparent; white: fully opaque).\n\t\t *\n\t\t * Only the color of the texture is used, ignoring the alpha channel if one\n\t\t * exists. For RGB and RGBA textures, the renderer will use the green channel\n\t\t * when sampling this texture due to the extra bit of precision provided for\n\t\t * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n\t\t * luminance/alpha textures will also still work as expected.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.alphaMap = null;\n\n\t\t/**\n\t\t * The environment map.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.envMap = null;\n\n\t\t/**\n\t\t * The rotation of the environment map in radians.\n\t\t *\n\t\t * @type {Euler}\n\t\t * @default (0,0,0)\n\t\t */\n\t\tthis.envMapRotation = new Euler();\n\n\t\t/**\n\t\t * How to combine the result of the surface's color with the environment map, if any.\n\t\t *\n\t\t * When set to `MixOperation`, the {@link MeshBasicMaterial#reflectivity} is used to\n\t\t * blend between the two colors.\n\t\t *\n\t\t * @type {(MultiplyOperation|MixOperation|AddOperation)}\n\t\t * @default MultiplyOperation\n\t\t */\n\t\tthis.combine = MultiplyOperation;\n\n\t\t/**\n\t\t * How much the environment map affects the surface.\n\t\t * The valid range is between `0` (no reflections) and `1` (full reflections).\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.reflectivity = 1;\n\n\t\t/**\n\t\t * The index of refraction (IOR) of air (approximately 1) divided by the\n\t\t * index of refraction of the material. It is used with environment mapping\n\t\t * modes {@link CubeRefractionMapping} and {@link EquirectangularRefractionMapping}.\n\t\t * The refraction ratio should not exceed `1`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.98\n\t\t */\n\t\tthis.refractionRatio = 0.98;\n\n\t\t/**\n\t\t * Renders the geometry as a wireframe.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.wireframe = false;\n\n\t\t/**\n\t\t * Controls the thickness of the wireframe.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.wireframeLinewidth = 1;\n\n\t\t/**\n\t\t * Defines appearance of wireframe ends.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('round'|'bevel'|'miter')}\n\t\t * @default 'round'\n\t\t */\n\t\tthis.wireframeLinecap = 'round';\n\n\t\t/**\n\t\t * Defines appearance of wireframe joints.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('round'|'bevel'|'miter')}\n\t\t * @default 'round'\n\t\t */\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\t/**\n\t\t * Whether the material is rendered with flat shading or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.flatShading = false;\n\n\t\t/**\n\t\t * Whether the material is affected by fog or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.specular.copy( source.specular );\n\t\tthis.shininess = source.shininess;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapRotation.copy( source.envMapRotation );\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A material implementing toon shading.\n *\n * @augments Material\n */\nclass MeshToonMaterial extends Material {\n\n\t/**\n\t * Constructs a new mesh toon material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMeshToonMaterial = true;\n\n\t\tthis.defines = { 'TOON': '' };\n\n\t\tthis.type = 'MeshToonMaterial';\n\n\t\t/**\n\t\t * Color of the material.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */\n\t\tthis.color = new Color( 0xffffff );\n\n\t\t/**\n\t\t * The color map. May optionally include an alpha channel, typically combined\n\t\t * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n\t\t * color is modulated by the diffuse `color`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.map = null;\n\n\t\t/**\n\t\t * Gradient map for toon shading. It's required to set\n\t\t * {@link Texture#minFilter} and {@link Texture#magFilter} to {@linkNearestFilter}\n\t\t * when using this type of texture.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.gradientMap = null;\n\n\t\t/**\n\t\t * The light map. Requires a second set of UVs.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.lightMap = null;\n\n\t\t/**\n\t\t * Intensity of the baked light.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\t/**\n\t\t * The red channel of this texture is used as the ambient occlusion map.\n\t\t * Requires a second set of UVs.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.aoMap = null;\n\n\t\t/**\n\t\t * Intensity of the ambient occlusion effect. Range is `[0,1]`, where `0`\n\t\t * disables ambient occlusion. Where intensity is `1` and the AO map's\n\t\t * red channel is also `1`, ambient light is fully occluded on a surface.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\t/**\n\t\t * Emissive (light) color of the material, essentially a solid color\n\t\t * unaffected by other lighting.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (0,0,0)\n\t\t */\n\t\tthis.emissive = new Color( 0x000000 );\n\n\t\t/**\n\t\t * Intensity of the emissive light. Modulates the emissive color.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.emissiveIntensity = 1.0;\n\n\t\t/**\n\t\t * Set emissive (glow) map. The emissive map color is modulated by the\n\t\t * emissive color and the emissive intensity. If you have an emissive map,\n\t\t * be sure to set the emissive color to something other than black.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.emissiveMap = null;\n\n\t\t/**\n\t\t * The texture to create a bump map. The black and white values map to the\n\t\t * perceived depth in relation to the lights. Bump doesn't actually affect\n\t\t * the geometry of the object, only the lighting. If a normal map is defined\n\t\t * this will be ignored.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.bumpMap = null;\n\n\t\t/**\n\t\t * How much the bump map affects the material. Typical range is `[0,1]`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.bumpScale = 1;\n\n\t\t/**\n\t\t * The texture to create a normal map. The RGB values affect the surface\n\t\t * normal for each pixel fragment and change the way the color is lit. Normal\n\t\t * maps do not change the actual shape of the surface, only the lighting. In\n\t\t * case the material has a normal map authored using the left handed\n\t\t * convention, the `y` component of `normalScale` should be negated to compensate\n\t\t * for the different handedness.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.normalMap = null;\n\n\t\t/**\n\t\t * The type of normal map.\n\t\t *\n\t\t * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}\n\t\t * @default TangentSpaceNormalMap\n\t\t */\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\n\t\t/**\n\t\t * How much the normal map affects the material. Typical value range is `[0,1]`.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (1,1)\n\t\t */\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\t/**\n\t\t * The displacement map affects the position of the mesh's vertices. Unlike\n\t\t * other maps which only affect the light and shade of the material the\n\t\t * displaced vertices can cast shadows, block other objects, and otherwise\n\t\t * act as real geometry. The displacement texture is an image where the value\n\t\t * of each pixel (white being the highest) is mapped against, and\n\t\t * repositions, the vertices of the mesh.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.displacementMap = null;\n\n\t\t/**\n\t\t * How much the displacement map affects the mesh (where black is no\n\t\t * displacement, and white is maximum displacement). Without a displacement\n\t\t * map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.displacementScale = 1;\n\n\t\t/**\n\t\t * The offset of the displacement map's values on the mesh's vertices.\n\t\t * The bias is added to the scaled sample of the displacement map.\n\t\t * Without a displacement map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.displacementBias = 0;\n\n\t\t/**\n\t\t * The alpha map is a grayscale texture that controls the opacity across the\n\t\t * surface (black: fully transparent; white: fully opaque).\n\t\t *\n\t\t * Only the color of the texture is used, ignoring the alpha channel if one\n\t\t * exists. For RGB and RGBA textures, the renderer will use the green channel\n\t\t * when sampling this texture due to the extra bit of precision provided for\n\t\t * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n\t\t * luminance/alpha textures will also still work as expected.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.alphaMap = null;\n\n\t\t/**\n\t\t * Renders the geometry as a wireframe.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.wireframe = false;\n\n\t\t/**\n\t\t * Controls the thickness of the wireframe.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.wireframeLinewidth = 1;\n\n\t\t/**\n\t\t * Defines appearance of wireframe ends.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('round'|'bevel'|'miter')}\n\t\t * @default 'round'\n\t\t */\n\t\tthis.wireframeLinecap = 'round';\n\n\t\t/**\n\t\t * Defines appearance of wireframe joints.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('round'|'bevel'|'miter')}\n\t\t * @default 'round'\n\t\t */\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\t/**\n\t\t * Whether the material is affected by fog or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\t\tthis.gradientMap = source.gradientMap;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A material that maps the normal vectors to RGB colors.\n *\n * @augments Material\n */\nclass MeshNormalMaterial extends Material {\n\n\t/**\n\t * Constructs a new mesh normal material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMeshNormalMaterial = true;\n\n\t\tthis.type = 'MeshNormalMaterial';\n\n\t\t/**\n\t\t * The texture to create a bump map. The black and white values map to the\n\t\t * perceived depth in relation to the lights. Bump doesn't actually affect\n\t\t * the geometry of the object, only the lighting. If a normal map is defined\n\t\t * this will be ignored.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.bumpMap = null;\n\n\t\t/**\n\t\t * How much the bump map affects the material. Typical range is `[0,1]`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.bumpScale = 1;\n\n\t\t/**\n\t\t * The texture to create a normal map. The RGB values affect the surface\n\t\t * normal for each pixel fragment and change the way the color is lit. Normal\n\t\t * maps do not change the actual shape of the surface, only the lighting. In\n\t\t * case the material has a normal map authored using the left handed\n\t\t * convention, the `y` component of `normalScale` should be negated to compensate\n\t\t * for the different handedness.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.normalMap = null;\n\n\t\t/**\n\t\t * The type of normal map.\n\t\t *\n\t\t * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}\n\t\t * @default TangentSpaceNormalMap\n\t\t */\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\n\t\t/**\n\t\t * How much the normal map affects the material. Typical value range is `[0,1]`.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (1,1)\n\t\t */\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\t/**\n\t\t * The displacement map affects the position of the mesh's vertices. Unlike\n\t\t * other maps which only affect the light and shade of the material the\n\t\t * displaced vertices can cast shadows, block other objects, and otherwise\n\t\t * act as real geometry. The displacement texture is an image where the value\n\t\t * of each pixel (white being the highest) is mapped against, and\n\t\t * repositions, the vertices of the mesh.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.displacementMap = null;\n\n\t\t/**\n\t\t * How much the displacement map affects the mesh (where black is no\n\t\t * displacement, and white is maximum displacement). Without a displacement\n\t\t * map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.displacementScale = 1;\n\n\t\t/**\n\t\t * The offset of the displacement map's values on the mesh's vertices.\n\t\t * The bias is added to the scaled sample of the displacement map.\n\t\t * Without a displacement map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.displacementBias = 0;\n\n\t\t/**\n\t\t * Renders the geometry as a wireframe.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.wireframe = false;\n\n\t\t/**\n\t\t * Controls the thickness of the wireframe.\n\t\t *\n\t\t * WebGL and WebGPU ignore this property and always render\n\t\t * 1 pixel wide lines.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.wireframeLinewidth = 1;\n\n\t\t/**\n\t\t * Whether the material is rendered with flat shading or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.flatShading = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A material for non-shiny surfaces, without specular highlights.\n *\n * The material uses a non-physically based [Lambertian]{@link https://en.wikipedia.org/wiki/Lambertian_reflectance}\n * model for calculating reflectance. This can simulate some surfaces (such\n * as untreated wood or stone) well, but cannot simulate shiny surfaces with\n * specular highlights (such as varnished wood). `MeshLambertMaterial` uses per-fragment\n * shading.\n *\n * Due to the simplicity of the reflectance and illumination models,\n * performance will be greater when using this material over the\n * {@link MeshPhongMaterial}, {@link MeshStandardMaterial} or\n * {@link MeshPhysicalMaterial}, at the cost of some graphical accuracy.\n *\n * @augments Material\n */\nclass MeshLambertMaterial extends Material {\n\n\t/**\n\t * Constructs a new mesh lambert material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMeshLambertMaterial = true;\n\n\t\tthis.type = 'MeshLambertMaterial';\n\n\t\t/**\n\t\t * Color of the material.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\t/**\n\t\t * The color map. May optionally include an alpha channel, typically combined\n\t\t * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n\t\t * color is modulated by the diffuse `color`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.map = null;\n\n\t\t/**\n\t\t * The light map. Requires a second set of UVs.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.lightMap = null;\n\n\t\t/**\n\t\t * Intensity of the baked light.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\t/**\n\t\t * The red channel of this texture is used as the ambient occlusion map.\n\t\t * Requires a second set of UVs.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.aoMap = null;\n\n\t\t/**\n\t\t * Intensity of the ambient occlusion effect. Range is `[0,1]`, where `0`\n\t\t * disables ambient occlusion. Where intensity is `1` and the AO map's\n\t\t * red channel is also `1`, ambient light is fully occluded on a surface.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\t/**\n\t\t * Emissive (light) color of the material, essentially a solid color\n\t\t * unaffected by other lighting.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (0,0,0)\n\t\t */\n\t\tthis.emissive = new Color( 0x000000 );\n\n\t\t/**\n\t\t * Intensity of the emissive light. Modulates the emissive color.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.emissiveIntensity = 1.0;\n\n\t\t/**\n\t\t * Set emissive (glow) map. The emissive map color is modulated by the\n\t\t * emissive color and the emissive intensity. If you have an emissive map,\n\t\t * be sure to set the emissive color to something other than black.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.emissiveMap = null;\n\n\t\t/**\n\t\t * The texture to create a bump map. The black and white values map to the\n\t\t * perceived depth in relation to the lights. Bump doesn't actually affect\n\t\t * the geometry of the object, only the lighting. If a normal map is defined\n\t\t * this will be ignored.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.bumpMap = null;\n\n\t\t/**\n\t\t * How much the bump map affects the material. Typical range is `[0,1]`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.bumpScale = 1;\n\n\t\t/**\n\t\t * The texture to create a normal map. The RGB values affect the surface\n\t\t * normal for each pixel fragment and change the way the color is lit. Normal\n\t\t * maps do not change the actual shape of the surface, only the lighting. In\n\t\t * case the material has a normal map authored using the left handed\n\t\t * convention, the `y` component of `normalScale` should be negated to compensate\n\t\t * for the different handedness.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.normalMap = null;\n\n\t\t/**\n\t\t * The type of normal map.\n\t\t *\n\t\t * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}\n\t\t * @default TangentSpaceNormalMap\n\t\t */\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\n\t\t/**\n\t\t * How much the normal map affects the material. Typical value range is `[0,1]`.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (1,1)\n\t\t */\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\t/**\n\t\t * The displacement map affects the position of the mesh's vertices. Unlike\n\t\t * other maps which only affect the light and shade of the material the\n\t\t * displaced vertices can cast shadows, block other objects, and otherwise\n\t\t * act as real geometry. The displacement texture is an image where the value\n\t\t * of each pixel (white being the highest) is mapped against, and\n\t\t * repositions, the vertices of the mesh.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.displacementMap = null;\n\n\t\t/**\n\t\t * How much the displacement map affects the mesh (where black is no\n\t\t * displacement, and white is maximum displacement). Without a displacement\n\t\t * map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.displacementScale = 1;\n\n\t\t/**\n\t\t * The offset of the displacement map's values on the mesh's vertices.\n\t\t * The bias is added to the scaled sample of the displacement map.\n\t\t * Without a displacement map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.displacementBias = 0;\n\n\t\t/**\n\t\t * Specular map used by the material.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.specularMap = null;\n\n\t\t/**\n\t\t * The alpha map is a grayscale texture that controls the opacity across the\n\t\t * surface (black: fully transparent; white: fully opaque).\n\t\t *\n\t\t * Only the color of the texture is used, ignoring the alpha channel if one\n\t\t * exists. For RGB and RGBA textures, the renderer will use the green channel\n\t\t * when sampling this texture due to the extra bit of precision provided for\n\t\t * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n\t\t * luminance/alpha textures will also still work as expected.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.alphaMap = null;\n\n\t\t/**\n\t\t * The environment map.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.envMap = null;\n\n\t\t/**\n\t\t * The rotation of the environment map in radians.\n\t\t *\n\t\t * @type {Euler}\n\t\t * @default (0,0,0)\n\t\t */\n\t\tthis.envMapRotation = new Euler();\n\n\t\t/**\n\t\t * How to combine the result of the surface's color with the environment map, if any.\n\t\t *\n\t\t * When set to `MixOperation`, the {@link MeshBasicMaterial#reflectivity} is used to\n\t\t * blend between the two colors.\n\t\t *\n\t\t * @type {(MultiplyOperation|MixOperation|AddOperation)}\n\t\t * @default MultiplyOperation\n\t\t */\n\t\tthis.combine = MultiplyOperation;\n\n\t\t/**\n\t\t * How much the environment map affects the surface.\n\t\t * The valid range is between `0` (no reflections) and `1` (full reflections).\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.reflectivity = 1;\n\n\t\t/**\n\t\t * The index of refraction (IOR) of air (approximately 1) divided by the\n\t\t * index of refraction of the material. It is used with environment mapping\n\t\t * modes {@link CubeRefractionMapping} and {@link EquirectangularRefractionMapping}.\n\t\t * The refraction ratio should not exceed `1`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.98\n\t\t */\n\t\tthis.refractionRatio = 0.98;\n\n\t\t/**\n\t\t * Renders the geometry as a wireframe.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.wireframe = false;\n\n\t\t/**\n\t\t * Controls the thickness of the wireframe.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.wireframeLinewidth = 1;\n\n\t\t/**\n\t\t * Defines appearance of wireframe ends.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('round'|'bevel'|'miter')}\n\t\t * @default 'round'\n\t\t */\n\t\tthis.wireframeLinecap = 'round';\n\n\t\t/**\n\t\t * Defines appearance of wireframe joints.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('round'|'bevel'|'miter')}\n\t\t * @default 'round'\n\t\t */\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\t/**\n\t\t * Whether the material is rendered with flat shading or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.flatShading = false;\n\n\t\t/**\n\t\t * Whether the material is affected by fog or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapRotation.copy( source.envMapRotation );\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A material for drawing geometry by depth. Depth is based off of the camera\n * near and far plane. White is nearest, black is farthest.\n *\n * @augments Material\n */\nclass MeshDepthMaterial extends Material {\n\n\t/**\n\t * Constructs a new mesh depth material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMeshDepthMaterial = true;\n\n\t\tthis.type = 'MeshDepthMaterial';\n\n\t\t/**\n\t\t * Type for depth packing.\n\t\t *\n\t\t * @type {(BasicDepthPacking|RGBADepthPacking|RGBDepthPacking|RGDepthPacking)}\n\t\t * @default BasicDepthPacking\n\t\t */\n\t\tthis.depthPacking = BasicDepthPacking;\n\n\t\t/**\n\t\t * The color map. May optionally include an alpha channel, typically combined\n\t\t * with {@link Material#transparent} or {@link Material#alphaTest}.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.map = null;\n\n\t\t/**\n\t\t * The alpha map is a grayscale texture that controls the opacity across the\n\t\t * surface (black: fully transparent; white: fully opaque).\n\t\t *\n\t\t * Only the color of the texture is used, ignoring the alpha channel if one\n\t\t * exists. For RGB and RGBA textures, the renderer will use the green channel\n\t\t * when sampling this texture due to the extra bit of precision provided for\n\t\t * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n\t\t * luminance/alpha textures will also still work as expected.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.alphaMap = null;\n\n\t\t/**\n\t\t * The displacement map affects the position of the mesh's vertices. Unlike\n\t\t * other maps which only affect the light and shade of the material the\n\t\t * displaced vertices can cast shadows, block other objects, and otherwise\n\t\t * act as real geometry. The displacement texture is an image where the value\n\t\t * of each pixel (white being the highest) is mapped against, and\n\t\t * repositions, the vertices of the mesh.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.displacementMap = null;\n\n\t\t/**\n\t\t * How much the displacement map affects the mesh (where black is no\n\t\t * displacement, and white is maximum displacement). Without a displacement\n\t\t * map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.displacementScale = 1;\n\n\t\t/**\n\t\t * The offset of the displacement map's values on the mesh's vertices.\n\t\t * The bias is added to the scaled sample of the displacement map.\n\t\t * Without a displacement map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.displacementBias = 0;\n\n\t\t/**\n\t\t * Renders the geometry as a wireframe.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.wireframe = false;\n\n\t\t/**\n\t\t * Controls the thickness of the wireframe.\n\t\t *\n\t\t * WebGL and WebGPU ignore this property and always render\n\t\t * 1 pixel wide lines.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.depthPacking = source.depthPacking;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A material used internally for implementing shadow mapping with\n * point lights.\n *\n * Can also be used to customize the shadow casting of an object by assigning\n * an instance of `MeshDistanceMaterial` to {@link Object3D#customDistanceMaterial}.\n * The following examples demonstrates this approach in order to ensure\n * transparent parts of objects do no cast shadows.\n *\n * @augments Material\n */\nclass MeshDistanceMaterial extends Material {\n\n\t/**\n\t * Constructs a new mesh distance material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMeshDistanceMaterial = true;\n\n\t\tthis.type = 'MeshDistanceMaterial';\n\n\t\t/**\n\t\t * The color map. May optionally include an alpha channel, typically combined\n\t\t * with {@link Material#transparent} or {@link Material#alphaTest}.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.map = null;\n\n\t\t/**\n\t\t * The alpha map is a grayscale texture that controls the opacity across the\n\t\t * surface (black: fully transparent; white: fully opaque).\n\t\t *\n\t\t * Only the color of the texture is used, ignoring the alpha channel if one\n\t\t * exists. For RGB and RGBA textures, the renderer will use the green channel\n\t\t * when sampling this texture due to the extra bit of precision provided for\n\t\t * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n\t\t * luminance/alpha textures will also still work as expected.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.alphaMap = null;\n\n\t\t/**\n\t\t * The displacement map affects the position of the mesh's vertices. Unlike\n\t\t * other maps which only affect the light and shade of the material the\n\t\t * displaced vertices can cast shadows, block other objects, and otherwise\n\t\t * act as real geometry. The displacement texture is an image where the value\n\t\t * of each pixel (white being the highest) is mapped against, and\n\t\t * repositions, the vertices of the mesh.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.displacementMap = null;\n\n\t\t/**\n\t\t * How much the displacement map affects the mesh (where black is no\n\t\t * displacement, and white is maximum displacement). Without a displacement\n\t\t * map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.displacementScale = 1;\n\n\t\t/**\n\t\t * The offset of the displacement map's values on the mesh's vertices.\n\t\t * The bias is added to the scaled sample of the displacement map.\n\t\t * Without a displacement map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.displacementBias = 0;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * This material is defined by a MatCap (or Lit Sphere) texture, which encodes the\n * material color and shading.\n *\n * `MeshMatcapMaterial` does not respond to lights since the matcap image file encodes\n * baked lighting. It will cast a shadow onto an object that receives shadows\n * (and shadow clipping works), but it will not self-shadow or receive\n * shadows.\n *\n * @augments Material\n */\nclass MeshMatcapMaterial extends Material {\n\n\t/**\n\t * Constructs a new mesh matcap material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMeshMatcapMaterial = true;\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.type = 'MeshMatcapMaterial';\n\n\t\t/**\n\t\t * Color of the material.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\t/**\n\t\t * The matcap map.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.matcap = null;\n\n\t\t/**\n\t\t * The color map. May optionally include an alpha channel, typically combined\n\t\t * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\n\t\t * color is modulated by the diffuse `color`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.map = null;\n\n\t\t/**\n\t\t * The texture to create a bump map. The black and white values map to the\n\t\t * perceived depth in relation to the lights. Bump doesn't actually affect\n\t\t * the geometry of the object, only the lighting. If a normal map is defined\n\t\t * this will be ignored.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.bumpMap = null;\n\n\t\t/**\n\t\t * How much the bump map affects the material. Typical range is `[0,1]`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.bumpScale = 1;\n\n\t\t/**\n\t\t * The texture to create a normal map. The RGB values affect the surface\n\t\t * normal for each pixel fragment and change the way the color is lit. Normal\n\t\t * maps do not change the actual shape of the surface, only the lighting. In\n\t\t * case the material has a normal map authored using the left handed\n\t\t * convention, the `y` component of `normalScale` should be negated to compensate\n\t\t * for the different handedness.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.normalMap = null;\n\n\t\t/**\n\t\t * The type of normal map.\n\t\t *\n\t\t * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}\n\t\t * @default TangentSpaceNormalMap\n\t\t */\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\n\t\t/**\n\t\t * How much the normal map affects the material. Typical value range is `[0,1]`.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (1,1)\n\t\t */\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\t/**\n\t\t * The displacement map affects the position of the mesh's vertices. Unlike\n\t\t * other maps which only affect the light and shade of the material the\n\t\t * displaced vertices can cast shadows, block other objects, and otherwise\n\t\t * act as real geometry. The displacement texture is an image where the value\n\t\t * of each pixel (white being the highest) is mapped against, and\n\t\t * repositions, the vertices of the mesh.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.displacementMap = null;\n\n\t\t/**\n\t\t * How much the displacement map affects the mesh (where black is no\n\t\t * displacement, and white is maximum displacement). Without a displacement\n\t\t * map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.displacementScale = 1;\n\n\t\t/**\n\t\t * The offset of the displacement map's values on the mesh's vertices.\n\t\t * The bias is added to the scaled sample of the displacement map.\n\t\t * Without a displacement map set, this value is not applied.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.displacementBias = 0;\n\n\t\t/**\n\t\t * The alpha map is a grayscale texture that controls the opacity across the\n\t\t * surface (black: fully transparent; white: fully opaque).\n\t\t *\n\t\t * Only the color of the texture is used, ignoring the alpha channel if one\n\t\t * exists. For RGB and RGBA textures, the renderer will use the green channel\n\t\t * when sampling this texture due to the extra bit of precision provided for\n\t\t * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\n\t\t * luminance/alpha textures will also still work as expected.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.alphaMap = null;\n\n\t\t/**\n\t\t * Whether the material is rendered with flat shading or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.flatShading = false;\n\n\t\t/**\n\t\t * Whether the material is affected by fog or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.matcap = source.matcap;\n\n\t\tthis.map = source.map;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A material for rendering line primitives.\n *\n * Materials define the appearance of renderable 3D objects.\n *\n * ```js\n * const material = new THREE.LineDashedMaterial( {\n * \tcolor: 0xffffff,\n * \tscale: 1,\n * \tdashSize: 3,\n * \tgapSize: 1,\n * } );\n * ```\n *\n * @augments LineBasicMaterial\n */\nclass LineDashedMaterial extends LineBasicMaterial {\n\n\t/**\n\t * Constructs a new line dashed material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLineDashedMaterial = true;\n\t\tthis.type = 'LineDashedMaterial';\n\n\t\t/**\n\t\t * The scale of the dashed part of a line.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.scale = 1;\n\n\t\t/**\n\t\t * The size of the dash. This is both the gap with the stroke.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 3\n\t\t */\n\t\tthis.dashSize = 3;\n\n\t\t/**\n\t\t * The size of the gap.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.gapSize = 1;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.scale = source.scale;\n\t\tthis.dashSize = source.dashSize;\n\t\tthis.gapSize = source.gapSize;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * Converts an array to a specific type.\n *\n * @param {TypedArray|Array} array - The array to convert.\n * @param {TypedArray.constructor} type - The constructor of a typed array that defines the new type.\n * @return {TypedArray} The converted array.\n */\nfunction convertArray( array, type ) {\n\n\tif ( ! array || array.constructor === type ) return array;\n\n\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\treturn new type( array ); // create typed array\n\n\t}\n\n\treturn Array.prototype.slice.call( array ); // create Array\n\n}\n\n/**\n * Returns `true` if the given object is a typed array.\n *\n * @param {any} object - The object to check.\n * @return {boolean} Whether the given object is a typed array.\n */\nfunction isTypedArray( object ) {\n\n\treturn ArrayBuffer.isView( object ) && ! ( object instanceof DataView );\n\n}\n\n/**\n * Returns an array by which times and values can be sorted.\n *\n * @param {Array<number>} times - The keyframe time values.\n * @return {Array<number>} The array.\n */\nfunction getKeyframeOrder( times ) {\n\n\tfunction compareTime( i, j ) {\n\n\t\treturn times[ i ] - times[ j ];\n\n\t}\n\n\tconst n = times.length;\n\tconst result = new Array( n );\n\tfor ( let i = 0; i !== n; ++ i ) result[ i ] = i;\n\n\tresult.sort( compareTime );\n\n\treturn result;\n\n}\n\n/**\n * Sorts the given array by the previously computed order via `getKeyframeOrder()`.\n *\n * @param {Array<number>} values - The values to sort.\n * @param {number} stride - The stride.\n * @param {Array<number>} order - The sort order.\n * @return {Array<number>} The sorted values.\n */\nfunction sortedArray( values, stride, order ) {\n\n\tconst nValues = values.length;\n\tconst result = new values.constructor( nValues );\n\n\tfor ( let i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\tconst srcOffset = order[ i ] * stride;\n\n\t\tfor ( let j = 0; j !== stride; ++ j ) {\n\n\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t}\n\n\t}\n\n\treturn result;\n\n}\n\n/**\n * Used for parsing AOS keyframe formats.\n *\n * @param {Array<number>} jsonKeys - A list of JSON keyframes.\n * @param {Array<number>} times - This array will be filled with keyframe times by this function.\n * @param {Array<number>} values - This array will be filled with keyframe values by this function.\n * @param {string} valuePropertyName - The name of the property to use.\n */\nfunction flattenJSON( jsonKeys, times, values, valuePropertyName ) {\n\n\tlet i = 1, key = jsonKeys[ 0 ];\n\n\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\tkey = jsonKeys[ i ++ ];\n\n\t}\n\n\tif ( key === undefined ) return; // no data\n\n\tlet value = key[ valuePropertyName ];\n\tif ( value === undefined ) return; // no data\n\n\tif ( Array.isArray( value ) ) {\n\n\t\tdo {\n\n\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\tif ( value !== undefined ) {\n\n\t\t\t\ttimes.push( key.time );\n\t\t\t\tvalues.push( ...value ); // push all elements\n\n\t\t\t}\n\n\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t} while ( key !== undefined );\n\n\t} else if ( value.toArray !== undefined ) {\n\n\t\t// ...assume THREE.Math-ish\n\n\t\tdo {\n\n\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\tif ( value !== undefined ) {\n\n\t\t\t\ttimes.push( key.time );\n\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t}\n\n\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t} while ( key !== undefined );\n\n\t} else {\n\n\t\t// otherwise push as-is\n\n\t\tdo {\n\n\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\tif ( value !== undefined ) {\n\n\t\t\t\ttimes.push( key.time );\n\t\t\t\tvalues.push( value );\n\n\t\t\t}\n\n\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t} while ( key !== undefined );\n\n\t}\n\n}\n\n/**\n * Creates a new clip, containing only the segment of the original clip between the given frames.\n *\n * @param {AnimationClip} sourceClip - The values to sort.\n * @param {string} name - The name of the clip.\n * @param {number} startFrame - The start frame.\n * @param {number} endFrame - The end frame.\n * @param {number} [fps=30] - The FPS.\n * @return {AnimationClip} The new sub clip.\n */\nfunction subclip( sourceClip, name, startFrame, endFrame, fps = 30 ) {\n\n\tconst clip = sourceClip.clone();\n\n\tclip.name = name;\n\n\tconst tracks = [];\n\n\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\tconst track = clip.tracks[ i ];\n\t\tconst valueSize = track.getValueSize();\n\n\t\tconst times = [];\n\t\tconst values = [];\n\n\t\tfor ( let j = 0; j < track.times.length; ++ j ) {\n\n\t\t\tconst frame = track.times[ j ] * fps;\n\n\t\t\tif ( frame < startFrame || frame >= endFrame ) continue;\n\n\t\t\ttimes.push( track.times[ j ] );\n\n\t\t\tfor ( let k = 0; k < valueSize; ++ k ) {\n\n\t\t\t\tvalues.push( track.values[ j * valueSize + k ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( times.length === 0 ) continue;\n\n\t\ttrack.times = convertArray( times, track.times.constructor );\n\t\ttrack.values = convertArray( values, track.values.constructor );\n\n\t\ttracks.push( track );\n\n\t}\n\n\tclip.tracks = tracks;\n\n\t// find minimum .times value across all tracks in the trimmed clip\n\n\tlet minStartTime = Infinity;\n\n\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\tif ( minStartTime > clip.tracks[ i ].times[ 0 ] ) {\n\n\t\t\tminStartTime = clip.tracks[ i ].times[ 0 ];\n\n\t\t}\n\n\t}\n\n\t// shift all tracks such that clip begins at t=0\n\n\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\tclip.tracks[ i ].shift( -1 * minStartTime );\n\n\t}\n\n\tclip.resetDuration();\n\n\treturn clip;\n\n}\n\n/**\n * Converts the keyframes of the given animation clip to an additive format.\n *\n * @param {AnimationClip} targetClip - The clip to make additive.\n * @param {number} [referenceFrame=0] - The reference frame.\n * @param {AnimationClip} [referenceClip=targetClip] - The reference clip.\n * @param {number} [fps=30] - The FPS.\n * @return {AnimationClip} The updated clip which is now additive.\n */\nfunction makeClipAdditive( targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30 ) {\n\n\tif ( fps <= 0 ) fps = 30;\n\n\tconst numTracks = referenceClip.tracks.length;\n\tconst referenceTime = referenceFrame / fps;\n\n\t// Make each track's values relative to the values at the reference frame\n\tfor ( let i = 0; i < numTracks; ++ i ) {\n\n\t\tconst referenceTrack = referenceClip.tracks[ i ];\n\t\tconst referenceTrackType = referenceTrack.ValueTypeName;\n\n\t\t// Skip this track if it's non-numeric\n\t\tif ( referenceTrackType === 'bool' || referenceTrackType === 'string' ) continue;\n\n\t\t// Find the track in the target clip whose name and type matches the reference track\n\t\tconst targetTrack = targetClip.tracks.find( function ( track ) {\n\n\t\t\treturn track.name === referenceTrack.name\n\t\t\t\t&& track.ValueTypeName === referenceTrackType;\n\n\t\t} );\n\n\t\tif ( targetTrack === undefined ) continue;\n\n\t\tlet referenceOffset = 0;\n\t\tconst referenceValueSize = referenceTrack.getValueSize();\n\n\t\tif ( referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {\n\n\t\t\treferenceOffset = referenceValueSize / 3;\n\n\t\t}\n\n\t\tlet targetOffset = 0;\n\t\tconst targetValueSize = targetTrack.getValueSize();\n\n\t\tif ( targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {\n\n\t\t\ttargetOffset = targetValueSize / 3;\n\n\t\t}\n\n\t\tconst lastIndex = referenceTrack.times.length - 1;\n\t\tlet referenceValue;\n\n\t\t// Find the value to subtract out of the track\n\t\tif ( referenceTime <= referenceTrack.times[ 0 ] ) {\n\n\t\t\t// Reference frame is earlier than the first keyframe, so just use the first keyframe\n\t\t\tconst startIndex = referenceOffset;\n\t\t\tconst endIndex = referenceValueSize - referenceOffset;\n\t\t\treferenceValue = referenceTrack.values.slice( startIndex, endIndex );\n\n\t\t} else if ( referenceTime >= referenceTrack.times[ lastIndex ] ) {\n\n\t\t\t// Reference frame is after the last keyframe, so just use the last keyframe\n\t\t\tconst startIndex = lastIndex * referenceValueSize + referenceOffset;\n\t\t\tconst endIndex = startIndex + referenceValueSize - referenceOffset;\n\t\t\treferenceValue = referenceTrack.values.slice( startIndex, endIndex );\n\n\t\t} else {\n\n\t\t\t// Interpolate to the reference value\n\t\t\tconst interpolant = referenceTrack.createInterpolant();\n\t\t\tconst startIndex = referenceOffset;\n\t\t\tconst endIndex = referenceValueSize - referenceOffset;\n\t\t\tinterpolant.evaluate( referenceTime );\n\t\t\treferenceValue = interpolant.resultBuffer.slice( startIndex, endIndex );\n\n\t\t}\n\n\t\t// Conjugate the quaternion\n\t\tif ( referenceTrackType === 'quaternion' ) {\n\n\t\t\tconst referenceQuat = new Quaternion().fromArray( referenceValue ).normalize().conjugate();\n\t\t\treferenceQuat.toArray( referenceValue );\n\n\t\t}\n\n\t\t// Subtract the reference value from all of the track values\n\n\t\tconst numTimes = targetTrack.times.length;\n\t\tfor ( let j = 0; j < numTimes; ++ j ) {\n\n\t\t\tconst valueStart = j * targetValueSize + targetOffset;\n\n\t\t\tif ( referenceTrackType === 'quaternion' ) {\n\n\t\t\t\t// Multiply the conjugate for quaternion track types\n\t\t\t\tQuaternion.multiplyQuaternionsFlat(\n\t\t\t\t\ttargetTrack.values,\n\t\t\t\t\tvalueStart,\n\t\t\t\t\treferenceValue,\n\t\t\t\t\t0,\n\t\t\t\t\ttargetTrack.values,\n\t\t\t\t\tvalueStart\n\t\t\t\t);\n\n\t\t\t} else {\n\n\t\t\t\tconst valueEnd = targetValueSize - targetOffset * 2;\n\n\t\t\t\t// Subtract each value for all other numeric track types\n\t\t\t\tfor ( let k = 0; k < valueEnd; ++ k ) {\n\n\t\t\t\t\ttargetTrack.values[ valueStart + k ] -= referenceValue[ k ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttargetClip.blendMode = AdditiveAnimationBlendMode;\n\n\treturn targetClip;\n\n}\n\n/**\n * A class with various methods to assist with animations.\n *\n * @hideconstructor\n */\nclass AnimationUtils {\n\n\t/**\n\t * Converts an array to a specific type\n\t *\n\t * @static\n\t * @param {TypedArray|Array} array - The array to convert.\n\t * @param {TypedArray.constructor} type - The constructor of a type array.\n\t * @return {TypedArray} The converted array\n\t */\n\tstatic convertArray( array, type ) {\n\n\t\treturn convertArray( array, type );\n\n\t}\n\n\t/**\n\t * Returns `true` if the given object is a typed array.\n\t *\n\t * @static\n\t * @param {any} object - The object to check.\n\t * @return {boolean} Whether the given object is a typed array.\n\t */\n\tstatic isTypedArray( object ) {\n\n\t\treturn isTypedArray( object );\n\n\t}\n\n\t/**\n\t * Returns an array by which times and values can be sorted.\n\t *\n\t * @static\n\t * @param {Array<number>} times - The keyframe time values.\n\t * @return {Array<number>} The array.\n\t */\n\tstatic getKeyframeOrder( times ) {\n\n\t\treturn getKeyframeOrder( times );\n\n\t}\n\n\t/**\n\t * Sorts the given array by the previously computed order via `getKeyframeOrder()`.\n\t *\n\t * @static\n\t * @param {Array<number>} values - The values to sort.\n\t * @param {number} stride - The stride.\n\t * @param {Array<number>} order - The sort order.\n\t * @return {Array<number>} The sorted values.\n\t */\n\tstatic sortedArray( values, stride, order ) {\n\n\t\treturn sortedArray( values, stride, order );\n\n\t}\n\n\t/**\n\t * Used for parsing AOS keyframe formats.\n\t *\n\t * @static\n\t * @param {Array<number>} jsonKeys - A list of JSON keyframes.\n\t * @param {Array<number>} times - This array will be filled with keyframe times by this method.\n\t * @param {Array<number>} values - This array will be filled with keyframe values by this method.\n\t * @param {string} valuePropertyName - The name of the property to use.\n\t */\n\tstatic flattenJSON( jsonKeys, times, values, valuePropertyName ) {\n\n\t\tflattenJSON( jsonKeys, times, values, valuePropertyName );\n\n\t}\n\n\t/**\n\t * Creates a new clip, containing only the segment of the original clip between the given frames.\n\t *\n\t * @static\n\t * @param {AnimationClip} sourceClip - The values to sort.\n\t * @param {string} name - The name of the clip.\n\t * @param {number} startFrame - The start frame.\n\t * @param {number} endFrame - The end frame.\n\t * @param {number} [fps=30] - The FPS.\n\t * @return {AnimationClip} The new sub clip.\n\t */\n\tstatic subclip( sourceClip, name, startFrame, endFrame, fps = 30 ) {\n\n\t\treturn subclip( sourceClip, name, startFrame, endFrame, fps );\n\n\t}\n\n\t/**\n\t * Converts the keyframes of the given animation clip to an additive format.\n\t *\n\t * @static\n\t * @param {AnimationClip} targetClip - The clip to make additive.\n\t * @param {number} [referenceFrame=0] - The reference frame.\n\t * @param {AnimationClip} [referenceClip=targetClip] - The reference clip.\n\t * @param {number} [fps=30] - The FPS.\n\t * @return {AnimationClip} The updated clip which is now additive.\n\t */\n\tstatic makeClipAdditive( targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30 ) {\n\n\t\treturn makeClipAdditive( targetClip, referenceFrame, referenceClip, fps );\n\n\t}\n\n}\n\n/**\n * Abstract base class of interpolants over parametric samples.\n *\n * The parameter domain is one dimensional, typically the time or a path\n * along a curve defined by the data.\n *\n * The sample values can have any dimensionality and derived classes may\n * apply special interpretations to the data.\n *\n * This class provides the interval seek in a Template Method, deferring\n * the actual interpolation to derived classes.\n *\n * Time complexity is O(1) for linear access crossing at most two points\n * and O(log N) for random access, where N is the number of positions.\n *\n * References: {@link http://www.oodesign.com/template-method-pattern.html}\n *\n * @abstract\n */\nclass Interpolant {\n\n\t/**\n\t * Constructs a new interpolant.\n\t *\n\t * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.\n\t * @param {TypedArray} sampleValues - The sample values.\n\t * @param {number} sampleSize - The sample size\n\t * @param {TypedArray} [resultBuffer] - The result buffer.\n\t */\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\t/**\n\t\t * The parameter positions.\n\t\t *\n\t\t * @type {TypedArray}\n\t\t */\n\t\tthis.parameterPositions = parameterPositions;\n\n\t\t/**\n\t\t * A cache index.\n\t\t *\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis._cachedIndex = 0;\n\n\t\t/**\n\t\t * The result buffer.\n\t\t *\n\t\t * @type {TypedArray}\n\t\t */\n\t\tthis.resultBuffer = resultBuffer !== undefined ? resultBuffer : new sampleValues.constructor( sampleSize );\n\n\t\t/**\n\t\t * The sample values.\n\t\t *\n\t\t * @type {TypedArray}\n\t\t */\n\t\tthis.sampleValues = sampleValues;\n\n\t\t/**\n\t\t * The value size.\n\t\t *\n\t\t * @type {TypedArray}\n\t\t */\n\t\tthis.valueSize = sampleSize;\n\n\t\t/**\n\t\t * The interpolation settings.\n\t\t *\n\t\t * @type {?Object}\n\t\t * @default null\n\t\t */\n\t\tthis.settings = null;\n\n\t\t/**\n\t\t * The default settings object.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.DefaultSettings_ = {};\n\n\t}\n\n\t/**\n\t * Evaluate the interpolant at position `t`.\n\t *\n\t * @param {number} t - The interpolation factor.\n\t * @return {TypedArray} The result buffer.\n\t */\n\tevaluate( t ) {\n\n\t\tconst pp = this.parameterPositions;\n\t\tlet i1 = this._cachedIndex,\n\t\t\tt1 = pp[ i1 ],\n\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\tvalidate_interval: {\n\n\t\t\tseek: {\n\n\t\t\t\tlet right;\n\n\t\t\t\tlinear_scan: {\n\n\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t//- slower code:\n\t\t\t\t\t//-\n\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\tfor ( let giveUpAt = i1 + 2; ; ) {\n\n\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\n\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t//- slower code:\n\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\tconst t1global = pp[ 1 ];\n\n\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\tfor ( let giveUpAt = i1 - 2; ; ) {\n\n\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\treturn this.copySampleValue_( 0 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t} // linear scan\n\n\t\t\t\t// binary search\n\n\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\tconst mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tt1 = pp[ i1 ];\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t// check boundary cases, again\n\n\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\treturn this.copySampleValue_( 0 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t\t\t\t}\n\n\t\t\t} // seek\n\n\t\t\tthis._cachedIndex = i1;\n\n\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t} // validate_interval\n\n\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t}\n\n\t/**\n\t * Returns the interpolation settings.\n\t *\n\t * @return {Object} The interpolation settings.\n\t */\n\tgetSettings_() {\n\n\t\treturn this.settings || this.DefaultSettings_;\n\n\t}\n\n\t/**\n\t * Copies a sample value to the result buffer.\n\t *\n\t * @param {number} index - An index into the sample value buffer.\n\t * @return {TypedArray} The result buffer.\n\t */\n\tcopySampleValue_( index ) {\n\n\t\t// copies a sample value to the result buffer\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = index * stride;\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\t/**\n\t * Copies a sample value to the result buffer.\n\t *\n\t * @abstract\n\t * @param {number} i1 - An index into the sample value buffer.\n\t * @param {number} t0 - The previous interpolation factor.\n\t * @param {number} t - The current interpolation factor.\n\t * @param {number} t1 - The next interpolation factor.\n\t * @return {TypedArray} The result buffer.\n\t */\n\tinterpolate_( /* i1, t0, t, t1 */ ) {\n\n\t\tthrow new Error( 'call to abstract method' );\n\t\t// implementations shall return this.resultBuffer\n\n\t}\n\n\t/**\n\t * Optional method that is executed when the interval has changed.\n\t *\n\t * @param {number} i1 - An index into the sample value buffer.\n\t * @param {number} t0 - The previous interpolation factor.\n\t * @param {number} t - The current interpolation factor.\n\t */\n\tintervalChanged_( /* i1, t0, t1 */ ) {\n\n\t\t// empty\n\n\t}\n\n}\n\n/**\n * Fast and simple cubic spline interpolant.\n *\n * It was derived from a Hermitian construction setting the first derivative\n * at each sample position to the linear slope between neighboring positions\n * over their parameter interval.\n *\n * @augments Interpolant\n */\nclass CubicInterpolant extends Interpolant {\n\n\t/**\n\t * Constructs a new cubic interpolant.\n\t *\n\t * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.\n\t * @param {TypedArray} sampleValues - The sample values.\n\t * @param {number} sampleSize - The sample size\n\t * @param {TypedArray} [resultBuffer] - The result buffer.\n\t */\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t\tthis._weightPrev = -0;\n\t\tthis._offsetPrev = -0;\n\t\tthis._weightNext = -0;\n\t\tthis._offsetNext = -0;\n\n\t\tthis.DefaultSettings_ = {\n\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\n\t\t};\n\n\t}\n\n\tintervalChanged_( i1, t0, t1 ) {\n\n\t\tconst pp = this.parameterPositions;\n\t\tlet iPrev = i1 - 2,\n\t\t\tiNext = i1 + 1,\n\n\t\t\ttPrev = pp[ iPrev ],\n\t\t\ttNext = pp[ iNext ];\n\n\t\tif ( tPrev === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = t1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tNext === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\tiNext = i1;\n\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiNext = 1;\n\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\ttNext = t0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst halfDt = ( t1 - t0 ) * 0.5,\n\t\t\tstride = this.valueSize;\n\n\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\tthis._offsetPrev = iPrev * stride;\n\t\tthis._offsetNext = iNext * stride;\n\n\t}\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tpp = p * p,\n\t\t\tppp = pp * p;\n\n\t\t// evaluate polynomials\n\n\t\tconst sP = - wP * ppp + 2 * wP * pp - wP * p;\n\t\tconst s0 = ( 1 + wP ) * ppp + ( -1.5 - 2 * wP ) * pp + ( -0.5 + wP ) * p + 1;\n\t\tconst s1 = ( -1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\n\t\tconst sN = wN * ppp - wN * pp;\n\n\t\t// combine data linearly\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n}\n\n/**\n * A basic linear interpolant.\n *\n * @augments Interpolant\n */\nclass LinearInterpolant extends Interpolant {\n\n\t/**\n\t * Constructs a new linear interpolant.\n\t *\n\t * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.\n\t * @param {TypedArray} sampleValues - The sample values.\n\t * @param {number} sampleSize - The sample size\n\t * @param {TypedArray} [resultBuffer] - The result buffer.\n\t */\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\toffset1 = i1 * stride,\n\t\t\toffset0 = offset1 - stride,\n\n\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tweight0 = 1 - weight1;\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n}\n\n/**\n * Interpolant that evaluates to the sample value at the position preceding\n * the parameter.\n *\n * @augments Interpolant\n */\nclass DiscreteInterpolant extends Interpolant {\n\n\t/**\n\t * Constructs a new discrete interpolant.\n\t *\n\t * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.\n\t * @param {TypedArray} sampleValues - The sample values.\n\t * @param {number} sampleSize - The sample size\n\t * @param {TypedArray} [resultBuffer] - The result buffer.\n\t */\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tinterpolate_( i1 /*, t0, t, t1 */ ) {\n\n\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t}\n\n}\n\n/**\n * Represents s a timed sequence of keyframes, which are composed of lists of\n * times and related values, and which are used to animate a specific property\n * of an object.\n */\nclass KeyframeTrack {\n\n\t/**\n\t * Constructs a new keyframe track.\n\t *\n\t * @param {string} name - The keyframe track's name.\n\t * @param {Array<number>} times - A list of keyframe times.\n\t * @param {Array<number>} values - A list of keyframe values.\n\t * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.\n\t */\n\tconstructor( name, times, values, interpolation ) {\n\n\t\tif ( name === undefined ) throw new Error( 'THREE.KeyframeTrack: track name is undefined' );\n\t\tif ( times === undefined || times.length === 0 ) throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name );\n\n\t\t/**\n\t\t * The track's name can refer to morph targets or bones or\n\t\t * possibly other values within an animated object. See {@link PropertyBinding#parseTrackName}\n\t\t * for the forms of strings that can be parsed for property binding.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * The keyframe times.\n\t\t *\n\t\t * @type {Float32Array}\n\t\t */\n\t\tthis.times = convertArray( times, this.TimeBufferType );\n\n\t\t/**\n\t\t * The keyframe values.\n\t\t *\n\t\t * @type {Float32Array}\n\t\t */\n\t\tthis.values = convertArray( values, this.ValueBufferType );\n\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n\t}\n\n\t/**\n\t * Converts the keyframe track to JSON.\n\t *\n\t * @static\n\t * @param {KeyframeTrack} track - The keyframe track to serialize.\n\t * @return {Object} The serialized keyframe track as JSON.\n\t */\n\tstatic toJSON( track ) {\n\n\t\tconst trackType = track.constructor;\n\n\t\tlet json;\n\n\t\t// derived classes can define a static toJSON method\n\t\tif ( trackType.toJSON !== this.toJSON ) {\n\n\t\t\tjson = trackType.toJSON( track );\n\n\t\t} else {\n\n\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\tjson = {\n\n\t\t\t\t'name': track.name,\n\t\t\t\t'times': convertArray( track.times, Array ),\n\t\t\t\t'values': convertArray( track.values, Array )\n\n\t\t\t};\n\n\t\t\tconst interpolation = track.getInterpolation();\n\n\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t}\n\n\t\t}\n\n\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\treturn json;\n\n\t}\n\n\t/**\n\t * Factory method for creating a new discrete interpolant.\n\t *\n\t * @static\n\t * @param {TypedArray} [result] - The result buffer.\n\t * @return {DiscreteInterpolant} The new interpolant.\n\t */\n\tInterpolantFactoryMethodDiscrete( result ) {\n\n\t\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n\t/**\n\t * Factory method for creating a new linear interpolant.\n\t *\n\t * @static\n\t * @param {TypedArray} [result] - The result buffer.\n\t * @return {LinearInterpolant} The new interpolant.\n\t */\n\tInterpolantFactoryMethodLinear( result ) {\n\n\t\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n\t/**\n\t * Factory method for creating a new smooth interpolant.\n\t *\n\t * @static\n\t * @param {TypedArray} [result] - The result buffer.\n\t * @return {CubicInterpolant} The new interpolant.\n\t */\n\tInterpolantFactoryMethodSmooth( result ) {\n\n\t\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n\t/**\n\t * Defines the interpolation factor method for this keyframe track.\n\t *\n\t * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} interpolation - The interpolation type.\n\t * @return {KeyframeTrack} A reference to this keyframe track.\n\t */\n\tsetInterpolation( interpolation ) {\n\n\t\tlet factoryMethod;\n\n\t\tswitch ( interpolation ) {\n\n\t\t\tcase InterpolateDiscrete:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\tbreak;\n\n\t\t\tcase InterpolateLinear:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\tbreak;\n\n\t\t\tcase InterpolateSmooth:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( factoryMethod === undefined ) {\n\n\t\t\tconst message = 'unsupported interpolation for ' +\n\t\t\t\tthis.ValueTypeName + ' keyframe track named ' + this.name;\n\n\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconsole.warn( 'THREE.KeyframeTrack:', message );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tthis.createInterpolant = factoryMethod;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the current interpolation type.\n\t *\n\t * @return {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} The interpolation type.\n\t */\n\tgetInterpolation() {\n\n\t\tswitch ( this.createInterpolant ) {\n\n\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\treturn InterpolateLinear;\n\n\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\treturn InterpolateSmooth;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns the value size.\n\t *\n\t * @return {number} The value size.\n\t */\n\tgetValueSize() {\n\n\t\treturn this.values.length / this.times.length;\n\n\t}\n\n\t/**\n\t * Moves all keyframes either forward or backward in time.\n\t *\n\t * @param {number} timeOffset - The offset to move the time values.\n\t * @return {KeyframeTrack} A reference to this keyframe track.\n\t */\n\tshift( timeOffset ) {\n\n\t\tif ( timeOffset !== 0.0 ) {\n\n\t\t\tconst times = this.times;\n\n\t\t\tfor ( let i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Scale all keyframe times by a factor (useful for frame - seconds conversions).\n\t *\n\t * @param {number} timeScale - The time scale.\n\t * @return {KeyframeTrack} A reference to this keyframe track.\n\t */\n\tscale( timeScale ) {\n\n\t\tif ( timeScale !== 1.0 ) {\n\n\t\t\tconst times = this.times;\n\n\t\t\tfor ( let i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Removes keyframes before and after animation without changing any values within the defined time range.\n\t *\n\t * Note: The method does not shift around keys to the start of the track time, because for interpolated\n\t * keys this will change their values\n\t *\n\t * @param {number} startTime - The start time.\n\t * @param {number} endTime - The end time.\n\t * @return {KeyframeTrack} A reference to this keyframe track.\n\t */\n\ttrim( startTime, endTime ) {\n\n\t\tconst times = this.times,\n\t\t\tnKeys = times.length;\n\n\t\tlet from = 0,\n\t\t\tto = nKeys - 1;\n\n\t\twhile ( from !== nKeys && times[ from ] < startTime ) {\n\n\t\t\t++ from;\n\n\t\t}\n\n\t\twhile ( to !== -1 && times[ to ] > endTime ) {\n\n\t\t\t-- to;\n\n\t\t}\n\n\t\t++ to; // inclusive -> exclusive bound\n\n\t\tif ( from !== 0 || to !== nKeys ) {\n\n\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\tif ( from >= to ) {\n\n\t\t\t\tto = Math.max( to, 1 );\n\t\t\t\tfrom = to - 1;\n\n\t\t\t}\n\n\t\t\tconst stride = this.getValueSize();\n\t\t\tthis.times = times.slice( from, to );\n\t\t\tthis.values = this.values.slice( from * stride, to * stride );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Performs minimal validation on the keyframe track. Returns `true` if the values\n\t * are valid.\n\t *\n\t * @return {boolean} Whether the keyframes are valid or not.\n\t */\n\tvalidate() {\n\n\t\tlet valid = true;\n\n\t\tconst valueSize = this.getValueSize();\n\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\tconsole.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tconst times = this.times,\n\t\t\tvalues = this.values,\n\n\t\t\tnKeys = times.length;\n\n\t\tif ( nKeys === 0 ) {\n\n\t\t\tconsole.error( 'THREE.KeyframeTrack: Track is empty.', this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tlet prevTime = null;\n\n\t\tfor ( let i = 0; i !== nKeys; i ++ ) {\n\n\t\t\tconst currTime = times[ i ];\n\n\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tprevTime = currTime;\n\n\t\t}\n\n\t\tif ( values !== undefined ) {\n\n\t\t\tif ( isTypedArray( values ) ) {\n\n\t\t\t\tfor ( let i = 0, n = values.length; i !== n; ++ i ) {\n\n\t\t\t\t\tconst value = values[ i ];\n\n\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );\n\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn valid;\n\n\t}\n\n\t/**\n\t * Optimizes this keyframe track by removing equivalent sequential keys (which are\n\t * common in morph target sequences).\n\t *\n\t * @return {AnimationClip} A reference to this animation clip.\n\t */\n\toptimize() {\n\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\n\t\t// times or values may be shared with other tracks, so overwriting is unsafe\n\t\tconst times = this.times.slice(),\n\t\t\tvalues = this.values.slice(),\n\t\t\tstride = this.getValueSize(),\n\n\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n\t\t\tlastIndex = times.length - 1;\n\n\t\tlet writeIndex = 1;\n\n\t\tfor ( let i = 1; i < lastIndex; ++ i ) {\n\n\t\t\tlet keep = false;\n\n\t\t\tconst time = times[ i ];\n\t\t\tconst timeNext = times[ i + 1 ];\n\n\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\tif ( time !== timeNext && ( i !== 1 || time !== times[ 0 ] ) ) {\n\n\t\t\t\tif ( ! smoothInterpolation ) {\n\n\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n\t\t\t\t\tconst offset = i * stride,\n\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\tfor ( let j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\tconst value = values[ offset + j ];\n\n\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tkeep = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// in-place compaction\n\n\t\t\tif ( keep ) {\n\n\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\tconst readOffset = i * stride,\n\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\tfor ( let j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t++ writeIndex;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// flush last keyframe (compaction looks ahead)\n\n\t\tif ( lastIndex > 0 ) {\n\n\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n\t\t\tfor ( let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {\n\n\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t}\n\n\t\t\t++ writeIndex;\n\n\t\t}\n\n\t\tif ( writeIndex !== times.length ) {\n\n\t\t\tthis.times = times.slice( 0, writeIndex );\n\t\t\tthis.values = values.slice( 0, writeIndex * stride );\n\n\t\t} else {\n\n\t\t\tthis.times = times;\n\t\t\tthis.values = values;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new keyframe track with copied values from this instance.\n\t *\n\t * @return {KeyframeTrack} A clone of this instance.\n\t */\n\tclone() {\n\n\t\tconst times = this.times.slice();\n\t\tconst values = this.values.slice();\n\n\t\tconst TypedKeyframeTrack = this.constructor;\n\t\tconst track = new TypedKeyframeTrack( this.name, times, values );\n\n\t\t// Interpolant argument to constructor is not saved, so copy the factory method directly.\n\t\ttrack.createInterpolant = this.createInterpolant;\n\n\t\treturn track;\n\n\t}\n\n}\n\n/**\n * The value type name.\n *\n * @type {String}\n * @default ''\n */\nKeyframeTrack.prototype.ValueTypeName = '';\n\n/**\n * The time buffer type of this keyframe track.\n *\n * @type {TypedArray|Array}\n * @default Float32Array.constructor\n */\nKeyframeTrack.prototype.TimeBufferType = Float32Array;\n\n/**\n * The value buffer type of this keyframe track.\n *\n * @type {TypedArray|Array}\n * @default Float32Array.constructor\n */\nKeyframeTrack.prototype.ValueBufferType = Float32Array;\n\n/**\n * The default interpolation type of this keyframe track.\n *\n * @type {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)}\n * @default InterpolateLinear\n */\nKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n\n/**\n * A track for boolean keyframe values.\n *\n * @augments KeyframeTrack\n */\nclass BooleanKeyframeTrack extends KeyframeTrack {\n\n\t/**\n\t * Constructs a new boolean keyframe track.\n\t *\n\t * This keyframe track type has no `interpolation` parameter because the\n\t * interpolation is always discrete.\n\t *\n\t * @param {string} name - The keyframe track's name.\n\t * @param {Array<number>} times - A list of keyframe times.\n\t * @param {Array<number>} values - A list of keyframe values.\n\t */\n\tconstructor( name, times, values ) {\n\n\t\tsuper( name, times, values );\n\n\t}\n\n}\n\n/**\n * The value type name.\n *\n * @type {String}\n * @default 'bool'\n */\nBooleanKeyframeTrack.prototype.ValueTypeName = 'bool';\n\n/**\n * The value buffer type of this keyframe track.\n *\n * @type {TypedArray|Array}\n * @default Array.constructor\n */\nBooleanKeyframeTrack.prototype.ValueBufferType = Array;\n\n/**\n * The default interpolation type of this keyframe track.\n *\n * @type {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)}\n * @default InterpolateDiscrete\n */\nBooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\nBooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\nBooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A track for color keyframe values.\n *\n * @augments KeyframeTrack\n */\nclass ColorKeyframeTrack extends KeyframeTrack {\n\n\t/**\n\t * Constructs a new color keyframe track.\n\t *\n\t * @param {string} name - The keyframe track's name.\n\t * @param {Array<number>} times - A list of keyframe times.\n\t * @param {Array<number>} values - A list of keyframe values.\n\t * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.\n\t */\n\tconstructor( name, times, values, interpolation ) {\n\n\t\tsuper( name, times, values, interpolation );\n\n\t}\n\n}\n\n/**\n * The value type name.\n *\n * @type {String}\n * @default 'color'\n */\nColorKeyframeTrack.prototype.ValueTypeName = 'color';\n\n/**\n * A track for numeric keyframe values.\n *\n * @augments KeyframeTrack\n */\nclass NumberKeyframeTrack extends KeyframeTrack {\n\n\t/**\n\t * Constructs a new number keyframe track.\n\t *\n\t * @param {string} name - The keyframe track's name.\n\t * @param {Array<number>} times - A list of keyframe times.\n\t * @param {Array<number>} values - A list of keyframe values.\n\t * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.\n\t */\n\tconstructor( name, times, values, interpolation ) {\n\n\t\tsuper( name, times, values, interpolation );\n\n\t}\n\n}\n\n/**\n * The value type name.\n *\n * @type {String}\n * @default 'number'\n */\nNumberKeyframeTrack.prototype.ValueTypeName = 'number';\n\n/**\n * Spherical linear unit quaternion interpolant.\n *\n * @augments Interpolant\n */\nclass QuaternionLinearInterpolant extends Interpolant {\n\n\t/**\n\t * Constructs a new SLERP interpolant.\n\t *\n\t * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.\n\t * @param {TypedArray} sampleValues - The sample values.\n\t * @param {number} sampleSize - The sample size\n\t * @param {TypedArray} [resultBuffer] - The result buffer.\n\t */\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\tlet offset = i1 * stride;\n\n\t\tfor ( let end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n}\n\n/**\n * A track for Quaternion keyframe values.\n *\n * @augments KeyframeTrack\n */\nclass QuaternionKeyframeTrack extends KeyframeTrack {\n\n\t/**\n\t * Constructs a new Quaternion keyframe track.\n\t *\n\t * @param {string} name - The keyframe track's name.\n\t * @param {Array<number>} times - A list of keyframe times.\n\t * @param {Array<number>} values - A list of keyframe values.\n\t * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.\n\t */\n\tconstructor( name, times, values, interpolation ) {\n\n\t\tsuper( name, times, values, interpolation );\n\n\t}\n\n\t/**\n\t * Overwritten so the method returns Quaternion based interpolant.\n\t *\n\t * @static\n\t * @param {TypedArray} [result] - The result buffer.\n\t * @return {QuaternionLinearInterpolant} The new interpolant.\n\t */\n\tInterpolantFactoryMethodLinear( result ) {\n\n\t\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n}\n\n/**\n * The value type name.\n *\n * @type {String}\n * @default 'quaternion'\n */\nQuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion';\n// ValueBufferType is inherited\n// DefaultInterpolation is inherited;\nQuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A track for string keyframe values.\n *\n * @augments KeyframeTrack\n */\nclass StringKeyframeTrack extends KeyframeTrack {\n\n\t/**\n\t * Constructs a new string keyframe track.\n\t *\n\t * This keyframe track type has no `interpolation` parameter because the\n\t * interpolation is always discrete.\n\t *\n\t * @param {string} name - The keyframe track's name.\n\t * @param {Array<number>} times - A list of keyframe times.\n\t * @param {Array<number>} values - A list of keyframe values.\n\t */\n\tconstructor( name, times, values ) {\n\n\t\tsuper( name, times, values );\n\n\t}\n\n}\n\n/**\n * The value type name.\n *\n * @type {String}\n * @default 'string'\n */\nStringKeyframeTrack.prototype.ValueTypeName = 'string';\n\n/**\n * The value buffer type of this keyframe track.\n *\n * @type {TypedArray|Array}\n * @default Array.constructor\n */\nStringKeyframeTrack.prototype.ValueBufferType = Array;\n\n/**\n * The default interpolation type of this keyframe track.\n *\n * @type {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)}\n * @default InterpolateDiscrete\n */\nStringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\nStringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\nStringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A track for vector keyframe values.\n *\n * @augments KeyframeTrack\n */\nclass VectorKeyframeTrack extends KeyframeTrack {\n\n\t/**\n\t * Constructs a new vector keyframe track.\n\t *\n\t * @param {string} name - The keyframe track's name.\n\t * @param {Array<number>} times - A list of keyframe times.\n\t * @param {Array<number>} values - A list of keyframe values.\n\t * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.\n\t */\n\tconstructor( name, times, values, interpolation ) {\n\n\t\tsuper( name, times, values, interpolation );\n\n\t}\n\n}\n\n/**\n * The value type name.\n *\n * @type {String}\n * @default 'vector'\n */\nVectorKeyframeTrack.prototype.ValueTypeName = 'vector';\n\n/**\n * A reusable set of keyframe tracks which represent an animation.\n */\nclass AnimationClip {\n\n\t/**\n\t * Constructs a new animation clip.\n\t *\n\t * Note: Instead of instantiating an AnimationClip directly with the constructor, you can\n\t * use the static interface of this class for creating clips. In most cases though, animation clips\n\t * will automatically be created by loaders when importing animated 3D assets.\n\t *\n\t * @param {string} [name=''] - The clip's name.\n\t * @param {number} [duration=-1] - The clip's duration in seconds. If a negative value is passed,\n\t * the duration will be calculated from the passed keyframes.\n\t * @param {Array<KeyframeTrack>} tracks - An array of keyframe tracks.\n\t * @param {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)} [blendMode=NormalAnimationBlendMode] - Defines how the animation\n\t * is blended/combined when two or more animations are simultaneously played.\n\t */\n\tconstructor( name = '', duration = -1, tracks = [], blendMode = NormalAnimationBlendMode ) {\n\n\t\t/**\n\t\t * The clip's name.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t *  An array of keyframe tracks.\n\t\t *\n\t\t * @type {Array<KeyframeTrack>}\n\t\t */\n\t\tthis.tracks = tracks;\n\n\t\t/**\n\t\t * The clip's duration in seconds.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.duration = duration;\n\n\t\t/**\n\t\t * Defines how the animation is blended/combined when two or more animations\n\t\t * are simultaneously played.\n\t\t *\n\t\t * @type {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)}\n\t\t */\n\t\tthis.blendMode = blendMode;\n\n\t\t/**\n\t\t * The UUID of the animation clip.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.uuid = generateUUID();\n\n\t\t// this means it should figure out its duration by scanning the tracks\n\t\tif ( this.duration < 0 ) {\n\n\t\t\tthis.resetDuration();\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Factory method for creating an animation clip from the given JSON.\n\t *\n\t * @static\n\t * @param {Object} json - The serialized animation clip.\n\t * @return {AnimationClip} The new animation clip.\n\t */\n\tstatic parse( json ) {\n\n\t\tconst tracks = [],\n\t\t\tjsonTracks = json.tracks,\n\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\tfor ( let i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t}\n\n\t\tconst clip = new this( json.name, json.duration, tracks, json.blendMode );\n\t\tclip.uuid = json.uuid;\n\n\t\treturn clip;\n\n\t}\n\n\t/**\n\t * Serializes the given animation clip into JSON.\n\t *\n\t * @static\n\t * @param {AnimationClip} clip - The animation clip to serialize.\n\t * @return {Object} The JSON object.\n\t */\n\tstatic toJSON( clip ) {\n\n\t\tconst tracks = [],\n\t\t\tclipTracks = clip.tracks;\n\n\t\tconst json = {\n\n\t\t\t'name': clip.name,\n\t\t\t'duration': clip.duration,\n\t\t\t'tracks': tracks,\n\t\t\t'uuid': clip.uuid,\n\t\t\t'blendMode': clip.blendMode\n\n\t\t};\n\n\t\tfor ( let i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t}\n\n\t\treturn json;\n\n\t}\n\n\t/**\n\t * Returns a new animation clip from the passed morph targets array of a\n\t * geometry, taking a name and the number of frames per second.\n\t *\n\t * Note: The fps parameter is required, but the animation speed can be\n\t * overridden via {@link AnimationAction#setDuration}.\n\t *\n\t * @static\n\t * @param {string} name - The name of the animation clip.\n\t * @param {Array<Object>} morphTargetSequence - A sequence of morph targets.\n\t * @param {number} fps - The Frames-Per-Second value.\n\t * @param {boolean} noLoop - Whether the clip should be no loop or not.\n\t * @return {AnimationClip} The new animation clip.\n\t */\n\tstatic CreateFromMorphTargetSequence( name, morphTargetSequence, fps, noLoop ) {\n\n\t\tconst numMorphTargets = morphTargetSequence.length;\n\t\tconst tracks = [];\n\n\t\tfor ( let i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\tlet times = [];\n\t\t\tlet values = [];\n\n\t\t\ttimes.push(\n\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\ti,\n\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\tconst order = getKeyframeOrder( times );\n\t\t\ttimes = sortedArray( times, 1, order );\n\t\t\tvalues = sortedArray( values, 1, order );\n\n\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t// last frame as well for perfect loop.\n\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t}\n\n\t\t\ttracks.push(\n\t\t\t\tnew NumberKeyframeTrack(\n\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\ttimes, values\n\t\t\t\t).scale( 1.0 / fps ) );\n\n\t\t}\n\n\t\treturn new this( name, -1, tracks );\n\n\t}\n\n\t/**\n\t * Searches for an animation clip by name, taking as its first parameter\n\t * either an array of clips, or a mesh or geometry that contains an\n\t * array named \"animations\" property.\n\t *\n\t * @static\n\t * @param {(Array<AnimationClip>|Object3D)} objectOrClipArray - The array or object to search through.\n\t * @param {string} name - The name to search for.\n\t * @return {?AnimationClip} The found animation clip. Returns `null` if no clip has been found.\n\t */\n\tstatic findByName( objectOrClipArray, name ) {\n\n\t\tlet clipArray = objectOrClipArray;\n\n\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\tconst o = objectOrClipArray;\n\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t}\n\n\t\tfor ( let i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\treturn clipArray[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t/**\n\t * Returns an array of new AnimationClips created from the morph target\n\t * sequences of a geometry, trying to sort morph target names into\n\t * animation-group-based patterns like \"Walk_001, Walk_002, Run_001, Run_002...\".\n\t *\n\t * See {@link MD2Loader#parse} as an example for how the method should be used.\n\t *\n\t * @static\n\t * @param {Array<Object>} morphTargets - A sequence of morph targets.\n\t * @param {number} fps - The Frames-Per-Second value.\n\t * @param {boolean} noLoop - Whether the clip should be no loop or not.\n\t * @return {Array<AnimationClip>} An array of new animation clips.\n\t */\n\tstatic CreateClipsFromMorphTargetSequences( morphTargets, fps, noLoop ) {\n\n\t\tconst animationToMorphTargets = {};\n\n\t\t// tested with https://regex101.com/ on trick sequences\n\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\tconst pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t// sort morph target names into animation groups based\n\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\tfor ( let i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\tconst morphTarget = morphTargets[ i ];\n\t\t\tconst parts = morphTarget.name.match( pattern );\n\n\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\tconst name = parts[ 1 ];\n\n\t\t\t\tlet animationMorphTargets = animationToMorphTargets[ name ];\n\n\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t}\n\n\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst clips = [];\n\n\t\tfor ( const name in animationToMorphTargets ) {\n\n\t\t\tclips.push( this.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n\t\t}\n\n\t\treturn clips;\n\n\t}\n\n\t/**\n\t * Parses the `animation.hierarchy` format and returns a new animation clip.\n\t *\n\t * @static\n\t * @deprecated since r175.\n\t * @param {Object} animation - A serialized animation clip as JSON.\n\t * @param {Array<Bones>} bones - An array of bones.\n\t * @return {?AnimationClip} The new animation clip.\n\t */\n\tstatic parseAnimation( animation, bones ) {\n\n\t\tconsole.warn( 'THREE.AnimationClip: parseAnimation() is deprecated and will be removed with r185' );\n\n\t\tif ( ! animation ) {\n\n\t\t\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t// only return track if there are actually keys.\n\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\tconst times = [];\n\t\t\t\tconst values = [];\n\n\t\t\t\tflattenJSON( animationKeys, times, values, propertyName );\n\n\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tconst tracks = [];\n\n\t\tconst clipName = animation.name || 'default';\n\t\tconst fps = animation.fps || 30;\n\t\tconst blendMode = animation.blendMode;\n\n\t\t// automatic length determination in AnimationClip.\n\t\tlet duration = animation.length || -1;\n\n\t\tconst hierarchyTracks = animation.hierarchy || [];\n\n\t\tfor ( let h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\tconst animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t// skip empty tracks\n\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\n\t\t\t// process morph targets\n\t\t\tif ( animationKeys[ 0 ].morphTargets ) {\n\n\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\tconst morphTargetNames = {};\n\n\t\t\t\tlet k;\n\n\t\t\t\tfor ( k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\tif ( animationKeys[ k ].morphTargets ) {\n\n\t\t\t\t\t\tfor ( let m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = -1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t// the morphTarget is named.\n\t\t\t\tfor ( const morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\tconst times = [];\n\t\t\t\t\tconst values = [];\n\n\t\t\t\t\tfor ( let m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {\n\n\t\t\t\t\t\tconst animationKey = animationKeys[ k ];\n\n\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t}\n\n\t\t\t\tduration = morphTargetNames.length * fps;\n\n\t\t\t} else {\n\n\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\tconst boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tracks.length === 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst clip = new this( clipName, duration, tracks, blendMode );\n\n\t\treturn clip;\n\n\t}\n\n\t/**\n\t * Sets the duration of this clip to the duration of its longest keyframe track.\n\t *\n\t * @return {AnimationClip} A reference to this animation clip.\n\t */\n\tresetDuration() {\n\n\t\tconst tracks = this.tracks;\n\t\tlet duration = 0;\n\n\t\tfor ( let i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\tconst track = this.tracks[ i ];\n\n\t\t\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\n\n\t\t}\n\n\t\tthis.duration = duration;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Trims all tracks to the clip's duration.\n\t *\n\t * @return {AnimationClip} A reference to this animation clip.\n\t */\n\ttrim() {\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Performs minimal validation on each track in the clip. Returns `true` if all\n\t * tracks are valid.\n\t *\n\t * @return {boolean} Whether the clip's keyframes are valid or not.\n\t */\n\tvalidate() {\n\n\t\tlet valid = true;\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tvalid = valid && this.tracks[ i ].validate();\n\n\t\t}\n\n\t\treturn valid;\n\n\t}\n\n\t/**\n\t * Optimizes each track by removing equivalent sequential keys (which are\n\t * common in morph target sequences).\n\t *\n\t * @return {AnimationClip} A reference to this animation clip.\n\t */\n\toptimize() {\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].optimize();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new animation clip with copied values from this instance.\n\t *\n\t * @return {AnimationClip} A clone of this instance.\n\t */\n\tclone() {\n\n\t\tconst tracks = [];\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\ttracks.push( this.tracks[ i ].clone() );\n\n\t\t}\n\n\t\treturn new this.constructor( this.name, this.duration, tracks, this.blendMode );\n\n\t}\n\n\t/**\n\t * Serializes this animation clip into JSON.\n\t *\n\t * @return {Object} The JSON object.\n\t */\n\ttoJSON() {\n\n\t\treturn this.constructor.toJSON( this );\n\n\t}\n\n}\n\nfunction getTrackTypeForValueTypeName( typeName ) {\n\n\tswitch ( typeName.toLowerCase() ) {\n\n\t\tcase 'scalar':\n\t\tcase 'double':\n\t\tcase 'float':\n\t\tcase 'number':\n\t\tcase 'integer':\n\n\t\t\treturn NumberKeyframeTrack;\n\n\t\tcase 'vector':\n\t\tcase 'vector2':\n\t\tcase 'vector3':\n\t\tcase 'vector4':\n\n\t\t\treturn VectorKeyframeTrack;\n\n\t\tcase 'color':\n\n\t\t\treturn ColorKeyframeTrack;\n\n\t\tcase 'quaternion':\n\n\t\t\treturn QuaternionKeyframeTrack;\n\n\t\tcase 'bool':\n\t\tcase 'boolean':\n\n\t\t\treturn BooleanKeyframeTrack;\n\n\t\tcase 'string':\n\n\t\t\treturn StringKeyframeTrack;\n\n\t}\n\n\tthrow new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );\n\n}\n\nfunction parseKeyframeTrack( json ) {\n\n\tif ( json.type === undefined ) {\n\n\t\tthrow new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );\n\n\t}\n\n\tconst trackType = getTrackTypeForValueTypeName( json.type );\n\n\tif ( json.times === undefined ) {\n\n\t\tconst times = [], values = [];\n\n\t\tflattenJSON( json.keys, times, values, 'value' );\n\n\t\tjson.times = times;\n\t\tjson.values = values;\n\n\t}\n\n\t// derived classes can define a static parse method\n\tif ( trackType.parse !== undefined ) {\n\n\t\treturn trackType.parse( json );\n\n\t} else {\n\n\t\t// by default, we assume a constructor compatible with the base\n\t\treturn new trackType( json.name, json.times, json.values, json.interpolation );\n\n\t}\n\n}\n\n/**\n * @class\n * @classdesc A simple caching system, used internally by {@link FileLoader}.\n * To enable caching across all loaders that use {@link FileLoader}, add `THREE.Cache.enabled = true.` once in your app.\n * @hideconstructor\n */\nconst Cache = {\n\n\t/**\n\t * Whether caching is enabled or not.\n\t *\n\t * @static\n\t * @type {boolean}\n\t * @default false\n\t */\n\tenabled: false,\n\n\t/**\n\t * A dictionary that holds cached files.\n\t *\n\t * @static\n\t * @type {Object<string,Object>}\n\t */\n\tfiles: {},\n\n\t/**\n\t * Adds a cache entry with a key to reference the file. If this key already\n\t * holds a file, it is overwritten.\n\t *\n\t * @static\n\t * @param {string} key - The key to reference the cached file.\n\t * @param {Object} file -  The file to be cached.\n\t */\n\tadd: function ( key, file ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\tthis.files[ key ] = file;\n\n\t},\n\n\t/**\n\t * Gets the cached value for the given key.\n\t *\n\t * @static\n\t * @param {string} key - The key to reference the cached file.\n\t * @return {Object|undefined} The cached file. If the key does not exist `undefined` is returned.\n\t */\n\tget: function ( key ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\treturn this.files[ key ];\n\n\t},\n\n\t/**\n\t * Removes the cached file associated with the given key.\n\t *\n\t * @static\n\t * @param {string} key - The key to reference the cached file.\n\t */\n\tremove: function ( key ) {\n\n\t\tdelete this.files[ key ];\n\n\t},\n\n\t/**\n\t * Remove all values from the cache.\n\t *\n\t * @static\n\t */\n\tclear: function () {\n\n\t\tthis.files = {};\n\n\t}\n\n};\n\n/**\n * Handles and keeps track of loaded and pending data. A default global\n * instance of this class is created and used by loaders if not supplied\n * manually.\n *\n * In general that should be sufficient, however there are times when it can\n * be useful to have separate loaders - for example if you want to show\n * separate loading bars for objects and textures.\n *\n * ```js\n * const manager = new THREE.LoadingManager();\n * manager.onLoad = () => console.log( 'Loading complete!' );\n *\n * const loader1 = new OBJLoader( manager );\n * const loader2 = new ColladaLoader( manager );\n * ```\n */\nclass LoadingManager {\n\n\t/**\n\t * Constructs a new loading manager.\n\t *\n\t * @param {Function} [onLoad] - Executes when all items have been loaded.\n\t * @param {Function} [onProgress] - Executes when single items have been loaded.\n\t * @param {Function} [onError] - Executes when an error occurs.\n\t */\n\tconstructor( onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tlet isLoading = false;\n\t\tlet itemsLoaded = 0;\n\t\tlet itemsTotal = 0;\n\t\tlet urlModifier = undefined;\n\t\tconst handlers = [];\n\n\t\t// Refer to #5689 for the reason why we don't set .onStart\n\t\t// in the constructor\n\n\t\t/**\n\t\t * Executes when an item starts loading.\n\t\t *\n\t\t * @type {Function|undefined}\n\t\t * @default undefined\n\t\t */\n\t\tthis.onStart = undefined;\n\n\t\t/**\n\t\t * Executes when all items have been loaded.\n\t\t *\n\t\t * @type {Function|undefined}\n\t\t * @default undefined\n\t\t */\n\t\tthis.onLoad = onLoad;\n\n\t\t/**\n\t\t * Executes when single items have been loaded.\n\t\t *\n\t\t * @type {Function|undefined}\n\t\t * @default undefined\n\t\t */\n\t\tthis.onProgress = onProgress;\n\n\t\t/**\n\t\t * Executes when an error occurs.\n\t\t *\n\t\t * @type {Function|undefined}\n\t\t * @default undefined\n\t\t */\n\t\tthis.onError = onError;\n\n\t\t/**\n\t\t * This should be called by any loader using the manager when the loader\n\t\t * starts loading an item.\n\t\t *\n\t\t * @param {string} url - The URL to load.\n\t\t */\n\t\tthis.itemStart = function ( url ) {\n\n\t\t\titemsTotal ++;\n\n\t\t\tif ( isLoading === false ) {\n\n\t\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tisLoading = true;\n\n\t\t};\n\n\t\t/**\n\t\t * This should be called by any loader using the manager when the loader\n\t\t * ended loading an item.\n\t\t *\n\t\t * @param {string} url - The URL of the loaded item.\n\t\t */\n\t\tthis.itemEnd = function ( url ) {\n\n\t\t\titemsLoaded ++;\n\n\t\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\t\tscope.onLoad();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\t/**\n\t\t * This should be called by any loader using the manager when the loader\n\t\t * encounters an error when loading an item.\n\t\t *\n\t\t * @param {string} url - The URL of the item that produces an error.\n\t\t */\n\t\tthis.itemError = function ( url ) {\n\n\t\t\tif ( scope.onError !== undefined ) {\n\n\t\t\t\tscope.onError( url );\n\n\t\t\t}\n\n\t\t};\n\n\t\t/**\n\t\t * Given a URL, uses the URL modifier callback (if any) and returns a\n\t\t * resolved URL. If no URL modifier is set, returns the original URL.\n\t\t *\n\t\t * @param {string} url - The URL to load.\n\t\t * @return {string} The resolved URL.\n\t\t */\n\t\tthis.resolveURL = function ( url ) {\n\n\t\t\tif ( urlModifier ) {\n\n\t\t\t\treturn urlModifier( url );\n\n\t\t\t}\n\n\t\t\treturn url;\n\n\t\t};\n\n\t\t/**\n\t\t * If provided, the callback will be passed each resource URL before a\n\t\t * request is sent. The callback may return the original URL, or a new URL to\n\t\t * override loading behavior. This behavior can be used to load assets from\n\t\t * .ZIP files, drag-and-drop APIs, and Data URIs.\n\t\t *\n\t\t * ```js\n\t\t * const blobs = {'fish.gltf': blob1, 'diffuse.png': blob2, 'normal.png': blob3};\n\t\t *\n\t\t * const manager = new THREE.LoadingManager();\n\t\t *\n\t\t * // Initialize loading manager with URL callback.\n\t\t * const objectURLs = [];\n\t\t * manager.setURLModifier( ( url ) => {\n\t\t *\n\t\t * \turl = URL.createObjectURL( blobs[ url ] );\n\t\t * \tobjectURLs.push( url );\n\t\t * \treturn url;\n\t\t *\n\t\t * } );\n\t\t *\n\t\t * // Load as usual, then revoke the blob URLs.\n\t\t * const loader = new GLTFLoader( manager );\n\t\t * loader.load( 'fish.gltf', (gltf) => {\n\t\t *\n\t\t * \tscene.add( gltf.scene );\n\t\t * \tobjectURLs.forEach( ( url ) => URL.revokeObjectURL( url ) );\n\t\t *\n\t\t * } );\n\t\t * ```\n\t\t *\n\t\t * @param {function(string):string} transform - URL modifier callback. Called with an URL and must return a resolved URL.\n\t\t * @return {LoadingManager} A reference to this loading manager.\n\t\t */\n\t\tthis.setURLModifier = function ( transform ) {\n\n\t\t\turlModifier = transform;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\t/**\n\t\t * Registers a loader with the given regular expression. Can be used to\n\t\t * define what loader should be used in order to load specific files. A\n\t\t * typical use case is to overwrite the default loader for textures.\n\t\t *\n\t\t * ```js\n\t\t * // add handler for TGA textures\n\t\t * manager.addHandler( /\\.tga$/i, new TGALoader() );\n\t\t * ```\n\t\t *\n\t\t * @param {string} regex - A regular expression.\n\t\t * @param {Loader} loader - A loader that should handle matched cases.\n\t\t * @return {LoadingManager} A reference to this loading manager.\n\t\t */\n\t\tthis.addHandler = function ( regex, loader ) {\n\n\t\t\thandlers.push( regex, loader );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\t/**\n\t\t * Removes the loader for the given regular expression.\n\t\t *\n\t\t * @param {string} regex - A regular expression.\n\t\t * @return {LoadingManager} A reference to this loading manager.\n\t\t */\n\t\tthis.removeHandler = function ( regex ) {\n\n\t\t\tconst index = handlers.indexOf( regex );\n\n\t\t\tif ( index !== -1 ) {\n\n\t\t\t\thandlers.splice( index, 2 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\t/**\n\t\t * Can be used to retrieve the registered loader for the given file path.\n\t\t *\n\t\t * @param {string} file - The file path.\n\t\t * @return {?Loader} The registered loader. Returns `null` if no loader was found.\n\t\t */\n\t\tthis.getHandler = function ( file ) {\n\n\t\t\tfor ( let i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\t\tconst regex = handlers[ i ];\n\t\t\t\tconst loader = handlers[ i + 1 ];\n\n\t\t\t\tif ( regex.global ) regex.lastIndex = 0; // see #17920\n\n\t\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\t\treturn loader;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t};\n\n\t}\n\n}\n\n/**\n * The global default loading manager.\n *\n * @constant\n * @type {LoadingManager}\n */\nconst DefaultLoadingManager = /*@__PURE__*/ new LoadingManager();\n\n/**\n * Abstract base class for loaders.\n *\n * @abstract\n */\nclass Loader {\n\n\t/**\n\t * Constructs a new loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\t/**\n\t\t * The loading manager.\n\t\t *\n\t\t * @type {LoadingManager}\n\t\t * @default DefaultLoadingManager\n\t\t */\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\t/**\n\t\t * The crossOrigin string to implement CORS for loading the url from a\n\t\t * different domain that allows CORS.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'anonymous'\n\t\t */\n\t\tthis.crossOrigin = 'anonymous';\n\n\t\t/**\n\t\t * Whether the XMLHttpRequest uses credentials.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.withCredentials = false;\n\n\t\t/**\n\t\t * The base path from which the asset will be loaded.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.path = '';\n\n\t\t/**\n\t\t * The base path from which additional resources like textures will be loaded.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.resourcePath = '';\n\n\t\t/**\n\t\t * The [request header]{@link https://developer.mozilla.org/en-US/docs/Glossary/Request_header}\n\t\t * used in HTTP request.\n\t\t *\n\t\t * @type {Object<string, any>}\n\t\t */\n\t\tthis.requestHeader = {};\n\n\t}\n\n\t/**\n\t * This method needs to be implemented by all concrete loaders. It holds the\n\t * logic for loading assets from the backend.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded.\n\t * @param {Function} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} [onProgress] - Executed while the loading is in progress.\n\t * @param {onErrorCallback} [onError] - Executed when errors occur.\n\t */\n\tload( /* url, onLoad, onProgress, onError */ ) {}\n\n\t/**\n\t * A async version of {@link Loader#load}.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded.\n\t * @param {onProgressCallback} [onProgress] - Executed while the loading is in progress.\n\t * @return {Promise} A Promise that resolves when the asset has been loaded.\n\t */\n\tloadAsync( url, onProgress ) {\n\n\t\tconst scope = this;\n\n\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\tscope.load( url, resolve, onProgress, reject );\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * This method needs to be implemented by all concrete loaders. It holds the\n\t * logic for parsing the asset into three.js entities.\n\t *\n\t * @param {any} data - The data to parse.\n\t */\n\tparse( /* data */ ) {}\n\n\t/**\n\t * Sets the `crossOrigin` String to implement CORS for loading the URL\n\t * from a different domain that allows CORS.\n\t *\n\t * @param {string} crossOrigin - The `crossOrigin` value.\n\t * @return {Loader} A reference to this instance.\n\t */\n\tsetCrossOrigin( crossOrigin ) {\n\n\t\tthis.crossOrigin = crossOrigin;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Whether the XMLHttpRequest uses credentials such as cookies, authorization\n\t * headers or TLS client certificates, see [XMLHttpRequest.withCredentials]{@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials}.\n\t *\n\t * Note: This setting has no effect if you are loading files locally or from the same domain.\n\t *\n\t * @param {boolean} value - The `withCredentials` value.\n\t * @return {Loader} A reference to this instance.\n\t */\n\tsetWithCredentials( value ) {\n\n\t\tthis.withCredentials = value;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the base path for the asset.\n\t *\n\t * @param {string} path - The base path.\n\t * @return {Loader} A reference to this instance.\n\t */\n\tsetPath( path ) {\n\n\t\tthis.path = path;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the base path for dependent resources like textures.\n\t *\n\t * @param {string} resourcePath - The resource path.\n\t * @return {Loader} A reference to this instance.\n\t */\n\tsetResourcePath( resourcePath ) {\n\n\t\tthis.resourcePath = resourcePath;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given request header.\n\t *\n\t * @param {Object} requestHeader - A [request header]{@link https://developer.mozilla.org/en-US/docs/Glossary/Request_header}\n\t * for configuring the HTTP request.\n\t * @return {Loader} A reference to this instance.\n\t */\n\tsetRequestHeader( requestHeader ) {\n\n\t\tthis.requestHeader = requestHeader;\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * Callback for onProgress in loaders.\n *\n * @callback onProgressCallback\n * @param {ProgressEvent} event - An instance of `ProgressEvent` that represents the current loading status.\n */\n\n/**\n * Callback for onError in loaders.\n *\n * @callback onErrorCallback\n * @param {Error} error - The error which occurred during the loading process.\n */\n\n/**\n * The default material name that is used by loaders\n * when creating materials for loaded 3D objects.\n *\n * Note: Not all loaders might honor this setting.\n *\n * @static\n * @type {string}\n * @default '__DEFAULT'\n */\nLoader.DEFAULT_MATERIAL_NAME = '__DEFAULT';\n\nconst loading = {};\n\nclass HttpError extends Error {\n\n\tconstructor( message, response ) {\n\n\t\tsuper( message );\n\t\tthis.response = response;\n\n\t}\n\n}\n\n/**\n * A low level class for loading resources with the Fetch API, used internally by\n * most loaders. It can also be used directly to load any file type that does\n * not have a loader.\n *\n * This loader supports caching. If you want to use it, add `THREE.Cache.enabled = true;`\n * once to your application.\n *\n * ```js\n * const loader = new THREE.FileLoader();\n * const data = await loader.loadAsync( 'example.txt' );\n * ```\n *\n * @augments Loader\n */\nclass FileLoader extends Loader {\n\n\t/**\n\t * Constructs a new file loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\t/**\n\t\t * The expected mime type.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.mimeType = '';\n\n\t\t/**\n\t\t * The expected response type.\n\t\t *\n\t\t * @type {('arraybuffer'|'blob'|'document'|'json'|'')}\n\t\t * @default ''\n\t\t */\n\t\tthis.responseType = '';\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and pass the loaded response to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(any)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} [onProgress] - Executed while the loading is in progress.\n\t * @param {onErrorCallback} [onError] - Executed when errors occur.\n\t * @return {any|undefined} The cached resource if available.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tconst cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tthis.manager.itemStart( url );\n\n\t\t\tsetTimeout( () => {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tthis.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\t// Check if request is duplicate\n\n\t\tif ( loading[ url ] !== undefined ) {\n\n\t\t\tloading[ url ].push( {\n\n\t\t\t\tonLoad: onLoad,\n\t\t\t\tonProgress: onProgress,\n\t\t\t\tonError: onError\n\n\t\t\t} );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// Initialise array for duplicate requests\n\t\tloading[ url ] = [];\n\n\t\tloading[ url ].push( {\n\t\t\tonLoad: onLoad,\n\t\t\tonProgress: onProgress,\n\t\t\tonError: onError,\n\t\t} );\n\n\t\t// create request\n\t\tconst req = new Request( url, {\n\t\t\theaders: new Headers( this.requestHeader ),\n\t\t\tcredentials: this.withCredentials ? 'include' : 'same-origin',\n\t\t\t// An abort controller could be added within a future PR\n\t\t} );\n\n\t\t// record states ( avoid data race )\n\t\tconst mimeType = this.mimeType;\n\t\tconst responseType = this.responseType;\n\n\t\t// start the fetch\n\t\tfetch( req )\n\t\t\t.then( response => {\n\n\t\t\t\tif ( response.status === 200 || response.status === 0 ) {\n\n\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\t\tif ( response.status === 0 ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.FileLoader: HTTP Status 0 received.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Workaround: Checking if response.body === undefined for Alipay browser #23548\n\n\t\t\t\t\tif ( typeof ReadableStream === 'undefined' || response.body === undefined || response.body.getReader === undefined ) {\n\n\t\t\t\t\t\treturn response;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst callbacks = loading[ url ];\n\t\t\t\t\tconst reader = response.body.getReader();\n\n\t\t\t\t\t// Nginx needs X-File-Size check\n\t\t\t\t\t// https://serverfault.com/questions/482875/why-does-nginx-remove-content-length-header-for-chunked-content\n\t\t\t\t\tconst contentLength = response.headers.get( 'X-File-Size' ) || response.headers.get( 'Content-Length' );\n\t\t\t\t\tconst total = contentLength ? parseInt( contentLength ) : 0;\n\t\t\t\t\tconst lengthComputable = total !== 0;\n\t\t\t\t\tlet loaded = 0;\n\n\t\t\t\t\t// periodically read data into the new stream tracking while download progress\n\t\t\t\t\tconst stream = new ReadableStream( {\n\t\t\t\t\t\tstart( controller ) {\n\n\t\t\t\t\t\t\treadData();\n\n\t\t\t\t\t\t\tfunction readData() {\n\n\t\t\t\t\t\t\t\treader.read().then( ( { done, value } ) => {\n\n\t\t\t\t\t\t\t\t\tif ( done ) {\n\n\t\t\t\t\t\t\t\t\t\tcontroller.close();\n\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\tloaded += value.byteLength;\n\n\t\t\t\t\t\t\t\t\t\tconst event = new ProgressEvent( 'progress', { lengthComputable, loaded, total } );\n\t\t\t\t\t\t\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\t\t\t\t\tconst callback = callbacks[ i ];\n\t\t\t\t\t\t\t\t\t\t\tif ( callback.onProgress ) callback.onProgress( event );\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tcontroller.enqueue( value );\n\t\t\t\t\t\t\t\t\t\treadData();\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}, ( e ) => {\n\n\t\t\t\t\t\t\t\t\tcontroller.error( e );\n\n\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\treturn new Response( stream );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new HttpError( `fetch for \"${response.url}\" responded with ${response.status}: ${response.statusText}`, response );\n\n\t\t\t\t}\n\n\t\t\t} )\n\t\t\t.then( response => {\n\n\t\t\t\tswitch ( responseType ) {\n\n\t\t\t\t\tcase 'arraybuffer':\n\n\t\t\t\t\t\treturn response.arrayBuffer();\n\n\t\t\t\t\tcase 'blob':\n\n\t\t\t\t\t\treturn response.blob();\n\n\t\t\t\t\tcase 'document':\n\n\t\t\t\t\t\treturn response.text()\n\t\t\t\t\t\t\t.then( text => {\n\n\t\t\t\t\t\t\t\tconst parser = new DOMParser();\n\t\t\t\t\t\t\t\treturn parser.parseFromString( text, mimeType );\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\tcase 'json':\n\n\t\t\t\t\t\treturn response.json();\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( mimeType === '' ) {\n\n\t\t\t\t\t\t\treturn response.text();\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// sniff encoding\n\t\t\t\t\t\t\tconst re = /charset=\"?([^;\"\\s]*)\"?/i;\n\t\t\t\t\t\t\tconst exec = re.exec( mimeType );\n\t\t\t\t\t\t\tconst label = exec && exec[ 1 ] ? exec[ 1 ].toLowerCase() : undefined;\n\t\t\t\t\t\t\tconst decoder = new TextDecoder( label );\n\t\t\t\t\t\t\treturn response.arrayBuffer().then( ab => decoder.decode( ab ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} )\n\t\t\t.then( data => {\n\n\t\t\t\t// Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t// error response bodies as proper responses to requests.\n\t\t\t\tCache.add( url, data );\n\n\t\t\t\tconst callbacks = loading[ url ];\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onLoad ) callback.onLoad( data );\n\n\t\t\t\t}\n\n\t\t\t} )\n\t\t\t.catch( err => {\n\n\t\t\t\t// Abort errors and other errors are handled the same\n\n\t\t\t\tconst callbacks = loading[ url ];\n\n\t\t\t\tif ( callbacks === undefined ) {\n\n\t\t\t\t\t// When onLoad was called and url was deleted in `loading`\n\t\t\t\t\tthis.manager.itemError( url );\n\t\t\t\t\tthrow err;\n\n\t\t\t\t}\n\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onError ) callback.onError( err );\n\n\t\t\t\t}\n\n\t\t\t\tthis.manager.itemError( url );\n\n\t\t\t} )\n\t\t\t.finally( () => {\n\n\t\t\t\tthis.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\tthis.manager.itemStart( url );\n\n\t}\n\n\t/**\n\t * Sets the expected response type.\n\t *\n\t * @param {('arraybuffer'|'blob'|'document'|'json'|'')} value - The response type.\n\t * @return {FileLoader} A reference to this file loader.\n\t */\n\tsetResponseType( value ) {\n\n\t\tthis.responseType = value;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the expected mime type of the loaded file.\n\t *\n\t * @param {string} value - The mime type.\n\t * @return {FileLoader} A reference to this file loader.\n\t */\n\tsetMimeType( value ) {\n\n\t\tthis.mimeType = value;\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * Class for loading animation clips in the JSON format. The files are internally\n * loaded via {@link FileLoader}.\n *\n * ```js\n * const loader = new THREE.AnimationLoader();\n * const animations = await loader.loadAsync( 'animations/animation.js' );\n * ```\n *\n * @augments Loader\n */\nclass AnimationLoader extends Loader {\n\n\t/**\n\t * Constructs a new animation loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and pass the loaded animations as an array\n\t * holding instances of {@link AnimationClip} to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(Array<AnimationClip>)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Parses the given JSON object and returns an array of animation clips.\n\t *\n\t * @param {Object} json - The serialized animation clips.\n\t * @return {Array<AnimationClip>} The parsed animation clips.\n\t */\n\tparse( json ) {\n\n\t\tconst animations = [];\n\n\t\tfor ( let i = 0; i < json.length; i ++ ) {\n\n\t\t\tconst clip = AnimationClip.parse( json[ i ] );\n\n\t\t\tanimations.push( clip );\n\n\t\t}\n\n\t\treturn animations;\n\n\t}\n\n}\n\n/**\n * Abstract base class for loading compressed texture formats S3TC, ASTC or ETC.\n * Textures are internally loaded via {@link FileLoader}.\n *\n * Derived classes have to implement the `parse()` method which holds the parsing\n * for the respective format.\n *\n * @abstract\n * @augments Loader\n */\nclass CompressedTextureLoader extends Loader {\n\n\t/**\n\t * Constructs a new compressed texture loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded compressed texture\n\t * to the `onLoad()` callback. The method also returns a new texture object which can\n\t * directly be used for material creation. If you do it this way, the texture\n\t * may pop up in your scene once the respective loading process is finished.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(CompressedTexture)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t * @return {CompressedTexture} The compressed texture.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst images = [];\n\n\t\tconst texture = new CompressedTexture();\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\n\t\tlet loaded = 0;\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\tconst texDatas = scope.parse( buffer, true );\n\n\t\t\t\timages[ i ] = {\n\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t};\n\n\t\t\t\tloaded += 1;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) texture.minFilter = LinearFilter;\n\n\t\t\t\t\ttexture.image = images;\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\tif ( Array.isArray( url ) ) {\n\n\t\t\tfor ( let i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tconst texDatas = scope.parse( buffer, true );\n\n\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\tconst faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\tfor ( let f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\timages[ f ] = { mipmaps: [] };\n\n\t\t\t\t\t\tfor ( let i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.image = images;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n}\n\n/**\n * A loader for loading images. The class loads images with the HTML `Image` API.\n *\n * ```js\n * const loader = new THREE.ImageLoader();\n * const image = await loader.loadAsync( 'image.png' );\n * ```\n * Please note that `ImageLoader` has dropped support for progress\n * events in `r84`. For an `ImageLoader` that supports progress events, see\n * [this thread]{@link https://github.com/mrdoob/three.js/issues/10439#issuecomment-275785639}.\n *\n * @augments Loader\n */\nclass ImageLoader extends Loader {\n\n\t/**\n\t * Constructs a new image loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded image\n\t * to the `onLoad()` callback. The method also returns a new `Image` object which can\n\t * directly be used for texture creation. If you do it this way, the texture\n\t * may pop up in your scene once the respective loading process is finished.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(Image)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Unsupported in this loader.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t * @return {Image} The image.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tconst scope = this;\n\n\t\tconst cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tconst image = createElementNS( 'img' );\n\n\t\tfunction onImageLoad() {\n\n\t\t\tremoveEventListeners();\n\n\t\t\tCache.add( url, this );\n\n\t\t\tif ( onLoad ) onLoad( this );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t}\n\n\t\tfunction onImageError( event ) {\n\n\t\t\tremoveEventListeners();\n\n\t\t\tif ( onError ) onError( event );\n\n\t\t\tscope.manager.itemError( url );\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t}\n\n\t\tfunction removeEventListeners() {\n\n\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t}\n\n\t\timage.addEventListener( 'load', onImageLoad, false );\n\t\timage.addEventListener( 'error', onImageError, false );\n\n\t\tif ( url.slice( 0, 5 ) !== 'data:' ) {\n\n\t\t\tif ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;\n\n\t\t}\n\n\t\tscope.manager.itemStart( url );\n\n\t\timage.src = url;\n\n\t\treturn image;\n\n\t}\n\n}\n\n/**\n * Class for loading cube textures. Images are internally loaded via {@link ImageLoader}.\n *\n * The loader returns an instance of {@link CubeTexture} and expects the cube map to\n * be defined as six separate images representing the sides of a cube. Other cube map definitions\n * like vertical and horizontal cross, column and row layouts are not supported.\n *\n * Note that, by convention, cube maps are specified in a coordinate system\n * in which positive-x is to the right when looking up the positive-z axis --\n * in other words, using a left-handed coordinate system. Since three.js uses\n * a right-handed coordinate system, environment maps used in three.js will\n * have pos-x and neg-x swapped.\n *\n * The loaded cube texture is in sRGB color space. Meaning {@link Texture#colorSpace}\n * is set to `SRGBColorSpace` by default.\n *\n * ```js\n * const loader = new THREE.CubeTextureLoader().setPath( 'textures/cubeMaps/' );\n * const cubeTexture = await loader.loadAsync( [\n * \t'px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png'\n * ] );\n * scene.background = cubeTexture;\n * ```\n *\n * @augments Loader\n */\nclass CubeTextureLoader extends Loader {\n\n\t/**\n\t * Constructs a new cube texture loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and pass the fully loaded cube texture\n\t * to the `onLoad()` callback. The method also returns a new cube texture object which can\n\t * directly be used for material creation. If you do it this way, the cube texture\n\t * may pop up in your scene once the respective loading process is finished.\n\t *\n\t * @param {Array<string>} urls - Array of 6 URLs to images, one for each side of the\n\t * cube texture. The urls should be specified in the following order: pos-x,\n\t * neg-x, pos-y, neg-y, pos-z, neg-z. An array of data URIs are allowed as well.\n\t * @param {function(CubeTexture)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Unsupported in this loader.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t * @return {CubeTexture} The cube texture.\n\t */\n\tload( urls, onLoad, onProgress, onError ) {\n\n\t\tconst texture = new CubeTexture();\n\t\ttexture.colorSpace = SRGBColorSpace;\n\n\t\tconst loader = new ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tlet loaded = 0;\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\tloaded ++;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, undefined, onError );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < urls.length; ++ i ) {\n\n\t\t\tloadTexture( i );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n}\n\n/**\n * Abstract base class for loading binary texture formats RGBE, EXR or TGA.\n * Textures are internally loaded via {@link FileLoader}.\n *\n * Derived classes have to implement the `parse()` method which holds the parsing\n * for the respective format.\n *\n * @abstract\n * @augments Loader\n */\nclass DataTextureLoader extends Loader {\n\n\t/**\n\t * Constructs a new data texture loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded data texture\n\t * to the `onLoad()` callback. The method also returns a new texture object which can\n\t * directly be used for material creation. If you do it this way, the texture\n\t * may pop up in your scene once the respective loading process is finished.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(DataTexture)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t * @return {DataTexture} The data texture.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst texture = new DataTexture();\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setPath( this.path );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tlet texData;\n\n\t\t\ttry {\n\n\t\t\t\ttexData = scope.parse( buffer );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tif ( onError !== undefined ) {\n\n\t\t\t\t\tonError( error );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( error );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( texData.image !== undefined ) {\n\n\t\t\t\ttexture.image = texData.image;\n\n\t\t\t} else if ( texData.data !== undefined ) {\n\n\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t}\n\n\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\n\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\tif ( texData.colorSpace !== undefined ) {\n\n\t\t\t\ttexture.colorSpace = texData.colorSpace;\n\n\t\t\t}\n\n\t\t\tif ( texData.flipY !== undefined ) {\n\n\t\t\t\ttexture.flipY = texData.flipY;\n\n\t\t\t}\n\n\t\t\tif ( texData.format !== undefined ) {\n\n\t\t\t\ttexture.format = texData.format;\n\n\t\t\t}\n\n\t\t\tif ( texData.type !== undefined ) {\n\n\t\t\t\ttexture.type = texData.type;\n\n\t\t\t}\n\n\t\t\tif ( texData.mipmaps !== undefined ) {\n\n\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\n\t\t\t}\n\n\t\t\tif ( texData.mipmapCount === 1 ) {\n\n\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t}\n\n\t\t\tif ( texData.generateMipmaps !== undefined ) {\n\n\t\t\t\ttexture.generateMipmaps = texData.generateMipmaps;\n\n\t\t\t}\n\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}, onProgress, onError );\n\n\n\t\treturn texture;\n\n\t}\n\n}\n\n/**\n * Class for loading textures. Images are internally\n * loaded via {@link ImageLoader}.\n *\n * ```js\n * const loader = new THREE.TextureLoader();\n * const texture = await loader.loadAsync( 'textures/land_ocean_ice_cloud_2048.jpg' );\n *\n * const material = new THREE.MeshBasicMaterial( { map:texture } );\n * ```\n * Please note that `TextureLoader` has dropped support for progress\n * events in `r84`. For a `TextureLoader` that supports progress events, see\n * [this thread]{@link https://github.com/mrdoob/three.js/issues/10439#issuecomment-293260145}.\n *\n * @augments Loader\n */\nclass TextureLoader extends Loader {\n\n\t/**\n\t * Constructs a new texture loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and pass the fully loaded texture\n\t * to the `onLoad()` callback. The method also returns a new texture object which can\n\t * directly be used for material creation. If you do it this way, the texture\n\t * may pop up in your scene once the respective loading process is finished.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(Texture)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Unsupported in this loader.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t * @return {Texture} The texture.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst texture = new Texture();\n\n\t\tconst loader = new ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tloader.load( url, function ( image ) {\n\n\t\t\ttexture.image = image;\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\tonLoad( texture );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t\treturn texture;\n\n\t}\n\n}\n\n/**\n * Abstract base class for lights - all other light types inherit the\n * properties and methods described here.\n *\n * @abstract\n * @augments Object3D\n */\nclass Light extends Object3D {\n\n\t/**\n\t * Constructs a new light.\n\t *\n\t * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n\t * @param {number} [intensity=1] - The light's strength/intensity.\n\t */\n\tconstructor( color, intensity = 1 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLight = true;\n\n\t\tthis.type = 'Light';\n\n\t\t/**\n\t\t * The light's color.\n\t\t *\n\t\t * @type {Color}\n\t\t */\n\t\tthis.color = new Color( color );\n\n\t\t/**\n\t\t * The light's intensity.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.intensity = intensity;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\t// Empty here in base class; some subclasses override.\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.intensity = source.intensity;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.color = this.color.getHex();\n\t\tdata.object.intensity = this.intensity;\n\n\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\n\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\n\t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\n\t\tif ( this.target !== undefined ) data.object.target = this.target.uuid;\n\n\t\treturn data;\n\n\t}\n\n}\n\n/**\n * A light source positioned directly above the scene, with color fading from\n * the sky color to the ground color.\n *\n * This light cannot be used to cast shadows.\n *\n * ```js\n * const light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 );\n * scene.add( light );\n * ```\n *\n * @augments Light\n */\nclass HemisphereLight extends Light {\n\n\t/**\n\t * Constructs a new hemisphere light.\n\t *\n\t * @param {(number|Color|string)} [skyColor=0xffffff] - The light's sky color.\n\t * @param {(number|Color|string)} [groundColor=0xffffff] - The light's ground color.\n\t * @param {number} [intensity=1] - The light's strength/intensity.\n\t */\n\tconstructor( skyColor, groundColor, intensity ) {\n\n\t\tsuper( skyColor, intensity );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isHemisphereLight = true;\n\n\t\tthis.type = 'HemisphereLight';\n\n\t\tthis.position.copy( Object3D.DEFAULT_UP );\n\t\tthis.updateMatrix();\n\n\t\t/**\n\t\t * The light's ground color.\n\t\t *\n\t\t * @type {Color}\n\t\t */\n\t\tthis.groundColor = new Color( groundColor );\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.groundColor.copy( source.groundColor );\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _projScreenMatrix$1 = /*@__PURE__*/ new Matrix4();\nconst _lightPositionWorld$1 = /*@__PURE__*/ new Vector3();\nconst _lookTarget$1 = /*@__PURE__*/ new Vector3();\n\n/**\n * Abstract base class for light shadow classes. These classes\n * represent the shadow configuration for different light types.\n *\n * @abstract\n */\nclass LightShadow {\n\n\t/**\n\t * Constructs a new light shadow.\n\t *\n\t * @param {Camera} camera - The light's view of the world.\n\t */\n\tconstructor( camera ) {\n\n\t\t/**\n\t\t * The light's view of the world.\n\t\t *\n\t\t * @type {Camera}\n\t\t */\n\t\tthis.camera = camera;\n\n\t\t/**\n\t\t * The intensity of the shadow. The default is `1`.\n\t\t * Valid values are in the range `[0, 1]`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.intensity = 1;\n\n\t\t/**\n\t\t * Shadow map bias, how much to add or subtract from the normalized depth\n\t\t * when deciding whether a surface is in shadow.\n\t\t *\n\t\t * The default is `0`. Very tiny adjustments here (in the order of `0.0001`)\n\t\t * may help reduce artifacts in shadows.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.bias = 0;\n\n\t\t/**\n\t\t * Defines how much the position used to query the shadow map is offset along\n\t\t * the object normal. The default is `0`. Increasing this value can be used to\n\t\t * reduce shadow acne especially in large scenes where light shines onto\n\t\t * geometry at a shallow angle. The cost is that shadows may appear distorted.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.normalBias = 0;\n\n\t\t/**\n\t\t * Setting this to values greater than 1 will blur the edges of the shadow.\n\t\t * High values will cause unwanted banding effects in the shadows - a greater\n\t\t * map size will allow for a higher value to be used here before these effects\n\t\t * become visible.\n\t\t *\n\t\t * The property has no effect when the shadow map type is `PCFSoftShadowMap` and\n\t\t * and it is recommended to increase softness by decreasing the shadow map size instead.\n\t\t *\n\t\t * The property has no effect when the shadow map type is `BasicShadowMap`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.radius = 1;\n\n\t\t/**\n\t\t * The amount of samples to use when blurring a VSM shadow map.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 8\n\t\t */\n\t\tthis.blurSamples = 8;\n\n\t\t/**\n\t\t * Defines the width and height of the shadow map. Higher values give better quality\n\t\t * shadows at the cost of computation time. Values must be powers of two.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (512,512)\n\t\t */\n\t\tthis.mapSize = new Vector2( 512, 512 );\n\n\t\t/**\n\t\t * The type of shadow texture. The default is `UnsignedByteType`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default UnsignedByteType\n\t\t */\n\t\tthis.mapType = UnsignedByteType;\n\n\t\t/**\n\t\t * The depth map generated using the internal camera; a location beyond a\n\t\t * pixel's depth is in shadow. Computed internally during rendering.\n\t\t *\n\t\t * @type {?RenderTarget}\n\t\t * @default null\n\t\t */\n\t\tthis.map = null;\n\n\t\t/**\n\t\t * The distribution map generated using the internal camera; an occlusion is\n\t\t * calculated based on the distribution of depths. Computed internally during\n\t\t * rendering.\n\t\t *\n\t\t * @type {?RenderTarget}\n\t\t * @default null\n\t\t */\n\t\tthis.mapPass = null;\n\n\t\t/**\n\t\t * Model to shadow camera space, to compute location and depth in shadow map.\n\t\t * This is computed internally during rendering.\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */\n\t\tthis.matrix = new Matrix4();\n\n\t\t/**\n\t\t * Enables automatic updates of the light's shadow. If you do not require dynamic\n\t\t * lighting / shadows, you may set this to `false`.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.autoUpdate = true;\n\n\t\t/**\n\t\t * When set to `true`, shadow maps will be updated in the next `render` call.\n\t\t * If you have set {@link LightShadow#autoUpdate} to `false`, you will need to\n\t\t * set this property to `true` and then make a render call to update the light's shadow.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.needsUpdate = false;\n\n\t\tthis._frustum = new Frustum();\n\t\tthis._frameExtents = new Vector2( 1, 1 );\n\n\t\tthis._viewportCount = 1;\n\n\t\tthis._viewports = [\n\n\t\t\tnew Vector4( 0, 0, 1, 1 )\n\n\t\t];\n\n\t}\n\n\t/**\n\t * Used internally by the renderer to get the number of viewports that need\n\t * to be rendered for this shadow.\n\t *\n\t * @return {number} The viewport count.\n\t */\n\tgetViewportCount() {\n\n\t\treturn this._viewportCount;\n\n\t}\n\n\t/**\n\t * Gets the shadow cameras frustum. Used internally by the renderer to cull objects.\n\t *\n\t * @return {Frustum} The shadow camera frustum.\n\t */\n\tgetFrustum() {\n\n\t\treturn this._frustum;\n\n\t}\n\n\t/**\n\t * Update the matrices for the camera and shadow, used internally by the renderer.\n\t *\n\t * @param {Light} light - The light for which the shadow is being rendered.\n\t */\n\tupdateMatrices( light ) {\n\n\t\tconst shadowCamera = this.camera;\n\t\tconst shadowMatrix = this.matrix;\n\n\t\t_lightPositionWorld$1.setFromMatrixPosition( light.matrixWorld );\n\t\tshadowCamera.position.copy( _lightPositionWorld$1 );\n\n\t\t_lookTarget$1.setFromMatrixPosition( light.target.matrixWorld );\n\t\tshadowCamera.lookAt( _lookTarget$1 );\n\t\tshadowCamera.updateMatrixWorld();\n\n\t\t_projScreenMatrix$1.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\tthis._frustum.setFromProjectionMatrix( _projScreenMatrix$1 );\n\n\t\tshadowMatrix.set(\n\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t);\n\n\t\tshadowMatrix.multiply( _projScreenMatrix$1 );\n\n\t}\n\n\t/**\n\t * Returns a viewport definition for the given viewport index.\n\t *\n\t * @param {number} viewportIndex - The viewport index.\n\t * @return {Vector4} The viewport.\n\t */\n\tgetViewport( viewportIndex ) {\n\n\t\treturn this._viewports[ viewportIndex ];\n\n\t}\n\n\t/**\n\t * Returns the frame extends.\n\t *\n\t * @return {Vector2} The frame extends.\n\t */\n\tgetFrameExtents() {\n\n\t\treturn this._frameExtents;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tif ( this.map ) {\n\n\t\t\tthis.map.dispose();\n\n\t\t}\n\n\t\tif ( this.mapPass ) {\n\n\t\t\tthis.mapPass.dispose();\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Copies the values of the given light shadow instance to this instance.\n\t *\n\t * @param {LightShadow} source - The light shadow to copy.\n\t * @return {LightShadow} A reference to this light shadow instance.\n\t */\n\tcopy( source ) {\n\n\t\tthis.camera = source.camera.clone();\n\n\t\tthis.intensity = source.intensity;\n\n\t\tthis.bias = source.bias;\n\t\tthis.radius = source.radius;\n\n\t\tthis.autoUpdate = source.autoUpdate;\n\t\tthis.needsUpdate = source.needsUpdate;\n\t\tthis.normalBias = source.normalBias;\n\t\tthis.blurSamples = source.blurSamples;\n\n\t\tthis.mapSize.copy( source.mapSize );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new light shadow instance with copied values from this instance.\n\t *\n\t * @return {LightShadow} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\t/**\n\t * Serializes the light shadow into JSON.\n\t *\n\t * @return {Object} A JSON object representing the serialized light shadow.\n\t * @see {@link ObjectLoader#parse}\n\t */\n\ttoJSON() {\n\n\t\tconst object = {};\n\n\t\tif ( this.intensity !== 1 ) object.intensity = this.intensity;\n\t\tif ( this.bias !== 0 ) object.bias = this.bias;\n\t\tif ( this.normalBias !== 0 ) object.normalBias = this.normalBias;\n\t\tif ( this.radius !== 1 ) object.radius = this.radius;\n\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\n\n\t\tobject.camera = this.camera.toJSON( false ).object;\n\t\tdelete object.camera.matrix;\n\n\t\treturn object;\n\n\t}\n\n}\n\n/**\n * Represents the shadow configuration of directional lights.\n *\n * @augments LightShadow\n */\nclass SpotLightShadow extends LightShadow {\n\n\t/**\n\t * Constructs a new spot light shadow.\n\t */\n\tconstructor() {\n\n\t\tsuper( new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSpotLightShadow = true;\n\n\t\t/**\n\t\t * Used to focus the shadow camera. The camera's field of view is set as a\n\t\t * percentage of the spotlight's field-of-view. Range is `[0, 1]`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.focus = 1;\n\n\t}\n\n\tupdateMatrices( light ) {\n\n\t\tconst camera = this.camera;\n\n\t\tconst fov = RAD2DEG * 2 * light.angle * this.focus;\n\t\tconst aspect = this.mapSize.width / this.mapSize.height;\n\t\tconst far = light.distance || camera.far;\n\n\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\tcamera.fov = fov;\n\t\t\tcamera.aspect = aspect;\n\t\t\tcamera.far = far;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t}\n\n\t\tsuper.updateMatrices( light );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.focus = source.focus;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * This light gets emitted from a single point in one direction, along a cone\n * that increases in size the further from the light it gets.\n *\n * This light can cast shadows - see the {@link SpotLightShadow} for details.\n *\n * ```js\n * // white spotlight shining from the side, modulated by a texture\n * const spotLight = new THREE.SpotLight( 0xffffff );\n * spotLight.position.set( 100, 1000, 100 );\n * spotLight.map = new THREE.TextureLoader().load( url );\n *\n * spotLight.castShadow = true;\n * spotLight.shadow.mapSize.width = 1024;\n * spotLight.shadow.mapSize.height = 1024;\n * spotLight.shadow.camera.near = 500;\n * spotLight.shadow.camera.far = 4000;\n * spotLight.shadow.camera.fov = 30;s\n * ```\n *\n * @augments Light\n */\nclass SpotLight extends Light {\n\n\t/**\n\t * Constructs a new spot light.\n\t *\n\t * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n\t * @param {number} [intensity=1] - The light's strength/intensity measured in candela (cd).\n\t * @param {number} [distance=0] - Maximum range of the light. `0` means no limit.\n\t * @param {number} [angle=Math.PI/3] - Maximum angle of light dispersion from its direction whose upper bound is `Math.PI/2`.\n\t * @param {number} [penumbra=0] - Percent of the spotlight cone that is attenuated due to penumbra. Value range is `[0,1]`.\n\t * @param {number} [decay=2] - The amount the light dims along the distance of the light.\n\t */\n\tconstructor( color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 2 ) {\n\n\t\tsuper( color, intensity );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSpotLight = true;\n\n\t\tthis.type = 'SpotLight';\n\n\t\tthis.position.copy( Object3D.DEFAULT_UP );\n\t\tthis.updateMatrix();\n\n\t\t/**\n\t\t * The spot light points from its position to the\n\t\t * target's position.\n\t\t *\n\t\t * For the target's position to be changed to anything other\n\t\t * than the default, it must be added to the scene.\n\t\t *\n\t\t * It is also possible to set the target to be another 3D object\n\t\t * in the scene. The light will now track the target object.\n\t\t *\n\t\t * @type {Object3D}\n\t\t */\n\t\tthis.target = new Object3D();\n\n\t\t/**\n\t\t * Maximum range of the light. `0` means no limit.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.distance = distance;\n\n\t\t/**\n\t\t * Maximum angle of light dispersion from its direction whose upper bound is `Math.PI/2`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default Math.PI/3\n\t\t */\n\t\tthis.angle = angle;\n\n\t\t/**\n\t\t * Percent of the spotlight cone that is attenuated due to penumbra.\n\t\t * Value range is `[0,1]`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.penumbra = penumbra;\n\n\t\t/**\n\t\t * The amount the light dims along the distance of the light. In context of\n\t\t * physically-correct rendering the default value should not be changed.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 2\n\t\t */\n\t\tthis.decay = decay;\n\n\t\t/**\n\t\t * A texture used to modulate the color of the light. The spot light\n\t\t * color is mixed with the RGB value of this texture, with a ratio\n\t\t * corresponding to its alpha value. The cookie-like masking effect is\n\t\t * reproduced using pixel values (0, 0, 0, 1-cookie_value).\n\t\t *\n\t\t * *Warning*: This property is disabled if {@link Object3D#castShadow} is set to `false`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.map = null;\n\n\t\t/**\n\t\t * This property holds the light's shadow configuration.\n\t\t *\n\t\t * @type {SpotLightShadow}\n\t\t */\n\t\tthis.shadow = new SpotLightShadow();\n\n\t}\n\n\t/**\n\t * The light's power. Power is the luminous power of the light measured in lumens (lm).\n\t *  Changing the power will also change the light's intensity.\n\t *\n\t * @type {number}\n\t */\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in candela)\n\t\t// by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)\n\t\treturn this.intensity * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in candela) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / Math.PI;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.distance = source.distance;\n\t\tthis.angle = source.angle;\n\t\tthis.penumbra = source.penumbra;\n\t\tthis.decay = source.decay;\n\n\t\tthis.target = source.target.clone();\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _projScreenMatrix = /*@__PURE__*/ new Matrix4();\nconst _lightPositionWorld = /*@__PURE__*/ new Vector3();\nconst _lookTarget = /*@__PURE__*/ new Vector3();\n\n/**\n * Represents the shadow configuration of point lights.\n *\n * @augments LightShadow\n */\nclass PointLightShadow extends LightShadow {\n\n\t/**\n\t * Constructs a new point light shadow.\n\t */\n\tconstructor() {\n\n\t\tsuper( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isPointLightShadow = true;\n\n\t\tthis._frameExtents = new Vector2( 4, 2 );\n\n\t\tthis._viewportCount = 6;\n\n\t\tthis._viewports = [\n\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t// following orientation:\n\t\t\t//\n\t\t\t//  xzXZ\n\t\t\t//   y Y\n\t\t\t//\n\t\t\t// X - Positive x direction\n\t\t\t// x - Negative x direction\n\t\t\t// Y - Positive y direction\n\t\t\t// y - Negative y direction\n\t\t\t// Z - Positive z direction\n\t\t\t// z - Negative z direction\n\n\t\t\t// positive X\n\t\t\tnew Vector4( 2, 1, 1, 1 ),\n\t\t\t// negative X\n\t\t\tnew Vector4( 0, 1, 1, 1 ),\n\t\t\t// positive Z\n\t\t\tnew Vector4( 3, 1, 1, 1 ),\n\t\t\t// negative Z\n\t\t\tnew Vector4( 1, 1, 1, 1 ),\n\t\t\t// positive Y\n\t\t\tnew Vector4( 3, 0, 1, 1 ),\n\t\t\t// negative Y\n\t\t\tnew Vector4( 1, 0, 1, 1 )\n\t\t];\n\n\t\tthis._cubeDirections = [\n\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( -1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t\t\tnew Vector3( 0, 0, -1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, -1, 0 )\n\t\t];\n\n\t\tthis._cubeUps = [\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, -1 )\n\t\t];\n\n\t}\n\n\t/**\n\t * Update the matrices for the camera and shadow, used internally by the renderer.\n\t *\n\t * @param {Light} light - The light for which the shadow is being rendered.\n\t * @param {number} [viewportIndex=0] - The viewport index.\n\t */\n\tupdateMatrices( light, viewportIndex = 0 ) {\n\n\t\tconst camera = this.camera;\n\t\tconst shadowMatrix = this.matrix;\n\n\t\tconst far = light.distance || camera.far;\n\n\t\tif ( far !== camera.far ) {\n\n\t\t\tcamera.far = far;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t}\n\n\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\tcamera.position.copy( _lightPositionWorld );\n\n\t\t_lookTarget.copy( camera.position );\n\t\t_lookTarget.add( this._cubeDirections[ viewportIndex ] );\n\t\tcamera.up.copy( this._cubeUps[ viewportIndex ] );\n\t\tcamera.lookAt( _lookTarget );\n\t\tcamera.updateMatrixWorld();\n\n\t\tshadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );\n\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\tthis._frustum.setFromProjectionMatrix( _projScreenMatrix );\n\n\t}\n\n}\n\n/**\n * A light that gets emitted from a single point in all directions. A common\n * use case for this is to replicate the light emitted from a bare\n * lightbulb.\n *\n * This light can cast shadows - see the {@link PointLightShadow} for details.\n *\n * ```js\n * const light = new THREE.PointLight( 0xff0000, 1, 100 );\n * light.position.set( 50, 50, 50 );\n * scene.add( light );\n * ```\n *\n * @augments Light\n */\nclass PointLight extends Light {\n\n\t/**\n\t * Constructs a new point light.\n\t *\n\t * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n\t * @param {number} [intensity=1] - The light's strength/intensity measured in candela (cd).\n\t * @param {number} [distance=0] - Maximum range of the light. `0` means no limit.\n\t * @param {number} [decay=2] - The amount the light dims along the distance of the light.\n\t */\n\tconstructor( color, intensity, distance = 0, decay = 2 ) {\n\n\t\tsuper( color, intensity );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isPointLight = true;\n\n\t\tthis.type = 'PointLight';\n\n\t\t/**\n\t\t * When distance is zero, light will attenuate according to inverse-square\n\t\t * law to infinite distance. When distance is non-zero, light will attenuate\n\t\t * according to inverse-square law until near the distance cutoff, where it\n\t\t * will then attenuate quickly and smoothly to 0. Inherently, cutoffs are not\n\t\t * physically correct.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.distance = distance;\n\n\t\t/**\n\t\t * The amount the light dims along the distance of the light. In context of\n\t\t * physically-correct rendering the default value should not be changed.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 2\n\t\t */\n\t\tthis.decay = decay;\n\n\t\t/**\n\t\t * This property holds the light's shadow configuration.\n\t\t *\n\t\t * @type {PointLightShadow}\n\t\t */\n\t\tthis.shadow = new PointLightShadow();\n\n\t}\n\n\t/**\n\t * The light's power. Power is the luminous power of the light measured in lumens (lm).\n\t * Changing the power will also change the light's intensity.\n\t *\n\t * @type {number}\n\t */\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in candela)\n\t\t// for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)\n\t\treturn this.intensity * 4 * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in candela) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / ( 4 * Math.PI );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.distance = source.distance;\n\t\tthis.decay = source.decay;\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * Camera that uses [orthographic projection]{@link https://en.wikipedia.org/wiki/Orthographic_projection}.\n *\n * In this projection mode, an object's size in the rendered image stays\n * constant regardless of its distance from the camera. This can be useful\n * for rendering 2D scenes and UI elements, amongst other things.\n *\n * ```js\n * const camera = new THREE.OrthographicCamera( width / - 2, width / 2, height / 2, height / - 2, 1, 1000 );\n * scene.add( camera );\n * ```\n *\n * @augments Camera\n */\nclass OrthographicCamera extends Camera {\n\n\t/**\n\t * Constructs a new orthographic camera.\n\t *\n\t * @param {number} [left=-1] - The left plane of the camera's frustum.\n\t * @param {number} [right=1] - The right plane of the camera's frustum.\n\t * @param {number} [top=1] - The top plane of the camera's frustum.\n\t * @param {number} [bottom=-1] - The bottom plane of the camera's frustum.\n\t * @param {number} [near=0.1] - The camera's near plane.\n\t * @param {number} [far=2000] - The camera's far plane.\n\t */\n\tconstructor( left = -1, right = 1, top = 1, bottom = -1, near = 0.1, far = 2000 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isOrthographicCamera = true;\n\n\t\tthis.type = 'OrthographicCamera';\n\n\t\t/**\n\t\t * The zoom factor of the camera.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.zoom = 1;\n\n\t\t/**\n\t\t * Represents the frustum window specification. This property should not be edited\n\t\t * directly but via {@link PerspectiveCamera#setViewOffset} and {@link PerspectiveCamera#clearViewOffset}.\n\t\t *\n\t\t * @type {?Object}\n\t\t * @default null\n\t\t */\n\t\tthis.view = null;\n\n\t\t/**\n\t\t * The left plane of the camera's frustum.\n\t\t *\n\t\t * @type {number}\n\t\t * @default -1\n\t\t */\n\t\tthis.left = left;\n\n\t\t/**\n\t\t * The right plane of the camera's frustum.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.right = right;\n\n\t\t/**\n\t\t * The top plane of the camera's frustum.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.top = top;\n\n\t\t/**\n\t\t * The bottom plane of the camera's frustum.\n\t\t *\n\t\t * @type {number}\n\t\t * @default -1\n\t\t */\n\t\tthis.bottom = bottom;\n\n\t\t/**\n\t\t * The camera's near plane. The valid range is greater than `0`\n\t\t * and less than the current value of {@link OrthographicCamera#far}.\n\t\t *\n\t\t * Note that, unlike for the {@link PerspectiveCamera}, `0` is a\n\t\t * valid value for an orthographic camera's near plane.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.1\n\t\t */\n\t\tthis.near = near;\n\n\t\t/**\n\t\t * The camera's far plane. Must be greater than the\n\t\t * current value of {@link OrthographicCamera#near}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 2000\n\t\t */\n\t\tthis.far = far;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.left = source.left;\n\t\tthis.right = source.right;\n\t\tthis.top = source.top;\n\t\tthis.bottom = source.bottom;\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\n\t\tthis.zoom = source.zoom;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t * multi-monitor/multi-machine setups.\n\t *\n\t * @param {number} fullWidth - The full width of multiview setup.\n\t * @param {number} fullHeight - The full height of multiview setup.\n\t * @param {number} x - The horizontal offset of the subcamera.\n\t * @param {number} y - The vertical offset of the subcamera.\n\t * @param {number} width - The width of subcamera.\n\t * @param {number} height - The height of subcamera.\n\t * @see {@link PerspectiveCamera#setViewOffset}\n\t */\n\tsetViewOffset( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\t/**\n\t * Removes the view offset from the projection matrix.\n\t */\n\tclearViewOffset() {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\t/**\n\t * Updates the camera's projection matrix. Must be called after any change of\n\t * camera properties.\n\t */\n\tupdateProjectionMatrix() {\n\n\t\tconst dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\tconst dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\tconst cx = ( this.right + this.left ) / 2;\n\t\tconst cy = ( this.top + this.bottom ) / 2;\n\n\t\tlet left = cx - dx;\n\t\tlet right = cx + dx;\n\t\tlet top = cy + dy;\n\t\tlet bottom = cy - dy;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tconst scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;\n\t\t\tconst scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;\n\n\t\t\tleft += scaleW * this.view.offsetX;\n\t\t\tright = left + scaleW * this.view.width;\n\t\t\ttop -= scaleH * this.view.offsetY;\n\t\t\tbottom = top - scaleH * this.view.height;\n\n\t\t}\n\n\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far, this.coordinateSystem );\n\n\t\tthis.projectionMatrixInverse.copy( this.projectionMatrix ).invert();\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.zoom = this.zoom;\n\t\tdata.object.left = this.left;\n\t\tdata.object.right = this.right;\n\t\tdata.object.top = this.top;\n\t\tdata.object.bottom = this.bottom;\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\treturn data;\n\n\t}\n\n}\n\n/**\n * Represents the shadow configuration of directional lights.\n *\n * @augments LightShadow\n */\nclass DirectionalLightShadow extends LightShadow {\n\n\t/**\n\t * Constructs a new directional light shadow.\n\t */\n\tconstructor() {\n\n\t\tsuper( new OrthographicCamera( -5, 5, 5, -5, 0.5, 500 ) );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isDirectionalLightShadow = true;\n\n\t}\n\n}\n\n/**\n * A light that gets emitted in a specific direction. This light will behave\n * as though it is infinitely far away and the rays produced from it are all\n * parallel. The common use case for this is to simulate daylight; the sun is\n * far enough away that its position can be considered to be infinite, and\n * all light rays coming from it are parallel.\n *\n * A common point of confusion for directional lights is that setting the\n * rotation has no effect. This is because three.js's DirectionalLight is the\n * equivalent to what is often called a 'Target Direct Light' in other\n * applications.\n *\n * This means that its direction is calculated as pointing from the light's\n * {@link Object3D#position} to the {@link DirectionalLight#target} position\n * (as opposed to a 'Free Direct Light' that just has a rotation\n * component).\n *\n * This light can cast shadows - see the {@link DirectionalLightShadow} for details.\n *\n * ```js\n * // White directional light at half intensity shining from the top.\n * const directionalLight = new THREE.DirectionalLight( 0xffffff, 0.5 );\n * scene.add( directionalLight );\n * ```\n *\n * @augments Light\n */\nclass DirectionalLight extends Light {\n\n\t/**\n\t * Constructs a new directional light.\n\t *\n\t * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n\t * @param {number} [intensity=1] - The light's strength/intensity.\n\t */\n\tconstructor( color, intensity ) {\n\n\t\tsuper( color, intensity );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isDirectionalLight = true;\n\n\t\tthis.type = 'DirectionalLight';\n\n\t\tthis.position.copy( Object3D.DEFAULT_UP );\n\t\tthis.updateMatrix();\n\n\t\t/**\n\t\t * The directional light points from its position to the\n\t\t * target's position.\n\t\t *\n\t\t * For the target's position to be changed to anything other\n\t\t * than the default, it must be added to the scene.\n\t\t *\n\t\t * It is also possible to set the target to be another 3D object\n\t\t * in the scene. The light will now track the target object.\n\t\t *\n\t\t * @type {Object3D}\n\t\t */\n\t\tthis.target = new Object3D();\n\n\t\t/**\n\t\t * This property holds the light's shadow configuration.\n\t\t *\n\t\t * @type {DirectionalLightShadow}\n\t\t */\n\t\tthis.shadow = new DirectionalLightShadow();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.target = source.target.clone();\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * This light globally illuminates all objects in the scene equally.\n *\n * It cannot be used to cast shadows as it does not have a direction.\n *\n * ```js\n * const light = new THREE.AmbientLight( 0x404040 ); // soft white light\n * scene.add( light );\n * ```\n *\n * @augments Light\n */\nclass AmbientLight extends Light {\n\n\t/**\n\t * Constructs a new ambient light.\n\t *\n\t * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n\t * @param {number} [intensity=1] - The light's strength/intensity.\n\t */\n\tconstructor( color, intensity ) {\n\n\t\tsuper( color, intensity );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isAmbientLight = true;\n\n\t\tthis.type = 'AmbientLight';\n\n\t}\n\n}\n\n/**\n * This class emits light uniformly across the face a rectangular plane.\n * This light type can be used to simulate light sources such as bright\n * windows or strip lighting.\n *\n * Important Notes:\n *\n * - There is no shadow support.\n * - Only PBR materials are supported.\n * - You have to include `RectAreaLightUniformsLib` (`WebGLRenderer`) or `RectAreaLightTexturesLib` (`WebGPURenderer`)\n * into your app and init the uniforms/textures.\n *\n * ```js\n * RectAreaLightUniformsLib.init(); // only relevant for WebGLRenderer\n * THREE.RectAreaLightNode.setLTC( RectAreaLightTexturesLib.init() ); //  only relevant for WebGPURenderer\n *\n * const intensity = 1; const width = 10; const height = 10;\n * const rectLight = new THREE.RectAreaLight( 0xffffff, intensity, width, height );\n * rectLight.position.set( 5, 5, 0 );\n * rectLight.lookAt( 0, 0, 0 );\n * scene.add( rectLight )\n * ```\n *\n * @augments Light\n */\nclass RectAreaLight extends Light {\n\n\t/**\n\t * Constructs a new area light.\n\t *\n\t * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n\t * @param {number} [intensity=1] - The light's strength/intensity.\n\t * @param {number} [width=10] - The width of the light.\n\t * @param {number} [height=10] - The height of the light.\n\t */\n\tconstructor( color, intensity, width = 10, height = 10 ) {\n\n\t\tsuper( color, intensity );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isRectAreaLight = true;\n\n\t\tthis.type = 'RectAreaLight';\n\n\t\t/**\n\t\t * The width of the light.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 10\n\t\t */\n\t\tthis.width = width;\n\n\t\t/**\n\t\t * The height of the light.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 10\n\t\t */\n\t\tthis.height = height;\n\n\t}\n\n\t/**\n\t * The light's power. Power is the luminous power of the light measured in lumens (lm).\n\t * Changing the power will also change the light's intensity.\n\t *\n\t * @type {number}\n\t */\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in nits)\n\t\treturn this.intensity * this.width * this.height * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in nits) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / ( this.width * this.height * Math.PI );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.width = this.width;\n\t\tdata.object.height = this.height;\n\n\t\treturn data;\n\n\t}\n\n}\n\n/**\n * Represents a third-order spherical harmonics (SH). Light probes use this class\n * to encode lighting information.\n *\n * - Primary reference: {@link https://graphics.stanford.edu/papers/envmap/envmap.pdf}\n * - Secondary reference: {@link https://www.ppsloan.org/publications/StupidSH36.pdf}\n */\nclass SphericalHarmonics3 {\n\n\t/**\n\t * Constructs a new spherical harmonics.\n\t */\n\tconstructor() {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSphericalHarmonics3 = true;\n\n\t\t/**\n\t\t * An array holding the (9) SH coefficients.\n\t\t *\n\t\t * @type {Array<Vector3>}\n\t\t */\n\t\tthis.coefficients = [];\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients.push( new Vector3() );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the given SH coefficients to this instance by copying\n\t * the values.\n\t *\n\t * @param {Array<Vector3>} coefficients - The SH coefficients.\n\t * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n\t */\n\tset( coefficients ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].copy( coefficients[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets all SH coefficients to `0`.\n\t *\n\t * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n\t */\n\tzero() {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].set( 0, 0, 0 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the radiance in the direction of the given normal.\n\t *\n\t * @param {Vector3} normal - The normal vector (assumed to be unit length)\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The radiance.\n\t */\n\tgetAt( normal, target ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\tconst coeff = this.coefficients;\n\n\t\t// band 0\n\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );\n\n\t\t// band 1\n\t\ttarget.addScaledVector( coeff[ 1 ], 0.488603 * y );\n\t\ttarget.addScaledVector( coeff[ 2 ], 0.488603 * z );\n\t\ttarget.addScaledVector( coeff[ 3 ], 0.488603 * x );\n\n\t\t// band 2\n\t\ttarget.addScaledVector( coeff[ 4 ], 1.092548 * ( x * y ) );\n\t\ttarget.addScaledVector( coeff[ 5 ], 1.092548 * ( y * z ) );\n\t\ttarget.addScaledVector( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );\n\t\ttarget.addScaledVector( coeff[ 7 ], 1.092548 * ( x * z ) );\n\t\ttarget.addScaledVector( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Returns the irradiance (radiance convolved with cosine lobe) in the\n\t * direction of the given normal.\n\t *\n\t * @param {Vector3} normal - The normal vector (assumed to be unit length)\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The irradiance.\n\t */\n\tgetIrradianceAt( normal, target ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\tconst coeff = this.coefficients;\n\n\t\t// band 0\n\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095\n\n\t\t// band 1\n\t\ttarget.addScaledVector( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603\n\t\ttarget.addScaledVector( coeff[ 2 ], 2.0 * 0.511664 * z );\n\t\ttarget.addScaledVector( coeff[ 3 ], 2.0 * 0.511664 * x );\n\n\t\t// band 2\n\t\ttarget.addScaledVector( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548\n\t\ttarget.addScaledVector( coeff[ 5 ], 2.0 * 0.429043 * y * z );\n\t\ttarget.addScaledVector( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3\n\t\ttarget.addScaledVector( coeff[ 7 ], 2.0 * 0.429043 * x * z );\n\t\ttarget.addScaledVector( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Adds the given SH to this instance.\n\t *\n\t * @param {SphericalHarmonics3} sh - The SH to add.\n\t * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n\t */\n\tadd( sh ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].add( sh.coefficients[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * A convenience method for performing {@link SphericalHarmonics3#add} and\n\t * {@link SphericalHarmonics3#scale} at once.\n\t *\n\t * @param {SphericalHarmonics3} sh - The SH to add.\n\t * @param {number} s - The scale factor.\n\t * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n\t */\n\taddScaledSH( sh, s ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].addScaledVector( sh.coefficients[ i ], s );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Scales this SH by the given scale factor.\n\t *\n\t * @param {number} s - The scale factor.\n\t * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n\t */\n\tscale( s ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].multiplyScalar( s );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Linear interpolates between the given SH and this instance by the given\n\t * alpha factor.\n\t *\n\t * @param {SphericalHarmonics3} sh - The SH to interpolate with.\n\t * @param {number} alpha - The alpha factor.\n\t * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n\t */\n\tlerp( sh, alpha ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this spherical harmonics is equal with the given one.\n\t *\n\t * @param {SphericalHarmonics3} sh - The spherical harmonics to test for equality.\n\t * @return {boolean} Whether this spherical harmonics is equal with the given one.\n\t */\n\tequals( sh ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tif ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * Copies the values of the given spherical harmonics to this instance.\n\t *\n\t * @param {SphericalHarmonics3} sh - The spherical harmonics to copy.\n\t * @return {SphericalHarmonics3} A reference to this spherical harmonics.\n\t */\n\tcopy( sh ) {\n\n\t\treturn this.set( sh.coefficients );\n\n\t}\n\n\t/**\n\t * Returns a new spherical harmonics with copied values from this instance.\n\t *\n\t * @return {SphericalHarmonics3} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\t/**\n\t * Sets the SH coefficients of this instance from the given array.\n\t *\n\t * @param {Array<number>} array - An array holding the SH coefficients.\n\t * @param {number} [offset=0] - The array offset where to start copying.\n\t * @return {SphericalHarmonics3} A clone of this instance.\n\t */\n\tfromArray( array, offset = 0 ) {\n\n\t\tconst coefficients = this.coefficients;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tcoefficients[ i ].fromArray( array, offset + ( i * 3 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns an array with the SH coefficients, or copies them into the provided\n\t * array. The coefficients are represented as numbers.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array.\n\t * @param {number} [offset=0] - The array offset where to start copying.\n\t * @return {Array<number>} An array with flat SH coefficients.\n\t */\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst coefficients = this.coefficients;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tcoefficients[ i ].toArray( array, offset + ( i * 3 ) );\n\n\t\t}\n\n\t\treturn array;\n\n\t}\n\n\t/**\n\t * Computes the SH basis for the given normal vector.\n\t *\n\t * @param {Vector3} normal - The normal.\n\t * @param {Array<number>} shBasis - The target array holding the SH basis.\n\t */\n\tstatic getBasisAt( normal, shBasis ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\t// band 0\n\t\tshBasis[ 0 ] = 0.282095;\n\n\t\t// band 1\n\t\tshBasis[ 1 ] = 0.488603 * y;\n\t\tshBasis[ 2 ] = 0.488603 * z;\n\t\tshBasis[ 3 ] = 0.488603 * x;\n\n\t\t// band 2\n\t\tshBasis[ 4 ] = 1.092548 * x * y;\n\t\tshBasis[ 5 ] = 1.092548 * y * z;\n\t\tshBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );\n\t\tshBasis[ 7 ] = 1.092548 * x * z;\n\t\tshBasis[ 8 ] = 0.546274 * ( x * x - y * y );\n\n\t}\n\n}\n\n/**\n * Light probes are an alternative way of adding light to a 3D scene. Unlike\n * classical light sources (e.g. directional, point or spot lights), light\n * probes do not emit light. Instead they store information about light\n * passing through 3D space. During rendering, the light that hits a 3D\n * object is approximated by using the data from the light probe.\n *\n * Light probes are usually created from (radiance) environment maps. The\n * class {@link LightProbeGenerator} can be used to create light probes from\n * cube textures or render targets. However, light estimation data could also\n * be provided in other forms e.g. by WebXR. This enables the rendering of\n * augmented reality content that reacts to real world lighting.\n *\n * The current probe implementation in three.js supports so-called diffuse\n * light probes. This type of light probe is functionally equivalent to an\n * irradiance environment map.\n *\n * @augments Light\n */\nclass LightProbe extends Light {\n\n\t/**\n\t * Constructs a new light probe.\n\t *\n\t * @param {SphericalHarmonics3} sh - The spherical harmonics which represents encoded lighting information.\n\t * @param {number} [intensity=1] - The light's strength/intensity.\n\t */\n\tconstructor( sh = new SphericalHarmonics3(), intensity = 1 ) {\n\n\t\tsuper( undefined, intensity );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLightProbe = true;\n\n\t\t/**\n\t\t * A light probe uses spherical harmonics to encode lighting information.\n\t\t *\n\t\t * @type {SphericalHarmonics3}\n\t\t */\n\t\tthis.sh = sh;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.sh.copy( source.sh );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Deserializes the light prove from the given JSON.\n\t *\n\t * @param {Object} json - The JSON holding the serialized light probe.\n\t * @return {LightProbe} A reference to this light probe.\n\t */\n\tfromJSON( json ) {\n\n\t\tthis.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n\t\tthis.sh.fromArray( json.sh );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.sh = this.sh.toArray();\n\n\t\treturn data;\n\n\t}\n\n}\n\n/**\n * Class for loading geometries. The files are internally\n * loaded via {@link FileLoader}.\n *\n * ```js\n * const loader = new THREE.MaterialLoader();\n * const material = await loader.loadAsync( 'material.json' );\n * ```\n * This loader does not support node materials. Use {@link NodeMaterialLoader} instead.\n *\n * @augments Loader\n */\nclass MaterialLoader extends Loader {\n\n\t/**\n\t * Constructs a new material loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\t/**\n\t\t * A dictionary holding textures used by the material.\n\t\t *\n\t\t * @type {Object<string,Texture>}\n\t\t */\n\t\tthis.textures = {};\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and pass the loaded material to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(Material)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Parses the given JSON object and returns a material.\n\t *\n\t * @param {Object} json - The serialized material.\n\t * @return {Material} The parsed material.\n\t */\n\tparse( json ) {\n\n\t\tconst textures = this.textures;\n\n\t\tfunction getTexture( name ) {\n\n\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t}\n\n\t\t\treturn textures[ name ];\n\n\t\t}\n\n\t\tconst material = this.createMaterialFromType( json.type );\n\n\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t\tif ( json.name !== undefined ) material.name = json.name;\n\t\tif ( json.color !== undefined && material.color !== undefined ) material.color.setHex( json.color );\n\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t\tif ( json.sheen !== undefined ) material.sheen = json.sheen;\n\t\tif ( json.sheenColor !== undefined ) material.sheenColor = new Color().setHex( json.sheenColor );\n\t\tif ( json.sheenRoughness !== undefined ) material.sheenRoughness = json.sheenRoughness;\n\t\tif ( json.emissive !== undefined && material.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t\tif ( json.specular !== undefined && material.specular !== undefined ) material.specular.setHex( json.specular );\n\t\tif ( json.specularIntensity !== undefined ) material.specularIntensity = json.specularIntensity;\n\t\tif ( json.specularColor !== undefined && material.specularColor !== undefined ) material.specularColor.setHex( json.specularColor );\n\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t\tif ( json.clearcoat !== undefined ) material.clearcoat = json.clearcoat;\n\t\tif ( json.clearcoatRoughness !== undefined ) material.clearcoatRoughness = json.clearcoatRoughness;\n\t\tif ( json.dispersion !== undefined ) material.dispersion = json.dispersion;\n\t\tif ( json.iridescence !== undefined ) material.iridescence = json.iridescence;\n\t\tif ( json.iridescenceIOR !== undefined ) material.iridescenceIOR = json.iridescenceIOR;\n\t\tif ( json.iridescenceThicknessRange !== undefined ) material.iridescenceThicknessRange = json.iridescenceThicknessRange;\n\t\tif ( json.transmission !== undefined ) material.transmission = json.transmission;\n\t\tif ( json.thickness !== undefined ) material.thickness = json.thickness;\n\t\tif ( json.attenuationDistance !== undefined ) material.attenuationDistance = json.attenuationDistance;\n\t\tif ( json.attenuationColor !== undefined && material.attenuationColor !== undefined ) material.attenuationColor.setHex( json.attenuationColor );\n\t\tif ( json.anisotropy !== undefined ) material.anisotropy = json.anisotropy;\n\t\tif ( json.anisotropyRotation !== undefined ) material.anisotropyRotation = json.anisotropyRotation;\n\t\tif ( json.fog !== undefined ) material.fog = json.fog;\n\t\tif ( json.flatShading !== undefined ) material.flatShading = json.flatShading;\n\t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t\tif ( json.combine !== undefined ) material.combine = json.combine;\n\t\tif ( json.side !== undefined ) material.side = json.side;\n\t\tif ( json.shadowSide !== undefined ) material.shadowSide = json.shadowSide;\n\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t\tif ( json.alphaHash !== undefined ) material.alphaHash = json.alphaHash;\n\t\tif ( json.depthFunc !== undefined ) material.depthFunc = json.depthFunc;\n\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\t\tif ( json.blendSrc !== undefined ) material.blendSrc = json.blendSrc;\n\t\tif ( json.blendDst !== undefined ) material.blendDst = json.blendDst;\n\t\tif ( json.blendEquation !== undefined ) material.blendEquation = json.blendEquation;\n\t\tif ( json.blendSrcAlpha !== undefined ) material.blendSrcAlpha = json.blendSrcAlpha;\n\t\tif ( json.blendDstAlpha !== undefined ) material.blendDstAlpha = json.blendDstAlpha;\n\t\tif ( json.blendEquationAlpha !== undefined ) material.blendEquationAlpha = json.blendEquationAlpha;\n\t\tif ( json.blendColor !== undefined && material.blendColor !== undefined ) material.blendColor.setHex( json.blendColor );\n\t\tif ( json.blendAlpha !== undefined ) material.blendAlpha = json.blendAlpha;\n\t\tif ( json.stencilWriteMask !== undefined ) material.stencilWriteMask = json.stencilWriteMask;\n\t\tif ( json.stencilFunc !== undefined ) material.stencilFunc = json.stencilFunc;\n\t\tif ( json.stencilRef !== undefined ) material.stencilRef = json.stencilRef;\n\t\tif ( json.stencilFuncMask !== undefined ) material.stencilFuncMask = json.stencilFuncMask;\n\t\tif ( json.stencilFail !== undefined ) material.stencilFail = json.stencilFail;\n\t\tif ( json.stencilZFail !== undefined ) material.stencilZFail = json.stencilZFail;\n\t\tif ( json.stencilZPass !== undefined ) material.stencilZPass = json.stencilZPass;\n\t\tif ( json.stencilWrite !== undefined ) material.stencilWrite = json.stencilWrite;\n\n\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n\t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n\n\t\tif ( json.rotation !== undefined ) material.rotation = json.rotation;\n\n\t\tif ( json.linewidth !== undefined ) material.linewidth = json.linewidth;\n\t\tif ( json.dashSize !== undefined ) material.dashSize = json.dashSize;\n\t\tif ( json.gapSize !== undefined ) material.gapSize = json.gapSize;\n\t\tif ( json.scale !== undefined ) material.scale = json.scale;\n\n\t\tif ( json.polygonOffset !== undefined ) material.polygonOffset = json.polygonOffset;\n\t\tif ( json.polygonOffsetFactor !== undefined ) material.polygonOffsetFactor = json.polygonOffsetFactor;\n\t\tif ( json.polygonOffsetUnits !== undefined ) material.polygonOffsetUnits = json.polygonOffsetUnits;\n\n\t\tif ( json.dithering !== undefined ) material.dithering = json.dithering;\n\n\t\tif ( json.alphaToCoverage !== undefined ) material.alphaToCoverage = json.alphaToCoverage;\n\t\tif ( json.premultipliedAlpha !== undefined ) material.premultipliedAlpha = json.premultipliedAlpha;\n\t\tif ( json.forceSinglePass !== undefined ) material.forceSinglePass = json.forceSinglePass;\n\n\t\tif ( json.visible !== undefined ) material.visible = json.visible;\n\n\t\tif ( json.toneMapped !== undefined ) material.toneMapped = json.toneMapped;\n\n\t\tif ( json.userData !== undefined ) material.userData = json.userData;\n\n\t\tif ( json.vertexColors !== undefined ) {\n\n\t\t\tif ( typeof json.vertexColors === 'number' ) {\n\n\t\t\t\tmaterial.vertexColors = ( json.vertexColors > 0 ) ? true : false;\n\n\t\t\t} else {\n\n\t\t\t\tmaterial.vertexColors = json.vertexColors;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Shader Material\n\n\t\tif ( json.uniforms !== undefined ) {\n\n\t\t\tfor ( const name in json.uniforms ) {\n\n\t\t\t\tconst uniform = json.uniforms[ name ];\n\n\t\t\t\tmaterial.uniforms[ name ] = {};\n\n\t\t\t\tswitch ( uniform.type ) {\n\n\t\t\t\t\tcase 't':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = getTexture( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'c':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Color().setHex( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = uniform.value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json.defines !== undefined ) material.defines = json.defines;\n\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\t\tif ( json.glslVersion !== undefined ) material.glslVersion = json.glslVersion;\n\n\t\tif ( json.extensions !== undefined ) {\n\n\t\t\tfor ( const key in json.extensions ) {\n\n\t\t\t\tmaterial.extensions[ key ] = json.extensions[ key ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json.lights !== undefined ) material.lights = json.lights;\n\t\tif ( json.clipping !== undefined ) material.clipping = json.clipping;\n\n\t\t// for PointsMaterial\n\n\t\tif ( json.size !== undefined ) material.size = json.size;\n\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n\t\t// maps\n\n\t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\n\t\tif ( json.matcap !== undefined ) material.matcap = getTexture( json.matcap );\n\n\t\tif ( json.alphaMap !== undefined ) material.alphaMap = getTexture( json.alphaMap );\n\n\t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n\t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n\t\tif ( json.normalMapType !== undefined ) material.normalMapType = json.normalMapType;\n\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\tlet normalScale = json.normalScale;\n\n\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t}\n\n\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n\t\t}\n\n\t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n\n\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\n\t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n\t\tif ( json.specularIntensityMap !== undefined ) material.specularIntensityMap = getTexture( json.specularIntensityMap );\n\t\tif ( json.specularColorMap !== undefined ) material.specularColorMap = getTexture( json.specularColorMap );\n\n\t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n\t\tif ( json.envMapRotation !== undefined ) material.envMapRotation.fromArray( json.envMapRotation );\n\t\tif ( json.envMapIntensity !== undefined ) material.envMapIntensity = json.envMapIntensity;\n\n\t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\t\tif ( json.refractionRatio !== undefined ) material.refractionRatio = json.refractionRatio;\n\n\t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n\t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n\t\tif ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );\n\n\t\tif ( json.clearcoatMap !== undefined ) material.clearcoatMap = getTexture( json.clearcoatMap );\n\t\tif ( json.clearcoatRoughnessMap !== undefined ) material.clearcoatRoughnessMap = getTexture( json.clearcoatRoughnessMap );\n\t\tif ( json.clearcoatNormalMap !== undefined ) material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap );\n\t\tif ( json.clearcoatNormalScale !== undefined ) material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale );\n\n\t\tif ( json.iridescenceMap !== undefined ) material.iridescenceMap = getTexture( json.iridescenceMap );\n\t\tif ( json.iridescenceThicknessMap !== undefined ) material.iridescenceThicknessMap = getTexture( json.iridescenceThicknessMap );\n\n\t\tif ( json.transmissionMap !== undefined ) material.transmissionMap = getTexture( json.transmissionMap );\n\t\tif ( json.thicknessMap !== undefined ) material.thicknessMap = getTexture( json.thicknessMap );\n\n\t\tif ( json.anisotropyMap !== undefined ) material.anisotropyMap = getTexture( json.anisotropyMap );\n\n\t\tif ( json.sheenColorMap !== undefined ) material.sheenColorMap = getTexture( json.sheenColorMap );\n\t\tif ( json.sheenRoughnessMap !== undefined ) material.sheenRoughnessMap = getTexture( json.sheenRoughnessMap );\n\n\t\treturn material;\n\n\t}\n\n\t/**\n\t * Textures are not embedded in the material JSON so they have\n\t * to be injected before the loading process starts.\n\t *\n\t * @param {Object} value - A dictionary holding textures for material properties.\n\t * @return {MaterialLoader} A reference to this material loader.\n\t */\n\tsetTextures( value ) {\n\n\t\tthis.textures = value;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Creates a material for the given type.\n\t *\n\t * @param {string} type - The material type.\n\t * @return {Material} The new material.\n\t */\n\tcreateMaterialFromType( type ) {\n\n\t\treturn MaterialLoader.createMaterialFromType( type );\n\n\t}\n\n\t/**\n\t * Creates a material for the given type.\n\t *\n\t * @static\n\t * @param {string} type - The material type.\n\t * @return {Material} The new material.\n\t */\n\tstatic createMaterialFromType( type ) {\n\n\t\tconst materialLib = {\n\t\t\tShadowMaterial,\n\t\t\tSpriteMaterial,\n\t\t\tRawShaderMaterial,\n\t\t\tShaderMaterial,\n\t\t\tPointsMaterial,\n\t\t\tMeshPhysicalMaterial,\n\t\t\tMeshStandardMaterial,\n\t\t\tMeshPhongMaterial,\n\t\t\tMeshToonMaterial,\n\t\t\tMeshNormalMaterial,\n\t\t\tMeshLambertMaterial,\n\t\t\tMeshDepthMaterial,\n\t\t\tMeshDistanceMaterial,\n\t\t\tMeshBasicMaterial,\n\t\t\tMeshMatcapMaterial,\n\t\t\tLineDashedMaterial,\n\t\t\tLineBasicMaterial,\n\t\t\tMaterial\n\t\t};\n\n\t\treturn new materialLib[ type ]();\n\n\t}\n\n}\n\n/**\n * A class with loader utility functions.\n */\nclass LoaderUtils {\n\n\t/**\n\t * Extracts the base URL from the given URL.\n\t *\n\t * @param {string} url -The URL to extract the base URL from.\n\t * @return {string} The extracted base URL.\n\t */\n\tstatic extractUrlBase( url ) {\n\n\t\tconst index = url.lastIndexOf( '/' );\n\n\t\tif ( index === -1 ) return './';\n\n\t\treturn url.slice( 0, index + 1 );\n\n\t}\n\n\t/**\n\t * Resolves relative URLs against the given path. Absolute paths, data urls,\n\t * and blob URLs will be returned as is. Invalid URLs will return an empty\n\t * string.\n\t *\n\t * @param {string} url -The URL to resolve.\n\t * @param {string} path - The base path for relative URLs to be resolved against.\n\t * @return {string} The resolved URL.\n\t */\n\tstatic resolveURL( url, path ) {\n\n\t\t// Invalid URL\n\t\tif ( typeof url !== 'string' || url === '' ) return '';\n\n\t\t// Host Relative URL\n\t\tif ( /^https?:\\/\\//i.test( path ) && /^\\//.test( url ) ) {\n\n\t\t\tpath = path.replace( /(^https?:\\/\\/[^\\/]+).*/i, '$1' );\n\n\t\t}\n\n\t\t// Absolute URL http://,https://,//\n\t\tif ( /^(https?:)?\\/\\//i.test( url ) ) return url;\n\n\t\t// Data URI\n\t\tif ( /^data:.*,.*$/i.test( url ) ) return url;\n\n\t\t// Blob URL\n\t\tif ( /^blob:.*$/i.test( url ) ) return url;\n\n\t\t// Relative URL\n\t\treturn path + url;\n\n\t}\n\n}\n\n/**\n * An instanced version of a geometry.\n */\nclass InstancedBufferGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new instanced buffer geometry.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isInstancedBufferGeometry = true;\n\n\t\tthis.type = 'InstancedBufferGeometry';\n\n\t\t/**\n\t\t * The instance count.\n\t\t *\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */\n\t\tthis.instanceCount = Infinity;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.instanceCount = source.instanceCount;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.instanceCount = this.instanceCount;\n\n\t\tdata.isInstancedBufferGeometry = true;\n\n\t\treturn data;\n\n\t}\n\n}\n\n/**\n * Class for loading geometries. The files are internally\n * loaded via {@link FileLoader}.\n *\n * ```js\n * const loader = new THREE.BufferGeometryLoader();\n * const geometry = await loader.loadAsync( 'models/json/pressure.json' );\n *\n * const material = new THREE.MeshBasicMaterial( { color: 0xF5F5F5 } );\n * const object = new THREE.Mesh( geometry, material );\n * scene.add( object );\n * ```\n *\n * @augments Loader\n */\nclass BufferGeometryLoader extends Loader {\n\n\t/**\n\t * Constructs a new geometry loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and pass the loaded geometry to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(BufferGeometry)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Parses the given JSON object and returns a geometry.\n\t *\n\t * @param {Object} json - The serialized geometry.\n\t * @return {BufferGeometry} The parsed geometry.\n\t */\n\tparse( json ) {\n\n\t\tconst interleavedBufferMap = {};\n\t\tconst arrayBufferMap = {};\n\n\t\tfunction getInterleavedBuffer( json, uuid ) {\n\n\t\t\tif ( interleavedBufferMap[ uuid ] !== undefined ) return interleavedBufferMap[ uuid ];\n\n\t\t\tconst interleavedBuffers = json.interleavedBuffers;\n\t\t\tconst interleavedBuffer = interleavedBuffers[ uuid ];\n\n\t\t\tconst buffer = getArrayBuffer( json, interleavedBuffer.buffer );\n\n\t\t\tconst array = getTypedArray( interleavedBuffer.type, buffer );\n\t\t\tconst ib = new InterleavedBuffer( array, interleavedBuffer.stride );\n\t\t\tib.uuid = interleavedBuffer.uuid;\n\n\t\t\tinterleavedBufferMap[ uuid ] = ib;\n\n\t\t\treturn ib;\n\n\t\t}\n\n\t\tfunction getArrayBuffer( json, uuid ) {\n\n\t\t\tif ( arrayBufferMap[ uuid ] !== undefined ) return arrayBufferMap[ uuid ];\n\n\t\t\tconst arrayBuffers = json.arrayBuffers;\n\t\t\tconst arrayBuffer = arrayBuffers[ uuid ];\n\n\t\t\tconst ab = new Uint32Array( arrayBuffer ).buffer;\n\n\t\t\tarrayBufferMap[ uuid ] = ab;\n\n\t\t\treturn ab;\n\n\t\t}\n\n\t\tconst geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n\n\t\tconst index = json.data.index;\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tconst typedArray = getTypedArray( index.type, index.array );\n\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n\t\t}\n\n\t\tconst attributes = json.data.attributes;\n\n\t\tfor ( const key in attributes ) {\n\n\t\t\tconst attribute = attributes[ key ];\n\t\t\tlet bufferAttribute;\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\tconst interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );\n\t\t\t\tbufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );\n\n\t\t\t} else {\n\n\t\t\t\tconst typedArray = getTypedArray( attribute.type, attribute.array );\n\t\t\t\tconst bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n\t\t\t\tbufferAttribute = new bufferAttributeConstr( typedArray, attribute.itemSize, attribute.normalized );\n\n\t\t\t}\n\n\t\t\tif ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;\n\t\t\tif ( attribute.usage !== undefined ) bufferAttribute.setUsage( attribute.usage );\n\n\t\t\tgeometry.setAttribute( key, bufferAttribute );\n\n\t\t}\n\n\t\tconst morphAttributes = json.data.morphAttributes;\n\n\t\tif ( morphAttributes ) {\n\n\t\t\tfor ( const key in morphAttributes ) {\n\n\t\t\t\tconst attributeArray = morphAttributes[ key ];\n\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor ( let i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst attribute = attributeArray[ i ];\n\t\t\t\t\tlet bufferAttribute;\n\n\t\t\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\tconst interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );\n\t\t\t\t\t\tbufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst typedArray = getTypedArray( attribute.type, attribute.array );\n\t\t\t\t\t\tbufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;\n\t\t\t\t\tarray.push( bufferAttribute );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.morphAttributes[ key ] = array;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst morphTargetsRelative = json.data.morphTargetsRelative;\n\n\t\tif ( morphTargetsRelative ) {\n\n\t\t\tgeometry.morphTargetsRelative = true;\n\n\t\t}\n\n\t\tconst groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\tif ( groups !== undefined ) {\n\n\t\t\tfor ( let i = 0, n = groups.length; i !== n; ++ i ) {\n\n\t\t\t\tconst group = groups[ i ];\n\n\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst boundingSphere = json.data.boundingSphere;\n\n\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\tconst center = new Vector3();\n\n\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t}\n\n\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n\t\t}\n\n\t\tif ( json.name ) geometry.name = json.name;\n\t\tif ( json.userData ) geometry.userData = json.userData;\n\n\t\treturn geometry;\n\n\t}\n\n}\n\n/**\n * A loader for loading a JSON resource in the [JSON Object/Scene format]{@link https://github.com/mrdoob/three.js/wiki/JSON-Object-Scene-format-4}.\n * The files are internally loaded via {@link FileLoader}.\n *\n * ```js\n * const loader = new THREE.ObjectLoader();\n * const obj = await loader.loadAsync( 'models/json/example.json' );\n * scene.add( obj );\n *\n * // Alternatively, to parse a previously loaded JSON structure\n * const object = await loader.parseAsync( a_json_object );\n * scene.add( object );\n * ```\n *\n * @augments Loader\n */\nclass ObjectLoader extends Loader {\n\n\t/**\n\t * Constructs a new object loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and pass the loaded 3D object to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(Object3D)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\t\tthis.resourcePath = this.resourcePath || path;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tlet json = null;\n\n\t\t\ttry {\n\n\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tif ( onError !== undefined ) onError( error );\n\n\t\t\t\tconsole.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tconst metadata = json.metadata;\n\n\t\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\t\tif ( onError !== undefined ) onError( new Error( 'THREE.ObjectLoader: Can\\'t load ' + url ) );\n\n\t\t\t\tconsole.error( 'THREE.ObjectLoader: Can\\'t load ' + url );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tscope.parse( json, onLoad );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Async version of {@link ObjectLoader#load}.\n\t *\n\t * @async\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @return {Promise<Object3D>} A Promise that resolves with the loaded 3D object.\n\t */\n\tasync loadAsync( url, onProgress ) {\n\n\t\tconst scope = this;\n\n\t\tconst path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\t\tthis.resourcePath = this.resourcePath || path;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tconst text = await loader.loadAsync( url, onProgress );\n\n\t\tconst json = JSON.parse( text );\n\n\t\tconst metadata = json.metadata;\n\n\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\tthrow new Error( 'THREE.ObjectLoader: Can\\'t load ' + url );\n\n\t\t}\n\n\t\treturn await scope.parseAsync( json );\n\n\t}\n\n\t/**\n\t * Parses the given JSON. This is used internally by {@link ObjectLoader#load}\n\t * but can also be used directly to parse a previously loaded JSON structure.\n\t *\n\t * @param {Object} json - The serialized 3D object.\n\t * @param {onLoad} onLoad - Executed when all resources (e.g. textures) have been fully loaded.\n\t * @return {Object3D} The parsed 3D object.\n\t */\n\tparse( json, onLoad ) {\n\n\t\tconst animations = this.parseAnimations( json.animations );\n\t\tconst shapes = this.parseShapes( json.shapes );\n\t\tconst geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\tconst images = this.parseImages( json.images, function () {\n\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t} );\n\n\t\tconst textures = this.parseTextures( json.textures, images );\n\t\tconst materials = this.parseMaterials( json.materials, textures );\n\n\t\tconst object = this.parseObject( json.object, geometries, materials, textures, animations );\n\t\tconst skeletons = this.parseSkeletons( json.skeletons, object );\n\n\t\tthis.bindSkeletons( object, skeletons );\n\t\tthis.bindLightTargets( object );\n\n\t\t//\n\n\t\tif ( onLoad !== undefined ) {\n\n\t\t\tlet hasImages = false;\n\n\t\t\tfor ( const uuid in images ) {\n\n\t\t\t\tif ( images[ uuid ].data instanceof HTMLImageElement ) {\n\n\t\t\t\t\thasImages = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasImages === false ) onLoad( object );\n\n\t\t}\n\n\t\treturn object;\n\n\t}\n\n\t/**\n\t * Async version of {@link ObjectLoader#parse}.\n\t *\n\t * @param {Object} json - The serialized 3D object.\n\t * @return {Promise<Object3D>} A Promise that resolves with the parsed 3D object.\n\t */\n\tasync parseAsync( json ) {\n\n\t\tconst animations = this.parseAnimations( json.animations );\n\t\tconst shapes = this.parseShapes( json.shapes );\n\t\tconst geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\tconst images = await this.parseImagesAsync( json.images );\n\n\t\tconst textures = this.parseTextures( json.textures, images );\n\t\tconst materials = this.parseMaterials( json.materials, textures );\n\n\t\tconst object = this.parseObject( json.object, geometries, materials, textures, animations );\n\t\tconst skeletons = this.parseSkeletons( json.skeletons, object );\n\n\t\tthis.bindSkeletons( object, skeletons );\n\t\tthis.bindLightTargets( object );\n\n\t\treturn object;\n\n\t}\n\n\t// internals\n\n\tparseShapes( json ) {\n\n\t\tconst shapes = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst shape = new Shape().fromJSON( json[ i ] );\n\n\t\t\t\tshapes[ shape.uuid ] = shape;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn shapes;\n\n\t}\n\n\tparseSkeletons( json, object ) {\n\n\t\tconst skeletons = {};\n\t\tconst bones = {};\n\n\t\t// generate bone lookup table\n\n\t\tobject.traverse( function ( child ) {\n\n\t\t\tif ( child.isBone ) bones[ child.uuid ] = child;\n\n\t\t} );\n\n\t\t// create skeletons\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst skeleton = new Skeleton().fromJSON( json[ i ], bones );\n\n\t\t\t\tskeletons[ skeleton.uuid ] = skeleton;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn skeletons;\n\n\t}\n\n\tparseGeometries( json, shapes ) {\n\n\t\tconst geometries = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tconst bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tlet geometry;\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\tcase 'BufferGeometry':\n\t\t\t\t\tcase 'InstancedBufferGeometry':\n\n\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( data.type in Geometries ) {\n\n\t\t\t\t\t\t\tgeometry = Geometries[ data.type ].fromJSON( data, shapes );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( `THREE.ObjectLoader: Unsupported geometry type \"${ data.type }\"` );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\t\t\t\tif ( data.userData !== undefined ) geometry.userData = data.userData;\n\n\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn geometries;\n\n\t}\n\n\tparseMaterials( json, textures ) {\n\n\t\tconst cache = {}; // MultiMaterial\n\t\tconst materials = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tconst loader = new MaterialLoader();\n\t\t\tloader.setTextures( textures );\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tif ( cache[ data.uuid ] === undefined ) {\n\n\t\t\t\t\tcache[ data.uuid ] = loader.parse( data );\n\n\t\t\t\t}\n\n\t\t\t\tmaterials[ data.uuid ] = cache[ data.uuid ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn materials;\n\n\t}\n\n\tparseAnimations( json ) {\n\n\t\tconst animations = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tconst clip = AnimationClip.parse( data );\n\n\t\t\t\tanimations[ clip.uuid ] = clip;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn animations;\n\n\t}\n\n\tparseImages( json, onLoad ) {\n\n\t\tconst scope = this;\n\t\tconst images = {};\n\n\t\tlet loader;\n\n\t\tfunction loadImage( url ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn loader.load( url, function () {\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, undefined, function () {\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tfunction deserializeImage( image ) {\n\n\t\t\tif ( typeof image === 'string' ) {\n\n\t\t\t\tconst url = image;\n\n\t\t\t\tconst path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( url ) ? url : scope.resourcePath + url;\n\n\t\t\t\treturn loadImage( path );\n\n\t\t\t} else {\n\n\t\t\t\tif ( image.data ) {\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdata: getTypedArray( image.type, image.data ),\n\t\t\t\t\t\twidth: image.width,\n\t\t\t\t\t\theight: image.height\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\tconst manager = new LoadingManager( onLoad );\n\n\t\t\tloader = new ImageLoader( manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tfor ( let i = 0, il = json.length; i < il; i ++ ) {\n\n\t\t\t\tconst image = json[ i ];\n\t\t\t\tconst url = image.url;\n\n\t\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\t\t// load array of images e.g CubeTexture\n\n\t\t\t\t\tconst imageArray = [];\n\n\t\t\t\t\tfor ( let j = 0, jl = url.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tconst currentUrl = url[ j ];\n\n\t\t\t\t\t\tconst deserializedImage = deserializeImage( currentUrl );\n\n\t\t\t\t\t\tif ( deserializedImage !== null ) {\n\n\t\t\t\t\t\t\tif ( deserializedImage instanceof HTMLImageElement ) {\n\n\t\t\t\t\t\t\t\timageArray.push( deserializedImage );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\n\n\t\t\t\t\t\t\t\timageArray.push( new DataTexture( deserializedImage.data, deserializedImage.width, deserializedImage.height ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\timages[ image.uuid ] = new Source( imageArray );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// load single image\n\n\t\t\t\t\tconst deserializedImage = deserializeImage( image.url );\n\t\t\t\t\timages[ image.uuid ] = new Source( deserializedImage );\n\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn images;\n\n\t}\n\n\tasync parseImagesAsync( json ) {\n\n\t\tconst scope = this;\n\t\tconst images = {};\n\n\t\tlet loader;\n\n\t\tasync function deserializeImage( image ) {\n\n\t\t\tif ( typeof image === 'string' ) {\n\n\t\t\t\tconst url = image;\n\n\t\t\t\tconst path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( url ) ? url : scope.resourcePath + url;\n\n\t\t\t\treturn await loader.loadAsync( path );\n\n\t\t\t} else {\n\n\t\t\t\tif ( image.data ) {\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdata: getTypedArray( image.type, image.data ),\n\t\t\t\t\t\twidth: image.width,\n\t\t\t\t\t\theight: image.height\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\tloader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tfor ( let i = 0, il = json.length; i < il; i ++ ) {\n\n\t\t\t\tconst image = json[ i ];\n\t\t\t\tconst url = image.url;\n\n\t\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\t\t// load array of images e.g CubeTexture\n\n\t\t\t\t\tconst imageArray = [];\n\n\t\t\t\t\tfor ( let j = 0, jl = url.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tconst currentUrl = url[ j ];\n\n\t\t\t\t\t\tconst deserializedImage = await deserializeImage( currentUrl );\n\n\t\t\t\t\t\tif ( deserializedImage !== null ) {\n\n\t\t\t\t\t\t\tif ( deserializedImage instanceof HTMLImageElement ) {\n\n\t\t\t\t\t\t\t\timageArray.push( deserializedImage );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\n\n\t\t\t\t\t\t\t\timageArray.push( new DataTexture( deserializedImage.data, deserializedImage.width, deserializedImage.height ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\timages[ image.uuid ] = new Source( imageArray );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// load single image\n\n\t\t\t\t\tconst deserializedImage = await deserializeImage( image.url );\n\t\t\t\t\timages[ image.uuid ] = new Source( deserializedImage );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn images;\n\n\t}\n\n\tparseTextures( json, images ) {\n\n\t\tfunction parseConstant( value, type ) {\n\n\t\t\tif ( typeof value === 'number' ) return value;\n\n\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\treturn type[ value ];\n\n\t\t}\n\n\t\tconst textures = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t}\n\n\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t}\n\n\t\t\t\tconst source = images[ data.image ];\n\t\t\t\tconst image = source.data;\n\n\t\t\t\tlet texture;\n\n\t\t\t\tif ( Array.isArray( image ) ) {\n\n\t\t\t\t\ttexture = new CubeTexture();\n\n\t\t\t\t\tif ( image.length === 6 ) texture.needsUpdate = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( image && image.data ) {\n\n\t\t\t\t\t\ttexture = new DataTexture();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture = new Texture();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( image ) texture.needsUpdate = true; // textures can have undefined image data\n\n\t\t\t\t}\n\n\t\t\t\ttexture.source = source;\n\n\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\n\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );\n\t\t\t\tif ( data.channel !== undefined ) texture.channel = data.channel;\n\n\t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\n\t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\n\t\t\t\tif ( data.center !== undefined ) texture.center.fromArray( data.center );\n\t\t\t\tif ( data.rotation !== undefined ) texture.rotation = data.rotation;\n\n\t\t\t\tif ( data.wrap !== undefined ) {\n\n\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\n\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.format !== undefined ) texture.format = data.format;\n\t\t\t\tif ( data.internalFormat !== undefined ) texture.internalFormat = data.internalFormat;\n\t\t\t\tif ( data.type !== undefined ) texture.type = data.type;\n\t\t\t\tif ( data.colorSpace !== undefined ) texture.colorSpace = data.colorSpace;\n\n\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );\n\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );\n\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\n\t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\n\n\t\t\t\tif ( data.generateMipmaps !== undefined ) texture.generateMipmaps = data.generateMipmaps;\n\t\t\t\tif ( data.premultiplyAlpha !== undefined ) texture.premultiplyAlpha = data.premultiplyAlpha;\n\t\t\t\tif ( data.unpackAlignment !== undefined ) texture.unpackAlignment = data.unpackAlignment;\n\t\t\t\tif ( data.compareFunction !== undefined ) texture.compareFunction = data.compareFunction;\n\n\t\t\t\tif ( data.userData !== undefined ) texture.userData = data.userData;\n\n\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn textures;\n\n\t}\n\n\tparseObject( data, geometries, materials, textures, animations ) {\n\n\t\tlet object;\n\n\t\tfunction getGeometry( name ) {\n\n\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t}\n\n\t\t\treturn geometries[ name ];\n\n\t\t}\n\n\t\tfunction getMaterial( name ) {\n\n\t\t\tif ( name === undefined ) return undefined;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor ( let i = 0, l = name.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst uuid = name[ i ];\n\n\t\t\t\t\tif ( materials[ uuid ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tarray.push( materials[ uuid ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn array;\n\n\t\t\t}\n\n\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t}\n\n\t\t\treturn materials[ name ];\n\n\t\t}\n\n\t\tfunction getTexture( uuid ) {\n\n\t\t\tif ( textures[ uuid ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined texture', uuid );\n\n\t\t\t}\n\n\t\t\treturn textures[ uuid ];\n\n\t\t}\n\n\t\tlet geometry, material;\n\n\t\tswitch ( data.type ) {\n\n\t\t\tcase 'Scene':\n\n\t\t\t\tobject = new Scene();\n\n\t\t\t\tif ( data.background !== undefined ) {\n\n\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n\t\t\t\t\t\tobject.background = new Color( data.background );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tobject.background = getTexture( data.background );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.environment !== undefined ) {\n\n\t\t\t\t\tobject.environment = getTexture( data.environment );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.fog !== undefined ) {\n\n\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.fog.name !== '' ) {\n\n\t\t\t\t\t\tobject.fog.name = data.fog.name;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.backgroundBlurriness !== undefined ) object.backgroundBlurriness = data.backgroundBlurriness;\n\t\t\t\tif ( data.backgroundIntensity !== undefined ) object.backgroundIntensity = data.backgroundIntensity;\n\t\t\t\tif ( data.backgroundRotation !== undefined ) object.backgroundRotation.fromArray( data.backgroundRotation );\n\n\t\t\t\tif ( data.environmentIntensity !== undefined ) object.environmentIntensity = data.environmentIntensity;\n\t\t\t\tif ( data.environmentRotation !== undefined ) object.environmentRotation.fromArray( data.environmentRotation );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'AmbientLight':\n\n\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'DirectionalLight':\n\n\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\t\t\t\tobject.target = data.target || '';\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PointLight':\n\n\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'RectAreaLight':\n\n\t\t\t\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'SpotLight':\n\n\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\t\t\t\tobject.target = data.target || '';\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'HemisphereLight':\n\n\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LightProbe':\n\n\t\t\t\tobject = new LightProbe().fromJSON( data );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'SkinnedMesh':\n\n\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t \tmaterial = getMaterial( data.material );\n\n\t\t\t\tobject = new SkinnedMesh( geometry, material );\n\n\t\t\t\tif ( data.bindMode !== undefined ) object.bindMode = data.bindMode;\n\t\t\t\tif ( data.bindMatrix !== undefined ) object.bindMatrix.fromArray( data.bindMatrix );\n\t\t\t\tif ( data.skeleton !== undefined ) object.skeleton = data.skeleton;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Mesh':\n\n\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t\tmaterial = getMaterial( data.material );\n\n\t\t\t\tobject = new Mesh( geometry, material );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'InstancedMesh':\n\n\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t\tmaterial = getMaterial( data.material );\n\t\t\t\tconst count = data.count;\n\t\t\t\tconst instanceMatrix = data.instanceMatrix;\n\t\t\t\tconst instanceColor = data.instanceColor;\n\n\t\t\t\tobject = new InstancedMesh( geometry, material, count );\n\t\t\t\tobject.instanceMatrix = new InstancedBufferAttribute( new Float32Array( instanceMatrix.array ), 16 );\n\t\t\t\tif ( instanceColor !== undefined ) object.instanceColor = new InstancedBufferAttribute( new Float32Array( instanceColor.array ), instanceColor.itemSize );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'BatchedMesh':\n\n\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t\tmaterial = getMaterial( data.material );\n\n\t\t\t\tobject = new BatchedMesh( data.maxInstanceCount, data.maxVertexCount, data.maxIndexCount, material );\n\t\t\t\tobject.geometry = geometry;\n\t\t\t\tobject.perObjectFrustumCulled = data.perObjectFrustumCulled;\n\t\t\t\tobject.sortObjects = data.sortObjects;\n\n\t\t\t\tobject._drawRanges = data.drawRanges;\n\t\t\t\tobject._reservedRanges = data.reservedRanges;\n\n\t\t\t\tobject._geometryInfo = data.geometryInfo.map( info => {\n\n\t\t\t\t\tlet box = null;\n\t\t\t\t\tlet sphere = null;\n\t\t\t\t\tif ( info.boundingBox !== undefined ) {\n\n\t\t\t\t\t\tbox = new Box3();\n\t\t\t\t\t\tbox.min.fromArray( info.boundingBox.min );\n\t\t\t\t\t\tbox.max.fromArray( info.boundingBox.max );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( info.boundingSphere !== undefined ) {\n\n\t\t\t\t\t\tsphere = new Sphere();\n\t\t\t\t\t\tsphere.radius = info.boundingSphere.radius;\n\t\t\t\t\t\tsphere.center.fromArray( info.boundingSphere.center );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...info,\n\t\t\t\t\t\tboundingBox: box,\n\t\t\t\t\t\tboundingSphere: sphere\n\t\t\t\t\t};\n\n\t\t\t\t} );\n\t\t\t\tobject._instanceInfo = data.instanceInfo;\n\n\t\t\t\tobject._availableInstanceIds = data._availableInstanceIds;\n\t\t\t\tobject._availableGeometryIds = data._availableGeometryIds;\n\n\t\t\t\tobject._nextIndexStart = data.nextIndexStart;\n\t\t\t\tobject._nextVertexStart = data.nextVertexStart;\n\t\t\t\tobject._geometryCount = data.geometryCount;\n\n\t\t\t\tobject._maxInstanceCount = data.maxInstanceCount;\n\t\t\t\tobject._maxVertexCount = data.maxVertexCount;\n\t\t\t\tobject._maxIndexCount = data.maxIndexCount;\n\n\t\t\t\tobject._geometryInitialized = data.geometryInitialized;\n\n\t\t\t\tobject._matricesTexture = getTexture( data.matricesTexture.uuid );\n\n\t\t\t\tobject._indirectTexture = getTexture( data.indirectTexture.uuid );\n\n\t\t\t\tif ( data.colorsTexture !== undefined ) {\n\n\t\t\t\t\tobject._colorsTexture = getTexture( data.colorsTexture.uuid );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.boundingSphere !== undefined ) {\n\n\t\t\t\t\tobject.boundingSphere = new Sphere();\n\t\t\t\t\tobject.boundingSphere.center.fromArray( data.boundingSphere.center );\n\t\t\t\t\tobject.boundingSphere.radius = data.boundingSphere.radius;\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.boundingBox !== undefined ) {\n\n\t\t\t\t\tobject.boundingBox = new Box3();\n\t\t\t\t\tobject.boundingBox.min.fromArray( data.boundingBox.min );\n\t\t\t\t\tobject.boundingBox.max.fromArray( data.boundingBox.max );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LOD':\n\n\t\t\t\tobject = new LOD();\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Line':\n\n\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LineLoop':\n\n\t\t\t\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LineSegments':\n\n\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PointCloud':\n\t\t\tcase 'Points':\n\n\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Sprite':\n\n\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Group':\n\n\t\t\t\tobject = new Group();\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Bone':\n\n\t\t\t\tobject = new Bone();\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tobject = new Object3D();\n\n\t\t}\n\n\t\tobject.uuid = data.uuid;\n\n\t\tif ( data.name !== undefined ) object.name = data.name;\n\n\t\tif ( data.matrix !== undefined ) {\n\n\t\t\tobject.matrix.fromArray( data.matrix );\n\n\t\t\tif ( data.matrixAutoUpdate !== undefined ) object.matrixAutoUpdate = data.matrixAutoUpdate;\n\t\t\tif ( object.matrixAutoUpdate ) object.matrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t} else {\n\n\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n\t\t\tif ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\n\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\n\t\t}\n\n\t\tif ( data.up !== undefined ) object.up.fromArray( data.up );\n\n\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\n\t\tif ( data.shadow ) {\n\n\t\t\tif ( data.shadow.intensity !== undefined ) object.shadow.intensity = data.shadow.intensity;\n\t\t\tif ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\n\t\t\tif ( data.shadow.normalBias !== undefined ) object.shadow.normalBias = data.shadow.normalBias;\n\t\t\tif ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\n\t\t\tif ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\n\t\t\tif ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\n\n\t\t}\n\n\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n\t\tif ( data.frustumCulled !== undefined ) object.frustumCulled = data.frustumCulled;\n\t\tif ( data.renderOrder !== undefined ) object.renderOrder = data.renderOrder;\n\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\t\tif ( data.layers !== undefined ) object.layers.mask = data.layers;\n\n\t\tif ( data.children !== undefined ) {\n\n\t\t\tconst children = data.children;\n\n\t\t\tfor ( let i = 0; i < children.length; i ++ ) {\n\n\t\t\t\tobject.add( this.parseObject( children[ i ], geometries, materials, textures, animations ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( data.animations !== undefined ) {\n\n\t\t\tconst objectAnimations = data.animations;\n\n\t\t\tfor ( let i = 0; i < objectAnimations.length; i ++ ) {\n\n\t\t\t\tconst uuid = objectAnimations[ i ];\n\n\t\t\t\tobject.animations.push( animations[ uuid ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( data.type === 'LOD' ) {\n\n\t\t\tif ( data.autoUpdate !== undefined ) object.autoUpdate = data.autoUpdate;\n\n\t\t\tconst levels = data.levels;\n\n\t\t\tfor ( let l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\tconst level = levels[ l ];\n\t\t\t\tconst child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\tobject.addLevel( child, level.distance, level.hysteresis );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn object;\n\n\t}\n\n\tbindSkeletons( object, skeletons ) {\n\n\t\tif ( Object.keys( skeletons ).length === 0 ) return;\n\n\t\tobject.traverse( function ( child ) {\n\n\t\t\tif ( child.isSkinnedMesh === true && child.skeleton !== undefined ) {\n\n\t\t\t\tconst skeleton = skeletons[ child.skeleton ];\n\n\t\t\t\tif ( skeleton === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tchild.bind( skeleton, child.bindMatrix );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\tbindLightTargets( object ) {\n\n\t\tobject.traverse( function ( child ) {\n\n\t\t\tif ( child.isDirectionalLight || child.isSpotLight ) {\n\n\t\t\t\tconst uuid = child.target;\n\n\t\t\t\tconst target = object.getObjectByProperty( 'uuid', uuid );\n\n\t\t\t\tif ( target !== undefined ) {\n\n\t\t\t\t\tchild.target = target;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tchild.target = new Object3D();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n}\n\nconst TEXTURE_MAPPING = {\n\tUVMapping: UVMapping,\n\tCubeReflectionMapping: CubeReflectionMapping,\n\tCubeRefractionMapping: CubeRefractionMapping,\n\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\tCubeUVReflectionMapping: CubeUVReflectionMapping\n};\n\nconst TEXTURE_WRAPPING = {\n\tRepeatWrapping: RepeatWrapping,\n\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\tMirroredRepeatWrapping: MirroredRepeatWrapping\n};\n\nconst TEXTURE_FILTER = {\n\tNearestFilter: NearestFilter,\n\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\n\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\n\tLinearFilter: LinearFilter,\n\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\n\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\n};\n\n/**\n * A loader for loading images as an [ImageBitmap]{@link https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap}.\n * An `ImageBitmap` provides an asynchronous and resource efficient pathway to prepare\n * textures for rendering.\n *\n * Note that {@link Texture#flipY} and {@link Texture#premultiplyAlpha} are ignored with image bitmaps.\n * They needs these configuration on bitmap creation unlike regular images need them on uploading to GPU.\n *\n * You need to set the equivalent options via {@link ImageBitmapLoader#setOptions} instead.\n *\n * Also note that unlike {@link FileLoader}, this loader does not avoid multiple concurrent requests to the same URL.\n *\n * ```js\n * const loader = new THREE.ImageBitmapLoader();\n * loader.setOptions( { imageOrientation: 'flipY' } ); // set options if needed\n * const imageBitmap = await loader.loadAsync( 'image.png' );\n *\n * const texture = new THREE.Texture( imageBitmap );\n * texture.needsUpdate = true;\n * ```\n *\n * @augments Loader\n */\nclass ImageBitmapLoader extends Loader {\n\n\t/**\n\t * Constructs a new image bitmap loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isImageBitmapLoader = true;\n\n\t\tif ( typeof createImageBitmap === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\n\n\t\t}\n\n\t\tif ( typeof fetch === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\n\n\t\t}\n\n\t\t/**\n\t\t * Represents the loader options.\n\t\t *\n\t\t * @type {Object}\n\t\t * @default {premultiplyAlpha:'none'}\n\t\t */\n\t\tthis.options = { premultiplyAlpha: 'none' };\n\n\t}\n\n\t/**\n\t * Sets the given loader options. The structure of the object must match the `options` parameter of\n\t * [createImageBitmap]{@link https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap}.\n\t *\n\t * @param {Object} options - The loader options to set.\n\t * @return {ImageBitmapLoader} A reference to this image bitmap loader.\n\t */\n\tsetOptions( options ) {\n\n\t\tthis.options = options;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and pass the loaded image bitmap to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(ImageBitmap)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Unsupported in this loader.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t * @return {ImageBitmap|undefined} The image bitmap.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tconst scope = this;\n\n\t\tconst cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\t// If cached is a promise, wait for it to resolve\n\t\t\tif ( cached.then ) {\n\n\t\t\t\tcached.then( imageBitmap => {\n\n\t\t\t\t\tif ( onLoad ) onLoad( imageBitmap );\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t} ).catch( e => {\n\n\t\t\t\t\tif ( onError ) onError( e );\n\n\t\t\t\t} );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// If cached is not a promise (i.e., it's already an imageBitmap)\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tconst fetchOptions = {};\n\t\tfetchOptions.credentials = ( this.crossOrigin === 'anonymous' ) ? 'same-origin' : 'include';\n\t\tfetchOptions.headers = this.requestHeader;\n\n\t\tconst promise = fetch( url, fetchOptions ).then( function ( res ) {\n\n\t\t\treturn res.blob();\n\n\t\t} ).then( function ( blob ) {\n\n\t\t\treturn createImageBitmap( blob, Object.assign( scope.options, { colorSpaceConversion: 'none' } ) );\n\n\t\t} ).then( function ( imageBitmap ) {\n\n\t\t\tCache.add( url, imageBitmap );\n\n\t\t\tif ( onLoad ) onLoad( imageBitmap );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t\treturn imageBitmap;\n\n\t\t} ).catch( function ( e ) {\n\n\t\t\tif ( onError ) onError( e );\n\n\t\t\tCache.remove( url );\n\n\t\t\tscope.manager.itemError( url );\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t} );\n\n\t\tCache.add( url, promise );\n\t\tscope.manager.itemStart( url );\n\n\t}\n\n}\n\nlet _context;\n\n/**\n * Manages the global audio context in the engine.\n *\n * @hideconstructor\n */\nclass AudioContext {\n\n\t/**\n\t * Returns the global native audio context.\n\t *\n\t * @return {AudioContext} The native audio context.\n\t */\n\tstatic getContext() {\n\n\t\tif ( _context === undefined ) {\n\n\t\t\t_context = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t}\n\n\t\treturn _context;\n\n\t}\n\n\t/**\n\t * Allows to set the global native audio context from outside.\n\t *\n\t * @param {AudioContext} value - The native context to set.\n\t */\n\tstatic setContext( value ) {\n\n\t\t_context = value;\n\n\t}\n\n}\n\n/**\n * Class for loading audio buffers. Audios are internally\n * loaded via {@link FileLoader}.\n *\n * ```js\n * const audioListener = new THREE.AudioListener();\n * const ambientSound = new THREE.Audio( audioListener );\n *\n * const loader = new THREE.AudioLoader();\n * const audioBuffer = await loader.loadAsync( 'audio/ambient_ocean.ogg' );\n *\n * ambientSound.setBuffer( audioBuffer );\n * ambientSound.play();\n * ```\n *\n * @augments Loader\n */\nclass AudioLoader extends Loader {\n\n\t/**\n\t * Constructs a new audio loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded audio buffer\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(AudioBuffer)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\ttry {\n\n\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\tconst bufferCopy = buffer.slice( 0 );\n\n\t\t\t\tconst context = AudioContext.getContext();\n\t\t\t\tcontext.decodeAudioData( bufferCopy, function ( audioBuffer ) {\n\n\t\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t\t} ).catch( handleError );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\thandleError( e );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t\tfunction handleError( e ) {\n\n\t\t\tif ( onError ) {\n\n\t\t\t\tonError( e );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( e );\n\n\t\t\t}\n\n\t\t\tscope.manager.itemError( url );\n\n\t\t}\n\n\t}\n\n}\n\nconst _eyeRight = /*@__PURE__*/ new Matrix4();\nconst _eyeLeft = /*@__PURE__*/ new Matrix4();\nconst _projectionMatrix = /*@__PURE__*/ new Matrix4();\n\n/**\n * A special type of camera that uses two perspective cameras with\n * stereoscopic projection. Can be used for rendering stereo effects\n * like [3D Anaglyph]{@link https://en.wikipedia.org/wiki/Anaglyph_3D} or\n * [Parallax Barrier]{@link https://en.wikipedia.org/wiki/parallax_barrier}.\n */\nclass StereoCamera {\n\n\t/**\n\t * Constructs a new stereo camera.\n\t */\n\tconstructor() {\n\n\t\t/**\n\t\t * The type property is used for detecting the object type\n\t\t * in context of serialization/deserialization.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.type = 'StereoCamera';\n\n\t\t/**\n\t\t * The aspect.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.aspect = 1;\n\n\t\t/**\n\t\t * The eye separation which represents the distance\n\t\t * between the left and right camera.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.064\n\t\t */\n\t\tthis.eyeSep = 0.064;\n\n\t\t/**\n\t\t * The camera representing the left eye. This is added to layer `1` so objects to be\n\t\t * rendered by the left camera must also be added to this layer.\n\t\t *\n\t\t * @type {PerspectiveCamera}\n\t\t */\n\t\tthis.cameraL = new PerspectiveCamera();\n\t\tthis.cameraL.layers.enable( 1 );\n\t\tthis.cameraL.matrixAutoUpdate = false;\n\n\t\t/**\n\t\t * The camera representing the right eye. This is added to layer `2` so objects to be\n\t\t * rendered by the right camera must also be added to this layer.\n\t\t *\n\t\t * @type {PerspectiveCamera}\n\t\t */\n\t\tthis.cameraR = new PerspectiveCamera();\n\t\tthis.cameraR.layers.enable( 2 );\n\t\tthis.cameraR.matrixAutoUpdate = false;\n\n\t\tthis._cache = {\n\t\t\tfocus: null,\n\t\t\tfov: null,\n\t\t\taspect: null,\n\t\t\tnear: null,\n\t\t\tfar: null,\n\t\t\tzoom: null,\n\t\t\teyeSep: null\n\t\t};\n\n\t}\n\n\t/**\n\t * Updates the stereo camera based on the given perspective camera.\n\t *\n\t * @param {PerspectiveCamera} camera - The perspective camera.\n\t */\n\tupdate( camera ) {\n\n\t\tconst cache = this._cache;\n\n\t\tconst needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||\n\t\t\tcache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||\n\t\t\tcache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\tif ( needsUpdate ) {\n\n\t\t\tcache.focus = camera.focus;\n\t\t\tcache.fov = camera.fov;\n\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\tcache.near = camera.near;\n\t\t\tcache.far = camera.far;\n\t\t\tcache.zoom = camera.zoom;\n\t\t\tcache.eyeSep = this.eyeSep;\n\n\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t_projectionMatrix.copy( camera.projectionMatrix );\n\t\t\tconst eyeSepHalf = cache.eyeSep / 2;\n\t\t\tconst eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\tconst ymax = ( cache.near * Math.tan( DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;\n\t\t\tlet xmin, xmax;\n\n\t\t\t// translate xOffset\n\n\t\t\t_eyeLeft.elements[ 12 ] = - eyeSepHalf;\n\t\t\t_eyeRight.elements[ 12 ] = eyeSepHalf;\n\n\t\t\t// for left eye\n\n\t\t\txmin = - ymax * cache.aspect + eyeSepOnProjection;\n\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\n\t\t\t_projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t_projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\tthis.cameraL.projectionMatrix.copy( _projectionMatrix );\n\n\t\t\t// for right eye\n\n\t\t\txmin = - ymax * cache.aspect - eyeSepOnProjection;\n\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\n\t\t\t_projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t_projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\tthis.cameraR.projectionMatrix.copy( _projectionMatrix );\n\n\t\t}\n\n\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );\n\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );\n\n\t}\n\n}\n\n/**\n * This type of camera can be used in order to efficiently render a scene with a\n * predefined set of cameras. This is an important performance aspect for\n * rendering VR scenes.\n *\n * An instance of `ArrayCamera` always has an array of sub cameras. It's mandatory\n * to define for each sub camera the `viewport` property which determines the\n * part of the viewport that is rendered with this camera.\n *\n * @augments PerspectiveCamera\n */\nclass ArrayCamera extends PerspectiveCamera {\n\n\t/**\n\t * Constructs a new array camera.\n\t *\n\t * @param {Array<PerspectiveCamera>} [array=[]] - An array of perspective sub cameras.\n\t */\n\tconstructor( array = [] ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isArrayCamera = true;\n\n\t\t/**\n\t\t * Whether this camera is used with multiview rendering or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default false\n\t\t */\n\t\tthis.isMultiViewCamera = false;\n\n\t\t/**\n\t\t * An array of perspective sub cameras.\n\t\t *\n\t\t * @type {Array<PerspectiveCamera>}\n\t\t */\n\t\tthis.cameras = array;\n\n\t}\n\n}\n\n/**\n * Class for keeping track of time.\n */\nclass Clock {\n\n\t/**\n\t * Constructs a new clock.\n\t *\n\t * @param {boolean} [autoStart=true] - Whether to automatically start the clock when\n\t * `getDelta()` is called for the first time.\n\t */\n\tconstructor( autoStart = true ) {\n\n\t\t/**\n\t\t * If set to `true`, the clock starts automatically when `getDelta()` is called\n\t\t * for the first time.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.autoStart = autoStart;\n\n\t\t/**\n\t\t * Holds the time at which the clock's `start()` method was last called.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.startTime = 0;\n\n\t\t/**\n\t\t * Holds the time at which the clock's `start()`, `getElapsedTime()` or\n\t\t * `getDelta()` methods were last called.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.oldTime = 0;\n\n\t\t/**\n\t\t * Keeps track of the total time that the clock has been running.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.elapsedTime = 0;\n\n\t\t/**\n\t\t * Whether the clock is running or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.running = false;\n\n\t}\n\n\t/**\n\t * Starts the clock. When `autoStart` is set to `true`, the method is automatically\n\t * called by the class.\n\t */\n\tstart() {\n\n\t\tthis.startTime = now();\n\n\t\tthis.oldTime = this.startTime;\n\t\tthis.elapsedTime = 0;\n\t\tthis.running = true;\n\n\t}\n\n\t/**\n\t * Stops the clock.\n\t */\n\tstop() {\n\n\t\tthis.getElapsedTime();\n\t\tthis.running = false;\n\t\tthis.autoStart = false;\n\n\t}\n\n\t/**\n\t * Returns the elapsed time in seconds.\n\t *\n\t * @return {number} The elapsed time.\n\t */\n\tgetElapsedTime() {\n\n\t\tthis.getDelta();\n\t\treturn this.elapsedTime;\n\n\t}\n\n\t/**\n\t * Returns the delta time in seconds.\n\t *\n\t * @return {number} The delta time.\n\t */\n\tgetDelta() {\n\n\t\tlet diff = 0;\n\n\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\tthis.start();\n\t\t\treturn 0;\n\n\t\t}\n\n\t\tif ( this.running ) {\n\n\t\t\tconst newTime = now();\n\n\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\tthis.oldTime = newTime;\n\n\t\t\tthis.elapsedTime += diff;\n\n\t\t}\n\n\t\treturn diff;\n\n\t}\n\n}\n\nfunction now() {\n\n\treturn performance.now();\n\n}\n\nconst _position$1 = /*@__PURE__*/ new Vector3();\nconst _quaternion$1 = /*@__PURE__*/ new Quaternion();\nconst _scale$1 = /*@__PURE__*/ new Vector3();\nconst _orientation$1 = /*@__PURE__*/ new Vector3();\n\n/**\n * The class represents a virtual listener of the all positional and non-positional audio effects\n * in the scene. A three.js application usually creates a single listener. It is a mandatory\n * constructor parameter for audios entities like {@link Audio} and {@link PositionalAudio}.\n *\n * In most cases, the listener object is a child of the camera. So the 3D transformation of the\n * camera represents the 3D transformation of the listener.\n *\n * @augments Object3D\n */\nclass AudioListener extends Object3D {\n\n\t/**\n\t * Constructs a new audio listener.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'AudioListener';\n\n\t\t/**\n\t\t * The native audio context.\n\t\t *\n\t\t * @type {AudioContext}\n\t\t * @readonly\n\t\t */\n\t\tthis.context = AudioContext.getContext();\n\n\t\t/**\n\t\t * The gain node used for volume control.\n\t\t *\n\t\t * @type {GainNode}\n\t\t * @readonly\n\t\t */\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( this.context.destination );\n\n\t\t/**\n\t\t * An optional filter.\n\t\t *\n\t\t * Defined via {@link AudioListener#setFilter}.\n\t\t *\n\t\t * @type {?AudioNode}\n\t\t * @default null\n\t\t * @readonly\n\t\t */\n\t\tthis.filter = null;\n\n\t\t/**\n\t\t * Time delta values required for `linearRampToValueAtTime()` usage.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t * @readonly\n\t\t */\n\t\tthis.timeDelta = 0;\n\n\t\t// private\n\n\t\tthis._clock = new Clock();\n\n\t}\n\n\t/**\n\t * Returns the listener's input node.\n\t *\n\t * This method is used by other audio nodes to connect to this listener.\n\t *\n\t * @return {GainNode} The input node.\n\t */\n\tgetInput() {\n\n\t\treturn this.gain;\n\n\t}\n\n\t/**\n\t * Removes the current filter from this listener.\n\t *\n\t * @return {AudioListener} A reference to this listener.\n\t */\n\tremoveFilter() {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\tthis.gain.connect( this.context.destination );\n\t\t\tthis.filter = null;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the current set filter.\n\t *\n\t * @return {?AudioNode} The filter.\n\t */\n\tgetFilter() {\n\n\t\treturn this.filter;\n\n\t}\n\n\t/**\n\t * Sets the given filter to this listener.\n\t *\n\t * @param {AudioNode} value - The filter to set.\n\t * @return {AudioListener} A reference to this listener.\n\t */\n\tsetFilter( value ) {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t} else {\n\n\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t}\n\n\t\tthis.filter = value;\n\t\tthis.gain.connect( this.filter );\n\t\tthis.filter.connect( this.context.destination );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the applications master volume.\n\t *\n\t * @return {number} The master volume.\n\t */\n\tgetMasterVolume() {\n\n\t\treturn this.gain.gain.value;\n\n\t}\n\n\t/**\n\t * Sets the applications master volume. This volume setting affects\n\t * all audio nodes in the scene.\n\t *\n\t * @param {number} value - The master volume to set.\n\t * @return {AudioListener} A reference to this listener.\n\t */\n\tsetMasterVolume( value ) {\n\n\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\treturn this;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tconst listener = this.context.listener;\n\t\tconst up = this.up;\n\n\t\tthis.timeDelta = this._clock.getDelta();\n\n\t\tthis.matrixWorld.decompose( _position$1, _quaternion$1, _scale$1 );\n\n\t\t_orientation$1.set( 0, 0, -1 ).applyQuaternion( _quaternion$1 );\n\n\t\tif ( listener.positionX ) {\n\n\t\t\t// code path for Chrome (see #14393)\n\n\t\t\tconst endTime = this.context.currentTime + this.timeDelta;\n\n\t\t\tlistener.positionX.linearRampToValueAtTime( _position$1.x, endTime );\n\t\t\tlistener.positionY.linearRampToValueAtTime( _position$1.y, endTime );\n\t\t\tlistener.positionZ.linearRampToValueAtTime( _position$1.z, endTime );\n\t\t\tlistener.forwardX.linearRampToValueAtTime( _orientation$1.x, endTime );\n\t\t\tlistener.forwardY.linearRampToValueAtTime( _orientation$1.y, endTime );\n\t\t\tlistener.forwardZ.linearRampToValueAtTime( _orientation$1.z, endTime );\n\t\t\tlistener.upX.linearRampToValueAtTime( up.x, endTime );\n\t\t\tlistener.upY.linearRampToValueAtTime( up.y, endTime );\n\t\t\tlistener.upZ.linearRampToValueAtTime( up.z, endTime );\n\n\t\t} else {\n\n\t\t\tlistener.setPosition( _position$1.x, _position$1.y, _position$1.z );\n\t\t\tlistener.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * Represents a non-positional ( global ) audio object.\n *\n * This and related audio modules make use of the [Web Audio API]{@link https://www.w3.org/TR/webaudio-1.1/}.\n *\n * ```js\n * // create an AudioListener and add it to the camera\n * const listener = new THREE.AudioListener();\n * camera.add( listener );\n *\n * // create a global audio source\n * const sound = new THREE.Audio( listener );\n *\n * // load a sound and set it as the Audio object's buffer\n * const audioLoader = new THREE.AudioLoader();\n * audioLoader.load( 'sounds/ambient.ogg', function( buffer ) {\n * \tsound.setBuffer( buffer );\n * \tsound.setLoop( true );\n * \tsound.setVolume( 0.5 );\n * \tsound.play();\n * });\n * ```\n *\n * @augments Object3D\n */\nclass Audio extends Object3D {\n\n\t/**\n\t * Constructs a new audio.\n\t *\n\t * @param {AudioListener} listener - The global audio listener.\n\t */\n\tconstructor( listener ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Audio';\n\n\t\t/**\n\t\t * The global audio listener.\n\t\t *\n\t\t * @type {AudioListener}\n\t\t * @readonly\n\t\t */\n\t\tthis.listener = listener;\n\n\t\t/**\n\t\t * The audio context.\n\t\t *\n\t\t * @type {AudioContext}\n\t\t * @readonly\n\t\t */\n\t\tthis.context = listener.context;\n\n\t\t/**\n\t\t * The gain node used for volume control.\n\t\t *\n\t\t * @type {GainNode}\n\t\t * @readonly\n\t\t */\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( listener.getInput() );\n\n\t\t/**\n\t\t * Whether to start playback automatically or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.autoplay = false;\n\n\t\t/**\n\t\t * A reference to an audio buffer.\n\t\t *\n\t\t * Defined via {@link Audio#setBuffer}.\n\t\t *\n\t\t * @type {?AudioBuffer}\n\t\t * @default null\n\t\t * @readonly\n\t\t */\n\t\tthis.buffer = null;\n\n\t\t/**\n\t\t * Modify pitch, measured in cents. +/- 100 is a semitone.\n\t\t * +/- 1200 is an octave.\n\t\t *\n\t\t * Defined via {@link Audio#setDetune}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t * @readonly\n\t\t */\n\t\tthis.detune = 0;\n\n\t\t/**\n\t\t * Whether the audio should loop or not.\n\t\t *\n\t\t * Defined via {@link Audio#setLoop}.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @readonly\n\t\t */\n\t\tthis.loop = false;\n\n\t\t/**\n\t\t * Defines where in the audio buffer the replay should\n\t\t * start, in seconds.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.loopStart = 0;\n\n\t\t/**\n\t\t * Defines where in the audio buffer the replay should\n\t\t * stop, in seconds.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.loopEnd = 0;\n\n\t\t/**\n\t\t * An offset to the time within the audio buffer the playback\n\t\t * should begin, in seconds.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.offset = 0;\n\n\t\t/**\n\t\t * Overrides the default duration of the audio.\n\t\t *\n\t\t * @type {undefined|number}\n\t\t * @default undefined\n\t\t */\n\t\tthis.duration = undefined;\n\n\t\t/**\n\t\t * The playback speed.\n\t\t *\n\t\t * Defined via {@link Audio#setPlaybackRate}.\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t * @default 1\n\t\t */\n\t\tthis.playbackRate = 1;\n\n\t\t/**\n\t\t * Indicates whether the audio is playing or not.\n\t\t *\n\t\t * This flag will be automatically set when using {@link Audio#play},\n\t\t * {@link Audio#pause}, {@link Audio#stop}.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default false\n\t\t */\n\t\tthis.isPlaying = false;\n\n\t\t/**\n\t\t * Indicates whether the audio playback can be controlled\n\t\t * with method like {@link Audio#play} or {@link Audio#pause}.\n\t\t *\n\t\t * This flag will be automatically set when audio sources are\n\t\t * defined.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.hasPlaybackControl = true;\n\n\t\t/**\n\t\t * Holds a reference to the current audio source.\n\t\t *\n\t\t * The property is automatically by one of the `set*()` methods.\n\t\t *\n\t\t * @type {?AudioNode}\n\t\t * @readonly\n\t\t * @default null\n\t\t */\n\t\tthis.source = null;\n\n\t\t/**\n\t\t * Defines the source type.\n\t\t *\n\t\t * The property is automatically by one of the `set*()` methods.\n\t\t *\n\t\t * @type {('empty'|'audioNode'|'mediaNode'|'mediaStreamNode'|'buffer')}\n\t\t * @readonly\n\t\t * @default 'empty'\n\t\t */\n\t\tthis.sourceType = 'empty';\n\n\t\tthis._startedAt = 0;\n\t\tthis._progress = 0;\n\t\tthis._connected = false;\n\n\t\t/**\n\t\t * Can be used to apply a variety of low-order filters to create\n\t\t * more complex sound effects e.g. via `BiquadFilterNode`.\n\t\t *\n\t\t * The property is automatically set by {@link Audio#setFilters}.\n\t\t *\n\t\t * @type {Array<AudioNode>}\n\t\t * @readonly\n\t\t */\n\t\tthis.filters = [];\n\n\t}\n\n\t/**\n\t * Returns the output audio node.\n\t *\n\t * @return {GainNode} The output node.\n\t */\n\tgetOutput() {\n\n\t\treturn this.gain;\n\n\t}\n\n\t/**\n\t * Sets the given audio node as the source of this instance.\n\t *\n\t * {@link Audio#sourceType} is set to `audioNode` and {@link Audio#hasPlaybackControl} to `false`.\n\t *\n\t * @param {AudioNode} audioNode - The audio node like an instance of `OscillatorNode`.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetNodeSource( audioNode ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'audioNode';\n\t\tthis.source = audioNode;\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given media element as the source of this instance.\n\t *\n\t * {@link Audio#sourceType} is set to `mediaNode` and {@link Audio#hasPlaybackControl} to `false`.\n\t *\n\t * @param {HTMLMediaElement} mediaElement - The media element.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetMediaElementSource( mediaElement ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'mediaNode';\n\t\tthis.source = this.context.createMediaElementSource( mediaElement );\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given media stream as the source of this instance.\n\t *\n\t * {@link Audio#sourceType} is set to `mediaStreamNode` and {@link Audio#hasPlaybackControl} to `false`.\n\t *\n\t * @param {MediaStream} mediaStream - The media stream.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetMediaStreamSource( mediaStream ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'mediaStreamNode';\n\t\tthis.source = this.context.createMediaStreamSource( mediaStream );\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given audio buffer as the source of this instance.\n\t *\n\t * {@link Audio#sourceType} is set to `buffer` and {@link Audio#hasPlaybackControl} to `true`.\n\t *\n\t * @param {AudioBuffer} audioBuffer - The audio buffer.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetBuffer( audioBuffer ) {\n\n\t\tthis.buffer = audioBuffer;\n\t\tthis.sourceType = 'buffer';\n\n\t\tif ( this.autoplay ) this.play();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Starts the playback of the audio.\n\t *\n\t * Can only be used with compatible audio sources that allow playback control.\n\t *\n\t * @param {number} [delay=0] - The delay, in seconds, at which the audio should start playing.\n\t * @return {Audio|undefined} A reference to this instance.\n\t */\n\tplay( delay = 0 ) {\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis._startedAt = this.context.currentTime + delay;\n\n\t\tconst source = this.context.createBufferSource();\n\t\tsource.buffer = this.buffer;\n\t\tsource.loop = this.loop;\n\t\tsource.loopStart = this.loopStart;\n\t\tsource.loopEnd = this.loopEnd;\n\t\tsource.onended = this.onEnded.bind( this );\n\t\tsource.start( this._startedAt, this._progress + this.offset, this.duration );\n\n\t\tthis.isPlaying = true;\n\n\t\tthis.source = source;\n\n\t\tthis.setDetune( this.detune );\n\t\tthis.setPlaybackRate( this.playbackRate );\n\n\t\treturn this.connect();\n\n\t}\n\n\t/**\n\t * Pauses the playback of the audio.\n\t *\n\t * Can only be used with compatible audio sources that allow playback control.\n\t *\n\t * @return {Audio|undefined} A reference to this instance.\n\t */\n\tpause() {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\t// update current progress\n\n\t\t\tthis._progress += Math.max( this.context.currentTime - this._startedAt, 0 ) * this.playbackRate;\n\n\t\t\tif ( this.loop === true ) {\n\n\t\t\t\t// ensure _progress does not exceed duration with looped audios\n\n\t\t\t\tthis._progress = this._progress % ( this.duration || this.buffer.duration );\n\n\t\t\t}\n\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\n\t\t\tthis.isPlaying = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Stops the playback of the audio.\n\t *\n\t * Can only be used with compatible audio sources that allow playback control.\n\t *\n\t * @param {number} [delay=0] - The delay, in seconds, at which the audio should stop playing.\n\t * @return {Audio|undefined} A reference to this instance.\n\t */\n\tstop( delay = 0 ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis._progress = 0;\n\n\t\tif ( this.source !== null ) {\n\n\t\t\tthis.source.stop( this.context.currentTime + delay );\n\t\t\tthis.source.onended = null;\n\n\t\t}\n\n\t\tthis.isPlaying = false;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Connects to the audio source. This is used internally on\n\t * initialisation and when setting / removing filters.\n\t *\n\t * @return {Audio} A reference to this instance.\n\t */\n\tconnect() {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\tfor ( let i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t}\n\n\t\tthis._connected = true;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Disconnects to the audio source. This is used internally on\n\t * initialisation and when setting / removing filters.\n\t *\n\t * @return {Audio|undefined} A reference to this instance.\n\t */\n\tdisconnect() {\n\n\t\tif ( this._connected === false ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\tfor ( let i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t}\n\n\t\tthis._connected = false;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the current set filters.\n\t *\n\t * @return {Array<AudioNode>} The list of filters.\n\t */\n\tgetFilters() {\n\n\t\treturn this.filters;\n\n\t}\n\n\t/**\n\t * Sets an array of filters and connects them with the audio source.\n\t *\n\t * @param {Array<AudioNode>} [value] - A list of filters.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetFilters( value ) {\n\n\t\tif ( ! value ) value = [];\n\n\t\tif ( this._connected === true ) {\n\n\t\t\tthis.disconnect();\n\t\t\tthis.filters = value.slice();\n\t\t\tthis.connect();\n\n\t\t} else {\n\n\t\t\tthis.filters = value.slice();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Defines the detuning of oscillation in cents.\n\t *\n\t * @param {number} value - The detuning of oscillation in cents.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetDetune( value ) {\n\n\t\tthis.detune = value;\n\n\t\tif ( this.isPlaying === true && this.source.detune !== undefined ) {\n\n\t\t\tthis.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the detuning of oscillation in cents.\n\t *\n\t * @return {number} The detuning of oscillation in cents.\n\t */\n\tgetDetune() {\n\n\t\treturn this.detune;\n\n\t}\n\n\t/**\n\t * Returns the first filter in the list of filters.\n\t *\n\t * @return {AudioNode|undefined} The first filter in the list of filters.\n\t */\n\tgetFilter() {\n\n\t\treturn this.getFilters()[ 0 ];\n\n\t}\n\n\t/**\n\t * Applies a single filter node to the audio.\n\t *\n\t * @param {AudioNode} [filter] - The filter to set.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetFilter( filter ) {\n\n\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t}\n\n\t/**\n\t * Sets the playback rate.\n\t *\n\t * Can only be used with compatible audio sources that allow playback control.\n\t *\n\t * @param {number} [value] - The playback rate to set.\n\t * @return {Audio|undefined} A reference to this instance.\n\t */\n\tsetPlaybackRate( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.playbackRate = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the current playback rate.\n\n\t * @return {number} The playback rate.\n\t */\n\tgetPlaybackRate() {\n\n\t\treturn this.playbackRate;\n\n\t}\n\n\t/**\n\t * Automatically called when playback finished.\n\t */\n\tonEnded() {\n\n\t\tthis.isPlaying = false;\n\t\tthis._progress = 0;\n\n\t}\n\n\t/**\n\t * Returns the loop flag.\n\t *\n\t * Can only be used with compatible audio sources that allow playback control.\n\t *\n\t * @return {boolean} Whether the audio should loop or not.\n\t */\n\tgetLoop() {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn this.loop;\n\n\t}\n\n\t/**\n\t * Sets the loop flag.\n\t *\n\t * Can only be used with compatible audio sources that allow playback control.\n\t *\n\t * @param {boolean} value - Whether the audio should loop or not.\n\t * @return {Audio|undefined} A reference to this instance.\n\t */\n\tsetLoop( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.loop = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.loop = this.loop;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the loop start value which defines where in the audio buffer the replay should\n\t * start, in seconds.\n\t *\n\t * @param {number} value - The loop start value.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetLoopStart( value ) {\n\n\t\tthis.loopStart = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the loop end value which defines where in the audio buffer the replay should\n\t * stop, in seconds.\n\t *\n\t * @param {number} value - The loop end value.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetLoopEnd( value ) {\n\n\t\tthis.loopEnd = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the volume.\n\t *\n\t * @return {number} The volume.\n\t */\n\tgetVolume() {\n\n\t\treturn this.gain.gain.value;\n\n\t}\n\n\t/**\n\t * Sets the volume.\n\t *\n\t * @param {number} value - The volume to set.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetVolume( value ) {\n\n\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tif ( source.sourceType !== 'buffer' ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: Audio source type cannot be copied.' );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tthis.autoplay = source.autoplay;\n\n\t\tthis.buffer = source.buffer;\n\t\tthis.detune = source.detune;\n\t\tthis.loop = source.loop;\n\t\tthis.loopStart = source.loopStart;\n\t\tthis.loopEnd = source.loopEnd;\n\t\tthis.offset = source.offset;\n\t\tthis.duration = source.duration;\n\t\tthis.playbackRate = source.playbackRate;\n\t\tthis.hasPlaybackControl = source.hasPlaybackControl;\n\t\tthis.sourceType = source.sourceType;\n\n\t\tthis.filters = source.filters.slice();\n\n\t\treturn this;\n\n\t}\n\n\tclone( recursive ) {\n\n\t\treturn new this.constructor( this.listener ).copy( this, recursive );\n\n\t}\n\n}\n\nconst _position = /*@__PURE__*/ new Vector3();\nconst _quaternion = /*@__PURE__*/ new Quaternion();\nconst _scale = /*@__PURE__*/ new Vector3();\nconst _orientation = /*@__PURE__*/ new Vector3();\n\n/**\n * Represents a positional audio object.\n *\n * ```js\n * // create an AudioListener and add it to the camera\n * const listener = new THREE.AudioListener();\n * camera.add( listener );\n *\n * // create the PositionalAudio object (passing in the listener)\n * const sound = new THREE.PositionalAudio( listener );\n *\n * // load a sound and set it as the PositionalAudio object's buffer\n * const audioLoader = new THREE.AudioLoader();\n * audioLoader.load( 'sounds/song.ogg', function( buffer ) {\n * \tsound.setBuffer( buffer );\n * \tsound.setRefDistance( 20 );\n * \tsound.play();\n * });\n *\n * // create an object for the sound to play from\n * const sphere = new THREE.SphereGeometry( 20, 32, 16 );\n * const material = new THREE.MeshPhongMaterial( { color: 0xff2200 } );\n * const mesh = new THREE.Mesh( sphere, material );\n * scene.add( mesh );\n *\n * // finally add the sound to the mesh\n * mesh.add( sound );\n *\n * @augments Audio\n */\nclass PositionalAudio extends Audio {\n\n\t/**\n\t * Constructs a positional audio.\n\t *\n\t * @param {AudioListener} listener - The global audio listener.\n\t */\n\tconstructor( listener ) {\n\n\t\tsuper( listener );\n\n\t\t/**\n\t\t * The panner node represents the location, direction, and behavior of an audio\n\t\t * source in 3D space.\n\t\t *\n\t\t * @type {PannerNode}\n\t\t * @readonly\n\t\t */\n\t\tthis.panner = this.context.createPanner();\n\t\tthis.panner.panningModel = 'HRTF';\n\t\tthis.panner.connect( this.gain );\n\n\t}\n\n\tconnect() {\n\n\t\tsuper.connect();\n\n\t\tthis.panner.connect( this.gain );\n\n\t\treturn this;\n\n\t}\n\n\tdisconnect() {\n\n\t\tsuper.disconnect();\n\n\t\tthis.panner.disconnect( this.gain );\n\n\t\treturn this;\n\n\t}\n\n\tgetOutput() {\n\n\t\treturn this.panner;\n\n\t}\n\n\t/**\n\t * Returns the current reference distance.\n\t *\n\t * @return {number} The reference distance.\n\t */\n\tgetRefDistance() {\n\n\t\treturn this.panner.refDistance;\n\n\t}\n\n\t/**\n\t * Defines the reference distance for reducing volume as the audio source moves\n\t * further from the listener – i.e. the distance at which the volume reduction\n\t * starts taking effect.\n\t *\n\t * @param {number} value - The reference distance to set.\n\t * @return {PositionalAudio} A reference to this instance.\n\t */\n\tsetRefDistance( value ) {\n\n\t\tthis.panner.refDistance = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the current rolloff factor.\n\t *\n\t * @return {number} The rolloff factor.\n\t */\n\tgetRolloffFactor() {\n\n\t\treturn this.panner.rolloffFactor;\n\n\t}\n\n\t/**\n\t * Defines how quickly the volume is reduced as the source moves away from the listener.\n\t *\n\t * @param {number} value - The rolloff factor.\n\t * @return {PositionalAudio} A reference to this instance.\n\t */\n\tsetRolloffFactor( value ) {\n\n\t\tthis.panner.rolloffFactor = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the current distance model.\n\t *\n\t * @return {('linear'|'inverse'|'exponential')} The distance model.\n\t */\n\tgetDistanceModel() {\n\n\t\treturn this.panner.distanceModel;\n\n\t}\n\n\t/**\n\t * Defines which algorithm to use to reduce the volume of the audio source\n\t * as it moves away from the listener.\n\t *\n\t * Read [the spec]{@link https://www.w3.org/TR/webaudio-1.1/#enumdef-distancemodeltype}\n\t * for more details.\n\t *\n\t * @param {('linear'|'inverse'|'exponential')} value - The distance model to set.\n\t * @return {PositionalAudio} A reference to this instance.\n\t */\n\tsetDistanceModel( value ) {\n\n\t\tthis.panner.distanceModel = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the current max distance.\n\t *\n\t * @return {number} The max distance.\n\t */\n\tgetMaxDistance() {\n\n\t\treturn this.panner.maxDistance;\n\n\t}\n\n\t/**\n\t * Defines the maximum distance between the audio source and the listener,\n\t * after which the volume is not reduced any further.\n\t *\n\t * This value is used only by the `linear` distance model.\n\t *\n\t * @param {number} value - The max distance.\n\t * @return {PositionalAudio} A reference to this instance.\n\t */\n\tsetMaxDistance( value ) {\n\n\t\tthis.panner.maxDistance = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the directional cone in which the audio can be listened.\n\t *\n\t * @param {number} coneInnerAngle - An angle, in degrees, of a cone inside of which there will be no volume reduction.\n\t * @param {number} coneOuterAngle - An angle, in degrees, of a cone outside of which the volume will be reduced by a constant value, defined by the `coneOuterGain` parameter.\n\t * @param {number} coneOuterGain - The amount of volume reduction outside the cone defined by the `coneOuterAngle`. When set to `0`, no sound can be heard.\n\t * @return {PositionalAudio} A reference to this instance.\n\t */\n\tsetDirectionalCone( coneInnerAngle, coneOuterAngle, coneOuterGain ) {\n\n\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\tthis.panner.coneOuterGain = coneOuterGain;\n\n\t\treturn this;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tif ( this.hasPlaybackControl === true && this.isPlaying === false ) return;\n\n\t\tthis.matrixWorld.decompose( _position, _quaternion, _scale );\n\n\t\t_orientation.set( 0, 0, 1 ).applyQuaternion( _quaternion );\n\n\t\tconst panner = this.panner;\n\n\t\tif ( panner.positionX ) {\n\n\t\t\t// code path for Chrome and Firefox (see #14393)\n\n\t\t\tconst endTime = this.context.currentTime + this.listener.timeDelta;\n\n\t\t\tpanner.positionX.linearRampToValueAtTime( _position.x, endTime );\n\t\t\tpanner.positionY.linearRampToValueAtTime( _position.y, endTime );\n\t\t\tpanner.positionZ.linearRampToValueAtTime( _position.z, endTime );\n\t\t\tpanner.orientationX.linearRampToValueAtTime( _orientation.x, endTime );\n\t\t\tpanner.orientationY.linearRampToValueAtTime( _orientation.y, endTime );\n\t\t\tpanner.orientationZ.linearRampToValueAtTime( _orientation.z, endTime );\n\n\t\t} else {\n\n\t\t\tpanner.setPosition( _position.x, _position.y, _position.z );\n\t\t\tpanner.setOrientation( _orientation.x, _orientation.y, _orientation.z );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * This class can be used to analyse audio data.\n *\n * ```js\n * // create an AudioListener and add it to the camera\n * const listener = new THREE.AudioListener();\n * camera.add( listener );\n *\n * // create an Audio source\n * const sound = new THREE.Audio( listener );\n *\n * // load a sound and set it as the Audio object's buffer\n * const audioLoader = new THREE.AudioLoader();\n * audioLoader.load( 'sounds/ambient.ogg', function( buffer ) {\n * \tsound.setBuffer( buffer );\n * \tsound.setLoop(true);\n * \tsound.setVolume(0.5);\n * \tsound.play();\n * });\n *\n * // create an AudioAnalyser, passing in the sound and desired fftSize\n * const analyser = new THREE.AudioAnalyser( sound, 32 );\n *\n * // get the average frequency of the sound\n * const data = analyser.getAverageFrequency();\n * ```\n */\nclass AudioAnalyser {\n\n\t/**\n\t * Constructs a new audio analyzer.\n\t *\n\t * @param {Audio} audio - The audio to analyze.\n\t * @param {number} [fftSize=2048] - The window size in samples that is used when performing a Fast Fourier Transform (FFT) to get frequency domain data.\n\t */\n\tconstructor( audio, fftSize = 2048 ) {\n\n\t\t/**\n\t\t * The global audio listener.\n\t\t *\n\t\t * @type {AnalyserNode}\n\t\t */\n\t\tthis.analyser = audio.context.createAnalyser();\n\t\tthis.analyser.fftSize = fftSize;\n\n\t\t/**\n\t\t * Holds the analyzed data.\n\t\t *\n\t\t * @type {Uint8Array}\n\t\t */\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\t\taudio.getOutput().connect( this.analyser );\n\n\t}\n\n\t/**\n\t * Returns an array with frequency data of the audio.\n\t *\n\t * Each item in the array represents the decibel value for a specific frequency.\n\t * The frequencies are spread linearly from 0 to 1/2 of the sample rate.\n\t * For example, for 48000 sample rate, the last item of the array will represent\n\t * the decibel value for 24000 Hz.\n\t *\n\t * @return {Uint8Array} The frequency data.\n\t */\n\tgetFrequencyData() {\n\n\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\treturn this.data;\n\n\t}\n\n\t/**\n\t * Returns the average of the frequencies returned by {@link AudioAnalyser#getFrequencyData}.\n\t *\n\t * @return {number} The average frequency.\n\t */\n\tgetAverageFrequency() {\n\n\t\tlet value = 0;\n\t\tconst data = this.getFrequencyData();\n\n\t\tfor ( let i = 0; i < data.length; i ++ ) {\n\n\t\t\tvalue += data[ i ];\n\n\t\t}\n\n\t\treturn value / data.length;\n\n\t}\n\n}\n\n/**\n * Buffered scene graph property that allows weighted accumulation; used internally.\n */\nclass PropertyMixer {\n\n\t/**\n\t * Constructs a new property mixer.\n\t *\n\t * @param {PropertyBinding} binding - The property binding.\n\t * @param {string} typeName - The keyframe track type name.\n\t * @param {number} valueSize - The keyframe track value size.\n\t */\n\tconstructor( binding, typeName, valueSize ) {\n\n\t\t/**\n\t\t * The property binding.\n\t\t *\n\t\t * @type {PropertyBinding}\n\t\t */\n\t\tthis.binding = binding;\n\n\t\t/**\n\t\t * The keyframe track value size.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.valueSize = valueSize;\n\n\t\tlet mixFunction,\n\t\t\tmixFunctionAdditive,\n\t\t\tsetIdentity;\n\n\t\t// buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]\n\t\t//\n\t\t// interpolators can use .buffer as their .result\n\t\t// the data then goes to 'incoming'\n\t\t//\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t// the cumulative result and are compared to detect\n\t\t// changes\n\t\t//\n\t\t// 'orig' stores the original state of the property\n\t\t//\n\t\t// 'add' is used for additive cumulative results\n\t\t//\n\t\t// 'work' is optional and is only present for quaternion types. It is used\n\t\t// to store intermediate quaternion multiplication results\n\n\t\tswitch ( typeName ) {\n\n\t\t\tcase 'quaternion':\n\t\t\t\tmixFunction = this._slerp;\n\t\t\t\tmixFunctionAdditive = this._slerpAdditive;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityQuaternion;\n\n\t\t\t\tthis.buffer = new Float64Array( valueSize * 6 );\n\t\t\t\tthis._workIndex = 5;\n\t\t\t\tbreak;\n\n\t\t\tcase 'string':\n\t\t\tcase 'bool':\n\t\t\t\tmixFunction = this._select;\n\n\t\t\t\t// Use the regular mix function and for additive on these types,\n\t\t\t\t// additive is not relevant for non-numeric types\n\t\t\t\tmixFunctionAdditive = this._select;\n\n\t\t\t\tsetIdentity = this._setAdditiveIdentityOther;\n\n\t\t\t\tthis.buffer = new Array( valueSize * 5 );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tmixFunction = this._lerp;\n\t\t\t\tmixFunctionAdditive = this._lerpAdditive;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityNumeric;\n\n\t\t\t\tthis.buffer = new Float64Array( valueSize * 5 );\n\n\t\t}\n\n\t\tthis._mixBufferRegion = mixFunction;\n\t\tthis._mixBufferRegionAdditive = mixFunctionAdditive;\n\t\tthis._setIdentity = setIdentity;\n\t\tthis._origIndex = 3;\n\t\tthis._addIndex = 4;\n\n\t\t/**\n\t\t * TODO\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.cumulativeWeight = 0;\n\n\t\t/**\n\t\t * TODO\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\t/**\n\t\t * TODO\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.useCount = 0;\n\n\t\t/**\n\t\t * TODO\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.referenceCount = 0;\n\n\t}\n\n\t/**\n\t * Accumulates data in the `incoming` region into `accu<i>`.\n\t *\n\t * @param {number} accuIndex - The accumulation index.\n\t * @param {number} weight - The weight.\n\t */\n\taccumulate( accuIndex, weight ) {\n\n\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t// the weight and shouldn't have made the call in the first place\n\n\t\tconst buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = accuIndex * stride + stride;\n\n\t\tlet currentWeight = this.cumulativeWeight;\n\n\t\tif ( currentWeight === 0 ) {\n\n\t\t\t// accuN := incoming * weight\n\n\t\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t}\n\n\t\t\tcurrentWeight = weight;\n\n\t\t} else {\n\n\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\tcurrentWeight += weight;\n\t\t\tconst mix = weight / currentWeight;\n\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t}\n\n\t\tthis.cumulativeWeight = currentWeight;\n\n\t}\n\n\t/**\n\t * Accumulates data in the `incoming` region into `add`.\n\t *\n\t * @param {number} weight - The weight.\n\t */\n\taccumulateAdditive( weight ) {\n\n\t\tconst buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = stride * this._addIndex;\n\n\t\tif ( this.cumulativeWeightAdditive === 0 ) {\n\n\t\t\t// add = identity\n\n\t\t\tthis._setIdentity();\n\n\t\t}\n\n\t\t// add := add + incoming * weight\n\n\t\tthis._mixBufferRegionAdditive( buffer, offset, 0, weight, stride );\n\t\tthis.cumulativeWeightAdditive += weight;\n\n\t}\n\n\t/**\n\t * Applies the state of `accu<i>` to the binding when accus differ.\n\t *\n\t * @param {number} accuIndex - The accumulation index.\n\t */\n\tapply( accuIndex ) {\n\n\t\tconst stride = this.valueSize,\n\t\t\tbuffer = this.buffer,\n\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\tweight = this.cumulativeWeight,\n\t\t\tweightAdditive = this.cumulativeWeightAdditive,\n\n\t\t\tbinding = this.binding;\n\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\tif ( weight < 1 ) {\n\n\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\tconst originalValueOffset = stride * this._origIndex;\n\n\t\t\tthis._mixBufferRegion(\n\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t}\n\n\t\tif ( weightAdditive > 0 ) {\n\n\t\t\t// accuN := accuN + additive accuN\n\n\t\t\tthis._mixBufferRegionAdditive( buffer, offset, this._addIndex * stride, 1, stride );\n\n\t\t}\n\n\t\tfor ( let i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\t/**\n\t * Remembers the state of the bound property and copy it to both accus.\n\t */\n\tsaveOriginalState() {\n\n\t\tconst binding = this.binding;\n\n\t\tconst buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\n\t\t\toriginalValueOffset = stride * this._origIndex;\n\n\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\tfor ( let i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t}\n\n\t\t// Add to identity for additive\n\t\tthis._setIdentity();\n\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\n\t}\n\n\t/**\n\t * Applies the state previously taken via {@link PropertyMixer#saveOriginalState} to the binding.\n\t */\n\trestoreOriginalState() {\n\n\t\tconst originalValueOffset = this.valueSize * 3;\n\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t}\n\n\t// internals\n\n\t_setAdditiveIdentityNumeric() {\n\n\t\tconst startIndex = this._addIndex * this.valueSize;\n\t\tconst endIndex = startIndex + this.valueSize;\n\n\t\tfor ( let i = startIndex; i < endIndex; i ++ ) {\n\n\t\t\tthis.buffer[ i ] = 0;\n\n\t\t}\n\n\t}\n\n\t_setAdditiveIdentityQuaternion() {\n\n\t\tthis._setAdditiveIdentityNumeric();\n\t\tthis.buffer[ this._addIndex * this.valueSize + 3 ] = 1;\n\n\t}\n\n\t_setAdditiveIdentityOther() {\n\n\t\tconst startIndex = this._origIndex * this.valueSize;\n\t\tconst targetIndex = this._addIndex * this.valueSize;\n\n\t\tfor ( let i = 0; i < this.valueSize; i ++ ) {\n\n\t\t\tthis.buffer[ targetIndex + i ] = this.buffer[ startIndex + i ];\n\n\t\t}\n\n\t}\n\n\n\t// mix functions\n\n\t_select( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tif ( t >= 0.5 ) {\n\n\t\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_slerp( buffer, dstOffset, srcOffset, t ) {\n\n\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\n\n\t}\n\n\t_slerpAdditive( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tconst workOffset = this._workIndex * stride;\n\n\t\t// Store result in intermediate buffer offset\n\t\tQuaternion.multiplyQuaternionsFlat( buffer, workOffset, buffer, dstOffset, buffer, srcOffset );\n\n\t\t// Slerp to the intermediate result\n\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t );\n\n\t}\n\n\t_lerp( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tconst s = 1 - t;\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tconst j = dstOffset + i;\n\n\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t}\n\n\t}\n\n\t_lerpAdditive( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tconst j = dstOffset + i;\n\n\t\t\tbuffer[ j ] = buffer[ j ] + buffer[ srcOffset + i ] * t;\n\n\t\t}\n\n\t}\n\n}\n\n// Characters [].:/ are reserved for track binding syntax.\nconst _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\nconst _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );\n\n// Attempts to allow node names from any language. ES5's `\\w` regexp matches\n// only latin characters, and the unicode \\p{L} is not yet supported. So\n// instead, we exclude reserved characters and match everything else.\nconst _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\nconst _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\\\.', '' ) + ']';\n\n// Parent directories, delimited by '/' or ':'. Currently unused, but must\n// be matched to parse the rest of the track name.\nconst _directoryRe = /*@__PURE__*/ /((?:WC+[\\/:])*)/.source.replace( 'WC', _wordChar );\n\n// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\nconst _nodeRe = /*@__PURE__*/ /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );\n\n// Object on target node, and accessor. May not contain reserved\n// characters. Accessor may contain any character except closing bracket.\nconst _objectRe = /*@__PURE__*/ /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace( 'WC', _wordChar );\n\n// Property and accessor. May not contain reserved characters. Accessor may\n// contain any non-bracket characters.\nconst _propertyRe = /*@__PURE__*/ /\\.(WC+)(?:\\[(.+)\\])?/.source.replace( 'WC', _wordChar );\n\nconst _trackRe = new RegExp( ''\n\t+ '^'\n\t+ _directoryRe\n\t+ _nodeRe\n\t+ _objectRe\n\t+ _propertyRe\n\t+ '$'\n);\n\nconst _supportedObjectNames = [ 'material', 'materials', 'bones', 'map' ];\n\nclass Composite {\n\n\tconstructor( targetGroup, path, optionalParsedPath ) {\n\n\t\tconst parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n\t}\n\n\tgetValue( array, offset ) {\n\n\t\tthis.bind(); // bind all binding\n\n\t\tconst firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t// and only call .getValue on the first\n\t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\n\t}\n\n\tsetValue( array, offset ) {\n\n\t\tconst bindings = this._bindings;\n\n\t\tfor ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t}\n\n\t}\n\n\tbind() {\n\n\t\tconst bindings = this._bindings;\n\n\t\tfor ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].bind();\n\n\t\t}\n\n\t}\n\n\tunbind() {\n\n\t\tconst bindings = this._bindings;\n\n\t\tfor ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].unbind();\n\n\t\t}\n\n\t}\n\n}\n\n// Note: This class uses a State pattern on a per-method basis:\n// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n// prototype version of these methods with one that represents\n// the bound state. When the property is not found, the methods\n// become no-ops.\n\n\n/**\n * This holds a reference to a real property in the scene graph; used internally.\n */\nclass PropertyBinding {\n\n\t/**\n\t * Constructs a new property binding.\n\t *\n\t * @param {Object} rootNode - The root node.\n\t * @param {string} path - The path.\n\t * @param {?Object} [parsedPath] - The parsed path.\n\t */\n\tconstructor( rootNode, path, parsedPath ) {\n\n\t\t/**\n\t\t * The object path to the animated property.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.path = path;\n\n\t\t/**\n\t\t * An object holding information about the path.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\n\n\t\t/**\n\t\t * The object owns the animated property.\n\t\t *\n\t\t * @type {?Object}\n\t\t */\n\t\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName );\n\n\t\t/**\n\t\t * The root node.\n\t\t *\n\t\t * @type {Object3D|Skeleton}\n\t\t */\n\t\tthis.rootNode = rootNode;\n\n\t\t// initial state of these methods that calls 'bind'\n\t\tthis.getValue = this._getValue_unbound;\n\t\tthis.setValue = this._setValue_unbound;\n\n\t}\n\n\n\t/**\n\t * Factory method for creating a property binding from the given parameters.\n\t *\n\t * @static\n\t * @param {Object} root - The root node.\n\t * @param {string} path - The path.\n\t * @param {?Object} [parsedPath] - The parsed path.\n\t * @return {PropertyBinding|Composite} The created property binding or composite.\n\t */\n\tstatic create( root, path, parsedPath ) {\n\n\t\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\n\n\t\t\treturn new PropertyBinding( root, path, parsedPath );\n\n\t\t} else {\n\n\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Replaces spaces with underscores and removes unsupported characters from\n\t * node names, to ensure compatibility with parseTrackName().\n\t *\n\t * @param {string} name - Node name to be sanitized.\n\t * @return {string} The sanitized node name.\n\t */\n\tstatic sanitizeNodeName( name ) {\n\n\t\treturn name.replace( /\\s/g, '_' ).replace( _reservedRe, '' );\n\n\t}\n\n\t/**\n\t * Parses the given track name (an object path to an animated property) and\n\t * returns an object with information about the path. Matches strings in the following forms:\n\t *\n\t * - nodeName.property\n\t * - nodeName.property[accessor]\n\t * - nodeName.material.property[accessor]\n\t * - uuid.property[accessor]\n\t * - uuid.objectName[objectIndex].propertyName[propertyIndex]\n\t * - parentName/nodeName.property\n\t * - parentName/parentName/nodeName.property[index]\n\t * - .bone[Armature.DEF_cog].position\n\t * - scene:helium_balloon_model:helium_balloon_model.position\n\t *\n\t * @static\n\t * @param {string} trackName - The track name to parse.\n\t * @return {Object} The parsed track name as an object.\n\t */\n\tstatic parseTrackName( trackName ) {\n\n\t\tconst matches = _trackRe.exec( trackName );\n\n\t\tif ( matches === null ) {\n\n\t\t\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\n\n\t\t}\n\n\t\tconst results = {\n\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\tnodeName: matches[ 2 ],\n\t\t\tobjectName: matches[ 3 ],\n\t\t\tobjectIndex: matches[ 4 ],\n\t\t\tpropertyName: matches[ 5 ], // required\n\t\t\tpropertyIndex: matches[ 6 ]\n\t\t};\n\n\t\tconst lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\n\n\t\tif ( lastDot !== undefined && lastDot !== -1 ) {\n\n\t\t\tconst objectName = results.nodeName.substring( lastDot + 1 );\n\n\t\t\t// Object names must be checked against an allowlist. Otherwise, there\n\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t// include '.' characters).\n\t\t\tif ( _supportedObjectNames.indexOf( objectName ) !== -1 ) {\n\n\t\t\t\tresults.nodeName = results.nodeName.substring( 0, lastDot );\n\t\t\t\tresults.objectName = objectName;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\t\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\n\n\t\t}\n\n\t\treturn results;\n\n\t}\n\n\t/**\n\t * Searches for a node in the hierarchy of the given root object by the given\n\t * node name.\n\t *\n\t * @static\n\t * @param {Object} root - The root object.\n\t * @param {string|number} nodeName - The name of the node.\n\t * @return {?Object} The found node. Returns `null` if no object was found.\n\t */\n\tstatic findNode( root, nodeName ) {\n\n\t\tif ( nodeName === undefined || nodeName === '' || nodeName === '.' || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\t\treturn root;\n\n\t\t}\n\n\t\t// search into skeleton bones.\n\t\tif ( root.skeleton ) {\n\n\t\t\tconst bone = root.skeleton.getBoneByName( nodeName );\n\n\t\t\tif ( bone !== undefined ) {\n\n\t\t\t\treturn bone;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// search into node subtree.\n\t\tif ( root.children ) {\n\n\t\t\tconst searchNodeSubtree = function ( children ) {\n\n\t\t\t\tfor ( let i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\tconst childNode = children[ i ];\n\n\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\t\treturn childNode;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst result = searchNodeSubtree( childNode.children );\n\n\t\t\t\t\tif ( result ) return result;\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t};\n\n\t\t\tconst subTreeNode = searchNodeSubtree( root.children );\n\n\t\t\tif ( subTreeNode ) {\n\n\t\t\t\treturn subTreeNode;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t// these are used to \"bind\" a nonexistent property\n\t_getValue_unavailable() {}\n\t_setValue_unavailable() {}\n\n\t// Getters\n\n\t_getValue_direct( buffer, offset ) {\n\n\t\tbuffer[ offset ] = this.targetObject[ this.propertyName ];\n\n\t}\n\n\t_getValue_array( buffer, offset ) {\n\n\t\tconst source = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t}\n\n\t}\n\n\t_getValue_arrayElement( buffer, offset ) {\n\n\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t}\n\n\t_getValue_toArray( buffer, offset ) {\n\n\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t}\n\n\t// Direct\n\n\t_setValue_direct( buffer, offset ) {\n\n\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\n\t}\n\n\t_setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t// EntireArray\n\n\t_setValue_array( buffer, offset ) {\n\n\t\tconst dest = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t}\n\n\t}\n\n\t_setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\tconst dest = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t}\n\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tconst dest = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t}\n\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t// ArrayElement\n\n\t_setValue_arrayElement( buffer, offset ) {\n\n\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t}\n\n\t_setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t// HasToFromArray\n\n\t_setValue_fromArray( buffer, offset ) {\n\n\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t}\n\n\t_setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t_getValue_unbound( targetArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.getValue( targetArray, offset );\n\n\t}\n\n\t_setValue_unbound( sourceArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.setValue( sourceArray, offset );\n\n\t}\n\n\t/**\n\t * Creates a getter / setter pair for the property tracked by this binding.\n\t */\n\tbind() {\n\n\t\tlet targetObject = this.node;\n\t\tconst parsedPath = this.parsedPath;\n\n\t\tconst objectName = parsedPath.objectName;\n\t\tconst propertyName = parsedPath.propertyName;\n\t\tlet propertyIndex = parsedPath.propertyIndex;\n\n\t\tif ( ! targetObject ) {\n\n\t\t\ttargetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName );\n\n\t\t\tthis.node = targetObject;\n\n\t\t}\n\n\t\t// set fail state so we can just 'return' on error\n\t\tthis.getValue = this._getValue_unavailable;\n\t\tthis.setValue = this._setValue_unavailable;\n\n\t\t// ensure there is a value node\n\t\tif ( ! targetObject ) {\n\n\t\t\tconsole.warn( 'THREE.PropertyBinding: No target node found for track: ' + this.path + '.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( objectName ) {\n\n\t\t\tlet objectIndex = parsedPath.objectIndex;\n\n\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\tswitch ( objectName ) {\n\n\t\t\t\tcase 'materials':\n\n\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'bones':\n\n\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tfor ( let i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map':\n\n\t\t\t\t\tif ( 'map' in targetObject ) {\n\n\t\t\t\t\t\ttargetObject = targetObject.map;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! targetObject.material.map ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject.material.map;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t}\n\n\n\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// resolve property\n\t\tconst nodeProperty = targetObject[ propertyName ];\n\n\t\tif ( nodeProperty === undefined ) {\n\n\t\t\tconst nodeName = parsedPath.nodeName;\n\n\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\n\t\t\t\t'.' + propertyName + ' but it wasn\\'t found.', targetObject );\n\t\t\treturn;\n\n\t\t}\n\n\t\t// determine versioning scheme\n\t\tlet versioning = this.Versioning.None;\n\n\t\tthis.targetObject = targetObject;\n\n\t\tif ( targetObject.isMaterial === true ) {\n\n\t\t\tversioning = this.Versioning.NeedsUpdate;\n\n\t\t} else if ( targetObject.isObject3D === true ) {\n\n\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\n\t\t}\n\n\t\t// determine how the property gets bound\n\t\tlet bindingType = this.BindingType.Direct;\n\n\t\tif ( propertyIndex !== undefined ) {\n\n\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\tif ( propertyName === 'morphTargetInfluences' ) {\n\n\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! targetObject.geometry.morphAttributes ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( targetObject.morphTargetDictionary[ propertyIndex ] !== undefined ) {\n\n\t\t\t\t\tpropertyIndex = targetObject.morphTargetDictionary[ propertyIndex ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\n\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else if ( Array.isArray( nodeProperty ) ) {\n\n\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else {\n\n\t\t\tthis.propertyName = propertyName;\n\n\t\t}\n\n\t\t// select getter / setter\n\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t}\n\n\t/**\n\t * Unbinds the property.\n\t */\n\tunbind() {\n\n\t\tthis.node = null;\n\n\t\t// back to the prototype version of getValue / setValue\n\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\tthis.getValue = this._getValue_unbound;\n\t\tthis.setValue = this._setValue_unbound;\n\n\t}\n\n}\n\nPropertyBinding.Composite = Composite;\n\nPropertyBinding.prototype.BindingType = {\n\tDirect: 0,\n\tEntireArray: 1,\n\tArrayElement: 2,\n\tHasFromToArray: 3\n};\n\nPropertyBinding.prototype.Versioning = {\n\tNone: 0,\n\tNeedsUpdate: 1,\n\tMatrixWorldNeedsUpdate: 2\n};\n\nPropertyBinding.prototype.GetterByBindingType = [\n\n\tPropertyBinding.prototype._getValue_direct,\n\tPropertyBinding.prototype._getValue_array,\n\tPropertyBinding.prototype._getValue_arrayElement,\n\tPropertyBinding.prototype._getValue_toArray,\n\n];\n\nPropertyBinding.prototype.SetterByBindingTypeAndVersioning = [\n\n\t[\n\t\t// Direct\n\t\tPropertyBinding.prototype._setValue_direct,\n\t\tPropertyBinding.prototype._setValue_direct_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate,\n\n\t], [\n\n\t\t// EntireArray\n\n\t\tPropertyBinding.prototype._setValue_array,\n\t\tPropertyBinding.prototype._setValue_array_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate,\n\n\t], [\n\n\t\t// ArrayElement\n\t\tPropertyBinding.prototype._setValue_arrayElement,\n\t\tPropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate,\n\n\t], [\n\n\t\t// HasToFromArray\n\t\tPropertyBinding.prototype._setValue_fromArray,\n\t\tPropertyBinding.prototype._setValue_fromArray_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate,\n\n\t]\n\n];\n\n/**\n * A group of objects that receives a shared animation state.\n *\n * Usage:\n *\n * - Add objects you would otherwise pass as 'root' to the\n * constructor or the .clipAction method of AnimationMixer.\n * - Instead pass this object as 'root'.\n * - You can also add and remove objects later when the mixer is running.\n *\n * Note:\n *\n * - Objects of this class appear as one object to the mixer,\n * so cache control of the individual objects must be done on the group.\n *\n * Limitation:\n *\n * - The animated properties must be compatible among the all objects in the group.\n * - A single property can either be controlled through a target group or directly, but not both.\n */\nclass AnimationObjectGroup {\n\n\t/**\n\t * Constructs a new animation group.\n\t *\n\t * @param {...Object3D} arguments - An arbitrary number of 3D objects that share the same animation state.\n\t */\n\tconstructor() {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isAnimationObjectGroup = true;\n\n\t\t/**\n\t\t * The UUID of the 3D object.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.uuid = generateUUID();\n\n\t\t// cached objects followed by the active ones\n\t\tthis._objects = Array.prototype.slice.call( arguments );\n\n\t\tthis.nCachedObjects_ = 0; // threshold\n\t\t// note: read by PropertyBinding.Composite\n\n\t\tconst indices = {};\n\t\tthis._indicesByUUID = indices; // for bookkeeping\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t\t}\n\n\t\tthis._paths = []; // inside: string\n\t\tthis._parsedPaths = []; // inside: { we don't care, here }\n\t\tthis._bindings = []; // inside: Array< PropertyBinding >\n\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n\t\tconst scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tobjects: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._objects.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tget bindingsPerObject() {\n\n\t\t\t\treturn scope._bindings.length;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * Adds an arbitrary number of objects to this animation group.\n\t *\n\t * @param {...Object3D} arguments - The 3D objects to add.\n\t */\n\tadd() {\n\n\t\tconst objects = this._objects,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tpaths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tlet knownObject = undefined,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_;\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tconst object = arguments[ i ],\n\t\t\t\tuuid = object.uuid;\n\t\t\tlet index = indicesByUUID[ uuid ];\n\n\t\t\tif ( index === undefined ) {\n\n\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\tindex = nObjects ++;\n\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\tobjects.push( object );\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tbindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t}\n\n\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\tknownObject = objects[ index ];\n\n\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\tconst firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tconst bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ];\n\n\t\t\t\t\tlet binding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\tbinding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t} else if ( objects[ index ] !== knownObject ) {\n\n\t\t\t\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\n\t\t\t\t\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\n\n\t\t\t} // else the object is already where we want it to be\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t}\n\n\t/**\n\t * Removes an arbitrary number of objects to this animation group\n\t *\n\t * @param {...Object3D} arguments - The 3D objects to remove.\n\t */\n\tremove() {\n\n\t\tconst objects = this._objects,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tlet nCachedObjects = this.nCachedObjects_;\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tconst object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\tconst lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tconst bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t}\n\n\t/**\n\t * Deallocates all memory resources for the passed 3D objects of this animation group.\n\t *\n\t * @param {...Object3D} arguments - The 3D objects to uncache.\n\t */\n\tuncache() {\n\n\t\tconst objects = this._objects,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tlet nCachedObjects = this.nCachedObjects_,\n\t\t\tnObjects = objects.length;\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tconst object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\tconst firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tconst bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\tconst lastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\tif ( lastIndex > 0 ) {\n\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobjects[ index ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tconst bindingsForPath = bindings[ j ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} // cached or active\n\n\t\t\t} // if object is known\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t}\n\n\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\tsubscribe_( path, parsedPath ) {\n\n\t\t// returns an array of bindings for the given path that is changed\n\t\t// according to the contained objects in the group\n\n\t\tconst indicesByPath = this._bindingsIndicesByPath;\n\t\tlet index = indicesByPath[ path ];\n\t\tconst bindings = this._bindings;\n\n\t\tif ( index !== undefined ) return bindings[ index ];\n\n\t\tconst paths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tobjects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\tindex = bindings.length;\n\n\t\tindicesByPath[ path ] = index;\n\n\t\tpaths.push( path );\n\t\tparsedPaths.push( parsedPath );\n\t\tbindings.push( bindingsForPath );\n\n\t\tfor ( let i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\n\n\t\t\tconst object = objects[ i ];\n\t\t\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\n\n\t\t}\n\n\t\treturn bindingsForPath;\n\n\t}\n\n\tunsubscribe_( path ) {\n\n\t\t// tells the group to forget about a property path and no longer\n\t\t// update the array previously obtained with 'subscribe_'\n\n\t\tconst indicesByPath = this._bindingsIndicesByPath,\n\t\t\tindex = indicesByPath[ path ];\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tconst paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\tbindings[ index ] = lastBindings;\n\t\t\tbindings.pop();\n\n\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\tparsedPaths.pop();\n\n\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\tpaths.pop();\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * An instance of `AnimationAction` schedules the playback of an animation which is\n * stored in {@link AnimationClip}.\n */\nclass AnimationAction {\n\n\t/**\n\t * Constructs a new animation action.\n\t *\n\t * @param {AnimationMixer} mixer - The mixer that is controlled by this action.\n\t * @param {AnimationClip} clip - The animation clip that holds the actual keyframes.\n\t * @param {?Object3D} [localRoot=null] - The root object on which this action is performed.\n\t * @param {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)} [blendMode] - The blend mode.\n\t */\n\tconstructor( mixer, clip, localRoot = null, blendMode = clip.blendMode ) {\n\n\t\tthis._mixer = mixer;\n\t\tthis._clip = clip;\n\t\tthis._localRoot = localRoot;\n\n\t\t/**\n\t\t * Defines how the animation is blended/combined when two or more animations\n\t\t * are simultaneously played.\n\t\t *\n\t\t * @type {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)}\n\t\t */\n\t\tthis.blendMode = blendMode;\n\n\t\tconst tracks = clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tinterpolants = new Array( nTracks );\n\n\t\tconst interpolantSettings = {\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t};\n\n\t\tfor ( let i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tconst interpolant = tracks[ i ].createInterpolant( null );\n\t\t\tinterpolants[ i ] = interpolant;\n\t\t\tinterpolant.settings = interpolantSettings;\n\n\t\t}\n\n\t\tthis._interpolantSettings = interpolantSettings;\n\n\t\tthis._interpolants = interpolants; // bound by the mixer\n\n\t\t// inside: PropertyMixer (managed by the mixer)\n\t\tthis._propertyBindings = new Array( nTracks );\n\n\t\tthis._cacheIndex = null; // for the memory manager\n\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\tthis._timeScaleInterpolant = null;\n\t\tthis._weightInterpolant = null;\n\n\t\t/**\n\t\t * The loop mode, set via {@link AnimationAction#setLoop}.\n\t\t *\n\t\t * @type {(LoopRepeat|LoopOnce|LoopPingPong)}\n\t\t * @default LoopRepeat\n\t\t */\n\t\tthis.loop = LoopRepeat;\n\t\tthis._loopCount = -1;\n\n\t\t// global mixer time when the action is to be started\n\t\t// it's set back to 'null' upon start of the action\n\t\tthis._startTime = null;\n\n\t\t/**\n\t\t * The local time of this action (in seconds, starting with `0`).\n\t\t *\n\t\t * The value gets clamped or wrapped to `[0,clip.duration]` (according to the\n\t\t * loop state).\n\t\t *\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */\n\t\tthis.time = 0;\n\n\t\t/**\n\t\t * Scaling factor for the {@link AnimationAction#time}. A value of `0` causes the\n\t\t * animation to pause. Negative values cause the animation to play backwards.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.timeScale = 1;\n\t\tthis._effectiveTimeScale = 1;\n\n\t\t/**\n\t\t * The degree of influence of this action (in the interval `[0, 1]`). Values\n\t\t * between `0` (no impact) and `1` (full impact) can be used to blend between\n\t\t * several actions.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.weight = 1;\n\t\tthis._effectiveWeight = 1;\n\n\t\t/**\n\t\t * The number of repetitions of the performed clip over the course of this action.\n\t\t * Can be set via {@link AnimationAction#setLoop}.\n\t\t *\n\t\t * Setting this number has no effect if {@link AnimationAction#loop} is set to\n\t\t * `THREE:LoopOnce`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */\n\t\tthis.repetitions = Infinity;\n\n\t\t/**\n\t\t * If set to `true`, the playback of the action is paused.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.paused = false;\n\n\t\t/**\n\t\t * If set to `false`, the action is disabled so it has no impact.\n\t\t *\n\t\t * When the action is re-enabled, the animation continues from its current\n\t\t * time (setting `enabled` to `false` doesn't reset the action).\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.enabled = true;\n\n\t\t/**\n\t\t * If set to true the animation will automatically be paused on its last frame.\n\t\t *\n\t\t * If set to false, {@link AnimationAction#enabled} will automatically be switched\n\t\t * to `false` when the last loop of the action has finished, so that this action has\n\t\t * no further impact.\n\t\t *\n\t\t * Note: This member has no impact if the action is interrupted (it\n\t\t * has only an effect if its last loop has really finished).\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.clampWhenFinished = false;\n\n\t\t/**\n\t\t * Enables smooth interpolation without separate clips for start, loop and end.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.zeroSlopeAtStart = true;\n\n\t\t/**\n\t\t * Enables smooth interpolation without separate clips for start, loop and end.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.zeroSlopeAtEnd = true;\n\n\t}\n\n\t/**\n\t * Starts the playback of the animation.\n\t *\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tplay() {\n\n\t\tthis._mixer._activateAction( this );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Stops the playback of the animation.\n\t *\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tstop() {\n\n\t\tthis._mixer._deactivateAction( this );\n\n\t\treturn this.reset();\n\n\t}\n\n\t/**\n\t * Resets the playback of the animation.\n\t *\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\treset() {\n\n\t\tthis.paused = false;\n\t\tthis.enabled = true;\n\n\t\tthis.time = 0; // restart clip\n\t\tthis._loopCount = -1;// forget previous loops\n\t\tthis._startTime = null;// forget scheduling\n\n\t\treturn this.stopFading().stopWarping();\n\n\t}\n\n\t/**\n\t * Returns `true` if the animation is running.\n\t *\n\t * @return {boolean} Whether the animation is running or not.\n\t */\n\tisRunning() {\n\n\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t}\n\n\t/**\n\t * Returns `true` when {@link AnimationAction#play} has been called.\n\t *\n\t * @return {boolean} Whether the animation is scheduled or not.\n\t */\n\tisScheduled() {\n\n\t\treturn this._mixer._isActiveAction( this );\n\n\t}\n\n\t/**\n\t * Defines the time when the animation should start.\n\t *\n\t * @param {number} time - The start time in seconds.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tstartAt( time ) {\n\n\t\tthis._startTime = time;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Configures the loop settings for this action.\n\t *\n\t * @param {(LoopRepeat|LoopOnce|LoopPingPong)} mode - The loop mode.\n\t * @param {number} repetitions - The number of repetitions.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tsetLoop( mode, repetitions ) {\n\n\t\tthis.loop = mode;\n\t\tthis.repetitions = repetitions;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the effective weight of this action.\n\t *\n\t * An action has no effect and thus an effective weight of zero when the\n\t * action is disabled.\n\t *\n\t * @param {number} weight - The weight to set.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tsetEffectiveWeight( weight ) {\n\n\t\tthis.weight = weight;\n\n\t\t// note: same logic as when updated at runtime\n\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\treturn this.stopFading();\n\n\t}\n\n\t/**\n\t * Returns the effective weight of this action.\n\t *\n\t * @return {number} The effective weight.\n\t */\n\tgetEffectiveWeight() {\n\n\t\treturn this._effectiveWeight;\n\n\t}\n\n\t/**\n\t * Fades the animation in by increasing its weight gradually from `0` to `1`,\n\t * within the passed time interval.\n\t *\n\t * @param {number} duration - The duration of the fade.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tfadeIn( duration ) {\n\n\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t}\n\n\t/**\n\t * Fades the animation out by decreasing its weight gradually from `1` to `0`,\n\t * within the passed time interval.\n\t *\n\t * @param {number} duration - The duration of the fade.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tfadeOut( duration ) {\n\n\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t}\n\n\t/**\n\t * Causes this action to fade in and the given action to fade out,\n\t * within the passed time interval.\n\t *\n\t * @param {AnimationAction} fadeOutAction - The animation action to fade out.\n\t * @param {number} duration - The duration of the fade.\n\t * @param {boolean} [warp=false] - Whether warping should be used or not.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tcrossFadeFrom( fadeOutAction, duration, warp = false ) {\n\n\t\tfadeOutAction.fadeOut( duration );\n\t\tthis.fadeIn( duration );\n\n\t\tif ( warp === true ) {\n\n\t\t\tconst fadeInDuration = this._clip.duration,\n\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Causes this action to fade out and the given action to fade in,\n\t * within the passed time interval.\n\t *\n\t * @param {AnimationAction} fadeInAction - The animation action to fade in.\n\t * @param {number} duration - The duration of the fade.\n\t * @param {boolean} [warp=false] - Whether warping should be used or not.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tcrossFadeTo( fadeInAction, duration, warp = false ) {\n\n\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t}\n\n\t/**\n\t * Stops any fading which is applied to this action.\n\t *\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tstopFading() {\n\n\t\tconst weightInterpolant = this._weightInterpolant;\n\n\t\tif ( weightInterpolant !== null ) {\n\n\t\t\tthis._weightInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the effective time scale of this action.\n\t *\n\t * An action has no effect and thus an effective time scale of zero when the\n\t * action is paused.\n\t *\n\t * @param {number} timeScale - The time scale to set.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tsetEffectiveTimeScale( timeScale ) {\n\n\t\tthis.timeScale = timeScale;\n\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\t/**\n\t * Returns the effective time scale of this action.\n\t *\n\t * @return {number} The effective time scale.\n\t */\n\tgetEffectiveTimeScale() {\n\n\t\treturn this._effectiveTimeScale;\n\n\t}\n\n\t/**\n\t * Sets the duration for a single loop of this action.\n\t *\n\t * @param {number} duration - The duration to set.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tsetDuration( duration ) {\n\n\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\t/**\n\t * Synchronizes this action with the passed other action.\n\t *\n\t * @param {AnimationAction} action - The action to sync with.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tsyncWith( action ) {\n\n\t\tthis.time = action.time;\n\t\tthis.timeScale = action.timeScale;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\t/**\n\t * Decelerates this animation's speed to `0` within the passed time interval.\n\t *\n\t * @param {number} duration - The duration.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\thalt( duration ) {\n\n\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t}\n\n\t/**\n\t * Changes the playback speed, within the passed time interval, by modifying\n\t * {@link AnimationAction#timeScale} gradually from `startTimeScale` to\n\t * `endTimeScale`.\n\t *\n\t * @param {number} startTimeScale - The start time scale.\n\t * @param {number} endTimeScale - The end time scale.\n\t * @param {number} duration - The duration.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\twarp( startTimeScale, endTimeScale, duration ) {\n\n\t\tconst mixer = this._mixer,\n\t\t\tnow = mixer.time,\n\t\t\ttimeScale = this.timeScale;\n\n\t\tlet interpolant = this._timeScaleInterpolant;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t}\n\n\t\tconst times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\ttimes[ 1 ] = now + duration;\n\n\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Stops any scheduled warping which is applied to this action.\n\t *\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tstopWarping() {\n\n\t\tconst timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the animation mixer of this animation action.\n\t *\n\t * @return {AnimationMixer} The animation mixer.\n\t */\n\tgetMixer() {\n\n\t\treturn this._mixer;\n\n\t}\n\n\t/**\n\t * Returns the animation clip of this animation action.\n\t *\n\t * @return {AnimationClip} The animation clip.\n\t */\n\tgetClip() {\n\n\t\treturn this._clip;\n\n\t}\n\n\t/**\n\t * Returns the root object of this animation action.\n\t *\n\t * @return {Object3D} The root object.\n\t */\n\tgetRoot() {\n\n\t\treturn this._localRoot || this._mixer._root;\n\n\t}\n\n\t// Interna\n\n\t_update( time, deltaTime, timeDirection, accuIndex ) {\n\n\t\t// called by the mixer\n\n\t\tif ( ! this.enabled ) {\n\n\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\n\t\t\tthis._updateWeight( time );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst startTime = this._startTime;\n\n\t\tif ( startTime !== null ) {\n\n\t\t\t// check for scheduled start of action\n\n\t\t\tconst timeRunning = ( time - startTime ) * timeDirection;\n\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\tdeltaTime = 0;\n\n\t\t\t} else {\n\n\n\t\t\t\tthis._startTime = null; // unschedule\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// apply time scale and advance time\n\n\t\tdeltaTime *= this._updateTimeScale( time );\n\t\tconst clipTime = this._updateTime( deltaTime );\n\n\t\t// note: _updateTime may disable the action resulting in\n\t\t// an effective weight of 0\n\n\t\tconst weight = this._updateWeight( time );\n\n\t\tif ( weight > 0 ) {\n\n\t\t\tconst interpolants = this._interpolants;\n\t\t\tconst propertyMixers = this._propertyBindings;\n\n\t\t\tswitch ( this.blendMode ) {\n\n\t\t\t\tcase AdditiveAnimationBlendMode:\n\n\t\t\t\t\tfor ( let j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\t\tpropertyMixers[ j ].accumulateAdditive( weight );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase NormalAnimationBlendMode:\n\t\t\t\tdefault:\n\n\t\t\t\t\tfor ( let j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n\t\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_updateWeight( time ) {\n\n\t\tlet weight = 0;\n\n\t\tif ( this.enabled ) {\n\n\t\t\tweight = this.weight;\n\t\t\tconst interpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tconst interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveWeight = weight;\n\t\treturn weight;\n\n\t}\n\n\t_updateTimeScale( time ) {\n\n\t\tlet timeScale = 0;\n\n\t\tif ( ! this.paused ) {\n\n\t\t\ttimeScale = this.timeScale;\n\n\t\t\tconst interpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tconst interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveTimeScale = timeScale;\n\t\treturn timeScale;\n\n\t}\n\n\t_updateTime( deltaTime ) {\n\n\t\tconst duration = this._clip.duration;\n\t\tconst loop = this.loop;\n\n\t\tlet time = this.time + deltaTime;\n\t\tlet loopCount = this._loopCount;\n\n\t\tconst pingPong = ( loop === LoopPingPong );\n\n\t\tif ( deltaTime === 0 ) {\n\n\t\t\tif ( loopCount === -1 ) return time;\n\n\t\t\treturn ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;\n\n\t\t}\n\n\t\tif ( loop === LoopOnce ) {\n\n\t\t\tif ( loopCount === -1 ) {\n\n\t\t\t\t// just started\n\n\t\t\t\tthis._loopCount = 0;\n\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t}\n\n\t\t\thandle_stop: {\n\n\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\ttime = duration;\n\n\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\ttime = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tbreak handle_stop;\n\n\t\t\t\t}\n\n\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\telse this.enabled = false;\n\n\t\t\t\tthis.time = time;\n\n\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\tif ( loopCount === -1 ) {\n\n\t\t\t\t// just started\n\n\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\tthis._setEndings( true, this.repetitions === 0, pingPong );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\tthis._setEndings( this.repetitions === 0, true, pingPong );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( time >= duration || time < 0 ) {\n\n\t\t\t\t// wrap around\n\n\t\t\t\tconst loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\tconst pending = this.repetitions - loopCount;\n\n\t\t\t\tif ( pending <= 0 ) {\n\n\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\telse this.enabled = false;\n\n\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// keep running\n\n\t\t\t\t\tif ( pending === 1 ) {\n\n\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\tconst atStart = deltaTime < 0;\n\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.time = time;\n\n\t\t\t}\n\n\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\n\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\treturn duration - time;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn time;\n\n\t}\n\n\t_setEndings( atStart, atEnd, pingPong ) {\n\n\t\tconst settings = this._interpolantSettings;\n\n\t\tif ( pingPong ) {\n\n\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\n\t\t} else {\n\n\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\tif ( atStart ) {\n\n\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n\t\t\t}\n\n\t\t\tif ( atEnd ) {\n\n\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_scheduleFading( duration, weightNow, weightThen ) {\n\n\t\tconst mixer = this._mixer, now = mixer.time;\n\t\tlet interpolant = this._weightInterpolant;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t}\n\n\t\tconst times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\tvalues[ 0 ] = weightNow;\n\t\ttimes[ 1 ] = now + duration;\n\t\tvalues[ 1 ] = weightThen;\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _controlInterpolantsResultBuffer = new Float32Array( 1 );\n\n/**\n * `AnimationMixer` is a player for animations on a particular object in\n * the scene. When multiple objects in the scene are animated independently,\n * one `AnimationMixer` may be used for each object.\n */\nclass AnimationMixer extends EventDispatcher {\n\n\t/**\n\t * Constructs a new animation mixer.\n\t *\n\t * @param {Object3D} root - The object whose animations shall be played by this mixer.\n\t */\n\tconstructor( root ) {\n\n\t\tsuper();\n\n\t\tthis._root = root;\n\t\tthis._initMemoryManager();\n\t\tthis._accuIndex = 0;\n\n\t\t/**\n\t\t * The global mixer time (in seconds; starting with `0` on the mixer's creation).\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.time = 0;\n\n\t\t/**\n\t\t * A scaling factor for the global time.\n\t\t *\n\t\t * Note: Setting this member to `0` and later back to `1` is a\n\t\t * possibility to pause/unpause all actions that are controlled by this\n\t\t * mixer.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.timeScale = 1.0;\n\n\t}\n\n\t_bindAction( action, prototypeAction ) {\n\n\t\tconst root = action._localRoot || this._root,\n\t\t\ttracks = action._clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tbindings = action._propertyBindings,\n\t\t\tinterpolants = action._interpolants,\n\t\t\trootUuid = root.uuid,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName;\n\n\t\tlet bindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingsByName === undefined ) {\n\n\t\t\tbindingsByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t}\n\n\t\tfor ( let i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tconst track = tracks[ i ],\n\t\t\t\ttrackName = track.name;\n\n\t\t\tlet binding = bindingsByName[ trackName ];\n\n\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t++ binding.referenceCount;\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t} else {\n\n\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tconst path = prototypeAction && prototypeAction.\n\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\tbinding = new PropertyMixer(\n\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t++ binding.referenceCount;\n\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t}\n\n\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t}\n\n\t}\n\n\t_activateAction( action ) {\n\n\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\tconst rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\tthis._bindAction( action,\n\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t}\n\n\t\t\tconst bindings = action._propertyBindings;\n\n\t\t\t// increment reference counts / sort out state\n\t\t\tfor ( let i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tconst binding = bindings[ i ];\n\n\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._lendAction( action );\n\n\t\t}\n\n\t}\n\n\t_deactivateAction( action ) {\n\n\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\tconst bindings = action._propertyBindings;\n\n\t\t\t// decrement reference counts / sort out state\n\t\t\tfor ( let i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tconst binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._takeBackAction( action );\n\n\t\t}\n\n\t}\n\n\t// Memory manager\n\n\t_initMemoryManager() {\n\n\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\tthis._nActiveActions = 0;\n\n\t\tthis._actionsByClip = {};\n\t\t// inside:\n\t\t// {\n\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\n\t\t// \tactionByRoot: AnimationAction - lookup\n\t\t// }\n\n\n\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\tthis._nActiveBindings = 0;\n\n\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\tthis._controlInterpolants = []; // same game as above\n\t\tthis._nActiveControlInterpolants = 0;\n\n\t\tconst scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tactions: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._actions.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveActions;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tbindings: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._bindings.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveBindings;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tcontrolInterpolants: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._controlInterpolants.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t// Memory management for AnimationAction objects\n\n\t_isActiveAction( action ) {\n\n\t\tconst index = action._cacheIndex;\n\t\treturn index !== null && index < this._nActiveActions;\n\n\t}\n\n\t_addInactiveAction( action, clipUuid, rootUuid ) {\n\n\t\tconst actions = this._actions,\n\t\t\tactionsByClip = this._actionsByClip;\n\n\t\tlet actionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip === undefined ) {\n\n\t\t\tactionsForClip = {\n\n\t\t\t\tknownActions: [ action ],\n\t\t\t\tactionByRoot: {}\n\n\t\t\t};\n\n\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t} else {\n\n\t\t\tconst knownActions = actionsForClip.knownActions;\n\n\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\tknownActions.push( action );\n\n\t\t}\n\n\t\taction._cacheIndex = actions.length;\n\t\tactions.push( action );\n\n\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t}\n\n\t_removeInactiveAction( action ) {\n\n\t\tconst actions = this._actions,\n\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\tcacheIndex = action._cacheIndex;\n\n\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\tactions.pop();\n\n\t\taction._cacheIndex = null;\n\n\n\t\tconst clipUuid = action._clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\tlastKnownAction =\n\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\tknownActionsForClip.pop();\n\n\t\taction._byClipCacheIndex = null;\n\n\n\t\tconst actionByRoot = actionsForClip.actionByRoot,\n\t\t\trootUuid = ( action._localRoot || this._root ).uuid;\n\n\t\tdelete actionByRoot[ rootUuid ];\n\n\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t\tthis._removeInactiveBindingsForAction( action );\n\n\t}\n\n\t_removeInactiveBindingsForAction( action ) {\n\n\t\tconst bindings = action._propertyBindings;\n\n\t\tfor ( let i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tconst binding = bindings[ i ];\n\n\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_lendAction( action ) {\n\n\t\t// [ active actions |  inactive actions  ]\n\t\t// [  active actions >| inactive actions ]\n\t\t//                 s        a\n\t\t//                  <-swap->\n\t\t//                 a        s\n\n\t\tconst actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\taction._cacheIndex = lastActiveIndex;\n\t\tactions[ lastActiveIndex ] = action;\n\n\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t}\n\n\t_takeBackAction( action ) {\n\n\t\t// [  active actions  | inactive actions ]\n\t\t// [ active actions |< inactive actions  ]\n\t\t//        a        s\n\t\t//         <-swap->\n\t\t//        s        a\n\n\t\tconst actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\taction._cacheIndex = firstInactiveIndex;\n\t\tactions[ firstInactiveIndex ] = action;\n\n\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t}\n\n\t// Memory management for PropertyMixer objects\n\n\t_addInactiveBinding( binding, rootUuid, trackName ) {\n\n\t\tconst bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindings = this._bindings;\n\n\t\tlet bindingByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingByName === undefined ) {\n\n\t\t\tbindingByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t}\n\n\t\tbindingByName[ trackName ] = binding;\n\n\t\tbinding._cacheIndex = bindings.length;\n\t\tbindings.push( binding );\n\n\t}\n\n\t_removeInactiveBinding( binding ) {\n\n\t\tconst bindings = this._bindings,\n\t\t\tpropBinding = binding.binding,\n\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\ttrackName = propBinding.path,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\tbindings.pop();\n\n\t\tdelete bindingByName[ trackName ];\n\n\t\tif ( Object.keys( bindingByName ).length === 0 ) {\n\n\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t}\n\n\t}\n\n\t_lendBinding( binding ) {\n\n\t\tconst bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\tbinding._cacheIndex = lastActiveIndex;\n\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t}\n\n\t_takeBackBinding( binding ) {\n\n\t\tconst bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t}\n\n\n\t// Memory management of Interpolants for weight and time scale\n\n\t_lendControlInterpolant() {\n\n\t\tconst interpolants = this._controlInterpolants,\n\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++;\n\n\t\tlet interpolant = interpolants[ lastActiveIndex ];\n\n\t\tif ( interpolant === undefined ) {\n\n\t\t\tinterpolant = new LinearInterpolant(\n\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t1, _controlInterpolantsResultBuffer );\n\n\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t}\n\n\t\treturn interpolant;\n\n\t}\n\n\t_takeBackControlInterpolant( interpolant ) {\n\n\t\tconst interpolants = this._controlInterpolants,\n\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t}\n\n\t/**\n\t * Returns an instance of {@link AnimationAction} for the passed clip.\n\t *\n\t * If an action fitting the clip and root parameters doesn't yet exist, it\n\t * will be created by this method. Calling this method several times with the\n\t * same clip and root parameters always returns the same action.\n\t *\n\t * @param {AnimationClip|string} clip - An animation clip or alternatively the name of the animation clip.\n\t * @param {Object3D} [optionalRoot] - An alternative root object.\n\t * @param {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)} [blendMode] - The blend mode.\n\t * @return {?AnimationAction} The animation action.\n\t */\n\tclipAction( clip, optionalRoot, blendMode ) {\n\n\t\tconst root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid;\n\n\t\tlet clipObject = typeof clip === 'string' ? AnimationClip.findByName( root, clip ) : clip;\n\n\t\tconst clipUuid = clipObject !== null ? clipObject.uuid : clip;\n\n\t\tconst actionsForClip = this._actionsByClip[ clipUuid ];\n\t\tlet prototypeAction = null;\n\n\t\tif ( blendMode === undefined ) {\n\n\t\t\tif ( clipObject !== null ) {\n\n\t\t\t\tblendMode = clipObject.blendMode;\n\n\t\t\t} else {\n\n\t\t\t\tblendMode = NormalAnimationBlendMode;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\tconst existingAction = actionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\tif ( existingAction !== undefined && existingAction.blendMode === blendMode ) {\n\n\t\t\t\treturn existingAction;\n\n\t\t\t}\n\n\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t// the bindings again but can just copy\n\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t// also, take the clip from the prototype action\n\t\t\tif ( clipObject === null )\n\t\t\t\tclipObject = prototypeAction._clip;\n\n\t\t}\n\n\t\t// clip must be known when specified via string\n\t\tif ( clipObject === null ) return null;\n\n\t\t// allocate all resources required to run it\n\t\tconst newAction = new AnimationAction( this, clipObject, optionalRoot, blendMode );\n\n\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t// and make the action known to the memory manager\n\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\treturn newAction;\n\n\t}\n\n\t/**\n\t * Returns an existing animation action for the passed clip.\n\t *\n\t * @param {AnimationClip|string} clip - An animation clip or alternatively the name of the animation clip.\n\t * @param {Object3D} [optionalRoot] - An alternative root object.\n\t * @return {?AnimationAction} The animation action. Returns `null` if no action was found.\n\t */\n\texistingAction( clip, optionalRoot ) {\n\n\t\tconst root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid,\n\n\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t/**\n\t * Deactivates all previously scheduled actions on this mixer.\n\t *\n\t * @return {AnimationMixer} A reference to thi animation mixer.\n\t */\n\tstopAllAction() {\n\n\t\tconst actions = this._actions,\n\t\t\tnActions = this._nActiveActions;\n\n\t\tfor ( let i = nActions - 1; i >= 0; -- i ) {\n\n\t\t\tactions[ i ].stop();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Advances the global mixer time and updates the animation.\n\t *\n\t * This is usually done in the render loop by passing the delta\n\t * time from {@link Clock} or {@link Timer}.\n\t *\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @return {AnimationMixer} A reference to thi animation mixer.\n\t */\n\tupdate( deltaTime ) {\n\n\t\tdeltaTime *= this.timeScale;\n\n\t\tconst actions = this._actions,\n\t\t\tnActions = this._nActiveActions,\n\n\t\t\ttime = this.time += deltaTime,\n\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t// run active actions\n\n\t\tfor ( let i = 0; i !== nActions; ++ i ) {\n\n\t\t\tconst action = actions[ i ];\n\n\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t}\n\n\t\t// update scene graph\n\n\t\tconst bindings = this._bindings,\n\t\t\tnBindings = this._nActiveBindings;\n\n\t\tfor ( let i = 0; i !== nBindings; ++ i ) {\n\n\t\t\tbindings[ i ].apply( accuIndex );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the global mixer to a specific time and updates the animation accordingly.\n\t *\n\t * This is useful when you need to jump to an exact time in an animation. The\n\t * input parameter will be scaled by {@link AnimationMixer#timeScale}\n\t *\n\t * @param {number} time - The time to set in seconds.\n\t * @return {AnimationMixer} A reference to thi animation mixer.\n\t */\n\tsetTime( time ) {\n\n\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\n\t\tfor ( let i = 0; i < this._actions.length; i ++ ) {\n\n\t\t\tthis._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n\n\t\t}\n\n\t\treturn this.update( time ); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n\n\t}\n\n\t/**\n\t * Returns this mixer's root object.\n\t *\n\t * @return {Object3D} The mixer's root object.\n\t */\n\tgetRoot() {\n\n\t\treturn this._root;\n\n\t}\n\n\t/**\n\t * Deallocates all memory resources for a clip. Before using this method make\n\t * sure to call {@link AnimationAction#stop} for all related actions.\n\t *\n\t * @param {AnimationClip} clip - The clip to uncache.\n\t */\n\tuncacheClip( clip ) {\n\n\t\tconst actions = this._actions,\n\t\t\tclipUuid = clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t// iteration state and also require updating the state we can\n\t\t\t// just throw away\n\n\t\t\tconst actionsToRemove = actionsForClip.knownActions;\n\n\t\t\tfor ( let i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\tconst action = actionsToRemove[ i ];\n\n\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\tconst cacheIndex = action._cacheIndex,\n\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\taction._cacheIndex = null;\n\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\tactions.pop();\n\n\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t}\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Deallocates all memory resources for a root object. Before using this\n\t * method make sure to call {@link AnimationAction#stop} for all related\n\t * actions or alternatively {@link AnimationMixer#stopAllAction} when the\n\t * mixer operates on a single root.\n\t *\n\t * @param {Object3D} root - The root object to uncache.\n\t */\n\tuncacheRoot( root ) {\n\n\t\tconst rootUuid = root.uuid,\n\t\t\tactionsByClip = this._actionsByClip;\n\n\t\tfor ( const clipUuid in actionsByClip ) {\n\n\t\t\tconst actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\tif ( action !== undefined ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingByName !== undefined ) {\n\n\t\t\tfor ( const trackName in bindingByName ) {\n\n\t\t\t\tconst binding = bindingByName[ trackName ];\n\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Deallocates all memory resources for an action. The action is identified by the\n\t * given clip and an optional root object. Before using this method make\n\t * sure to call {@link AnimationAction#stop} to deactivate the action.\n\t *\n\t * @param {AnimationClip|string} clip - An animation clip or alternatively the name of the animation clip.\n\t * @param {Object3D} [optionalRoot] - An alternative root object.\n\t */\n\tuncacheAction( clip, optionalRoot ) {\n\n\t\tconst action = this.existingAction( clip, optionalRoot );\n\n\t\tif ( action !== null ) {\n\n\t\t\tthis._deactivateAction( action );\n\t\t\tthis._removeInactiveAction( action );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * Represents a 3D render target.\n *\n * @augments RenderTarget\n */\nclass RenderTarget3D extends RenderTarget {\n\n\t/**\n\t * Constructs a new 3D render target.\n\t *\n\t * @param {number} [width=1] - The width of the render target.\n\t * @param {number} [height=1] - The height of the render target.\n\t * @param {number} [depth=1] - The height of the render target.\n\t * @param {RenderTarget~Options} [options] - The configuration object.\n\t */\n\tconstructor( width = 1, height = 1, depth = 1, options = {} ) {\n\n\t\tsuper( width, height, options );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isRenderTarget3D = true;\n\n\t\tthis.depth = depth;\n\n\t\t/**\n\t\t * Overwritten with a different texture type.\n\t\t *\n\t\t * @type {Data3DTexture}\n\t\t */\n\t\tthis.texture = new Data3DTexture( null, width, height, depth );\n\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t}\n\n}\n\n/**\n * Represents an array render target.\n *\n * @augments RenderTarget\n */\nclass RenderTargetArray extends RenderTarget {\n\n\t/**\n\t * Constructs a new 3D render target.\n\t *\n\t * @param {number} [width=1] - The width of the render target.\n\t * @param {number} [height=1] - The height of the render target.\n\t * @param {number} [depth=1] - The height of the render target.\n\t * @param {RenderTarget~Options} [options] - The configuration object.\n\t */\n\tconstructor( width = 1, height = 1, depth = 1, options = {} ) {\n\n\t\tsuper( width, height, options );\n\n\t\tthis.isRenderTargetArray = true;\n\n\t\tthis.depth = depth;\n\n\t\t/**\n\t\t * Overwritten with a different texture type.\n\t\t *\n\t\t * @type {DataArrayTexture}\n\t\t */\n\t\tthis.texture = new DataArrayTexture( null, width, height, depth );\n\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t}\n\n}\n\n/**\n * Represents a uniform which is a global shader variable. They are passed to shader programs.\n *\n * When declaring a uniform of a {@link ShaderMaterial}, it is declared by value or by object.\n * ```js\n * uniforms: {\n * \ttime: { value: 1.0 },\n * \tresolution: new Uniform( new Vector2() )\n * };\n * ```\n * Since this class can only be used in context of {@link ShaderMaterial}, it is only supported\n * in {@link WebGLRenderer}.\n */\nclass Uniform {\n\n\t/**\n\t * Constructs a new uniform.\n\t *\n\t * @param {any} value - The uniform value.\n\t */\n\tconstructor( value ) {\n\n\t\t/**\n\t\t * The uniform value.\n\t\t *\n\t\t * @type {any}\n\t\t */\n\t\tthis.value = value;\n\n\t}\n\n\t/**\n\t * Returns a new uniform with copied values from this instance.\n\t * If the value has a `clone()` method, the value is cloned as well.\n\t *\n\t * @return {Uniform} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\n\n\t}\n\n}\n\nlet _id = 0;\n\n/**\n * A class for managing multiple uniforms in a single group. The renderer will process\n * such a definition as a single UBO.\n *\n * Since this class can only be used in context of {@link ShaderMaterial}, it is only supported\n * in {@link WebGLRenderer}.\n *\n * @augments EventDispatcher\n */\nclass UniformsGroup extends EventDispatcher {\n\n\t/**\n\t * Constructs a new uniforms group.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isUniformsGroup = true;\n\n\t\t/**\n\t\t * The ID of the 3D object.\n\t\t *\n\t\t * @name UniformsGroup#id\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */\n\t\tObject.defineProperty( this, 'id', { value: _id ++ } );\n\n\t\t/**\n\t\t * The name of the uniforms group.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = '';\n\n\t\t/**\n\t\t * The buffer usage.\n\t\t *\n\t\t * @type {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)}\n\t\t * @default StaticDrawUsage\n\t\t */\n\t\tthis.usage = StaticDrawUsage;\n\n\t\t/**\n\t\t * An array holding the uniforms.\n\t\t *\n\t\t * @type {Array<Uniform>}\n\t\t */\n\t\tthis.uniforms = [];\n\n\t}\n\n\t/**\n\t * Adds the given uniform to this uniforms group.\n\t *\n\t * @param {Uniform} uniform - The uniform to add.\n\t * @return {UniformsGroup} A reference to this uniforms group.\n\t */\n\tadd( uniform ) {\n\n\t\tthis.uniforms.push( uniform );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Removes the given uniform from this uniforms group.\n\t *\n\t * @param {Uniform} uniform - The uniform to remove.\n\t * @return {UniformsGroup} A reference to this uniforms group.\n\t */\n\tremove( uniform ) {\n\n\t\tconst index = this.uniforms.indexOf( uniform );\n\n\t\tif ( index !== -1 ) this.uniforms.splice( index, 1 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the name of this uniforms group.\n\t *\n\t * @param {string} name - The name to set.\n\t * @return {UniformsGroup} A reference to this uniforms group.\n\t */\n\tsetName( name ) {\n\n\t\tthis.name = name;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the usage of this uniforms group.\n\t *\n\t * @param {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)} value - The usage to set.\n\t * @return {UniformsGroup} A reference to this uniforms group.\n\t */\n\tsetUsage( value ) {\n\n\t\tthis.usage = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t *\n\t * @fires Texture#dispose\n\t */\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\t/**\n\t * Copies the values of the given uniforms group to this instance.\n\t *\n\t * @param {UniformsGroup} source - The uniforms group to copy.\n\t * @return {UniformsGroup} A reference to this uniforms group.\n\t */\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\t\tthis.usage = source.usage;\n\n\t\tconst uniformsSource = source.uniforms;\n\n\t\tthis.uniforms.length = 0;\n\n\t\tfor ( let i = 0, l = uniformsSource.length; i < l; i ++ ) {\n\n\t\t\tconst uniforms = Array.isArray( uniformsSource[ i ] ) ? uniformsSource[ i ] : [ uniformsSource[ i ] ];\n\n\t\t\tfor ( let j = 0; j < uniforms.length; j ++ ) {\n\n\t\t\t\tthis.uniforms.push( uniforms[ j ].clone() );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new uniforms group with copied values from this instance.\n\t *\n\t * @return {UniformsGroup} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\n/**\n * An instanced version of an interleaved buffer.\n *\n * @augments InterleavedBuffer\n */\nclass InstancedInterleavedBuffer extends InterleavedBuffer {\n\n\t/**\n\t * Constructs a new instanced interleaved buffer.\n\t *\n\t * @param {TypedArray} array - A typed array with a shared buffer storing attribute data.\n\t * @param {number} stride - The number of typed-array elements per vertex.\n\t * @param {number} [meshPerAttribute=1] - Defines how often a value of this interleaved buffer should be repeated.\n\t */\n\tconstructor( array, stride, meshPerAttribute = 1 ) {\n\n\t\tsuper( array, stride );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isInstancedInterleavedBuffer = true;\n\n\t\t/**\n\t\t * Defines how often a value of this buffer attribute should be repeated,\n\t\t * see {@link InstancedBufferAttribute#meshPerAttribute}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.meshPerAttribute = meshPerAttribute;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\treturn this;\n\n\t}\n\n\tclone( data ) {\n\n\t\tconst ib = super.clone( data );\n\n\t\tib.meshPerAttribute = this.meshPerAttribute;\n\n\t\treturn ib;\n\n\t}\n\n\ttoJSON( data ) {\n\n\t\tconst json = super.toJSON( data );\n\n\t\tjson.isInstancedInterleavedBuffer = true;\n\t\tjson.meshPerAttribute = this.meshPerAttribute;\n\n\t\treturn json;\n\n\t}\n\n}\n\n/**\n * An alternative version of a buffer attribute with more control over the VBO.\n *\n * The renderer does not construct a VBO for this kind of attribute. Instead, it uses\n * whatever VBO is passed in constructor and can later be altered via the `buffer` property.\n *\n * The most common use case for this class is when some kind of GPGPU calculation interferes\n * or even produces the VBOs in question.\n *\n * Notice that this class can only be used with {@link WebGLRenderer}.\n */\nclass GLBufferAttribute {\n\n\t/**\n\t * Constructs a new GL buffer attribute.\n\t *\n\t * @param {WebGLBuffer} buffer - The native WebGL buffer.\n\t * @param {number} type - The native data type (e.g. `gl.FLOAT`).\n\t * @param {number} itemSize - The item size.\n\t * @param {number} elementSize - The corresponding size (in bytes) for the given `type` parameter.\n\t * @param {number} count - The expected number of vertices in VBO.\n\t */\n\tconstructor( buffer, type, itemSize, elementSize, count ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isGLBufferAttribute = true;\n\n\t\t/**\n\t\t * The name of the buffer attribute.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = '';\n\n\t\t/**\n\t\t * The native WebGL buffer.\n\t\t *\n\t\t * @type {WebGLBuffer}\n\t\t */\n\t\tthis.buffer = buffer;\n\n\t\t/**\n\t\t * The native data type.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.type = type;\n\n\t\t/**\n\t\t * The item size, see {@link BufferAttribute#itemSize}.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.itemSize = itemSize;\n\n\t\t/**\n\t\t * The corresponding size (in bytes) for the given `type` parameter.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.elementSize = elementSize;\n\n\t\t/**\n\t\t * The expected number of vertices in VBO.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.count = count;\n\n\t\t/**\n\t\t * A version number, incremented every time the `needsUpdate` is set to `true`.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.version = 0;\n\n\t}\n\n\t/**\n\t * Flag to indicate that this attribute has changed and should be re-sent to\n\t * the GPU. Set this to `true` when you modify the value of the array.\n\t *\n\t * @type {number}\n\t * @default false\n\t * @param {boolean} value\n\t */\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\t/**\n\t * Sets the given native WebGL buffer.\n\t *\n\t * @param {WebGLBuffer} buffer - The buffer to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tsetBuffer( buffer ) {\n\n\t\tthis.buffer = buffer;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given native data type and element size.\n\t *\n\t * @param {number} type - The native data type (e.g. `gl.FLOAT`).\n\t * @param {number} elementSize - The corresponding size (in bytes) for the given `type` parameter.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tsetType( type, elementSize ) {\n\n\t\tthis.type = type;\n\t\tthis.elementSize = elementSize;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the item size.\n\t *\n\t * @param {number} itemSize - The item size.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tsetItemSize( itemSize ) {\n\n\t\tthis.itemSize = itemSize;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the count (the expected number of vertices in VBO).\n\t *\n\t * @param {number} count - The count.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tsetCount( count ) {\n\n\t\tthis.count = count;\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _matrix = /*@__PURE__*/ new Matrix4();\n\n/**\n * This class is designed to assist with raycasting. Raycasting is used for\n * mouse picking (working out what objects in the 3d space the mouse is over)\n * amongst other things.\n */\nclass Raycaster {\n\n\t/**\n\t * Constructs a new raycaster.\n\t *\n\t * @param {Vector3} origin - The origin vector where the ray casts from.\n\t * @param {Vector3} direction - The (normalized) direction vector that gives direction to the ray.\n\t * @param {number} [near=0] - All results returned are further away than near. Near can't be negative.\n\t * @param {number} [far=Infinity] - All results returned are closer than far. Far can't be lower than near.\n\t */\n\tconstructor( origin, direction, near = 0, far = Infinity ) {\n\n\t\t/**\n\t\t * The ray used for raycasting.\n\t\t *\n\t\t * @type {Ray}\n\t\t */\n\t\tthis.ray = new Ray( origin, direction );\n\n\t\t/**\n\t\t * All results returned are further away than near. Near can't be negative.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.near = near;\n\n\t\t/**\n\t\t * All results returned are further away than near. Near can't be negative.\n\t\t *\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */\n\t\tthis.far = far;\n\n\t\t/**\n\t\t * The camera to use when raycasting against view-dependent objects such as\n\t\t * billboarded objects like sprites. This field can be set manually or\n\t\t * is set when calling `setFromCamera()`.\n\t\t *\n\t\t * @type {?Camera}\n\t\t * @default null\n\t\t */\n\t\tthis.camera = null;\n\n\t\t/**\n\t\t * Allows to selectively ignore 3D objects when performing intersection tests.\n\t\t * The following code example ensures that only 3D objects on layer `1` will be\n\t\t * honored by raycaster.\n\t\t * ```js\n\t\t * raycaster.layers.set( 1 );\n\t\t * object.layers.enable( 1 );\n\t\t * ```\n\t\t *\n\t\t * @type {Layers}\n\t\t */\n\t\tthis.layers = new Layers();\n\n\n\t\t/**\n\t\t * A parameter object that configures the raycasting. It has the structure:\n\t\t *\n\t\t * ```\n\t\t * {\n\t\t * \tMesh: {},\n\t\t * \tLine: { threshold: 1 },\n\t\t * \tLOD: {},\n\t\t * \tPoints: { threshold: 1 },\n\t\t * \tSprite: {}\n\t\t * }\n\t\t * ```\n\t\t * Where `threshold` is the precision of the raycaster when intersecting objects, in world units.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: { threshold: 1 },\n\t\t\tLOD: {},\n\t\t\tPoints: { threshold: 1 },\n\t\t\tSprite: {}\n\t\t};\n\n\t}\n\n\t/**\n\t * Updates the ray with a new origin and direction by copying the values from the arguments.\n\t *\n\t * @param {Vector3} origin - The origin vector where the ray casts from.\n\t * @param {Vector3} direction - The (normalized) direction vector that gives direction to the ray.\n\t */\n\tset( origin, direction ) {\n\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.ray.set( origin, direction );\n\n\t}\n\n\t/**\n\t * Uses the given coordinates and camera to compute a new origin and direction for the internal ray.\n\t *\n\t * @param {Vector2} coords - 2D coordinates of the mouse, in normalized device coordinates (NDC).\n\t * X and Y components should be between `-1` and `1`.\n\t * @param {Camera} camera - The camera from which the ray should originate.\n\t */\n\tsetFromCamera( coords, camera ) {\n\n\t\tif ( camera.isPerspectiveCamera ) {\n\n\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\t\t\tthis.camera = camera;\n\n\t\t} else if ( camera.isOrthographicCamera ) {\n\n\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\tthis.ray.direction.set( 0, 0, -1 ).transformDirection( camera.matrixWorld );\n\t\t\tthis.camera = camera;\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type: ' + camera.type );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Uses the given WebXR controller to compute a new origin and direction for the internal ray.\n\t *\n\t * @param {WebXRController} controller - The controller to copy the position and direction from.\n\t * @return {Raycaster} A reference to this raycaster.\n\t */\n\tsetFromXRController( controller ) {\n\n\t\t_matrix.identity().extractRotation( controller.matrixWorld );\n\n\t\tthis.ray.origin.setFromMatrixPosition( controller.matrixWorld );\n\t\tthis.ray.direction.set( 0, 0, -1 ).applyMatrix4( _matrix );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The intersection point of a raycaster intersection test.\n\t * @typedef {Object} Raycaster~Intersection\n\t * @property {number} distance - The distance from the ray's origin to the intersection point.\n\t * @property {number} distanceToRay -  Some 3D objects e.g. {@link Points} provide the distance of the\n\t * intersection to the nearest point on the ray. For other objects it will be `undefined`.\n\t * @property {Vector3} point - The intersection point, in world coordinates.\n\t * @property {Object} face - The face that has been intersected.\n\t * @property {number} faceIndex - The face index.\n\t * @property {Object3D} object - The 3D object that has been intersected.\n\t * @property {Vector2} uv - U,V coordinates at point of intersection.\n\t * @property {Vector2} uv1 - Second set of U,V coordinates at point of intersection.\n\t * @property {Vector3} uv1 - Interpolated normal vector at point of intersection.\n\t * @property {number} instanceId - The index number of the instance where the ray\n\t * intersects the {@link InstancedMesh}.\n\t */\n\n\t/**\n\t * Checks all intersection between the ray and the object with or without the\n\t * descendants. Intersections are returned sorted by distance, closest first.\n\t *\n\t * `Raycaster` delegates to the `raycast()` method of the passed 3D object, when\n\t * evaluating whether the ray intersects the object or not. This allows meshes to respond\n\t * differently to ray casting than lines or points.\n\t *\n\t * Note that for meshes, faces must be pointed towards the origin of the ray in order\n\t * to be detected; intersections of the ray passing through the back of a face will not\n\t * be detected. To raycast against both faces of an object, you'll want to set  {@link Material#side}\n\t * to `THREE.DoubleSide`.\n\t *\n\t * @param {Object3D} object - The 3D object to check for intersection with the ray.\n\t * @param {boolean} [recursive=true] - If set to `true`, it also checks all descendants.\n\t * Otherwise it only checks intersection with the object.\n\t * @param {Array<Raycaster~Intersection>} [intersects=[]] The target array that holds the result of the method.\n\t * @return {Array<Raycaster~Intersection>} An array holding the intersection points.\n\t */\n\tintersectObject( object, recursive = true, intersects = [] ) {\n\n\t\tintersect( object, this, intersects, recursive );\n\n\t\tintersects.sort( ascSort );\n\n\t\treturn intersects;\n\n\t}\n\n\t/**\n\t * Checks all intersection between the ray and the objects with or without\n\t * the descendants. Intersections are returned sorted by distance, closest first.\n\t *\n\t * @param {Array<Object3D>} objects - The 3D objects to check for intersection with the ray.\n\t * @param {boolean} [recursive=true] - If set to `true`, it also checks all descendants.\n\t * Otherwise it only checks intersection with the object.\n\t * @param {Array<Raycaster~Intersection>} [intersects=[]] The target array that holds the result of the method.\n\t * @return {Array<Raycaster~Intersection>} An array holding the intersection points.\n\t */\n\tintersectObjects( objects, recursive = true, intersects = [] ) {\n\n\t\tfor ( let i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\tintersect( objects[ i ], this, intersects, recursive );\n\n\t\t}\n\n\t\tintersects.sort( ascSort );\n\n\t\treturn intersects;\n\n\t}\n\n}\n\nfunction ascSort( a, b ) {\n\n\treturn a.distance - b.distance;\n\n}\n\nfunction intersect( object, raycaster, intersects, recursive ) {\n\n\tlet propagate = true;\n\n\tif ( object.layers.test( raycaster.layers ) ) {\n\n\t\tconst result = object.raycast( raycaster, intersects );\n\n\t\tif ( result === false ) propagate = false;\n\n\t}\n\n\tif ( propagate === true && recursive === true ) {\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tintersect( children[ i ], raycaster, intersects, true );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * This class can be used to represent points in 3D space as\n * [Spherical coordinates]{@link https://en.wikipedia.org/wiki/Spherical_coordinate_system}.\n */\nclass Spherical {\n\n\t/**\n\t * Constructs a new spherical.\n\t *\n\t * @param {number} [radius=1] - The radius, or the Euclidean distance (straight-line distance) from the point to the origin.\n\t * @param {number} [phi=0] - The polar angle in radians from the y (up) axis.\n\t * @param {number} [theta=0] - The equator/azimuthal angle in radians around the y (up) axis.\n\t */\n\tconstructor( radius = 1, phi = 0, theta = 0 ) {\n\n\t\t/**\n\t\t * The radius, or the Euclidean distance (straight-line distance) from the point to the origin.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.radius = radius;\n\n\t\t/**\n\t\t * The polar angle in radians from the y (up) axis.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.phi = phi;\n\n\t\t/**\n\t\t * The equator/azimuthal angle in radians around the y (up) axis.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.theta = theta;\n\n\t}\n\n\t/**\n\t * Sets the spherical components by copying the given values.\n\t *\n\t * @param {number} radius - The radius.\n\t * @param {number} phi - The polar angle.\n\t * @param {number} theta - The azimuthal angle.\n\t * @return {Spherical} A reference to this spherical.\n\t */\n\tset( radius, phi, theta ) {\n\n\t\tthis.radius = radius;\n\t\tthis.phi = phi;\n\t\tthis.theta = theta;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the values of the given spherical to this instance.\n\t *\n\t * @param {Spherical} other - The spherical to copy.\n\t * @return {Spherical} A reference to this spherical.\n\t */\n\tcopy( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.phi = other.phi;\n\t\tthis.theta = other.theta;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Restricts the polar angle [page:.phi phi] to be between `0.000001` and pi -\n\t * `0.000001`.\n\t *\n\t * @return {Spherical} A reference to this spherical.\n\t */\n\tmakeSafe() {\n\n\t\tconst EPS = 0.000001;\n\t\tthis.phi = clamp( this.phi, EPS, Math.PI - EPS );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the spherical components from the given vector which is assumed to hold\n\t * Cartesian coordinates.\n\t *\n\t * @param {Vector3} v - The vector to set.\n\t * @return {Spherical} A reference to this spherical.\n\t */\n\tsetFromVector3( v ) {\n\n\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t}\n\n\t/**\n\t * Sets the spherical components from the given Cartesian coordinates.\n\t *\n\t * @param {number} x - The x value.\n\t * @param {number} y - The x value.\n\t * @param {number} z - The x value.\n\t * @return {Spherical} A reference to this spherical.\n\t */\n\tsetFromCartesianCoords( x, y, z ) {\n\n\t\tthis.radius = Math.sqrt( x * x + y * y + z * z );\n\n\t\tif ( this.radius === 0 ) {\n\n\t\t\tthis.theta = 0;\n\t\t\tthis.phi = 0;\n\n\t\t} else {\n\n\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\tthis.phi = Math.acos( clamp( y / this.radius, -1, 1 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new spherical with copied values from this instance.\n\t *\n\t * @return {Spherical} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\n/**\n * This class can be used to represent points in 3D space as\n * [Cylindrical coordinates]{@link https://en.wikipedia.org/wiki/Cylindrical_coordinate_system}.\n */\nclass Cylindrical {\n\n\t/**\n\t * Constructs a new cylindrical.\n\t *\n\t * @param {number} [radius=1] - The distance from the origin to a point in the x-z plane.\n\t * @param {number} [theta=0] - A counterclockwise angle in the x-z plane measured in radians from the positive z-axis.\n\t * @param {number} [y=0] - The height above the x-z plane.\n\t */\n\tconstructor( radius = 1, theta = 0, y = 0 ) {\n\n\t\t/**\n\t\t * The distance from the origin to a point in the x-z plane.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.radius = radius;\n\n\t\t/**\n\t\t * A counterclockwise angle in the x-z plane measured in radians from the positive z-axis.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.theta = theta;\n\n\t\t/**\n\t\t * The height above the x-z plane.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.y = y;\n\n\t}\n\n\t/**\n\t * Sets the cylindrical components by copying the given values.\n\t *\n\t * @param {number} radius - The radius.\n\t * @param {number} theta - The theta angle.\n\t * @param {number} y - The height value.\n\t * @return {Cylindrical} A reference to this cylindrical.\n\t */\n\tset( radius, theta, y ) {\n\n\t\tthis.radius = radius;\n\t\tthis.theta = theta;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the values of the given cylindrical to this instance.\n\t *\n\t * @param {Cylindrical} other - The cylindrical to copy.\n\t * @return {Cylindrical} A reference to this cylindrical.\n\t */\n\tcopy( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.theta = other.theta;\n\t\tthis.y = other.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the cylindrical components from the given vector which is assumed to hold\n\t * Cartesian coordinates.\n\t *\n\t * @param {Vector3} v - The vector to set.\n\t * @return {Cylindrical} A reference to this cylindrical.\n\t */\n\tsetFromVector3( v ) {\n\n\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t}\n\n\t/**\n\t * Sets the cylindrical components from the given Cartesian coordinates.\n\t *\n\t * @param {number} x - The x value.\n\t * @param {number} y - The x value.\n\t * @param {number} z - The x value.\n\t * @return {Cylindrical} A reference to this cylindrical.\n\t */\n\tsetFromCartesianCoords( x, y, z ) {\n\n\t\tthis.radius = Math.sqrt( x * x + z * z );\n\t\tthis.theta = Math.atan2( x, z );\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new cylindrical with copied values from this instance.\n\t *\n\t * @return {Cylindrical} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\n/**\n * Represents a 2x2 matrix.\n *\n * A Note on Row-Major and Column-Major Ordering:\n *\n * The constructor and {@link Matrix2#set} method take arguments in\n * [row-major]{@link https://en.wikipedia.org/wiki/Row-_and_column-major_order#Column-major_order}\n * order, while internally they are stored in the {@link Matrix2#elements} array in column-major order.\n * This means that calling:\n * ```js\n * const m = new THREE.Matrix2();\n * m.set( 11, 12,\n *        21, 22 );\n * ```\n * will result in the elements array containing:\n * ```js\n * m.elements = [ 11, 21,\n *                12, 22 ];\n * ```\n * and internally all calculations are performed using column-major ordering.\n * However, as the actual ordering makes no difference mathematically and\n * most people are used to thinking about matrices in row-major order, the\n * three.js documentation shows matrices in row-major order. Just bear in\n * mind that if you are reading the source code, you'll have to take the\n * transpose of any matrices outlined here to make sense of the calculations.\n */\nclass Matrix2 {\n\n\t/**\n\t * Constructs a new 2x2 matrix. The arguments are supposed to be\n\t * in row-major order. If no arguments are provided, the constructor\n\t * initializes the matrix as an identity matrix.\n\t *\n\t * @param {number} [n11] - 1-1 matrix element.\n\t * @param {number} [n12] - 1-2 matrix element.\n\t * @param {number} [n21] - 2-1 matrix element.\n\t * @param {number} [n22] - 2-2 matrix element.\n\t */\n\tconstructor( n11, n12, n21, n22 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tMatrix2.prototype.isMatrix2 = true;\n\n\t\t/**\n\t\t * A column-major list of matrix values.\n\t\t *\n\t\t * @type {Array<number>}\n\t\t */\n\t\tthis.elements = [\n\t\t\t1, 0,\n\t\t\t0, 1,\n\t\t];\n\n\t\tif ( n11 !== undefined ) {\n\n\t\t\tthis.set( n11, n12, n21, n22 );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets this matrix to the 2x2 identity matrix.\n\t *\n\t * @return {Matrix2} A reference to this matrix.\n\t */\n\tidentity() {\n\n\t\tthis.set(\n\t\t\t1, 0,\n\t\t\t0, 1,\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the elements of the matrix from the given array.\n\t *\n\t * @param {Array<number>} array - The matrix elements in column-major order.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Matrix2} A reference to this matrix.\n\t */\n\tfromArray( array, offset = 0 ) {\n\n\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the elements of the matrix.The arguments are supposed to be\n\t * in row-major order.\n\t *\n\t * @param {number} n11 - 1-1 matrix element.\n\t * @param {number} n12 - 1-2 matrix element.\n\t * @param {number} n21 - 2-1 matrix element.\n\t * @param {number} n22 - 2-2 matrix element.\n\t * @return {Matrix2} A reference to this matrix.\n\t */\n\tset( n11, n12, n21, n22 ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 2 ] = n12;\n\t\tte[ 1 ] = n21; te[ 3 ] = n22;\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _vector$4 = /*@__PURE__*/ new Vector2();\n\n/**\n * Represents an axis-aligned bounding box (AABB) in 2D space.\n */\nclass Box2 {\n\n\t/**\n\t * Constructs a new bounding box.\n\t *\n\t * @param {Vector2} [min=(Infinity,Infinity)] - A vector representing the lower boundary of the box.\n\t * @param {Vector2} [max=(-Infinity,-Infinity)] - A vector representing the upper boundary of the box.\n\t */\n\tconstructor( min = new Vector2( + Infinity, + Infinity ), max = new Vector2( - Infinity, - Infinity ) ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isBox2 = true;\n\n\t\t/**\n\t\t * The lower boundary of the box.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.min = min;\n\n\t\t/**\n\t\t * The upper boundary of the box.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.max = max;\n\n\t}\n\n\t/**\n\t * Sets the lower and upper boundaries of this box.\n\t * Please note that this method only copies the values from the given objects.\n\t *\n\t * @param {Vector2} min - The lower boundary of the box.\n\t * @param {Vector2} max - The upper boundary of the box.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\tset( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the upper and lower bounds of this box so it encloses the position data\n\t * in the given array.\n\t *\n\t * @param {Array<Vector2>} points - An array holding 2D position data as instances of {@link Vector2}.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\tsetFromPoints( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Centers this box on the given center vector and sets this box's width, height and\n\t * depth to the given size values.\n\t *\n\t * @param {Vector2} center - The center of the box.\n\t * @param {Vector2} size - The x and y dimensions of the box.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\tsetFromCenterAndSize( center, size ) {\n\n\t\tconst halfSize = _vector$4.copy( size ).multiplyScalar( 0.5 );\n\t\tthis.min.copy( center ).sub( halfSize );\n\t\tthis.max.copy( center ).add( halfSize );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new box with copied values from this instance.\n\t *\n\t * @return {Box2} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\t/**\n\t * Copies the values of the given box to this instance.\n\t *\n\t * @param {Box2} box - The box to copy.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\tcopy( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Makes this box empty which means in encloses a zero space in 2D.\n\t *\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\tmakeEmpty() {\n\n\t\tthis.min.x = this.min.y = + Infinity;\n\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns true if this box includes zero points within its bounds.\n\t * Note that a box with equal lower and upper bounds still includes one\n\t * point, the one both bounds share.\n\t *\n\t * @return {boolean} Whether this box is empty or not.\n\t */\n\tisEmpty() {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t}\n\n\t/**\n\t * Returns the center point of this box.\n\t *\n\t * @param {Vector2} target - The target vector that is used to store the method's result.\n\t * @return {Vector2} The center point.\n\t */\n\tgetCenter( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t}\n\n\t/**\n\t * Returns the dimensions of this box.\n\t *\n\t * @param {Vector2} target - The target vector that is used to store the method's result.\n\t * @return {Vector2} The size.\n\t */\n\tgetSize( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t}\n\n\t/**\n\t * Expands the boundaries of this box to include the given point.\n\t *\n\t * @param {Vector2} point - The point that should be included by the bounding box.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\texpandByPoint( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Expands this box equilaterally by the given vector. The width of this\n\t * box will be expanded by the x component of the vector in both\n\t * directions. The height of this box will be expanded by the y component of\n\t * the vector in both directions.\n\t *\n\t * @param {Vector2} vector - The vector that should expand the bounding box.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\texpandByVector( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Expands each dimension of the box by the given scalar. If negative, the\n\t * dimensions of the box will be contracted.\n\t *\n\t * @param {number} scalar - The scalar value that should expand the bounding box.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\texpandByScalar( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if the given point lies within or on the boundaries of this box.\n\t *\n\t * @param {Vector2} point - The point to test.\n\t * @return {boolean} Whether the bounding box contains the given point or not.\n\t */\n\tcontainsPoint( point ) {\n\n\t\treturn point.x >= this.min.x && point.x <= this.max.x &&\n\t\t\tpoint.y >= this.min.y && point.y <= this.max.y;\n\n\t}\n\n\t/**\n\t * Returns `true` if this bounding box includes the entirety of the given bounding box.\n\t * If this box and the given one are identical, this function also returns `true`.\n\t *\n\t * @param {Box2} box - The bounding box to test.\n\t * @return {boolean} Whether the bounding box contains the given bounding box or not.\n\t */\n\tcontainsBox( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\n\n\t}\n\n\t/**\n\t * Returns a point as a proportion of this box's width and height.\n\t *\n\t * @param {Vector2} point - A point in 2D space.\n\t * @param {Vector2} target - The target vector that is used to store the method's result.\n\t * @return {Vector2} A point as a proportion of this box's width and height.\n\t */\n\tgetParameter( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t);\n\n\t}\n\n\t/**\n\t * Returns `true` if the given bounding box intersects with this bounding box.\n\t *\n\t * @param {Box2} box - The bounding box to test.\n\t * @return {boolean} Whether the given bounding box intersects with this bounding box.\n\t */\n\tintersectsBox( box ) {\n\n\t\t// using 4 splitting planes to rule out intersections\n\n\t\treturn box.max.x >= this.min.x && box.min.x <= this.max.x &&\n\t\t\tbox.max.y >= this.min.y && box.min.y <= this.max.y;\n\n\t}\n\n\t/**\n\t * Clamps the given point within the bounds of this box.\n\t *\n\t * @param {Vector2} point - The point to clamp.\n\t * @param {Vector2} target - The target vector that is used to store the method's result.\n\t * @return {Vector2} The clamped point.\n\t */\n\tclampPoint( point, target ) {\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t}\n\n\t/**\n\t * Returns the euclidean distance from any edge of this box to the specified point. If\n\t * the given point lies inside of this box, the distance will be `0`.\n\t *\n\t * @param {Vector2} point - The point to compute the distance to.\n\t * @return {number} The euclidean distance.\n\t */\n\tdistanceToPoint( point ) {\n\n\t\treturn this.clampPoint( point, _vector$4 ).distanceTo( point );\n\n\t}\n\n\t/**\n\t * Computes the intersection of this bounding box and the given one, setting the upper\n\t * bound of this box to the lesser of the two boxes' upper bounds and the\n\t * lower bound of this box to the greater of the two boxes' lower bounds. If\n\t * there's no overlap, makes this box empty.\n\t *\n\t * @param {Box2} box - The bounding box to intersect with.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\tintersect( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\tif ( this.isEmpty() ) this.makeEmpty();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes the union of this box and another and the given one, setting the upper\n\t * bound of this box to the greater of the two boxes' upper bounds and the\n\t * lower bound of this box to the lesser of the two boxes' lower bounds.\n\t *\n\t * @param {Box2} box - The bounding box that will be unioned with this instance.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\tunion( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given offset to both the upper and lower bounds of this bounding box,\n\t * effectively moving it in 2D space.\n\t *\n\t * @param {Vector2} offset - The offset that should be used to translate the bounding box.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\ttranslate( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this bounding box is equal with the given one.\n\t *\n\t * @param {Box2} box - The box to test for equality.\n\t * @return {boolean} Whether this bounding box is equal with the given one.\n\t */\n\tequals( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n}\n\nconst _startP = /*@__PURE__*/ new Vector3();\nconst _startEnd = /*@__PURE__*/ new Vector3();\n\n/**\n * An analytical line segment in 3D space represented by a start and end point.\n */\nclass Line3 {\n\n\t/**\n\t * Constructs a new line segment.\n\t *\n\t * @param {Vector3} [start=(0,0,0)] - Start of the line segment.\n\t * @param {Vector3} [end=(0,0,0)] - End of the line segment.\n\t */\n\tconstructor( start = new Vector3(), end = new Vector3() ) {\n\n\t\t/**\n\t\t * Start of the line segment.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.start = start;\n\n\t\t/**\n\t\t * End of the line segment.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.end = end;\n\n\t}\n\n\t/**\n\t * Sets the start and end values by copying the given vectors.\n\t *\n\t * @param {Vector3} start - The start point.\n\t * @param {Vector3} end - The end point.\n\t * @return {Line3} A reference to this line segment.\n\t */\n\tset( start, end ) {\n\n\t\tthis.start.copy( start );\n\t\tthis.end.copy( end );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the values of the given line segment to this instance.\n\t *\n\t * @param {Line3} line - The line segment to copy.\n\t * @return {Line3} A reference to this line segment.\n\t */\n\tcopy( line ) {\n\n\t\tthis.start.copy( line.start );\n\t\tthis.end.copy( line.end );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the center of the line segment.\n\t *\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The center point.\n\t */\n\tgetCenter( target ) {\n\n\t\treturn target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t}\n\n\t/**\n\t * Returns the delta vector of the line segment's start and end point.\n\t *\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The delta vector.\n\t */\n\tdelta( target ) {\n\n\t\treturn target.subVectors( this.end, this.start );\n\n\t}\n\n\t/**\n\t * Returns the squared Euclidean distance between the line' start and end point.\n\t *\n\t * @return {number} The squared Euclidean distance.\n\t */\n\tdistanceSq() {\n\n\t\treturn this.start.distanceToSquared( this.end );\n\n\t}\n\n\t/**\n\t * Returns the Euclidean distance between the line' start and end point.\n\t *\n\t * @return {number} The Euclidean distance.\n\t */\n\tdistance() {\n\n\t\treturn this.start.distanceTo( this.end );\n\n\t}\n\n\t/**\n\t * Returns a vector at a certain position along the line segment.\n\t *\n\t * @param {number} t - A value between `[0,1]` to represent a position along the line segment.\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The delta vector.\n\t */\n\tat( t, target ) {\n\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t}\n\n\t/**\n\t * Returns a point parameter based on the closest point as projected on the line segment.\n\t *\n\t * @param {Vector3} point - The point for which to return a point parameter.\n\t * @param {boolean} clampToLine - Whether to clamp the result to the range `[0,1]` or not.\n\t * @return {number} The point parameter.\n\t */\n\tclosestPointToPointParameter( point, clampToLine ) {\n\n\t\t_startP.subVectors( point, this.start );\n\t\t_startEnd.subVectors( this.end, this.start );\n\n\t\tconst startEnd2 = _startEnd.dot( _startEnd );\n\t\tconst startEnd_startP = _startEnd.dot( _startP );\n\n\t\tlet t = startEnd_startP / startEnd2;\n\n\t\tif ( clampToLine ) {\n\n\t\t\tt = clamp( t, 0, 1 );\n\n\t\t}\n\n\t\treturn t;\n\n\t}\n\n\t/**\n\t * Returns the closets point on the line for a given point.\n\t *\n\t * @param {Vector3} point - The point to compute the closest point on the line for.\n\t * @param {boolean} clampToLine - Whether to clamp the result to the range `[0,1]` or not.\n\t * @param {Vector3} target -  The target vector that is used to store the method's result.\n\t * @return {Vector3} The closest point on the line.\n\t */\n\tclosestPointToPoint( point, clampToLine, target ) {\n\n\t\tconst t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t}\n\n\t/**\n\t * Applies a 4x4 transformation matrix to this line segment.\n\t *\n\t * @param {Matrix4} matrix - The transformation matrix.\n\t * @return {Line3} A reference to this line segment.\n\t */\n\tapplyMatrix4( matrix ) {\n\n\t\tthis.start.applyMatrix4( matrix );\n\t\tthis.end.applyMatrix4( matrix );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this line segment is equal with the given one.\n\t *\n\t * @param {Line3} line - The line segment to test for equality.\n\t * @return {boolean} Whether this line segment is equal with the given one.\n\t */\n\tequals( line ) {\n\n\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t}\n\n\t/**\n\t * Returns a new line segment with copied values from this instance.\n\t *\n\t * @return {Line3} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _vector$3 = /*@__PURE__*/ new Vector3();\n\n/**\n * This displays a cone shaped helper object for a {@link SpotLight}.\n *\n * ```js\n * const spotLight = new THREE.SpotLight( 0xffffff );\n * spotLight.position.set( 10, 10, 10 );\n * scene.add( spotLight );\n *\n * const spotLightHelper = new THREE.SpotLightHelper( spotLight );\n * scene.add( spotLightHelper );\n * ```\n *\n * @augments Object3D\n */\nclass SpotLightHelper extends Object3D {\n\n\t/**\n\t * Constructs a new spot light helper.\n\t *\n\t * @param {HemisphereLight} light - The light to be visualized.\n\t * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take\n\t * the color of the light.\n\t */\n\tconstructor( light, color ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The light being visualized.\n\t\t *\n\t\t * @type {SpotLight}\n\t\t */\n\t\tthis.light = light;\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\t/**\n\t\t * The color parameter passed in the constructor.\n\t\t * If not set, the helper will take the color of the light.\n\t\t *\n\t\t * @type {number|Color|string}\n\t\t */\n\t\tthis.color = color;\n\n\t\tthis.type = 'SpotLightHelper';\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst positions = [\n\t\t\t0, 0, 0, \t0, 0, 1,\n\t\t\t0, 0, 0, \t1, 0, 1,\n\t\t\t0, 0, 0,\t-1, 0, 1,\n\t\t\t0, 0, 0, \t0, 1, 1,\n\t\t\t0, 0, 0, \t0, -1, 1\n\t\t];\n\n\t\tfor ( let i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\t\tconst p1 = ( i / l ) * Math.PI * 2;\n\t\t\tconst p2 = ( j / l ) * Math.PI * 2;\n\n\t\t\tpositions.push(\n\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t\t);\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n\n\t\tthis.cone = new LineSegments( geometry, material );\n\t\tthis.add( this.cone );\n\n\t\tthis.update();\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t}\n\n\t/**\n\t * Updates the helper to match the position and direction of the\n\t * light being visualized.\n\t */\n\tupdate() {\n\n\t\tthis.light.updateWorldMatrix( true, false );\n\t\tthis.light.target.updateWorldMatrix( true, false );\n\n\t\t// update the local matrix based on the parent and light target transforms\n\t\tif ( this.parent ) {\n\n\t\t\tthis.parent.updateWorldMatrix( true );\n\n\t\t\tthis.matrix\n\t\t\t\t.copy( this.parent.matrixWorld )\n\t\t\t\t.invert()\n\t\t\t\t.multiply( this.light.matrixWorld );\n\n\t\t} else {\n\n\t\t\tthis.matrix.copy( this.light.matrixWorld );\n\n\t\t}\n\n\t\tthis.matrixWorld.copy( this.light.matrixWorld );\n\n\t\tconst coneLength = this.light.distance ? this.light.distance : 1000;\n\t\tconst coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\t_vector$3.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\tthis.cone.lookAt( _vector$3 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.cone.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.cone.material.color.copy( this.light.color );\n\n\t\t}\n\n\t}\n\n}\n\nconst _vector$2 = /*@__PURE__*/ new Vector3();\nconst _boneMatrix = /*@__PURE__*/ new Matrix4();\nconst _matrixWorldInv = /*@__PURE__*/ new Matrix4();\n\n/**\n * A helper object to assist with visualizing a {@link Skeleton}.\n *\n * ```js\n * const helper = new THREE.SkeletonHelper( skinnedMesh );\n * scene.add( helper );\n * ```\n *\n * @augments LineSegments\n */\nclass SkeletonHelper extends LineSegments {\n\n\t/**\n\t * Constructs a new hemisphere light helper.\n\t *\n\t * @param {Object3D} object -  Usually an instance of {@link SkinnedMesh}. However, any 3D object\n\t * can be used if it represents a hierarchy of bones (see {@link Bone}).\n\t */\n\tconstructor( object ) {\n\n\t\tconst bones = getBoneList( object );\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\tconst color1 = new Color( 0, 0, 1 );\n\t\tconst color2 = new Color( 0, 1, 0 );\n\n\t\tfor ( let i = 0; i < bones.length; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tcolors.push( color1.r, color1.g, color1.b );\n\t\t\t\tcolors.push( color2.r, color2.g, color2.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, depthTest: false, depthWrite: false, toneMapped: false, transparent: true } );\n\n\t\tsuper( geometry, material );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSkeletonHelper = true;\n\n\t\tthis.type = 'SkeletonHelper';\n\n\t\t/**\n\t\t * The object being visualized.\n\t\t *\n\t\t * @type {Object3D}\n\t\t */\n\t\tthis.root = object;\n\n\t\t/**\n\t\t * he list of bones that the helper visualizes.\n\t\t *\n\t\t * @type {Array<Bone>}\n\t\t */\n\t\tthis.bones = bones;\n\n\t\tthis.matrix = object.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tconst bones = this.bones;\n\n\t\tconst geometry = this.geometry;\n\t\tconst position = geometry.getAttribute( 'position' );\n\n\t\t_matrixWorldInv.copy( this.root.matrixWorld ).invert();\n\n\t\tfor ( let i = 0, j = 0; i < bones.length; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );\n\t\t\t\t_vector$2.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j, _vector$2.x, _vector$2.y, _vector$2.z );\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );\n\t\t\t\t_vector$2.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j + 1, _vector$2.x, _vector$2.y, _vector$2.z );\n\n\t\t\t\tj += 2;\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\n\nfunction getBoneList( object ) {\n\n\tconst boneList = [];\n\n\tif ( object.isBone === true ) {\n\n\t\tboneList.push( object );\n\n\t}\n\n\tfor ( let i = 0; i < object.children.length; i ++ ) {\n\n\t\tboneList.push( ...getBoneList( object.children[ i ] ) );\n\n\t}\n\n\treturn boneList;\n\n}\n\n/**\n * This displays a helper object consisting of a spherical mesh for\n * visualizing an instance of {@link PointLight}.\n *\n * ```js\n * const pointLight = new THREE.PointLight( 0xff0000, 1, 100 );\n * pointLight.position.set( 10, 10, 10 );\n * scene.add( pointLight );\n *\n * const sphereSize = 1;\n * const pointLightHelper = new THREE.PointLightHelper( pointLight, sphereSize );\n * scene.add( pointLightHelper );\n * ```\n *\n * @augments Mesh\n */\nclass PointLightHelper extends Mesh {\n\n\t/**\n\t * Constructs a new point light helper.\n\t *\n\t * @param {PointLight} light - The light to be visualized.\n\t * @param {number} [sphereSize=1] - The size of the sphere helper.\n\t * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take\n\t * the color of the light.\n\t */\n\tconstructor( light, sphereSize, color ) {\n\n\t\tconst geometry = new SphereGeometry( sphereSize, 4, 2 );\n\t\tconst material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\t/**\n\t\t * The light being visualized.\n\t\t *\n\t\t * @type {HemisphereLight}\n\t\t */\n\t\tthis.light = light;\n\n\t\t/**\n\t\t * The color parameter passed in the constructor.\n\t\t * If not set, the helper will take the color of the light.\n\t\t *\n\t\t * @type {number|Color|string}\n\t\t */\n\t\tthis.color = color;\n\n\t\tthis.type = 'PointLightHelper';\n\n\t\tthis.matrix = this.light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\n\t\t/*\n\t// TODO: delete this comment?\n\tconst distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n\tconst distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\tconst d = light.distance;\n\n\tif ( d === 0.0 ) {\n\n\t\tthis.lightDistance.visible = false;\n\n\t} else {\n\n\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t}\n\n\tthis.add( this.lightDistance );\n\t*/\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n\t/**\n\t * Updates the helper to match the position of the\n\t * light being visualized.\n\t */\n\tupdate() {\n\n\t\tthis.light.updateWorldMatrix( true, false );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\t/*\n\t\tconst d = this.light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.visible = true;\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\t\t*/\n\n\t}\n\n}\n\nconst _vector$1 = /*@__PURE__*/ new Vector3();\nconst _color1 = /*@__PURE__*/ new Color();\nconst _color2 = /*@__PURE__*/ new Color();\n\n/**\n * Creates a visual aid consisting of a spherical mesh for a\n * given {@link HemisphereLight}.\n *\n * ```js\n * const light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 );\n * const helper = new THREE.HemisphereLightHelper( light, 5 );\n * scene.add( helper );\n * ```\n *\n * @augments Object3D\n */\nclass HemisphereLightHelper extends Object3D {\n\n\t/**\n\t * Constructs a new hemisphere light helper.\n\t *\n\t * @param {HemisphereLight} light - The light to be visualized.\n\t * @param {number} [size=1] - The size of the mesh used to visualize the light.\n\t * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take\n\t * the color of the light.\n\t */\n\tconstructor( light, size, color ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The light being visualized.\n\t\t *\n\t\t * @type {HemisphereLight}\n\t\t */\n\t\tthis.light = light;\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\t/**\n\t\t * The color parameter passed in the constructor.\n\t\t * If not set, the helper will take the color of the light.\n\t\t *\n\t\t * @type {number|Color|string}\n\t\t */\n\t\tthis.color = color;\n\n\t\tthis.type = 'HemisphereLightHelper';\n\n\t\tconst geometry = new OctahedronGeometry( size );\n\t\tgeometry.rotateY( Math.PI * 0.5 );\n\n\t\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\t\tif ( this.color === undefined ) this.material.vertexColors = true;\n\n\t\tconst position = geometry.getAttribute( 'position' );\n\t\tconst colors = new Float32Array( position.count * 3 );\n\n\t\tgeometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n\t\tthis.add( new Mesh( geometry, this.material ) );\n\n\t\tthis.update();\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t}\n\n\t/**\n\t * Updates the helper to match the position and direction of the\n\t * light being visualized.\n\t */\n\tupdate() {\n\n\t\tconst mesh = this.children[ 0 ];\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tconst colors = mesh.geometry.getAttribute( 'color' );\n\n\t\t\t_color1.copy( this.light.color );\n\t\t\t_color2.copy( this.light.groundColor );\n\n\t\t\tfor ( let i = 0, l = colors.count; i < l; i ++ ) {\n\n\t\t\t\tconst color = ( i < ( l / 2 ) ) ? _color1 : _color2;\n\n\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t\tcolors.needsUpdate = true;\n\n\t\t}\n\n\t\tthis.light.updateWorldMatrix( true, false );\n\n\t\tmesh.lookAt( _vector$1.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\n\t}\n\n}\n\n/**\n * The helper is an object to define grids. Grids are two-dimensional\n * arrays of lines.\n *\n * ```js\n * const size = 10;\n * const divisions = 10;\n *\n * const gridHelper = new THREE.GridHelper( size, divisions );\n * scene.add( gridHelper );\n * ```\n *\n * @augments LineSegments\n */\nclass GridHelper extends LineSegments {\n\n\t/**\n\t * Constructs a new grid helper.\n\t *\n\t * @param {number} [size=10] - The size of the grid.\n\t * @param {number} [divisions=10] - The number of divisions across the grid.\n\t * @param {number|Color|string} [color1=0x444444] - The color of the center line.\n\t * @param {number|Color|string} [color2=0x888888] - The color of the lines of the grid.\n\t */\n\tconstructor( size = 10, divisions = 10, color1 = 0x444444, color2 = 0x888888 ) {\n\n\t\tcolor1 = new Color( color1 );\n\t\tcolor2 = new Color( color2 );\n\n\t\tconst center = divisions / 2;\n\t\tconst step = size / divisions;\n\t\tconst halfSize = size / 2;\n\n\t\tconst vertices = [], colors = [];\n\n\t\tfor ( let i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\n\n\t\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\n\t\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\n\n\t\t\tconst color = i === center ? color1 : color2;\n\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\n\t\t}\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'GridHelper';\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\n/**\n * This helper is an object to define polar grids. Grids are\n * two-dimensional arrays of lines.\n *\n * ```js\n * const radius = 10;\n * const sectors = 16;\n * const rings = 8;\n * const divisions = 64;\n *\n * const helper = new THREE.PolarGridHelper( radius, sectors, rings, divisions );\n * scene.add( helper );\n * ```\n *\n * @augments LineSegments\n */\nclass PolarGridHelper extends LineSegments {\n\n\t/**\n\t * Constructs a new polar grid helper.\n\t *\n\t * @param {number} [radius=10] - The radius of the polar grid. This can be any positive number.\n\t * @param {number} [sectors=16] - The number of sectors the grid will be divided into. This can be any positive integer.\n\t * @param {number} [rings=16] - The number of rings. This can be any positive integer.\n\t * @param {number} [divisions=64] - The number of line segments used for each circle. This can be any positive integer.\n\t * @param {number|Color|string} [color1=0x444444] - The first color used for grid elements.\n\t * @param {number|Color|string} [color2=0x888888] -  The second color used for grid elements.\n\t */\n\tconstructor( radius = 10, sectors = 16, rings = 8, divisions = 64, color1 = 0x444444, color2 = 0x888888 ) {\n\n\t\tcolor1 = new Color( color1 );\n\t\tcolor2 = new Color( color2 );\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\t// create the sectors\n\n\t\tif ( sectors > 1 ) {\n\n\t\t\tfor ( let i = 0; i < sectors; i ++ ) {\n\n\t\t\t\tconst v = ( i / sectors ) * ( Math.PI * 2 );\n\n\t\t\t\tconst x = Math.sin( v ) * radius;\n\t\t\t\tconst z = Math.cos( v ) * radius;\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tvertices.push( x, 0, z );\n\n\t\t\t\tconst color = ( i & 1 ) ? color1 : color2;\n\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// create the rings\n\n\t\tfor ( let i = 0; i < rings; i ++ ) {\n\n\t\t\tconst color = ( i & 1 ) ? color1 : color2;\n\n\t\t\tconst r = radius - ( radius / rings * i );\n\n\t\t\tfor ( let j = 0; j < divisions; j ++ ) {\n\n\t\t\t\t// first vertex\n\n\t\t\t\tlet v = ( j / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tlet x = Math.sin( v ) * r;\n\t\t\t\tlet z = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t\t// second vertex\n\n\t\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'PolarGridHelper';\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\nconst _v1 = /*@__PURE__*/ new Vector3();\nconst _v2 = /*@__PURE__*/ new Vector3();\nconst _v3 = /*@__PURE__*/ new Vector3();\n\n/**\n * Helper object to assist with visualizing a {@link DirectionalLight}'s\n * effect on the scene. This consists of plane and a line representing the\n * light's position and direction.\n *\n * ```js\n * const light = new THREE.DirectionalLight( 0xFFFFFF );\n * scene.add( light );\n *\n * const helper = new THREE.DirectionalLightHelper( light, 5 );\n * scene.add( helper );\n * ```\n *\n * @augments Object3D\n */\nclass DirectionalLightHelper extends Object3D {\n\n\t/**\n\t * Constructs a new directional light helper.\n\t *\n\t * @param {DirectionalLight} light - The light to be visualized.\n\t * @param {number} [size=1] - The dimensions of the plane.\n\t * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take\n\t * the color of the light.\n\t */\n\tconstructor( light, size, color ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The light being visualized.\n\t\t *\n\t\t * @type {DirectionalLight}\n\t\t */\n\t\tthis.light = light;\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\t/**\n\t\t * The color parameter passed in the constructor.\n\t\t * If not set, the helper will take the color of the light.\n\t\t *\n\t\t * @type {number|Color|string}\n\t\t */\n\t\tthis.color = color;\n\n\t\tthis.type = 'DirectionalLightHelper';\n\n\t\tif ( size === undefined ) size = 1;\n\n\t\tlet geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [\n\t\t\t- size, size, 0,\n\t\t\tsize, size, 0,\n\t\t\tsize, - size, 0,\n\t\t\t- size, - size, 0,\n\t\t\t- size, size, 0\n\t\t], 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n\n\t\t/**\n\t\t * Contains the line showing the location of the directional light.\n\t\t *\n\t\t * @type {Line}\n\t\t */\n\t\tthis.lightPlane = new Line( geometry, material );\n\t\tthis.add( this.lightPlane );\n\n\t\tgeometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\t\t/**\n\t\t * Represents the target line of the directional light.\n\t\t *\n\t\t * @type {Line}\n\t\t */\n\t\tthis.targetLine = new Line( geometry, material );\n\t\tthis.add( this.targetLine );\n\n\t\tthis.update();\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.lightPlane.geometry.dispose();\n\t\tthis.lightPlane.material.dispose();\n\t\tthis.targetLine.geometry.dispose();\n\t\tthis.targetLine.material.dispose();\n\n\t}\n\n\t/**\n\t * Updates the helper to match the position and direction of the\n\t * light being visualized.\n\t */\n\tupdate() {\n\n\t\tthis.light.updateWorldMatrix( true, false );\n\t\tthis.light.target.updateWorldMatrix( true, false );\n\n\t\t_v1.setFromMatrixPosition( this.light.matrixWorld );\n\t\t_v2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\t_v3.subVectors( _v2, _v1 );\n\n\t\tthis.lightPlane.lookAt( _v2 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.lightPlane.material.color.set( this.color );\n\t\t\tthis.targetLine.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.lightPlane.material.color.copy( this.light.color );\n\t\t\tthis.targetLine.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\tthis.targetLine.lookAt( _v2 );\n\t\tthis.targetLine.scale.z = _v3.length();\n\n\t}\n\n}\n\nconst _vector = /*@__PURE__*/ new Vector3();\nconst _camera = /*@__PURE__*/ new Camera();\n\n/**\n * This helps with visualizing what a camera contains in its frustum. It\n * visualizes the frustum of a camera using a line segments.\n *\n * Based on frustum visualization in [lightgl.js shadowmap example]{@link https://github.com/evanw/lightgl.js/blob/master/tests/shadowmap.html}.\n *\n * `CameraHelper` must be a child of the scene.\n *\n * ```js\n * const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\n * const helper = new THREE.CameraHelper( camera );\n * scene.add( helper );\n * ```\n *\n * @augments LineSegments\n */\nclass CameraHelper extends LineSegments {\n\n\t/**\n\t * Constructs a new arrow helper.\n\t *\n\t * @param {Camera} camera - The camera to visualize.\n\t */\n\tconstructor( camera ) {\n\n\t\tconst geometry = new BufferGeometry();\n\t\tconst material = new LineBasicMaterial( { color: 0xffffff, vertexColors: true, toneMapped: false } );\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\tconst pointMap = {};\n\n\t\t// near\n\n\t\taddLine( 'n1', 'n2' );\n\t\taddLine( 'n2', 'n4' );\n\t\taddLine( 'n4', 'n3' );\n\t\taddLine( 'n3', 'n1' );\n\n\t\t// far\n\n\t\taddLine( 'f1', 'f2' );\n\t\taddLine( 'f2', 'f4' );\n\t\taddLine( 'f4', 'f3' );\n\t\taddLine( 'f3', 'f1' );\n\n\t\t// sides\n\n\t\taddLine( 'n1', 'f1' );\n\t\taddLine( 'n2', 'f2' );\n\t\taddLine( 'n3', 'f3' );\n\t\taddLine( 'n4', 'f4' );\n\n\t\t// cone\n\n\t\taddLine( 'p', 'n1' );\n\t\taddLine( 'p', 'n2' );\n\t\taddLine( 'p', 'n3' );\n\t\taddLine( 'p', 'n4' );\n\n\t\t// up\n\n\t\taddLine( 'u1', 'u2' );\n\t\taddLine( 'u2', 'u3' );\n\t\taddLine( 'u3', 'u1' );\n\n\t\t// target\n\n\t\taddLine( 'c', 't' );\n\t\taddLine( 'p', 'c' );\n\n\t\t// cross\n\n\t\taddLine( 'cn1', 'cn2' );\n\t\taddLine( 'cn3', 'cn4' );\n\n\t\taddLine( 'cf1', 'cf2' );\n\t\taddLine( 'cf3', 'cf4' );\n\n\t\tfunction addLine( a, b ) {\n\n\t\t\taddPoint( a );\n\t\t\taddPoint( b );\n\n\t\t}\n\n\t\tfunction addPoint( id ) {\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tcolors.push( 0, 0, 0 );\n\n\t\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\t\tpointMap[ id ] = [];\n\n\t\t\t}\n\n\t\t\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'CameraHelper';\n\n\t\t/**\n\t\t * The camera being visualized.\n\t\t *\n\t\t * @type {Camera}\n\t\t */\n\t\tthis.camera = camera;\n\t\tif ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\n\t\tthis.matrix = camera.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\t/**\n\t\t * This contains the points used to visualize the camera.\n\t\t *\n\t\t * @type {Object<string,Array<number>>}\n\t\t */\n\t\tthis.pointMap = pointMap;\n\n\t\tthis.update();\n\n\t\t// colors\n\n\t\tconst colorFrustum = new Color( 0xffaa00 );\n\t\tconst colorCone = new Color( 0xff0000 );\n\t\tconst colorUp = new Color( 0x00aaff );\n\t\tconst colorTarget = new Color( 0xffffff );\n\t\tconst colorCross = new Color( 0x333333 );\n\n\t\tthis.setColors( colorFrustum, colorCone, colorUp, colorTarget, colorCross );\n\n\t}\n\n\t/**\n\t * Defines the colors of the helper.\n\t *\n\t * @param {Color} frustum - The frustum line color.\n\t * @param {Color} cone - The cone line color.\n\t * @param {Color} up - The up line color.\n\t * @param {Color} target - The target line color.\n\t * @param {Color} cross - The cross line color.\n\t */\n\tsetColors( frustum, cone, up, target, cross ) {\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst colorAttribute = geometry.getAttribute( 'color' );\n\n\t\t// near\n\n\t\tcolorAttribute.setXYZ( 0, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 1, frustum.r, frustum.g, frustum.b ); // n1, n2\n\t\tcolorAttribute.setXYZ( 2, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 3, frustum.r, frustum.g, frustum.b ); // n2, n4\n\t\tcolorAttribute.setXYZ( 4, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 5, frustum.r, frustum.g, frustum.b ); // n4, n3\n\t\tcolorAttribute.setXYZ( 6, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 7, frustum.r, frustum.g, frustum.b ); // n3, n1\n\n\t\t// far\n\n\t\tcolorAttribute.setXYZ( 8, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 9, frustum.r, frustum.g, frustum.b ); // f1, f2\n\t\tcolorAttribute.setXYZ( 10, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 11, frustum.r, frustum.g, frustum.b ); // f2, f4\n\t\tcolorAttribute.setXYZ( 12, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 13, frustum.r, frustum.g, frustum.b ); // f4, f3\n\t\tcolorAttribute.setXYZ( 14, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 15, frustum.r, frustum.g, frustum.b ); // f3, f1\n\n\t\t// sides\n\n\t\tcolorAttribute.setXYZ( 16, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 17, frustum.r, frustum.g, frustum.b ); // n1, f1\n\t\tcolorAttribute.setXYZ( 18, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 19, frustum.r, frustum.g, frustum.b ); // n2, f2\n\t\tcolorAttribute.setXYZ( 20, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 21, frustum.r, frustum.g, frustum.b ); // n3, f3\n\t\tcolorAttribute.setXYZ( 22, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 23, frustum.r, frustum.g, frustum.b ); // n4, f4\n\n\t\t// cone\n\n\t\tcolorAttribute.setXYZ( 24, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 25, cone.r, cone.g, cone.b ); // p, n1\n\t\tcolorAttribute.setXYZ( 26, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 27, cone.r, cone.g, cone.b ); // p, n2\n\t\tcolorAttribute.setXYZ( 28, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 29, cone.r, cone.g, cone.b ); // p, n3\n\t\tcolorAttribute.setXYZ( 30, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 31, cone.r, cone.g, cone.b ); // p, n4\n\n\t\t// up\n\n\t\tcolorAttribute.setXYZ( 32, up.r, up.g, up.b ); colorAttribute.setXYZ( 33, up.r, up.g, up.b ); // u1, u2\n\t\tcolorAttribute.setXYZ( 34, up.r, up.g, up.b ); colorAttribute.setXYZ( 35, up.r, up.g, up.b ); // u2, u3\n\t\tcolorAttribute.setXYZ( 36, up.r, up.g, up.b ); colorAttribute.setXYZ( 37, up.r, up.g, up.b ); // u3, u1\n\n\t\t// target\n\n\t\tcolorAttribute.setXYZ( 38, target.r, target.g, target.b ); colorAttribute.setXYZ( 39, target.r, target.g, target.b ); // c, t\n\t\tcolorAttribute.setXYZ( 40, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 41, cross.r, cross.g, cross.b ); // p, c\n\n\t\t// cross\n\n\t\tcolorAttribute.setXYZ( 42, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 43, cross.r, cross.g, cross.b ); // cn1, cn2\n\t\tcolorAttribute.setXYZ( 44, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 45, cross.r, cross.g, cross.b ); // cn3, cn4\n\n\t\tcolorAttribute.setXYZ( 46, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 47, cross.r, cross.g, cross.b ); // cf1, cf2\n\t\tcolorAttribute.setXYZ( 48, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 49, cross.r, cross.g, cross.b ); // cf3, cf4\n\n\t\tcolorAttribute.needsUpdate = true;\n\n\t}\n\n\t/**\n\t * Updates the helper based on the projection matrix of the camera.\n\t */\n\tupdate() {\n\n\t\tconst geometry = this.geometry;\n\t\tconst pointMap = this.pointMap;\n\n\t\tconst w = 1, h = 1;\n\n\t\t// we need just camera projection matrix inverse\n\t\t// world matrix must be identity\n\n\t\t_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );\n\n\t\t// Adjust z values based on coordinate system\n\t\tconst nearZ = this.camera.coordinateSystem === WebGLCoordinateSystem ? -1 : 0;\n\n\t\t// center / target\n\t\tsetPoint( 'c', pointMap, geometry, _camera, 0, 0, nearZ );\n\t\tsetPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );\n\n\t\t// near\n\n\t\tsetPoint( 'n1', pointMap, geometry, _camera, -1, -1, nearZ );\n\t\tsetPoint( 'n2', pointMap, geometry, _camera, w, -1, nearZ );\n\t\tsetPoint( 'n3', pointMap, geometry, _camera, -1, h, nearZ );\n\t\tsetPoint( 'n4', pointMap, geometry, _camera, w, h, nearZ );\n\n\t\t// far\n\n\t\tsetPoint( 'f1', pointMap, geometry, _camera, -1, -1, 1 );\n\t\tsetPoint( 'f2', pointMap, geometry, _camera, w, -1, 1 );\n\t\tsetPoint( 'f3', pointMap, geometry, _camera, -1, h, 1 );\n\t\tsetPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );\n\n\t\t// up\n\n\t\tsetPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, nearZ );\n\t\tsetPoint( 'u2', pointMap, geometry, _camera, -1 * 0.7, h * 1.1, nearZ );\n\t\tsetPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, nearZ );\n\n\t\t// cross\n\n\t\tsetPoint( 'cf1', pointMap, geometry, _camera, -1, 0, 1 );\n\t\tsetPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );\n\t\tsetPoint( 'cf3', pointMap, geometry, _camera, 0, -1, 1 );\n\t\tsetPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );\n\n\t\tsetPoint( 'cn1', pointMap, geometry, _camera, -1, 0, nearZ );\n\t\tsetPoint( 'cn2', pointMap, geometry, _camera, w, 0, nearZ );\n\t\tsetPoint( 'cn3', pointMap, geometry, _camera, 0, -1, nearZ );\n\t\tsetPoint( 'cn4', pointMap, geometry, _camera, 0, h, nearZ );\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\n\nfunction setPoint( point, pointMap, geometry, camera, x, y, z ) {\n\n\t_vector.set( x, y, z ).unproject( camera );\n\n\tconst points = pointMap[ point ];\n\n\tif ( points !== undefined ) {\n\n\t\tconst position = geometry.getAttribute( 'position' );\n\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tposition.setXYZ( points[ i ], _vector.x, _vector.y, _vector.z );\n\n\t\t}\n\n\t}\n\n}\n\nconst _box = /*@__PURE__*/ new Box3();\n\n/**\n * Helper object to graphically show the world-axis-aligned bounding box\n * around an object. The actual bounding box is handled with {@link Box3},\n * this is just a visual helper for debugging. It can be automatically\n * resized with {@link BoxHelper#update} when the object it's created from\n * is transformed. Note that the object must have a geometry for this to work,\n * so it won't work with sprites.\n *\n * ```js\n * const sphere = new THREE.SphereGeometry();\n * const object = new THREE.Mesh( sphere, new THREE.MeshBasicMaterial( 0xff0000 ) );\n * const box = new THREE.BoxHelper( object, 0xffff00 );\n * scene.add( box );\n * ```\n *\n * @augments LineSegments\n */\nclass BoxHelper extends LineSegments {\n\n\t/**\n\t * Constructs a new box helper.\n\t *\n\t * @param {Object3D} [object] - The 3D object to show the world-axis-aligned bounding box.\n\t * @param {number|Color|string} [color=0xffff00] - The box's color.\n\t */\n\tconstructor( object, color = 0xffff00 ) {\n\n\t\tconst indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\t\tconst positions = new Float32Array( 8 * 3 );\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\t\tgeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\t/**\n\t\t * The 3D object being visualized.\n\t\t *\n\t\t * @type {Object3D}\n\t\t */\n\t\tthis.object = object;\n\t\tthis.type = 'BoxHelper';\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t}\n\n\t/**\n\t * Updates the helper's geometry to match the dimensions of the object,\n\t * including any children.\n\t */\n\tupdate() {\n\n\t\tif ( this.object !== undefined ) {\n\n\t\t\t_box.setFromObject( this.object );\n\n\t\t}\n\n\t\tif ( _box.isEmpty() ) return;\n\n\t\tconst min = _box.min;\n\t\tconst max = _box.max;\n\n\t\t/*\n\t\t\t5____4\n\t\t1/___0/|\n\t\t| 6__|_7\n\t\t2/___3/\n\n\t\t0: max.x, max.y, max.z\n\t\t1: min.x, max.y, max.z\n\t\t2: min.x, min.y, max.z\n\t\t3: max.x, min.y, max.z\n\t\t4: max.x, max.y, min.z\n\t\t5: min.x, max.y, min.z\n\t\t6: min.x, min.y, min.z\n\t\t7: max.x, min.y, min.z\n\t\t*/\n\n\t\tconst position = this.geometry.attributes.position;\n\t\tconst array = position.array;\n\n\t\tarray[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\n\t\tarray[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\n\t\tarray[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\n\t\tarray[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\tposition.needsUpdate = true;\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t}\n\n\t/**\n\t * Updates the wireframe box for the passed object.\n\t *\n\t * @param {Object3D} object - The 3D object to create the helper for.\n\t * @return {BoxHelper} A reference to this instance.\n\t */\n\tsetFromObject( object ) {\n\n\t\tthis.object = object;\n\t\tthis.update();\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.object = source.object;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\n/**\n * A helper object to visualize an instance of {@link Box3}.\n *\n * ```js\n * const box = new THREE.Box3();\n * box.setFromCenterAndSize( new THREE.Vector3( 1, 1, 1 ), new THREE.Vector3( 2, 1, 3 ) );\n *\n * const helper = new THREE.Box3Helper( box, 0xffff00 );\n * scene.add( helper )\n * ```\n *\n * @augments LineSegments\n */\nclass Box3Helper extends LineSegments {\n\n\t/**\n\t * Constructs a new box3 helper.\n\t *\n\t * @param {Box3} box - The box to visualize.\n\t * @param {number|Color|string} [color=0xffff00] - The box's color.\n\t */\n\tconstructor( box, color = 0xffff00 ) {\n\n\t\tconst indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\n\t\tconst positions = [ 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1 ];\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\t/**\n\t\t * The box being visualized.\n\t\t *\n\t\t * @type {Box3}\n\t\t */\n\t\tthis.box = box;\n\n\t\tthis.type = 'Box3Helper';\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tconst box = this.box;\n\n\t\tif ( box.isEmpty() ) return;\n\n\t\tbox.getCenter( this.position );\n\n\t\tbox.getSize( this.scale );\n\n\t\tthis.scale.multiplyScalar( 0.5 );\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\n/**\n * A helper object to visualize an instance of {@link Plane}.\n *\n * ```js\n * const plane = new THREE.Plane( new THREE.Vector3( 1, 1, 0.2 ), 3 );\n * const helper = new THREE.PlaneHelper( plane, 1, 0xffff00 );\n * scene.add( helper );\n * ```\n *\n * @augments Line\n */\nclass PlaneHelper extends Line {\n\n\t/**\n\t * Constructs a new plane helper.\n\t *\n\t * @param {Plane} plane - The plane to be visualized.\n\t * @param {number} [size=1] - The side length of plane helper.\n\t * @param {number|Color|string} [hex=0xffff00] - The helper's color.\n\t */\n\tconstructor( plane, size = 1, hex = 0xffff00 ) {\n\n\t\tconst color = hex;\n\n\t\tconst positions = [ 1, -1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0 ];\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\t\tgeometry.computeBoundingSphere();\n\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.type = 'PlaneHelper';\n\n\t\t/**\n\t\t * The plane being visualized.\n\t\t *\n\t\t * @type {Plane}\n\t\t */\n\t\tthis.plane = plane;\n\n\t\t/**\n\t\t * The side length of plane helper.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.size = size;\n\n\t\tconst positions2 = [ 1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0 ];\n\n\t\tconst geometry2 = new BufferGeometry();\n\t\tgeometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\n\t\tgeometry2.computeBoundingSphere();\n\n\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false, toneMapped: false } ) ) );\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tthis.position.set( 0, 0, 0 );\n\n\t\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, 1 );\n\n\t\tthis.lookAt( this.plane.normal );\n\n\t\tthis.translateZ( - this.plane.constant );\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n\t/**\n\t * Updates the helper to match the position and direction of the\n\t * light being visualized.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t}\n\n}\n\nconst _axis = /*@__PURE__*/ new Vector3();\nlet _lineGeometry, _coneGeometry;\n\n/**\n * An 3D arrow object for visualizing directions.\n *\n * ```js\n * const dir = new THREE.Vector3( 1, 2, 0 );\n *\n * //normalize the direction vector (convert to vector of length 1)\n * dir.normalize();\n *\n * const origin = new THREE.Vector3( 0, 0, 0 );\n * const length = 1;\n * const hex = 0xffff00;\n *\n * const arrowHelper = new THREE.ArrowHelper( dir, origin, length, hex );\n * scene.add( arrowHelper );\n * ```\n *\n * @augments Object3D\n */\nclass ArrowHelper extends Object3D {\n\n\t/**\n\t * Constructs a new arrow helper.\n\t *\n\t * @param {Vector3} [dir=(0, 0, 1)] - The (normalized) direction vector.\n\t * @param {Vector3} [origin=(0, 0, 0)] - Point at which the arrow starts.\n\t * @param {number} [length=1] - Length of the arrow in world units.\n\t * @param {(number|Color|string)} [color=0xffff00] - Color of the arrow.\n\t * @param {number} [headLength=length*0.2] - The length of the head of the arrow.\n\t * @param {number} [headWidth=headLength*0.2] - The width of the head of the arrow.\n\t */\n\tconstructor( dir = new Vector3( 0, 0, 1 ), origin = new Vector3( 0, 0, 0 ), length = 1, color = 0xffff00, headLength = length * 0.2, headWidth = headLength * 0.2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ArrowHelper';\n\n\t\tif ( _lineGeometry === undefined ) {\n\n\t\t\t_lineGeometry = new BufferGeometry();\n\t\t\t_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\t\t\t_coneGeometry = new ConeGeometry( 0.5, 1, 5, 1 );\n\t\t\t_coneGeometry.translate( 0, -0.5, 0 );\n\n\t\t}\n\n\t\tthis.position.copy( origin );\n\n\t\t/**\n\t\t * The line part of the arrow helper.\n\t\t *\n\t\t * @type {Line}\n\t\t */\n\t\tthis.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\t\tthis.line.matrixAutoUpdate = false;\n\t\tthis.add( this.line );\n\n\t\t/**\n\t\t * The cone part of the arrow helper.\n\t\t *\n\t\t * @type {Mesh}\n\t\t */\n\t\tthis.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color, toneMapped: false } ) );\n\t\tthis.cone.matrixAutoUpdate = false;\n\t\tthis.add( this.cone );\n\n\t\tthis.setDirection( dir );\n\t\tthis.setLength( length, headLength, headWidth );\n\n\t}\n\n\t/**\n\t * Sets the direction of the helper.\n\t *\n\t * @param {Vector3} dir - The normalized direction vector.\n\t */\n\tsetDirection( dir ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t} else if ( dir.y < -0.99999 ) {\n\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t} else {\n\n\t\t\t_axis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\tconst radians = Math.acos( dir.y );\n\n\t\t\tthis.quaternion.setFromAxisAngle( _axis, radians );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the length of the helper.\n\t *\n\t * @param {number} length - Length of the arrow in world units.\n\t * @param {number} [headLength=length*0.2] - The length of the head of the arrow.\n\t * @param {number} [headWidth=headLength*0.2] - The width of the head of the arrow.\n\t */\n\tsetLength( length, headLength = length * 0.2, headWidth = headLength * 0.2 ) {\n\n\t\tthis.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458\n\t\tthis.line.updateMatrix();\n\n\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\t\tthis.cone.position.y = length;\n\t\tthis.cone.updateMatrix();\n\n\t}\n\n\t/**\n\t * Sets the color of the helper.\n\t *\n\t * @param {number|Color|string} color - The color to set.\n\t */\n\tsetColor( color ) {\n\n\t\tthis.line.material.color.set( color );\n\t\tthis.cone.material.color.set( color );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source, false );\n\n\t\tthis.line.copy( source.line );\n\t\tthis.cone.copy( source.cone );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.line.geometry.dispose();\n\t\tthis.line.material.dispose();\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t}\n\n}\n\n/**\n * An axis object to visualize the 3 axes in a simple way.\n * The X axis is red. The Y axis is green. The Z axis is blue.\n *\n * ```js\n * const axesHelper = new THREE.AxesHelper( 5 );\n * scene.add( axesHelper );\n * ```\n *\n * @augments LineSegments\n */\nclass AxesHelper extends LineSegments {\n\n\t/**\n\t * Constructs a new axes helper.\n\t *\n\t * @param {number} [size=1] - Size of the lines representing the axes.\n\t */\n\tconstructor( size = 1 ) {\n\n\t\tconst vertices = [\n\t\t\t0, 0, 0,\tsize, 0, 0,\n\t\t\t0, 0, 0,\t0, size, 0,\n\t\t\t0, 0, 0,\t0, 0, size\n\t\t];\n\n\t\tconst colors = [\n\t\t\t1, 0, 0,\t1, 0.6, 0,\n\t\t\t0, 1, 0,\t0.6, 1, 0,\n\t\t\t0, 0, 1,\t0, 0.6, 1\n\t\t];\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'AxesHelper';\n\n\t}\n\n\t/**\n\t * Defines the colors of the axes helper.\n\t *\n\t * @param {number|Color|string} xAxisColor - The color for the x axis.\n\t * @param {number|Color|string} yAxisColor - The color for the y axis.\n\t * @param {number|Color|string} zAxisColor - The color for the z axis.\n\t * @return {AxesHelper} A reference to this axes helper.\n\t */\n\tsetColors( xAxisColor, yAxisColor, zAxisColor ) {\n\n\t\tconst color = new Color();\n\t\tconst array = this.geometry.attributes.color.array;\n\n\t\tcolor.set( xAxisColor );\n\t\tcolor.toArray( array, 0 );\n\t\tcolor.toArray( array, 3 );\n\n\t\tcolor.set( yAxisColor );\n\t\tcolor.toArray( array, 6 );\n\t\tcolor.toArray( array, 9 );\n\n\t\tcolor.set( zAxisColor );\n\t\tcolor.toArray( array, 12 );\n\t\tcolor.toArray( array, 15 );\n\n\t\tthis.geometry.attributes.color.needsUpdate = true;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\n/**\n * This class is used to convert a series of paths to an array of\n * shapes. It is specifically used in context of fonts and SVG.\n */\nclass ShapePath {\n\n\t/**\n\t * Constructs a new shape path.\n\t */\n\tconstructor() {\n\n\t\tthis.type = 'ShapePath';\n\n\t\t/**\n\t\t * The color of the shape.\n\t\t *\n\t\t * @type {Color}\n\t\t */\n\t\tthis.color = new Color();\n\n\t\t/**\n\t\t * The paths that have been generated for this shape.\n\t\t *\n\t\t * @type {Array<Path>}\n\t\t * @default null\n\t\t */\n\t\tthis.subPaths = [];\n\n\t\t/**\n\t\t * The current path that is being generated.\n\t\t *\n\t\t * @type {?Path}\n\t\t * @default null\n\t\t */\n\t\tthis.currentPath = null;\n\n\t}\n\n\t/**\n\t * Creates a new path and moves it current point to the given one.\n\t *\n\t * @param {number} x - The x coordinate.\n\t * @param {number} y - The y coordinate.\n\t * @return {ShapePath} A reference to this shape path.\n\t */\n\tmoveTo( x, y ) {\n\n\t\tthis.currentPath = new Path();\n\t\tthis.subPaths.push( this.currentPath );\n\t\tthis.currentPath.moveTo( x, y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an instance of {@link LineCurve} to the path by connecting\n\t * the current point with the given one.\n\t *\n\t * @param {number} x - The x coordinate of the end point.\n\t * @param {number} y - The y coordinate of the end point.\n\t * @return {ShapePath} A reference to this shape path.\n\t */\n\tlineTo( x, y ) {\n\n\t\tthis.currentPath.lineTo( x, y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an instance of {@link QuadraticBezierCurve} to the path by connecting\n\t * the current point with the given one.\n\t *\n\t * @param {number} aCPx - The x coordinate of the control point.\n\t * @param {number} aCPy - The y coordinate of the control point.\n\t * @param {number} aX - The x coordinate of the end point.\n\t * @param {number} aY - The y coordinate of the end point.\n\t * @return {ShapePath} A reference to this shape path.\n\t */\n\tquadraticCurveTo( aCPx, aCPy, aX, aY ) {\n\n\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an instance of {@link CubicBezierCurve} to the path by connecting\n\t * the current point with the given one.\n\t *\n\t * @param {number} aCP1x - The x coordinate of the first control point.\n\t * @param {number} aCP1y - The y coordinate of the first control point.\n\t * @param {number} aCP2x - The x coordinate of the second control point.\n\t * @param {number} aCP2y - The y coordinate of the second control point.\n\t * @param {number} aX - The x coordinate of the end point.\n\t * @param {number} aY - The y coordinate of the end point.\n\t * @return {ShapePath} A reference to this shape path.\n\t */\n\tbezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds an instance of {@link SplineCurve} to the path by connecting\n\t * the current point with the given list of points.\n\t *\n\t * @param {Array<Vector2>} pts - An array of points in 2D space.\n\t * @return {ShapePath} A reference to this shape path.\n\t */\n\tsplineThru( pts ) {\n\n\t\tthis.currentPath.splineThru( pts );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Converts the paths into an array of shapes.\n\t *\n\t * @param {boolean} isCCW - By default solid shapes are  defined clockwise (CW) and holes are defined counterclockwise (CCW).\n\t * If this flag is set to `true`, then those are flipped.\n\t * @return {Array<Shape>} An array of shapes.\n\t */\n\ttoShapes( isCCW ) {\n\n\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\tconst shapes = [];\n\n\t\t\tfor ( let i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\tconst tmpPath = inSubpaths[ i ];\n\n\t\t\t\tconst tmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\tconst polyLen = inPolygon.length;\n\n\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\tlet inside = false;\n\t\t\tfor ( let p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\tlet edgeLowPt = inPolygon[ p ];\n\t\t\t\tlet edgeHighPt = inPolygon[ q ];\n\n\t\t\t\tlet edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\tlet edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not parallel\n\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\tedgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\n\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// parallel or collinear\n\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n\t\t\t\t\t// continue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn\tinside;\n\n\t\t}\n\n\t\tconst isClockWise = ShapeUtils.isClockWise;\n\n\t\tconst subPaths = this.subPaths;\n\t\tif ( subPaths.length === 0 ) return [];\n\n\t\tlet solid, tmpPath, tmpShape;\n\t\tconst shapes = [];\n\n\t\tif ( subPaths.length === 1 ) {\n\n\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\ttmpShape = new Shape();\n\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\tshapes.push( tmpShape );\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tlet holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\tconst betterShapeHoles = [];\n\t\tconst newShapes = [];\n\t\tlet newShapeHoles = [];\n\t\tlet mainIdx = 0;\n\t\tlet tmpPoints;\n\n\t\tnewShapes[ mainIdx ] = undefined;\n\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\tfor ( let i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\ttmpPath = subPaths[ i ];\n\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\tif ( solid ) {\n\n\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\n\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\tif ( holesFirst )\tmainIdx ++;\n\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t//console.log('cw', i);\n\n\t\t\t} else {\n\n\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t//console.log('ccw', i);\n\n\t\t\t}\n\n\t\t}\n\n\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\tif ( newShapes.length > 1 ) {\n\n\t\t\tlet ambiguous = false;\n\t\t\tlet toChange = 0;\n\n\t\t\tfor ( let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t}\n\n\t\t\tfor ( let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tconst sho = newShapeHoles[ sIdx ];\n\n\t\t\t\tfor ( let hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\tconst ho = sho[ hIdx ];\n\t\t\t\t\tlet hole_unassigned = true;\n\n\t\t\t\t\tfor ( let s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange ++;\n\n\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( toChange > 0 && ambiguous === false ) {\n\n\t\t\t\tnewShapeHoles = betterShapeHoles;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet tmpHoles;\n\n\t\tfor ( let i = 0, il = newShapes.length; i < il; i ++ ) {\n\n\t\t\ttmpShape = newShapes[ i ].s;\n\t\t\tshapes.push( tmpShape );\n\t\t\ttmpHoles = newShapeHoles[ i ];\n\n\t\t\tfor ( let j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//console.log(\"shape\", shapes);\n\n\t\treturn shapes;\n\n\t}\n\n}\n\n/**\n * Abstract base class for controls.\n *\n * @abstract\n * @augments EventDispatcher\n */\nclass Controls extends EventDispatcher {\n\n\t/**\n\t * Constructs a new controls instance.\n\t *\n\t * @param {Object3D} object - The object that is managed by the controls.\n\t * @param {?HTMLDOMElement} domElement - The HTML element used for event listeners.\n\t */\n\tconstructor( object, domElement = null ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The object that is managed by the controls.\n\t\t *\n\t\t * @type {Object3D}\n\t\t */\n\t\tthis.object = object;\n\n\t\t/**\n\t\t * The HTML element used for event listeners.\n\t\t *\n\t\t * @type {?HTMLDOMElement}\n\t\t * @default null\n\t\t */\n\t\tthis.domElement = domElement;\n\n\t\t/**\n\t\t * Whether the controls responds to user input or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.enabled = true;\n\n\t\t/**\n\t\t * The internal state of the controls.\n\t\t *\n\t\t * @type {number}\n\t\t * @default -1\n\t\t */\n\t\tthis.state = -1;\n\n\t\t/**\n\t\t * This object defines the keyboard input of the controls.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.keys = {};\n\n\t\t/**\n\t\t * This object defines what type of actions are assigned to the available mouse buttons.\n\t\t * It depends on the control implementation what kind of mouse buttons and actions are supported.\n\t\t *\n\t\t * @type {{LEFT: ?number, MIDDLE: ?number, RIGHT: ?number}}\n\t\t */\n\t\tthis.mouseButtons = { LEFT: null, MIDDLE: null, RIGHT: null };\n\n\t\t/**\n\t\t * This object defines what type of actions are assigned to what kind of touch interaction.\n\t\t * It depends on the control implementation what kind of touch interaction and actions are supported.\n\t\t *\n\t\t * @type {{ONE: ?number, TWO: ?number}}\n\t\t */\n\t\tthis.touches = { ONE: null, TWO: null };\n\n\t}\n\n\t/**\n\t * Connects the controls to the DOM. This method has so called \"side effects\" since\n\t * it adds the module's event listeners to the DOM.\n\t *\n\t * @param {HTMLDOMElement} element - The DOM element to connect to.\n\t */\n\tconnect( element ) {\n\n\t\tif ( element === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Controls: connect() now requires an element.' ); // @deprecated, the warning can be removed with r185\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.domElement !== null ) this.disconnect();\n\n\t\tthis.domElement = element;\n\n\t}\n\n\t/**\n\t * Disconnects the controls from the DOM.\n\t */\n\tdisconnect() {}\n\n\t/**\n\t * Call this method if you no longer want use to the controls. It frees all internal\n\t * resources and removes all event listeners.\n\t */\n\tdispose() {}\n\n\t/**\n\t * Controls should implement this method if they have to update their internal state\n\t * per simulation step.\n\t *\n\t * @param {number} [delta] - The time delta in seconds.\n\t */\n\tupdate( /* delta */ ) {}\n\n}\n\n/**\n * Scales the texture as large as possible within its surface without cropping\n * or stretching the texture. The method preserves the original aspect ratio of\n * the texture. Akin to CSS `object-fit: contain`\n *\n * @param {Texture} texture - The texture.\n * @param {number} aspect - The texture's aspect ratio.\n * @return {Texture} The updated texture.\n */\nfunction contain( texture, aspect ) {\n\n\tconst imageAspect = ( texture.image && texture.image.width ) ? texture.image.width / texture.image.height : 1;\n\n\tif ( imageAspect > aspect ) {\n\n\t\ttexture.repeat.x = 1;\n\t\ttexture.repeat.y = imageAspect / aspect;\n\n\t\ttexture.offset.x = 0;\n\t\ttexture.offset.y = ( 1 - texture.repeat.y ) / 2;\n\n\t} else {\n\n\t\ttexture.repeat.x = aspect / imageAspect;\n\t\ttexture.repeat.y = 1;\n\n\t\ttexture.offset.x = ( 1 - texture.repeat.x ) / 2;\n\t\ttexture.offset.y = 0;\n\n\t}\n\n\treturn texture;\n\n}\n\n/**\n * Scales the texture to the smallest possible size to fill the surface, leaving\n * no empty space. The method preserves the original aspect ratio of the texture.\n * Akin to CSS `object-fit: cover`.\n *\n * @param {Texture} texture - The texture.\n * @param {number} aspect - The texture's aspect ratio.\n * @return {Texture} The updated texture.\n */\nfunction cover( texture, aspect ) {\n\n\tconst imageAspect = ( texture.image && texture.image.width ) ? texture.image.width / texture.image.height : 1;\n\n\tif ( imageAspect > aspect ) {\n\n\t\ttexture.repeat.x = aspect / imageAspect;\n\t\ttexture.repeat.y = 1;\n\n\t\ttexture.offset.x = ( 1 - texture.repeat.x ) / 2;\n\t\ttexture.offset.y = 0;\n\n\t} else {\n\n\t\ttexture.repeat.x = 1;\n\t\ttexture.repeat.y = imageAspect / aspect;\n\n\t\ttexture.offset.x = 0;\n\t\ttexture.offset.y = ( 1 - texture.repeat.y ) / 2;\n\n\t}\n\n\treturn texture;\n\n}\n\n/**\n * Configures the texture to the default transformation. Akin to CSS `object-fit: fill`.\n *\n * @param {Texture} texture - The texture.\n * @return {Texture} The updated texture.\n */\nfunction fill( texture ) {\n\n\ttexture.repeat.x = 1;\n\ttexture.repeat.y = 1;\n\n\ttexture.offset.x = 0;\n\ttexture.offset.y = 0;\n\n\treturn texture;\n\n}\n\n/**\n * Determines how many bytes must be used to represent the texture.\n *\n * @param {number} width - The width of the texture.\n * @param {number} height - The height of the texture.\n * @param {number} format - The texture's format.\n * @param {number} type - The texture's type.\n * @return {number} The byte length.\n */\nfunction getByteLength( width, height, format, type ) {\n\n\tconst typeByteLength = getTextureTypeByteLength( type );\n\n\tswitch ( format ) {\n\n\t\t// https://registry.khronos.org/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml\n\t\tcase AlphaFormat:\n\t\t\treturn width * height;\n\t\tcase RedFormat:\n\t\t\treturn ( ( width * height ) / typeByteLength.components ) * typeByteLength.byteLength;\n\t\tcase RedIntegerFormat:\n\t\t\treturn ( ( width * height ) / typeByteLength.components ) * typeByteLength.byteLength;\n\t\tcase RGFormat:\n\t\t\treturn ( ( width * height * 2 ) / typeByteLength.components ) * typeByteLength.byteLength;\n\t\tcase RGIntegerFormat:\n\t\t\treturn ( ( width * height * 2 ) / typeByteLength.components ) * typeByteLength.byteLength;\n\t\tcase RGBFormat:\n\t\t\treturn ( ( width * height * 3 ) / typeByteLength.components ) * typeByteLength.byteLength;\n\t\tcase RGBAFormat:\n\t\t\treturn ( ( width * height * 4 ) / typeByteLength.components ) * typeByteLength.byteLength;\n\t\tcase RGBAIntegerFormat:\n\t\t\treturn ( ( width * height * 4 ) / typeByteLength.components ) * typeByteLength.byteLength;\n\n\t\t// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_s3tc_srgb/\n\t\tcase RGB_S3TC_DXT1_Format:\n\t\tcase RGBA_S3TC_DXT1_Format:\n\t\t\treturn Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 8;\n\t\tcase RGBA_S3TC_DXT3_Format:\n\t\tcase RGBA_S3TC_DXT5_Format:\n\t\t\treturn Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 16;\n\n\t\t// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_pvrtc/\n\t\tcase RGB_PVRTC_2BPPV1_Format:\n\t\tcase RGBA_PVRTC_2BPPV1_Format:\n\t\t\treturn ( Math.max( width, 16 ) * Math.max( height, 8 ) ) / 4;\n\t\tcase RGB_PVRTC_4BPPV1_Format:\n\t\tcase RGBA_PVRTC_4BPPV1_Format:\n\t\t\treturn ( Math.max( width, 8 ) * Math.max( height, 8 ) ) / 2;\n\n\t\t// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_etc/\n\t\tcase RGB_ETC1_Format:\n\t\tcase RGB_ETC2_Format:\n\t\t\treturn Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 8;\n\t\tcase RGBA_ETC2_EAC_Format:\n\t\t\treturn Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 16;\n\n\t\t// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_astc/\n\t\tcase RGBA_ASTC_4x4_Format:\n\t\t\treturn Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 16;\n\t\tcase RGBA_ASTC_5x4_Format:\n\t\t\treturn Math.floor( ( width + 4 ) / 5 ) * Math.floor( ( height + 3 ) / 4 ) * 16;\n\t\tcase RGBA_ASTC_5x5_Format:\n\t\t\treturn Math.floor( ( width + 4 ) / 5 ) * Math.floor( ( height + 4 ) / 5 ) * 16;\n\t\tcase RGBA_ASTC_6x5_Format:\n\t\t\treturn Math.floor( ( width + 5 ) / 6 ) * Math.floor( ( height + 4 ) / 5 ) * 16;\n\t\tcase RGBA_ASTC_6x6_Format:\n\t\t\treturn Math.floor( ( width + 5 ) / 6 ) * Math.floor( ( height + 5 ) / 6 ) * 16;\n\t\tcase RGBA_ASTC_8x5_Format:\n\t\t\treturn Math.floor( ( width + 7 ) / 8 ) * Math.floor( ( height + 4 ) / 5 ) * 16;\n\t\tcase RGBA_ASTC_8x6_Format:\n\t\t\treturn Math.floor( ( width + 7 ) / 8 ) * Math.floor( ( height + 5 ) / 6 ) * 16;\n\t\tcase RGBA_ASTC_8x8_Format:\n\t\t\treturn Math.floor( ( width + 7 ) / 8 ) * Math.floor( ( height + 7 ) / 8 ) * 16;\n\t\tcase RGBA_ASTC_10x5_Format:\n\t\t\treturn Math.floor( ( width + 9 ) / 10 ) * Math.floor( ( height + 4 ) / 5 ) * 16;\n\t\tcase RGBA_ASTC_10x6_Format:\n\t\t\treturn Math.floor( ( width + 9 ) / 10 ) * Math.floor( ( height + 5 ) / 6 ) * 16;\n\t\tcase RGBA_ASTC_10x8_Format:\n\t\t\treturn Math.floor( ( width + 9 ) / 10 ) * Math.floor( ( height + 7 ) / 8 ) * 16;\n\t\tcase RGBA_ASTC_10x10_Format:\n\t\t\treturn Math.floor( ( width + 9 ) / 10 ) * Math.floor( ( height + 9 ) / 10 ) * 16;\n\t\tcase RGBA_ASTC_12x10_Format:\n\t\t\treturn Math.floor( ( width + 11 ) / 12 ) * Math.floor( ( height + 9 ) / 10 ) * 16;\n\t\tcase RGBA_ASTC_12x12_Format:\n\t\t\treturn Math.floor( ( width + 11 ) / 12 ) * Math.floor( ( height + 11 ) / 12 ) * 16;\n\n\t\t// https://registry.khronos.org/webgl/extensions/EXT_texture_compression_bptc/\n\t\tcase RGBA_BPTC_Format:\n\t\tcase RGB_BPTC_SIGNED_Format:\n\t\tcase RGB_BPTC_UNSIGNED_Format:\n\t\t\treturn Math.ceil( width / 4 ) * Math.ceil( height / 4 ) * 16;\n\n\t\t// https://registry.khronos.org/webgl/extensions/EXT_texture_compression_rgtc/\n\t\tcase RED_RGTC1_Format:\n\t\tcase SIGNED_RED_RGTC1_Format:\n\t\t\treturn Math.ceil( width / 4 ) * Math.ceil( height / 4 ) * 8;\n\t\tcase RED_GREEN_RGTC2_Format:\n\t\tcase SIGNED_RED_GREEN_RGTC2_Format:\n\t\t\treturn Math.ceil( width / 4 ) * Math.ceil( height / 4 ) * 16;\n\n\t}\n\n\tthrow new Error(\n\t\t`Unable to determine texture byte length for ${format} format.`,\n\t);\n\n}\n\nfunction getTextureTypeByteLength( type ) {\n\n\tswitch ( type ) {\n\n\t\tcase UnsignedByteType:\n\t\tcase ByteType:\n\t\t\treturn { byteLength: 1, components: 1 };\n\t\tcase UnsignedShortType:\n\t\tcase ShortType:\n\t\tcase HalfFloatType:\n\t\t\treturn { byteLength: 2, components: 1 };\n\t\tcase UnsignedShort4444Type:\n\t\tcase UnsignedShort5551Type:\n\t\t\treturn { byteLength: 2, components: 4 };\n\t\tcase UnsignedIntType:\n\t\tcase IntType:\n\t\tcase FloatType:\n\t\t\treturn { byteLength: 4, components: 1 };\n\t\tcase UnsignedInt5999Type:\n\t\t\treturn { byteLength: 4, components: 3 };\n\n\t}\n\n\tthrow new Error( `Unknown texture type ${type}.` );\n\n}\n\n/**\n * A class containing utility functions for textures.\n *\n * @hideconstructor\n */\nclass TextureUtils {\n\n\t/**\n\t * Scales the texture as large as possible within its surface without cropping\n\t * or stretching the texture. The method preserves the original aspect ratio of\n\t * the texture. Akin to CSS `object-fit: contain`\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {number} aspect - The texture's aspect ratio.\n\t * @return {Texture} The updated texture.\n\t */\n\tstatic contain( texture, aspect ) {\n\n\t\treturn contain( texture, aspect );\n\n\t}\n\n\t/**\n\t * Scales the texture to the smallest possible size to fill the surface, leaving\n\t * no empty space. The method preserves the original aspect ratio of the texture.\n\t * Akin to CSS `object-fit: cover`.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {number} aspect - The texture's aspect ratio.\n\t * @return {Texture} The updated texture.\n\t */\n\tstatic cover( texture, aspect ) {\n\n\t\treturn cover( texture, aspect );\n\n\t}\n\n\t/**\n\t * Configures the texture to the default transformation. Akin to CSS `object-fit: fill`.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @return {Texture} The updated texture.\n\t */\n\tstatic fill( texture ) {\n\n\t\treturn fill( texture );\n\n\t}\n\n\t/**\n\t * Determines how many bytes must be used to represent the texture.\n\t *\n\t * @param {number} width - The width of the texture.\n\t * @param {number} height - The height of the texture.\n\t * @param {number} format - The texture's format.\n\t * @param {number} type - The texture's type.\n\t * @return {number} The byte length.\n\t */\n\tstatic getByteLength( width, height, format, type ) {\n\n\t\treturn getByteLength( width, height, format, type );\n\n\t}\n\n}\n\nif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {\n\t\trevision: REVISION,\n\t} } ) );\n\n}\n\nif ( typeof window !== 'undefined' ) {\n\n\tif ( window.__THREE__ ) {\n\n\t\tconsole.warn( 'WARNING: Multiple instances of Three.js being imported.' );\n\n\t} else {\n\n\t\twindow.__THREE__ = REVISION;\n\n\t}\n\n}\n\nexport { ACESFilmicToneMapping, AddEquation, AddOperation, AdditiveAnimationBlendMode, AdditiveBlending, AgXToneMapping, AlphaFormat, AlwaysCompare, AlwaysDepth, AlwaysStencilFunc, AmbientLight, AnimationAction, AnimationClip, AnimationLoader, AnimationMixer, AnimationObjectGroup, AnimationUtils, ArcCurve, ArrayCamera, ArrowHelper, AttachedBindMode, Audio, AudioAnalyser, AudioContext, AudioListener, AudioLoader, AxesHelper, BackSide, BasicDepthPacking, BasicShadowMap, BatchedMesh, Bone, BooleanKeyframeTrack, Box2, Box3, Box3Helper, BoxGeometry, BoxHelper, BufferAttribute, BufferGeometry, BufferGeometryLoader, ByteType, Cache, Camera, CameraHelper, CanvasTexture, CapsuleGeometry, CatmullRomCurve3, CineonToneMapping, CircleGeometry, ClampToEdgeWrapping, Clock, Color, ColorKeyframeTrack, ColorManagement, CompressedArrayTexture, CompressedCubeTexture, CompressedTexture, CompressedTextureLoader, ConeGeometry, ConstantAlphaFactor, ConstantColorFactor, Controls, CubeCamera, CubeReflectionMapping, CubeRefractionMapping, CubeTexture, CubeTextureLoader, CubeUVReflectionMapping, CubicBezierCurve, CubicBezierCurve3, CubicInterpolant, CullFaceBack, CullFaceFront, CullFaceFrontBack, CullFaceNone, Curve, CurvePath, CustomBlending, CustomToneMapping, CylinderGeometry, Cylindrical, Data3DTexture, DataArrayTexture, DataTexture, DataTextureLoader, DataUtils, DecrementStencilOp, DecrementWrapStencilOp, DefaultLoadingManager, DepthArrayTexture, DepthFormat, DepthStencilFormat, DepthTexture, DetachedBindMode, DirectionalLight, DirectionalLightHelper, DiscreteInterpolant, DodecahedronGeometry, DoubleSide, DstAlphaFactor, DstColorFactor, DynamicCopyUsage, DynamicDrawUsage, DynamicReadUsage, EdgesGeometry, EllipseCurve, EqualCompare, EqualDepth, EqualStencilFunc, EquirectangularReflectionMapping, EquirectangularRefractionMapping, Euler, EventDispatcher, ExtrudeGeometry, FileLoader, Float16BufferAttribute, Float32BufferAttribute, FloatType, Fog, FogExp2, FramebufferTexture, FrontSide, Frustum, FrustumArray, GLBufferAttribute, GLSL1, GLSL3, GreaterCompare, GreaterDepth, GreaterEqualCompare, GreaterEqualDepth, GreaterEqualStencilFunc, GreaterStencilFunc, GridHelper, Group, HalfFloatType, HemisphereLight, HemisphereLightHelper, IcosahedronGeometry, ImageBitmapLoader, ImageLoader, ImageUtils, IncrementStencilOp, IncrementWrapStencilOp, InstancedBufferAttribute, InstancedBufferGeometry, InstancedInterleavedBuffer, InstancedMesh, Int16BufferAttribute, Int32BufferAttribute, Int8BufferAttribute, IntType, InterleavedBuffer, InterleavedBufferAttribute, Interpolant, InterpolateDiscrete, InterpolateLinear, InterpolateSmooth, InterpolationSamplingMode, InterpolationSamplingType, InvertStencilOp, KeepStencilOp, KeyframeTrack, LOD, LatheGeometry, Layers, LessCompare, LessDepth, LessEqualCompare, LessEqualDepth, LessEqualStencilFunc, LessStencilFunc, Light, LightProbe, Line, Line3, LineBasicMaterial, LineCurve, LineCurve3, LineDashedMaterial, LineLoop, LineSegments, LinearFilter, LinearInterpolant, LinearMipMapLinearFilter, LinearMipMapNearestFilter, LinearMipmapLinearFilter, LinearMipmapNearestFilter, LinearSRGBColorSpace, LinearToneMapping, LinearTransfer, Loader, LoaderUtils, LoadingManager, LoopOnce, LoopPingPong, LoopRepeat, MOUSE, Material, MaterialLoader, MathUtils, Matrix2, Matrix3, Matrix4, MaxEquation, Mesh, MeshBasicMaterial, MeshDepthMaterial, MeshDistanceMaterial, MeshLambertMaterial, MeshMatcapMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshPhysicalMaterial, MeshStandardMaterial, MeshToonMaterial, MinEquation, MirroredRepeatWrapping, MixOperation, MultiplyBlending, MultiplyOperation, NearestFilter, NearestMipMapLinearFilter, NearestMipMapNearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, NeutralToneMapping, NeverCompare, NeverDepth, NeverStencilFunc, NoBlending, NoColorSpace, NoToneMapping, NormalAnimationBlendMode, NormalBlending, NotEqualCompare, NotEqualDepth, NotEqualStencilFunc, NumberKeyframeTrack, Object3D, ObjectLoader, ObjectSpaceNormalMap, OctahedronGeometry, OneFactor, OneMinusConstantAlphaFactor, OneMinusConstantColorFactor, OneMinusDstAlphaFactor, OneMinusDstColorFactor, OneMinusSrcAlphaFactor, OneMinusSrcColorFactor, OrthographicCamera, PCFShadowMap, PCFSoftShadowMap, Path, PerspectiveCamera, Plane, PlaneGeometry, PlaneHelper, PointLight, PointLightHelper, Points, PointsMaterial, PolarGridHelper, PolyhedronGeometry, PositionalAudio, PropertyBinding, PropertyMixer, QuadraticBezierCurve, QuadraticBezierCurve3, Quaternion, QuaternionKeyframeTrack, QuaternionLinearInterpolant, RAD2DEG, RED_GREEN_RGTC2_Format, RED_RGTC1_Format, REVISION, RGBADepthPacking, RGBAFormat, RGBAIntegerFormat, RGBA_ASTC_10x10_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_2BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, RGBDepthPacking, RGBFormat, RGBIntegerFormat, RGB_BPTC_SIGNED_Format, RGB_BPTC_UNSIGNED_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_2BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, RGDepthPacking, RGFormat, RGIntegerFormat, RawShaderMaterial, Ray, Raycaster, RectAreaLight, RedFormat, RedIntegerFormat, ReinhardToneMapping, RenderTarget, RenderTarget3D, RenderTargetArray, RepeatWrapping, ReplaceStencilOp, ReverseSubtractEquation, RingGeometry, SIGNED_RED_GREEN_RGTC2_Format, SIGNED_RED_RGTC1_Format, SRGBColorSpace, SRGBTransfer, Scene, ShaderMaterial, ShadowMaterial, Shape, ShapeGeometry, ShapePath, ShapeUtils, ShortType, Skeleton, SkeletonHelper, SkinnedMesh, Source, Sphere, SphereGeometry, Spherical, SphericalHarmonics3, SplineCurve, SpotLight, SpotLightHelper, Sprite, SpriteMaterial, SrcAlphaFactor, SrcAlphaSaturateFactor, SrcColorFactor, StaticCopyUsage, StaticDrawUsage, StaticReadUsage, StereoCamera, StreamCopyUsage, StreamDrawUsage, StreamReadUsage, StringKeyframeTrack, SubtractEquation, SubtractiveBlending, TOUCH, TangentSpaceNormalMap, TetrahedronGeometry, Texture, TextureLoader, TextureUtils, TimestampQuery, TorusGeometry, TorusKnotGeometry, Triangle, TriangleFanDrawMode, TriangleStripDrawMode, TrianglesDrawMode, TubeGeometry, UVMapping, Uint16BufferAttribute, Uint32BufferAttribute, Uint8BufferAttribute, Uint8ClampedBufferAttribute, Uniform, UniformsGroup, UniformsUtils, UnsignedByteType, UnsignedInt248Type, UnsignedInt5999Type, UnsignedIntType, UnsignedShort4444Type, UnsignedShort5551Type, UnsignedShortType, VSMShadowMap, Vector2, Vector3, Vector4, VectorKeyframeTrack, VideoFrameTexture, VideoTexture, WebGL3DRenderTarget, WebGLArrayRenderTarget, WebGLCoordinateSystem, WebGLCubeRenderTarget, WebGLRenderTarget, WebGPUCoordinateSystem, WebXRController, WireframeGeometry, WrapAroundEnding, ZeroCurvatureEnding, ZeroFactor, ZeroSlopeEnding, ZeroStencilOp, arrayNeedsUint32, cloneUniforms, createCanvasElement, createElementNS, getByteLength, getUnlitUniformColorSpace, mergeUniforms, probeAsync, toNormalizedProjectionMatrix, toReversedProjectionMatrix, warnOnce };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,MAAMA,QAAQ,GAAG,KAAK;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAG;EAAEC,IAAI,EAAE,CAAC;EAAEC,MAAM,EAAE,CAAC;EAAEC,KAAK,EAAE,CAAC;EAAEC,MAAM,EAAE,CAAC;EAAEC,KAAK,EAAE,CAAC;EAAEC,GAAG,EAAE;AAAE,CAAC;;AAE3E;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAG;EAAEH,MAAM,EAAE,CAAC;EAAEE,GAAG,EAAE,CAAC;EAAEE,SAAS,EAAE,CAAC;EAAEC,YAAY,EAAE;AAAE,CAAC;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG,CAAC;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG,CAAC;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAG,CAAC;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAG,CAAC;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAG,CAAC;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG,CAAC;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,CAAC;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG,CAAC;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAG,CAAC;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,QAAQ,GAAG,CAAC;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAG,CAAC;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAG,CAAC;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAG,CAAC;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,CAAC;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,GAAG,CAAC;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,CAAC;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAG,CAAC;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAG,GAAG;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,GAAG;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,uBAAuB,GAAG,GAAG;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAG,GAAG;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAG,GAAG;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAG,GAAG;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAG,GAAG;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAG,GAAG;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,sBAAsB,GAAG,GAAG;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAG,GAAG;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,sBAAsB,GAAG,GAAG;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAG,GAAG;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,sBAAsB,GAAG,GAAG;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAG,GAAG;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,sBAAsB,GAAG,GAAG;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,sBAAsB,GAAG,GAAG;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,GAAG,GAAG;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,2BAA2B,GAAG,GAAG;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,GAAG,GAAG;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,2BAA2B,GAAG,GAAG;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAG,CAAC;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAG,CAAC;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAG,CAAC;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAG,CAAC;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAG,CAAC;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAG,CAAC;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG,CAAC;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAG,CAAC;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAG,CAAC;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG,CAAC;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG,CAAC;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAG,CAAC;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAG,CAAC;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,GAAG,CAAC;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAG,CAAC;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,qBAAqB,GAAG,CAAC;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAG,CAAC;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAG,CAAC;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,GAAG,CAAC;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,UAAU;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,UAAU;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAG,GAAG;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,qBAAqB,GAAG,GAAG;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,qBAAqB,GAAG,GAAG;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gCAAgC,GAAG,GAAG;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gCAAgC,GAAG,GAAG;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,uBAAuB,GAAG,GAAG;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAG,IAAI;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,GAAG,IAAI;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,sBAAsB,GAAG,IAAI;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAG,IAAI;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,0BAA0B,GAAG,IAAI;AACvC,MAAMC,0BAA0B,GAAG,IAAI,CAAC,CAAC;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,yBAAyB,GAAG,IAAI;AACtC,MAAMC,yBAAyB,GAAG,IAAI,CAAC,CAAC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG,IAAI;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,yBAAyB,GAAG,IAAI;AACtC,MAAMC,yBAAyB,GAAG,IAAI,CAAC,CAAC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,wBAAwB,GAAG,IAAI;AACrC,MAAMC,wBAAwB,GAAG,IAAI,CAAC,CAAC;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,IAAI;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,QAAQ,GAAG,IAAI;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAG,IAAI;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAG,IAAI;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAG,IAAI;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAG,IAAI;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAG,IAAI;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAG,IAAI;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,qBAAqB,GAAG,IAAI;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,qBAAqB,GAAG,IAAI;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,GAAG,IAAI;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,GAAG,KAAK;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAG,IAAI;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAG,IAAI;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAG,IAAI;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAG,IAAI;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,GAAG,IAAI;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAG,IAAI;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,IAAI;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,QAAQ,GAAG,IAAI;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAG,IAAI;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,IAAI;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAG,IAAI;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,GAAG,KAAK;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,qBAAqB,GAAG,KAAK;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,qBAAqB,GAAG,KAAK;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,qBAAqB,GAAG,KAAK;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,uBAAuB,GAAG,KAAK;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,uBAAuB,GAAG,KAAK;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,wBAAwB,GAAG,KAAK;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,wBAAwB,GAAG,KAAK;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAG,KAAK;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAG,KAAK;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,GAAG,KAAK;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,GAAG,KAAK;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,GAAG,KAAK;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,GAAG,KAAK;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,GAAG,KAAK;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,GAAG,KAAK;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,GAAG,KAAK;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,GAAG,KAAK;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,GAAG,KAAK;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,qBAAqB,GAAG,KAAK;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,qBAAqB,GAAG,KAAK;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,qBAAqB,GAAG,KAAK;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,sBAAsB,GAAG,KAAK;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,sBAAsB,GAAG,KAAK;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,sBAAsB,GAAG,KAAK;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,KAAK;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,sBAAsB,GAAG,KAAK;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,wBAAwB,GAAG,KAAK;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,KAAK;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,uBAAuB,GAAG,KAAK;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,sBAAsB,GAAG,KAAK;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,6BAA6B,GAAG,KAAK;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,QAAQ,GAAG,IAAI;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAG,IAAI;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG,IAAI;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,GAAG,IAAI;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAG,IAAI;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAG,IAAI;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,GAAG,IAAI;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAG,IAAI;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,IAAI;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,wBAAwB,GAAG,IAAI;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,0BAA0B,GAAG,IAAI;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAG,CAAC;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,qBAAqB,GAAG,CAAC;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,GAAG,CAAC;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAG,IAAI;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,IAAI;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAG,IAAI;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAG,IAAI;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,qBAAqB,GAAG,CAAC;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,GAAG,CAAC;;AAE9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG,EAAE;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAG,MAAM;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,GAAG,aAAa;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAG,QAAQ;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG,MAAM;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAG,CAAC;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAG,IAAI;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,IAAI;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,GAAG,IAAI;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,GAAG,IAAI;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,sBAAsB,GAAG,KAAK;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,sBAAsB,GAAG,KAAK;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAG,IAAI;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,GAAG;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAG,GAAG;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,GAAG;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,GAAG,GAAG;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,GAAG,GAAG;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,GAAG,GAAG;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,uBAAuB,GAAG,GAAG;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAG,GAAG;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG,GAAG;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAG,GAAG;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG,GAAG;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,GAAG;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAG,GAAG;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAG,GAAG;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,GAAG,GAAG;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAG,GAAG;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAG,KAAK;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,KAAK;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAG,KAAK;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAG,KAAK;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,KAAK;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAG,KAAK;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAG,KAAK;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,KAAK;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAG,KAAK;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAG,KAAK;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAG,QAAQ;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,qBAAqB,GAAG,IAAI;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,sBAAsB,GAAG,IAAI;;AAEnC;AACA;AACA;AACA;AACA;AACA;AA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CA;AACA;AACA;EACCG,SAAS,EAAEA,SAAS;EACpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCM,WAAW,EAAEA,WAAW;EACxB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCE,IAAI,EAAEA,IAAI;EACV;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCE,IAAI,EAAEA,IAAI;EACV;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCI,QAAQ,EAAEA,QAAQ;EAClB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCG,UAAU,EAAEA,UAAU;EACtB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCC,YAAY,EAAEA,YAAY;EAC1B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCC,OAAO,EAAEA,OAAO;EAChB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCI,SAAS,EAAEA,SAAS;EACpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACCC,eAAe,EAAEA,eAAe;EAChC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACCE,YAAY,EAAEA,YAAY;EAC1B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACCG,QAAQ,EAAEA,QAAQ;EAClB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACCE,QAAQ,EAAEA,QAAQ;EAClB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACCE,YAAY,EAAEA,YAAY;EAC1B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACCC,cAAc,EAAEA,cAAc;EAC9B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACCK,eAAe,EAAEA,eAAe;EAChC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCC,4BAA4B,EAAEA,4BAA4B;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F;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,KAAK,GAAGA,KAAK;;IAElB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,SAAS,GAAGA,SAAS;;IAE1B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,SAAS,GAAGA,SAAS;;IAE1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACE,UAAU,GAAGA,UAAU;;IAE5B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACD,MAAM,GAAGA,MAAM;;IAEpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACO,cAAc,GAAG,IAAI;;IAE1B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC/X,IAAI,GAAGA,IAAI;;IAEhB;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC4K,MAAM,GAAG,IAAI1D,OAAO,CAAE,CAAC,EAAE,CAAE,CAAC;;IAEjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC8Q,MAAM,GAAG,IAAI9Q,OAAO,CAAE,CAAC,EAAE,CAAE,CAAC;;IAEjC;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACiE,MAAM,GAAG,IAAIjE,OAAO,CAAE,CAAC,EAAE,CAAE,CAAC;;IAEjC;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACoI,QAAQ,GAAG,CAAC;;IAEjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC2I,gBAAgB,GAAG,IAAI;;IAE5B;AACF;AACA;AACA;AACA;IACE,IAAI,CAACjI,MAAM,GAAG,IAAI1E,OAAO,CAAC,CAAC;;IAE3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC4M,eAAe,GAAG,IAAI;;IAE3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,gBAAgB,GAAG,KAAK;;IAE7B;AACF;AACA;AACA;AA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AACA;IACE,IAAI,CAACtK,WAAW,GAAG,IAAIsK,OAAO,CAAC,CAAC;;IAEhC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC/V,gBAAgB,GAAGud,QAAQ,CAACW,0BAA0B;;IAE3D;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,qBAAqB,GAAGZ,QAAQ,CAACa,gCAAgC,CAAC,CAAC;;IAExE;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,sBAAsB,GAAG,KAAK;;IAEnC;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAAChC,MAAM,GAAG,IAAIR,MAAM,CAAC,CAAC;;IAE1B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACyC,OAAO,GAAG,IAAI;;IAEnB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,UAAU,GAAG,KAAK;;IAEvB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,aAAa,GAAG,KAAK;;IAE1B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,aAAa,GAAG,IAAI;;IAEzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,WAAW,GAAG,CAAC;;IAEpB;AACF;AACA;AACA;AACA;IACE,IAAI,CAACC,UAAU,GAAG,EAAE;;IAEpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,mBAAmB,GAAG12B,SAAS;;IAEpC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC22B,sBAAsB,GAAG32B,SAAS;;IAEvC;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACmY,QAAQ,GAAG,CAAC,CAAC;EAEnB;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCye,cAAcA,CAAE,8EAA+E,CAAC;;EAEhG;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCC,aAAaA,CAAE,8EAA+E,CAAC;;EAE/F;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCC,cAAcA,CAAE,0DAA2D,CAAC;;EAE5E;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCC,aAAaA,CAAE,0DAA2D,CAAC;;EAE3E;AACD;AACA;AACA;AACA;AACA;EACCnd,YAAYA,CAAE/J,MAAM,EAAG;IAEtB,IAAK,IAAI,CAACiI,gBAAgB,EAAG,IAAI,CAACW,YAAY,CAAC,CAAC;IAEhD,IAAI,CAAC5I,MAAM,CAACrD,WAAW,CAAEqD,MAAO,CAAC;IAEjC,IAAI,CAACA,MAAM,CAACoiB,SAAS,CAAE,IAAI,CAACP,QAAQ,EAAE,IAAI,CAACrS,UAAU,EAAE,IAAI,CAAC/P,KAAM,CAAC;EAEpE;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCgT,eAAeA,CAAEtd,CAAC,EAAG;IAEpB,IAAI,CAACqa,UAAU,CAAC7S,WAAW,CAAExH,CAAE,CAAC;IAEhC,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCgyB,wBAAwBA,CAAEjX,IAAI,EAAExW,KAAK,EAAG;IAEvC;;IAEA,IAAI,CAAC8V,UAAU,CAACS,gBAAgB,CAAEC,IAAI,EAAExW,KAAM,CAAC;EAEhD;;EAEA;AACD;AACA;AACA;AACA;EACC0tB,oBAAoBA,CAAE1X,KAAK,EAAG;IAE7B,IAAI,CAACF,UAAU,CAACC,YAAY,CAAEC,KAAK,EAAE,IAAK,CAAC;EAE5C;;EAEA;AACD;AACA;AACA;AACA;AACA;EACC2X,qBAAqBA,CAAE50B,CAAC,EAAG;IAE1B;;IAEA,IAAI,CAAC+c,UAAU,CAACY,qBAAqB,CAAE3d,CAAE,CAAC;EAE3C;;EAEA;AACD;AACA;AACA;AACA;EACC60B,yBAAyBA,CAAEnyB,CAAC,EAAG;IAE9B;;IAEA,IAAI,CAACqa,UAAU,CAAC1X,IAAI,CAAE3C,CAAE,CAAC;EAE1B;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCoyB,YAAYA,CAAErX,IAAI,EAAExW,KAAK,EAAG;IAE3B;IACA;;IAEAgrB,GAAG,CAACzU,gBAAgB,CAAEC,IAAI,EAAExW,KAAM,CAAC;IAEnC,IAAI,CAAC8V,UAAU,CAACjX,QAAQ,CAAEmsB,GAAI,CAAC;IAE/B,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACC8C,iBAAiBA,CAAEtX,IAAI,EAAExW,KAAK,EAAG;IAEhC;IACA;IACA;;IAEAgrB,GAAG,CAACzU,gBAAgB,CAAEC,IAAI,EAAExW,KAAM,CAAC;IAEnC,IAAI,CAAC8V,UAAU,CAAC7S,WAAW,CAAE+nB,GAAI,CAAC;IAElC,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;AACA;EACC+C,OAAOA,CAAE/tB,KAAK,EAAG;IAEhB,OAAO,IAAI,CAAC6tB,YAAY,CAAEvC,MAAM,EAAEtrB,KAAM,CAAC;EAE1C;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCguB,OAAOA,CAAEhuB,KAAK,EAAG;IAEhB,OAAO,IAAI,CAAC6tB,YAAY,CAAEtC,MAAM,EAAEvrB,KAAM,CAAC;EAE1C;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCiuB,OAAOA,CAAEjuB,KAAK,EAAG;IAEhB,OAAO,IAAI,CAAC6tB,YAAY,CAAErC,MAAM,EAAExrB,KAAM,CAAC;EAE1C;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCkuB,eAAeA,CAAE1X,IAAI,EAAE2X,QAAQ,EAAG;IAEjC;IACA;;IAEApD,KAAK,CAAC3sB,IAAI,CAAEoY,IAAK,CAAC,CAACuC,eAAe,CAAE,IAAI,CAACjD,UAAW,CAAC;IAErD,IAAI,CAACqS,QAAQ,CAAC7pB,GAAG,CAAEysB,KAAK,CAACjsB,cAAc,CAAEqvB,QAAS,CAAE,CAAC;IAErD,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCC,UAAUA,CAAED,QAAQ,EAAG;IAEtB,OAAO,IAAI,CAACD,eAAe,CAAE5C,MAAM,EAAE6C,QAAS,CAAC;EAEhD;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCE,UAAUA,CAAEF,QAAQ,EAAG;IAEtB,OAAO,IAAI,CAACD,eAAe,CAAE3C,MAAM,EAAE4C,QAAS,CAAC;EAEhD;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCG,UAAUA,CAAEH,QAAQ,EAAG;IAEtB,OAAO,IAAI,CAACD,eAAe,CAAE1C,MAAM,EAAE2C,QAAS,CAAC;EAEhD;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCI,YAAYA,CAAEnR,MAAM,EAAG;IAEtB,IAAI,CAACE,iBAAiB,CAAE,IAAI,EAAE,KAAM,CAAC;IAErC,OAAOF,MAAM,CAAC/M,YAAY,CAAE,IAAI,CAAC2J,WAAY,CAAC;EAE/C;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCwU,YAAYA,CAAEpR,MAAM,EAAG;IAEtB,IAAI,CAACE,iBAAiB,CAAE,IAAI,EAAE,KAAM,CAAC;IAErC,OAAOF,MAAM,CAAC/M,YAAY,CAAE4a,KAAK,CAAC7sB,IAAI,CAAE,IAAI,CAAC4b,WAAY,CAAC,CAACrV,MAAM,CAAC,CAAE,CAAC;EAEtE;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCid,MAAMA,CAAE3oB,CAAC,EAAEM,CAAC,EAAEyW,CAAC,EAAG;IAEjB;;IAEA,IAAK/W,CAAC,CAAC2f,SAAS,EAAG;MAElBsS,OAAO,CAAC9sB,IAAI,CAAEnF,CAAE,CAAC;IAElB,CAAC,MAAM;MAENiyB,OAAO,CAAC1uB,GAAG,CAAEvD,CAAC,EAAEM,CAAC,EAAEyW,CAAE,CAAC;IAEvB;IAEA,MAAMgc,MAAM,GAAG,IAAI,CAACA,MAAM;IAE1B,IAAI,CAAC1O,iBAAiB,CAAE,IAAI,EAAE,KAAM,CAAC;IAErC6N,WAAW,CAAC1Z,qBAAqB,CAAE,IAAI,CAACuI,WAAY,CAAC;IAErD,IAAK,IAAI,CAACyU,QAAQ,IAAI,IAAI,CAACC,OAAO,EAAG;MAEpCzD,KAAK,CAACrJ,MAAM,CAAEuJ,WAAW,EAAED,OAAO,EAAE,IAAI,CAAC3E,EAAG,CAAC;IAE9C,CAAC,MAAM;MAEN0E,KAAK,CAACrJ,MAAM,CAAEsJ,OAAO,EAAEC,WAAW,EAAE,IAAI,CAAC5E,EAAG,CAAC;IAE9C;IAEA,IAAI,CAACzQ,UAAU,CAACY,qBAAqB,CAAEuU,KAAM,CAAC;IAE9C,IAAKe,MAAM,EAAG;MAEbf,KAAK,CAAC/F,eAAe,CAAE8G,MAAM,CAAChS,WAAY,CAAC;MAC3CgR,GAAG,CAACtU,qBAAqB,CAAEuU,KAAM,CAAC;MAClC,IAAI,CAACnV,UAAU,CAAC7S,WAAW,CAAE+nB,GAAG,CAACrmB,MAAM,CAAC,CAAE,CAAC;IAE5C;EAED;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCrG,GAAGA,CAAEqe,MAAM,EAAG;IAEb,IAAK5iB,SAAS,CAACtC,MAAM,GAAG,CAAC,EAAG;MAE3B,KAAM,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwC,SAAS,CAACtC,MAAM,EAAEF,CAAC,EAAG,EAAG;QAE7C,IAAI,CAAC+G,GAAG,CAAEvE,SAAS,CAAExC,CAAC,CAAG,CAAC;MAE3B;MAEA,OAAO,IAAI;IAEZ;IAEA,IAAKolB,MAAM,KAAK,IAAI,EAAG;MAEtBlgB,OAAO,CAACkyB,KAAK,CAAE,kEAAkE,EAAEhS,MAAO,CAAC;MAC3F,OAAO,IAAI;IAEZ;IAEA,IAAKA,MAAM,IAAIA,MAAM,CAACoP,UAAU,EAAG;MAElCpP,MAAM,CAACiS,gBAAgB,CAAC,CAAC;MACzBjS,MAAM,CAACqP,MAAM,GAAG,IAAI;MACpB,IAAI,CAAC/N,QAAQ,CAACrnB,IAAI,CAAE+lB,MAAO,CAAC;MAE5BA,MAAM,CAACzlB,aAAa,CAAEu0B,WAAY,CAAC;MAEnCE,gBAAgB,CAACC,KAAK,GAAGjP,MAAM;MAC/B,IAAI,CAACzlB,aAAa,CAAEy0B,gBAAiB,CAAC;MACtCA,gBAAgB,CAACC,KAAK,GAAG,IAAI;IAE9B,CAAC,MAAM;MAENnvB,OAAO,CAACkyB,KAAK,CAAE,+DAA+D,EAAEhS,MAAO,CAAC;IAEzF;IAEA,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCkS,MAAMA,CAAElS,MAAM,EAAG;IAEhB,IAAK5iB,SAAS,CAACtC,MAAM,GAAG,CAAC,EAAG;MAE3B,KAAM,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwC,SAAS,CAACtC,MAAM,EAAEF,CAAC,EAAG,EAAG;QAE7C,IAAI,CAACs3B,MAAM,CAAE90B,SAAS,CAAExC,CAAC,CAAG,CAAC;MAE9B;MAEA,OAAO,IAAI;IAEZ;IAEA,MAAMP,KAAK,GAAG,IAAI,CAACinB,QAAQ,CAACtnB,OAAO,CAAEgmB,MAAO,CAAC;IAE7C,IAAK3lB,KAAK,KAAK,CAAC,CAAC,EAAG;MAEnB2lB,MAAM,CAACqP,MAAM,GAAG,IAAI;MACpB,IAAI,CAAC/N,QAAQ,CAAChnB,MAAM,CAAED,KAAK,EAAE,CAAE,CAAC;MAEhC2lB,MAAM,CAACzlB,aAAa,CAAEw0B,aAAc,CAAC;MAErCG,kBAAkB,CAACD,KAAK,GAAGjP,MAAM;MACjC,IAAI,CAACzlB,aAAa,CAAE20B,kBAAmB,CAAC;MACxCA,kBAAkB,CAACD,KAAK,GAAG,IAAI;IAEhC;IAEA,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCgD,gBAAgBA,CAAA,EAAG;IAElB,MAAM5C,MAAM,GAAG,IAAI,CAACA,MAAM;IAE1B,IAAKA,MAAM,KAAK,IAAI,EAAG;MAEtBA,MAAM,CAAC6C,MAAM,CAAE,IAAK,CAAC;IAEtB;IAEA,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCnb,KAAKA,CAAA,EAAG;IAEP,OAAO,IAAI,CAACmb,MAAM,CAAE,GAAI,IAAI,CAAC5Q,QAAS,CAAC;EAExC;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC6Q,MAAMA,CAAEnS,MAAM,EAAG;IAEhB;;IAEA;;IAEA,IAAI,CAACW,iBAAiB,CAAE,IAAI,EAAE,KAAM,CAAC;IAErC2N,KAAK,CAAC7sB,IAAI,CAAE,IAAI,CAAC4b,WAAY,CAAC,CAACrV,MAAM,CAAC,CAAC;IAEvC,IAAKgY,MAAM,CAACqP,MAAM,KAAK,IAAI,EAAG;MAE7BrP,MAAM,CAACqP,MAAM,CAAC1O,iBAAiB,CAAE,IAAI,EAAE,KAAM,CAAC;MAE9C2N,KAAK,CAACpsB,QAAQ,CAAE8d,MAAM,CAACqP,MAAM,CAAChS,WAAY,CAAC;IAE5C;IAEA2C,MAAM,CAACtM,YAAY,CAAE4a,KAAM,CAAC;IAE5BtO,MAAM,CAACiS,gBAAgB,CAAC,CAAC;IACzBjS,MAAM,CAACqP,MAAM,GAAG,IAAI;IACpB,IAAI,CAAC/N,QAAQ,CAACrnB,IAAI,CAAE+lB,MAAO,CAAC;IAE5BA,MAAM,CAACW,iBAAiB,CAAE,KAAK,EAAE,IAAK,CAAC;IAEvCX,MAAM,CAACzlB,aAAa,CAAEu0B,WAAY,CAAC;IAEnCE,gBAAgB,CAACC,KAAK,GAAGjP,MAAM;IAC/B,IAAI,CAACzlB,aAAa,CAAEy0B,gBAAiB,CAAC;IACtCA,gBAAgB,CAACC,KAAK,GAAG,IAAI;IAE7B,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCmD,aAAaA,CAAEC,EAAE,EAAG;IAEnB,OAAO,IAAI,CAACC,mBAAmB,CAAE,IAAI,EAAED,EAAG,CAAC;EAE5C;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCE,eAAeA,CAAEpoB,IAAI,EAAG;IAEvB,OAAO,IAAI,CAACmoB,mBAAmB,CAAE,MAAM,EAAEnoB,IAAK,CAAC;EAEhD;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACCmoB,mBAAmBA,CAAEnoB,IAAI,EAAEpO,KAAK,EAAG;IAElC,IAAK,IAAI,CAAEoO,IAAI,CAAE,KAAKpO,KAAK,EAAG,OAAO,IAAI;IAEzC,KAAM,IAAInB,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,IAAI,CAACymB,QAAQ,CAACxmB,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAG,EAAG;MAExD,MAAMq0B,KAAK,GAAG,IAAI,CAAC3N,QAAQ,CAAE1mB,CAAC,CAAE;MAChC,MAAMolB,MAAM,GAAGiP,KAAK,CAACqD,mBAAmB,CAAEnoB,IAAI,EAAEpO,KAAM,CAAC;MAEvD,IAAKikB,MAAM,KAAKlmB,SAAS,EAAG;QAE3B,OAAOkmB,MAAM;MAEd;IAED;IAEA,OAAOlmB,SAAS;EAEjB;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC04B,oBAAoBA,CAAEroB,IAAI,EAAEpO,KAAK,EAAgB;IAAA,IAAd02B,MAAM,GAAAr1B,SAAA,CAAAtC,MAAA,QAAAsC,SAAA,QAAAtD,SAAA,GAAAsD,SAAA,MAAG,EAAE;IAE7C,IAAK,IAAI,CAAE+M,IAAI,CAAE,KAAKpO,KAAK,EAAG02B,MAAM,CAACx4B,IAAI,CAAE,IAAK,CAAC;IAEjD,MAAMqnB,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAE9B,KAAM,IAAI1mB,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGymB,QAAQ,CAACxmB,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAG,EAAG;MAEnD0mB,QAAQ,CAAE1mB,CAAC,CAAE,CAAC43B,oBAAoB,CAAEroB,IAAI,EAAEpO,KAAK,EAAE02B,MAAO,CAAC;IAE1D;IAEA,OAAOA,MAAM;EAEd;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCC,gBAAgBA,CAAEj4B,MAAM,EAAG;IAE1B,IAAI,CAACkmB,iBAAiB,CAAE,IAAI,EAAE,KAAM,CAAC;IAErC,OAAOlmB,MAAM,CAACqa,qBAAqB,CAAE,IAAI,CAACuI,WAAY,CAAC;EAExD;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCsV,kBAAkBA,CAAEl4B,MAAM,EAAG;IAE5B,IAAI,CAACkmB,iBAAiB,CAAE,IAAI,EAAE,KAAM,CAAC;IAErC,IAAI,CAACtD,WAAW,CAAC0O,SAAS,CAAEyC,WAAW,EAAE/zB,MAAM,EAAEg0B,QAAS,CAAC;IAE3D,OAAOh0B,MAAM;EAEd;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCm4B,aAAaA,CAAEn4B,MAAM,EAAG;IAEvB,IAAI,CAACkmB,iBAAiB,CAAE,IAAI,EAAE,KAAM,CAAC;IAErC,IAAI,CAACtD,WAAW,CAAC0O,SAAS,CAAEyC,WAAW,EAAEE,aAAa,EAAEj0B,MAAO,CAAC;IAEhE,OAAOA,MAAM;EAEd;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCo4B,iBAAiBA,CAAEp4B,MAAM,EAAG;IAE3B,IAAI,CAACkmB,iBAAiB,CAAE,IAAI,EAAE,KAAM,CAAC;IAErC,MAAMpe,CAAC,GAAG,IAAI,CAAC8a,WAAW,CAAC7a,QAAQ;IAEnC,OAAO/H,MAAM,CAACoF,GAAG,CAAE0C,CAAC,CAAE,CAAC,CAAE,EAAEA,CAAC,CAAE,CAAC,CAAE,EAAEA,CAAC,CAAE,EAAE,CAAG,CAAC,CAAC7B,SAAS,CAAC,CAAC;EAEzD;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCoyB,OAAOA,CAAE,6BAA8B,CAAC;;EAExC;AACD;AACA;AACA;AACA;AACA;AACA;EACCC,QAAQA,CAAEhX,QAAQ,EAAG;IAEpBA,QAAQ,CAAE,IAAK,CAAC;IAEhB,MAAMuF,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAE9B,KAAM,IAAI1mB,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGymB,QAAQ,CAACxmB,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAG,EAAG;MAEnD0mB,QAAQ,CAAE1mB,CAAC,CAAE,CAACm4B,QAAQ,CAAEhX,QAAS,CAAC;IAEnC;EAED;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACCiX,eAAeA,CAAEjX,QAAQ,EAAG;IAE3B,IAAK,IAAI,CAACmU,OAAO,KAAK,KAAK,EAAG;IAE9BnU,QAAQ,CAAE,IAAK,CAAC;IAEhB,MAAMuF,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAE9B,KAAM,IAAI1mB,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGymB,QAAQ,CAACxmB,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAG,EAAG;MAEnD0mB,QAAQ,CAAE1mB,CAAC,CAAE,CAACo4B,eAAe,CAAEjX,QAAS,CAAC;IAE1C;EAED;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCkX,iBAAiBA,CAAElX,QAAQ,EAAG;IAE7B,MAAMsT,MAAM,GAAG,IAAI,CAACA,MAAM;IAE1B,IAAKA,MAAM,KAAK,IAAI,EAAG;MAEtBtT,QAAQ,CAAEsT,MAAO,CAAC;MAElBA,MAAM,CAAC4D,iBAAiB,CAAElX,QAAS,CAAC;IAErC;EAED;;EAEA;AACD;AACA;AACA;EACCxJ,YAAYA,CAAA,EAAG;IAEd,IAAI,CAAC5I,MAAM,CAAC6f,OAAO,CAAE,IAAI,CAACgC,QAAQ,EAAE,IAAI,CAACrS,UAAU,EAAE,IAAI,CAAC/P,KAAM,CAAC;IAEjE,IAAI,CAAC6mB,sBAAsB,GAAG,IAAI;EAEnC;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCiD,iBAAiBA,CAAEC,KAAK,EAAG;IAE1B,IAAK,IAAI,CAACvhB,gBAAgB,EAAG,IAAI,CAACW,YAAY,CAAC,CAAC;IAEhD,IAAK,IAAI,CAAC0d,sBAAsB,IAAIkD,KAAK,EAAG;MAE3C,IAAK,IAAI,CAACpD,qBAAqB,KAAK,IAAI,EAAG;QAE1C,IAAK,IAAI,CAACV,MAAM,KAAK,IAAI,EAAG;UAE3B,IAAI,CAAChS,WAAW,CAAC5b,IAAI,CAAE,IAAI,CAACkI,MAAO,CAAC;QAErC,CAAC,MAAM;UAEN,IAAI,CAAC0T,WAAW,CAAChX,gBAAgB,CAAE,IAAI,CAACgpB,MAAM,CAAChS,WAAW,EAAE,IAAI,CAAC1T,MAAO,CAAC;QAE1E;MAED;MAEA,IAAI,CAACsmB,sBAAsB,GAAG,KAAK;MAEnCkD,KAAK,GAAG,IAAI;IAEb;;IAEA;;IAEA,MAAM7R,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAE9B,KAAM,IAAI1mB,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGymB,QAAQ,CAACxmB,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAG,EAAG;MAEnD,MAAMq0B,KAAK,GAAG3N,QAAQ,CAAE1mB,CAAC,CAAE;MAE3Bq0B,KAAK,CAACiE,iBAAiB,CAAEC,KAAM,CAAC;IAEjC;EAED;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCxS,iBAAiBA,CAAEyS,aAAa,EAAEC,cAAc,EAAG;IAElD,MAAMhE,MAAM,GAAG,IAAI,CAACA,MAAM;IAE1B,IAAK+D,aAAa,KAAK,IAAI,IAAI/D,MAAM,KAAK,IAAI,EAAG;MAEhDA,MAAM,CAAC1O,iBAAiB,CAAE,IAAI,EAAE,KAAM,CAAC;IAExC;IAEA,IAAK,IAAI,CAAC/O,gBAAgB,EAAG,IAAI,CAACW,YAAY,CAAC,CAAC;IAEhD,IAAK,IAAI,CAACwd,qBAAqB,KAAK,IAAI,EAAG;MAE1C,IAAK,IAAI,CAACV,MAAM,KAAK,IAAI,EAAG;QAE3B,IAAI,CAAChS,WAAW,CAAC5b,IAAI,CAAE,IAAI,CAACkI,MAAO,CAAC;MAErC,CAAC,MAAM;QAEN,IAAI,CAAC0T,WAAW,CAAChX,gBAAgB,CAAE,IAAI,CAACgpB,MAAM,CAAChS,WAAW,EAAE,IAAI,CAAC1T,MAAO,CAAC;MAE1E;IAED;;IAEA;;IAEA,IAAK0pB,cAAc,KAAK,IAAI,EAAG;MAE9B,MAAM/R,QAAQ,GAAG,IAAI,CAACA,QAAQ;MAE9B,KAAM,IAAI1mB,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGymB,QAAQ,CAACxmB,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAG,EAAG;QAEnD,MAAMq0B,KAAK,GAAG3N,QAAQ,CAAE1mB,CAAC,CAAE;QAE3Bq0B,KAAK,CAACtO,iBAAiB,CAAE,KAAK,EAAE,IAAK,CAAC;MAEvC;IAED;EAED;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACC5Q,MAAMA,CAAEC,IAAI,EAAG;IAEd;IACA,MAAMC,YAAY,GAAKD,IAAI,KAAKlW,SAAS,IAAI,OAAOkW,IAAI,KAAK,QAAU;IAEvE,MAAMG,MAAM,GAAG,CAAC,CAAC;;IAEjB;IACA;IACA;IACA,IAAKF,YAAY,EAAG;MAEnB;MACAD,IAAI,GAAG;QACNsjB,UAAU,EAAE,CAAC,CAAC;QACdC,SAAS,EAAE,CAAC,CAAC;QACb5gB,QAAQ,EAAE,CAAC,CAAC;QACZzC,MAAM,EAAE,CAAC,CAAC;QACVsjB,MAAM,EAAE,CAAC,CAAC;QACVC,SAAS,EAAE,CAAC,CAAC;QACblD,UAAU,EAAE,CAAC,CAAC;QACdmD,KAAK,EAAE,CAAC;MACT,CAAC;MAEDvjB,MAAM,CAACyC,QAAQ,GAAG;QACjB/C,OAAO,EAAE,GAAG;QACZlW,IAAI,EAAE,QAAQ;QACdkZ,SAAS,EAAE;MACZ,CAAC;IAEF;;IAEA;;IAEA,MAAMmN,MAAM,GAAG,CAAC,CAAC;IAEjBA,MAAM,CAACpkB,IAAI,GAAG,IAAI,CAACA,IAAI;IACvBokB,MAAM,CAACrmB,IAAI,GAAG,IAAI,CAACA,IAAI;IAEvB,IAAK,IAAI,CAACwQ,IAAI,KAAK,EAAE,EAAG6V,MAAM,CAAC7V,IAAI,GAAG,IAAI,CAACA,IAAI;IAC/C,IAAK,IAAI,CAACgmB,UAAU,KAAK,IAAI,EAAGnQ,MAAM,CAACmQ,UAAU,GAAG,IAAI;IACxD,IAAK,IAAI,CAACC,aAAa,KAAK,IAAI,EAAGpQ,MAAM,CAACoQ,aAAa,GAAG,IAAI;IAC9D,IAAK,IAAI,CAACF,OAAO,KAAK,KAAK,EAAGlQ,MAAM,CAACkQ,OAAO,GAAG,KAAK;IACpD,IAAK,IAAI,CAACG,aAAa,KAAK,KAAK,EAAGrQ,MAAM,CAACqQ,aAAa,GAAG,KAAK;IAChE,IAAK,IAAI,CAACC,WAAW,KAAK,CAAC,EAAGtQ,MAAM,CAACsQ,WAAW,GAAG,IAAI,CAACA,WAAW;IACnE,IAAK/iB,MAAM,CAACwF,IAAI,CAAE,IAAI,CAACd,QAAS,CAAC,CAACnX,MAAM,GAAG,CAAC,EAAGklB,MAAM,CAAC/N,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAE9E+N,MAAM,CAACiO,MAAM,GAAG,IAAI,CAACA,MAAM,CAACP,IAAI;IAChC1N,MAAM,CAACrW,MAAM,GAAG,IAAI,CAACA,MAAM,CAACnF,OAAO,CAAC,CAAC;IACrCwb,MAAM,CAAC4J,EAAE,GAAG,IAAI,CAACA,EAAE,CAACplB,OAAO,CAAC,CAAC;IAE7B,IAAK,IAAI,CAACoN,gBAAgB,KAAK,KAAK,EAAGoO,MAAM,CAACpO,gBAAgB,GAAG,KAAK;;IAEtE;;IAEA,IAAK,IAAI,CAACmP,eAAe,EAAG;MAE3Bf,MAAM,CAACrmB,IAAI,GAAG,eAAe;MAC7BqmB,MAAM,CAAClK,KAAK,GAAG,IAAI,CAACA,KAAK;MACzBkK,MAAM,CAAC2T,cAAc,GAAG,IAAI,CAACA,cAAc,CAAC5jB,MAAM,CAAC,CAAC;MACpD,IAAK,IAAI,CAAC6jB,aAAa,KAAK,IAAI,EAAG5T,MAAM,CAAC4T,aAAa,GAAG,IAAI,CAACA,aAAa,CAAC7jB,MAAM,CAAC,CAAC;IAEtF;IAEA,IAAK,IAAI,CAAC8jB,aAAa,EAAG;MAEzB7T,MAAM,CAACrmB,IAAI,GAAG,aAAa;MAC3BqmB,MAAM,CAAC8T,sBAAsB,GAAG,IAAI,CAACA,sBAAsB;MAC3D9T,MAAM,CAAC+T,WAAW,GAAG,IAAI,CAACA,WAAW;MAErC/T,MAAM,CAACgU,UAAU,GAAG,IAAI,CAACC,WAAW;MACpCjU,MAAM,CAACkU,cAAc,GAAG,IAAI,CAACC,eAAe;MAE5CnU,MAAM,CAACoU,YAAY,GAAG,IAAI,CAACC,aAAa,CAACC,GAAG,CAAEC,IAAI,KAAM;QACvD,GAAGA,IAAI;QACPrT,WAAW,EAAEqT,IAAI,CAACrT,WAAW,GAAG;UAC/BllB,GAAG,EAAEu4B,IAAI,CAACrT,WAAW,CAACllB,GAAG,CAACwI,OAAO,CAAC,CAAC;UACnCvI,GAAG,EAAEs4B,IAAI,CAACrT,WAAW,CAACjlB,GAAG,CAACuI,OAAO,CAAC;QACnC,CAAC,GAAG1K,SAAS;QACb06B,cAAc,EAAED,IAAI,CAACC,cAAc,GAAG;UACrCjW,MAAM,EAAEgW,IAAI,CAACC,cAAc,CAACjW,MAAM;UAClCzZ,MAAM,EAAEyvB,IAAI,CAACC,cAAc,CAAC1vB,MAAM,CAACN,OAAO,CAAC;QAC5C,CAAC,GAAG1K;MACL,CAAC,CAAG,CAAC;MACLkmB,MAAM,CAACyU,YAAY,GAAG,IAAI,CAACC,aAAa,CAACJ,GAAG,CAAEC,IAAI,KAAM;QAAE,GAAGA;MAAK,CAAC,CAAG,CAAC;MAEvEvU,MAAM,CAAC2U,oBAAoB,GAAG,IAAI,CAACC,qBAAqB,CAACj6B,KAAK,CAAC,CAAC;MAChEqlB,MAAM,CAAC6U,oBAAoB,GAAG,IAAI,CAACC,qBAAqB,CAACn6B,KAAK,CAAC,CAAC;MAEhEqlB,MAAM,CAAC+U,cAAc,GAAG,IAAI,CAACC,eAAe;MAC5ChV,MAAM,CAACiV,eAAe,GAAG,IAAI,CAACC,gBAAgB;MAC9ClV,MAAM,CAACmV,aAAa,GAAG,IAAI,CAACC,cAAc;MAE1CpV,MAAM,CAACqV,gBAAgB,GAAG,IAAI,CAACC,iBAAiB;MAChDtV,MAAM,CAACuV,cAAc,GAAG,IAAI,CAACC,eAAe;MAC5CxV,MAAM,CAACyV,aAAa,GAAG,IAAI,CAACC,cAAc;MAE1C1V,MAAM,CAAC2V,mBAAmB,GAAG,IAAI,CAACC,oBAAoB;MAEtD5V,MAAM,CAAC6V,eAAe,GAAG,IAAI,CAACC,gBAAgB,CAAC/lB,MAAM,CAAEC,IAAK,CAAC;MAE7DgQ,MAAM,CAAC+V,eAAe,GAAG,IAAI,CAACC,gBAAgB,CAACjmB,MAAM,CAAEC,IAAK,CAAC;MAE7D,IAAK,IAAI,CAACimB,cAAc,KAAK,IAAI,EAAG;QAEnCjW,MAAM,CAACkW,aAAa,GAAG,IAAI,CAACD,cAAc,CAAClmB,MAAM,CAAEC,IAAK,CAAC;MAE1D;MAEA,IAAK,IAAI,CAACwkB,cAAc,KAAK,IAAI,EAAG;QAEnCxU,MAAM,CAACwU,cAAc,GAAG;UACvB1vB,MAAM,EAAE,IAAI,CAAC0vB,cAAc,CAAC1vB,MAAM,CAACN,OAAO,CAAC,CAAC;UAC5C+Z,MAAM,EAAE,IAAI,CAACiW,cAAc,CAACjW;QAC7B,CAAC;MAEF;MAEA,IAAK,IAAI,CAAC2C,WAAW,KAAK,IAAI,EAAG;QAEhClB,MAAM,CAACkB,WAAW,GAAG;UACpBllB,GAAG,EAAE,IAAI,CAACklB,WAAW,CAACllB,GAAG,CAACwI,OAAO,CAAC,CAAC;UACnCvI,GAAG,EAAE,IAAI,CAACilB,WAAW,CAACjlB,GAAG,CAACuI,OAAO,CAAC;QACnC,CAAC;MAEF;IAED;;IAEA;;IAEA,SAAS2xB,SAASA,CAAEC,OAAO,EAAEC,OAAO,EAAG;MAEtC,IAAKD,OAAO,CAAEC,OAAO,CAACz6B,IAAI,CAAE,KAAK9B,SAAS,EAAG;QAE5Cs8B,OAAO,CAAEC,OAAO,CAACz6B,IAAI,CAAE,GAAGy6B,OAAO,CAACtmB,MAAM,CAAEC,IAAK,CAAC;MAEjD;MAEA,OAAOqmB,OAAO,CAACz6B,IAAI;IAEpB;IAEA,IAAK,IAAI,CAAC06B,OAAO,EAAG;MAEnB,IAAK,IAAI,CAACC,UAAU,EAAG;QAEtB,IAAK,IAAI,CAACA,UAAU,CAACC,OAAO,EAAG;UAE9BxW,MAAM,CAACuW,UAAU,GAAG,IAAI,CAACA,UAAU,CAACxmB,MAAM,CAAC,CAAC;QAE7C,CAAC,MAAM,IAAK,IAAI,CAACwmB,UAAU,CAACjlB,SAAS,EAAG;UAEvC0O,MAAM,CAACuW,UAAU,GAAG,IAAI,CAACA,UAAU,CAACxmB,MAAM,CAAEC,IAAK,CAAC,CAACpU,IAAI;QAExD;MAED;MAEA,IAAK,IAAI,CAAC66B,WAAW,IAAI,IAAI,CAACA,WAAW,CAACnlB,SAAS,IAAI,IAAI,CAACmlB,WAAW,CAACrkB,qBAAqB,KAAK,IAAI,EAAG;QAExG4N,MAAM,CAACyW,WAAW,GAAG,IAAI,CAACA,WAAW,CAAC1mB,MAAM,CAAEC,IAAK,CAAC,CAACpU,IAAI;MAE1D;IAED,CAAC,MAAM,IAAK,IAAI,CAAColB,MAAM,IAAI,IAAI,CAAC0V,MAAM,IAAI,IAAI,CAACC,QAAQ,EAAG;MAEzD3W,MAAM,CAACY,QAAQ,GAAGuV,SAAS,CAAEnmB,IAAI,CAACsjB,UAAU,EAAE,IAAI,CAAC1S,QAAS,CAAC;MAE7D,MAAMgW,UAAU,GAAG,IAAI,CAAChW,QAAQ,CAACgW,UAAU;MAE3C,IAAKA,UAAU,KAAK98B,SAAS,IAAI88B,UAAU,CAACpD,MAAM,KAAK15B,SAAS,EAAG;QAElE,MAAM05B,MAAM,GAAGoD,UAAU,CAACpD,MAAM;QAEhC,IAAKnjB,KAAK,CAACC,OAAO,CAAEkjB,MAAO,CAAC,EAAG;UAE9B,KAAM,IAAI54B,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG24B,MAAM,CAAC14B,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAG,EAAG;YAEjD,MAAMi8B,KAAK,GAAGrD,MAAM,CAAE54B,CAAC,CAAE;YAEzBu7B,SAAS,CAAEnmB,IAAI,CAACwjB,MAAM,EAAEqD,KAAM,CAAC;UAEhC;QAED,CAAC,MAAM;UAENV,SAAS,CAAEnmB,IAAI,CAACwjB,MAAM,EAAEA,MAAO,CAAC;QAEjC;MAED;IAED;IAEA,IAAK,IAAI,CAACsD,aAAa,EAAG;MAEzB9W,MAAM,CAAC+W,QAAQ,GAAG,IAAI,CAACA,QAAQ;MAC/B/W,MAAM,CAACgX,UAAU,GAAG,IAAI,CAACA,UAAU,CAACxyB,OAAO,CAAC,CAAC;MAE7C,IAAK,IAAI,CAACyyB,QAAQ,KAAKn9B,SAAS,EAAG;QAElCq8B,SAAS,CAAEnmB,IAAI,CAACyjB,SAAS,EAAE,IAAI,CAACwD,QAAS,CAAC;QAE1CjX,MAAM,CAACiX,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACr7B,IAAI;MAErC;IAED;IAEA,IAAK,IAAI,CAACs7B,QAAQ,KAAKp9B,SAAS,EAAG;MAElC,IAAKuW,KAAK,CAACC,OAAO,CAAE,IAAI,CAAC4mB,QAAS,CAAC,EAAG;QAErC,MAAMC,KAAK,GAAG,EAAE;QAEhB,KAAM,IAAIv8B,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,IAAI,CAACq8B,QAAQ,CAACp8B,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAG,EAAG;UAExDu8B,KAAK,CAACl9B,IAAI,CAAEk8B,SAAS,CAAEnmB,IAAI,CAACujB,SAAS,EAAE,IAAI,CAAC2D,QAAQ,CAAEt8B,CAAC,CAAG,CAAE,CAAC;QAE9D;QAEAolB,MAAM,CAACkX,QAAQ,GAAGC,KAAK;MAExB,CAAC,MAAM;QAENnX,MAAM,CAACkX,QAAQ,GAAGf,SAAS,CAAEnmB,IAAI,CAACujB,SAAS,EAAE,IAAI,CAAC2D,QAAS,CAAC;MAE7D;IAED;;IAEA;;IAEA,IAAK,IAAI,CAAC5V,QAAQ,CAACxmB,MAAM,GAAG,CAAC,EAAG;MAE/BklB,MAAM,CAACsB,QAAQ,GAAG,EAAE;MAEpB,KAAM,IAAI1mB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC0mB,QAAQ,CAACxmB,MAAM,EAAEF,CAAC,EAAG,EAAG;QAEjDolB,MAAM,CAACsB,QAAQ,CAACrnB,IAAI,CAAE,IAAI,CAACqnB,QAAQ,CAAE1mB,CAAC,CAAE,CAACmV,MAAM,CAAEC,IAAK,CAAC,CAACgQ,MAAO,CAAC;MAEjE;IAED;;IAEA;;IAEA,IAAK,IAAI,CAACuQ,UAAU,CAACz1B,MAAM,GAAG,CAAC,EAAG;MAEjCklB,MAAM,CAACuQ,UAAU,GAAG,EAAE;MAEtB,KAAM,IAAI31B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC21B,UAAU,CAACz1B,MAAM,EAAEF,CAAC,EAAG,EAAG;QAEnD,MAAMw8B,SAAS,GAAG,IAAI,CAAC7G,UAAU,CAAE31B,CAAC,CAAE;QAEtColB,MAAM,CAACuQ,UAAU,CAACt2B,IAAI,CAAEk8B,SAAS,CAAEnmB,IAAI,CAACugB,UAAU,EAAE6G,SAAU,CAAE,CAAC;MAElE;IAED;IAEA,IAAKnnB,YAAY,EAAG;MAEnB,MAAMqjB,UAAU,GAAG+D,gBAAgB,CAAErnB,IAAI,CAACsjB,UAAW,CAAC;MACtD,MAAMC,SAAS,GAAG8D,gBAAgB,CAAErnB,IAAI,CAACujB,SAAU,CAAC;MACpD,MAAM5gB,QAAQ,GAAG0kB,gBAAgB,CAAErnB,IAAI,CAAC2C,QAAS,CAAC;MAClD,MAAMzC,MAAM,GAAGmnB,gBAAgB,CAAErnB,IAAI,CAACE,MAAO,CAAC;MAC9C,MAAMsjB,MAAM,GAAG6D,gBAAgB,CAAErnB,IAAI,CAACwjB,MAAO,CAAC;MAC9C,MAAMC,SAAS,GAAG4D,gBAAgB,CAAErnB,IAAI,CAACyjB,SAAU,CAAC;MACpD,MAAMlD,UAAU,GAAG8G,gBAAgB,CAAErnB,IAAI,CAACugB,UAAW,CAAC;MACtD,MAAMmD,KAAK,GAAG2D,gBAAgB,CAAErnB,IAAI,CAAC0jB,KAAM,CAAC;MAE5C,IAAKJ,UAAU,CAACx4B,MAAM,GAAG,CAAC,EAAGqV,MAAM,CAACmjB,UAAU,GAAGA,UAAU;MAC3D,IAAKC,SAAS,CAACz4B,MAAM,GAAG,CAAC,EAAGqV,MAAM,CAACojB,SAAS,GAAGA,SAAS;MACxD,IAAK5gB,QAAQ,CAAC7X,MAAM,GAAG,CAAC,EAAGqV,MAAM,CAACwC,QAAQ,GAAGA,QAAQ;MACrD,IAAKzC,MAAM,CAACpV,MAAM,GAAG,CAAC,EAAGqV,MAAM,CAACD,MAAM,GAAGA,MAAM;MAC/C,IAAKsjB,MAAM,CAAC14B,MAAM,GAAG,CAAC,EAAGqV,MAAM,CAACqjB,MAAM,GAAGA,MAAM;MAC/C,IAAKC,SAAS,CAAC34B,MAAM,GAAG,CAAC,EAAGqV,MAAM,CAACsjB,SAAS,GAAGA,SAAS;MACxD,IAAKlD,UAAU,CAACz1B,MAAM,GAAG,CAAC,EAAGqV,MAAM,CAACogB,UAAU,GAAGA,UAAU;MAC3D,IAAKmD,KAAK,CAAC54B,MAAM,GAAG,CAAC,EAAGqV,MAAM,CAACujB,KAAK,GAAGA,KAAK;IAE7C;IAEAvjB,MAAM,CAAC6P,MAAM,GAAGA,MAAM;IAEtB,OAAO7P,MAAM;;IAEb;IACA;IACA;IACA,SAASknB,gBAAgBA,CAAEC,KAAK,EAAG;MAElC,MAAMC,MAAM,GAAG,EAAE;MACjB,KAAM,MAAMC,GAAG,IAAIF,KAAK,EAAG;QAE1B,MAAM/nB,IAAI,GAAG+nB,KAAK,CAAEE,GAAG,CAAE;QACzB,OAAOjoB,IAAI,CAACqD,QAAQ;QACpB2kB,MAAM,CAACt9B,IAAI,CAAEsV,IAAK,CAAC;MAEpB;MAEA,OAAOgoB,MAAM;IAEd;EAED;;EAEA;AACD;AACA;AACA;AACA;AACA;EACC/1B,KAAKA,CAAEi2B,SAAS,EAAG;IAElB,OAAO,IAAI,IAAI,CAACx3B,WAAW,CAAC,CAAC,CAACwB,IAAI,CAAE,IAAI,EAAEg2B,SAAU,CAAC;EAEtD;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCh2B,IAAIA,CAAE8P,MAAM,EAAqB;IAAA,IAAnBkmB,SAAS,GAAAr6B,SAAA,CAAAtC,MAAA,QAAAsC,SAAA,QAAAtD,SAAA,GAAAsD,SAAA,MAAG,IAAI;IAE7B,IAAI,CAAC+M,IAAI,GAAGoH,MAAM,CAACpH,IAAI;IAEvB,IAAI,CAACyf,EAAE,CAACnoB,IAAI,CAAE8P,MAAM,CAACqY,EAAG,CAAC;IAEzB,IAAI,CAAC4B,QAAQ,CAAC/pB,IAAI,CAAE8P,MAAM,CAACia,QAAS,CAAC;IACrC,IAAI,CAACviB,QAAQ,CAAC/J,KAAK,GAAGqS,MAAM,CAACtI,QAAQ,CAAC/J,KAAK;IAC3C,IAAI,CAACia,UAAU,CAAC1X,IAAI,CAAE8P,MAAM,CAAC4H,UAAW,CAAC;IACzC,IAAI,CAAC/P,KAAK,CAAC3H,IAAI,CAAE8P,MAAM,CAACnI,KAAM,CAAC;IAE/B,IAAI,CAACO,MAAM,CAAClI,IAAI,CAAE8P,MAAM,CAAC5H,MAAO,CAAC;IACjC,IAAI,CAAC0T,WAAW,CAAC5b,IAAI,CAAE8P,MAAM,CAAC8L,WAAY,CAAC;IAE3C,IAAI,CAACzL,gBAAgB,GAAGL,MAAM,CAACK,gBAAgB;IAE/C,IAAI,CAACme,qBAAqB,GAAGxe,MAAM,CAACwe,qBAAqB;IACzD,IAAI,CAACE,sBAAsB,GAAG1e,MAAM,CAAC0e,sBAAsB;IAE3D,IAAI,CAAChC,MAAM,CAACP,IAAI,GAAGnc,MAAM,CAAC0c,MAAM,CAACP,IAAI;IACrC,IAAI,CAACwC,OAAO,GAAG3e,MAAM,CAAC2e,OAAO;IAE7B,IAAI,CAACC,UAAU,GAAG5e,MAAM,CAAC4e,UAAU;IACnC,IAAI,CAACC,aAAa,GAAG7e,MAAM,CAAC6e,aAAa;IAEzC,IAAI,CAACC,aAAa,GAAG9e,MAAM,CAAC8e,aAAa;IACzC,IAAI,CAACC,WAAW,GAAG/e,MAAM,CAAC+e,WAAW;IAErC,IAAI,CAACC,UAAU,GAAGhf,MAAM,CAACgf,UAAU,CAAC51B,KAAK,CAAC,CAAC;IAE3C,IAAI,CAACsX,QAAQ,GAAGO,IAAI,CAACC,KAAK,CAAED,IAAI,CAACE,SAAS,CAAEnB,MAAM,CAACU,QAAS,CAAE,CAAC;IAE/D,IAAKwlB,SAAS,KAAK,IAAI,EAAG;MAEzB,KAAM,IAAI78B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2W,MAAM,CAAC+P,QAAQ,CAACxmB,MAAM,EAAEF,CAAC,EAAG,EAAG;QAEnD,MAAMq0B,KAAK,GAAG1d,MAAM,CAAC+P,QAAQ,CAAE1mB,CAAC,CAAE;QAClC,IAAI,CAAC+G,GAAG,CAAEstB,KAAK,CAACztB,KAAK,CAAC,CAAE,CAAC;MAE1B;IAED;IAEA,OAAO,IAAI;EAEZ;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA2tB,QAAQ,CAACG,UAAU,GAAG,aAAc,IAAItT,OAAO,CAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAmT,QAAQ,CAACW,0BAA0B,GAAG,IAAI;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAX,QAAQ,CAACa,gCAAgC,GAAG,IAAI;AAEhD,MAAM0H,KAAK,GAAG,aAAc,IAAI1b,OAAO,CAAC,CAAC;AACzC,MAAM2b,KAAK,GAAG,aAAc,IAAI3b,OAAO,CAAC,CAAC;AACzC,MAAM4b,KAAK,GAAG,aAAc,IAAI5b,OAAO,CAAC,CAAC;AACzC,MAAM6b,KAAK,GAAG,aAAc,IAAI7b,OAAO,CAAC,CAAC;AAEzC,MAAM8b,IAAI,GAAG,aAAc,IAAI9b,OAAO,CAAC,CAAC;AACxC,MAAM+b,IAAI,GAAG,aAAc,IAAI/b,OAAO,CAAC,CAAC;AACxC,MAAMgc,IAAI,GAAG,aAAc,IAAIhc,OAAO,CAAC,CAAC;AACxC,MAAMic,IAAI,GAAG,aAAc,IAAIjc,OAAO,CAAC,CAAC;AACxC,MAAMkc,IAAI,GAAG,aAAc,IAAIlc,OAAO,CAAC,CAAC;AACxC,MAAMmc,IAAI,GAAG,aAAc,IAAInc,OAAO,CAAC,CAAC;AAExC,MAAMoc,IAAI,GAAG,aAAc,IAAIhlB,OAAO,CAAC,CAAC;AACxC,MAAMilB,IAAI,GAAG,aAAc,IAAIjlB,OAAO,CAAC,CAAC;AACxC,MAAMklB,IAAI,GAAG,aAAc,IAAIllB,OAAO,CAAC,CAAC;;AAExC;AACA;AACA;AACA,MAAMmlB,QAAQ,CAAC;EAEd;AACD;AACA;AACA;AACA;AACA;AACA;EACCt4B,WAAWA,CAAA,EAA4D;IAAA,IAA1DlB,CAAC,GAAA3B,SAAA,CAAAtC,MAAA,QAAAsC,SAAA,QAAAtD,SAAA,GAAAsD,SAAA,MAAG,IAAI4e,OAAO,CAAC,CAAC;IAAA,IAAEhd,CAAC,GAAA5B,SAAA,CAAAtC,MAAA,QAAAsC,SAAA,QAAAtD,SAAA,GAAAsD,SAAA,MAAG,IAAI4e,OAAO,CAAC,CAAC;IAAA,IAAE/c,CAAC,GAAA7B,SAAA,CAAAtC,MAAA,QAAAsC,SAAA,QAAAtD,SAAA,GAAAsD,SAAA,MAAG,IAAI4e,OAAO,CAAC,CAAC;IAEnE;AACF;AACA;AACA;AACA;IACE,IAAI,CAACjd,CAAC,GAAGA,CAAC;;IAEV;AACF;AACA;AACA;AACA;IACE,IAAI,CAACC,CAAC,GAAGA,CAAC;;IAEV;AACF;AACA;AACA;AACA;IACE,IAAI,CAACC,CAAC,GAAGA,CAAC;EAEX;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC,OAAOu5B,SAASA,CAAEz5B,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAExE,MAAM,EAAG;IAEnCA,MAAM,CAACwH,UAAU,CAAEhD,CAAC,EAAED,CAAE,CAAC;IACzB04B,KAAK,CAACz1B,UAAU,CAAElD,CAAC,EAAEC,CAAE,CAAC;IACxBvE,MAAM,CAACwI,KAAK,CAAEy0B,KAAM,CAAC;IAErB,MAAMe,cAAc,GAAGh+B,MAAM,CAACyI,QAAQ,CAAC,CAAC;IACxC,IAAKu1B,cAAc,GAAG,CAAC,EAAG;MAEzB,OAAOh+B,MAAM,CAAC0H,cAAc,CAAE,CAAC,GAAGhH,IAAI,CAACgI,IAAI,CAAEs1B,cAAe,CAAE,CAAC;IAEhE;IAEA,OAAOh+B,MAAM,CAACoF,GAAG,CAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC;EAE7B;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC,OAAO64B,YAAYA,CAAEnY,KAAK,EAAExhB,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAExE,MAAM,EAAG;IAE7C;;IAEAi9B,KAAK,CAACz1B,UAAU,CAAEhD,CAAC,EAAEF,CAAE,CAAC;IACxB44B,KAAK,CAAC11B,UAAU,CAAEjD,CAAC,EAAED,CAAE,CAAC;IACxB64B,KAAK,CAAC31B,UAAU,CAAEse,KAAK,EAAExhB,CAAE,CAAC;IAE5B,MAAM45B,KAAK,GAAGjB,KAAK,CAAC10B,GAAG,CAAE00B,KAAM,CAAC;IAChC,MAAMkB,KAAK,GAAGlB,KAAK,CAAC10B,GAAG,CAAE20B,KAAM,CAAC;IAChC,MAAMkB,KAAK,GAAGnB,KAAK,CAAC10B,GAAG,CAAE40B,KAAM,CAAC;IAChC,MAAMkB,KAAK,GAAGnB,KAAK,CAAC30B,GAAG,CAAE20B,KAAM,CAAC;IAChC,MAAMoB,KAAK,GAAGpB,KAAK,CAAC30B,GAAG,CAAE40B,KAAM,CAAC;IAEhC,MAAMoB,KAAK,GAAKL,KAAK,GAAGG,KAAK,GAAGF,KAAK,GAAGA,KAAO;;IAE/C;IACA,IAAKI,KAAK,KAAK,CAAC,EAAG;MAElBv+B,MAAM,CAACoF,GAAG,CAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC;MACrB,OAAO,IAAI;IAEZ;IAEA,MAAMo5B,QAAQ,GAAG,CAAC,GAAGD,KAAK;IAC1B,MAAM/Z,CAAC,GAAG,CAAE6Z,KAAK,GAAGD,KAAK,GAAGD,KAAK,GAAGG,KAAK,IAAKE,QAAQ;IACtD,MAAMv3B,CAAC,GAAG,CAAEi3B,KAAK,GAAGI,KAAK,GAAGH,KAAK,GAAGC,KAAK,IAAKI,QAAQ;;IAEtD;IACA,OAAOx+B,MAAM,CAACoF,GAAG,CAAE,CAAC,GAAGof,CAAC,GAAGvd,CAAC,EAAEA,CAAC,EAAEud,CAAE,CAAC;EAErC;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC,OAAOsC,aAAaA,CAAEhB,KAAK,EAAExhB,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAG;IAEtC;IACA,IAAK,IAAI,CAACy5B,YAAY,CAAEnY,KAAK,EAAExhB,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE44B,KAAM,CAAC,KAAK,IAAI,EAAG;MAE1D,OAAO,KAAK;IAEb;IAEA,OAASA,KAAK,CAACv7B,CAAC,IAAI,CAAC,IAAQu7B,KAAK,CAACj7B,CAAC,IAAI,CAAG,IAAQi7B,KAAK,CAACv7B,CAAC,GAAGu7B,KAAK,CAACj7B,CAAC,IAAM,CAAG;EAE9E;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC,OAAOs8B,gBAAgBA,CAAE3Y,KAAK,EAAEgD,EAAE,EAAEC,EAAE,EAAE2V,EAAE,EAAEh1B,EAAE,EAAEC,EAAE,EAAEg1B,EAAE,EAAE3+B,MAAM,EAAG;IAEhE,IAAK,IAAI,CAACi+B,YAAY,CAAEnY,KAAK,EAAEgD,EAAE,EAAEC,EAAE,EAAE2V,EAAE,EAAEtB,KAAM,CAAC,KAAK,IAAI,EAAG;MAE7Dp9B,MAAM,CAAC6B,CAAC,GAAG,CAAC;MACZ7B,MAAM,CAACmC,CAAC,GAAG,CAAC;MACZ,IAAK,GAAG,IAAInC,MAAM,EAAGA,MAAM,CAAC4Y,CAAC,GAAG,CAAC;MACjC,IAAK,GAAG,IAAI5Y,MAAM,EAAGA,MAAM,CAAC6Y,CAAC,GAAG,CAAC;MACjC,OAAO,IAAI;IAEZ;IAEA7Y,MAAM,CAACyG,SAAS,CAAE,CAAE,CAAC;IACrBzG,MAAM,CAACqH,eAAe,CAAEqC,EAAE,EAAE0zB,KAAK,CAACv7B,CAAE,CAAC;IACrC7B,MAAM,CAACqH,eAAe,CAAEsC,EAAE,EAAEyzB,KAAK,CAACj7B,CAAE,CAAC;IACrCnC,MAAM,CAACqH,eAAe,CAAEs3B,EAAE,EAAEvB,KAAK,CAACxkB,CAAE,CAAC;IAErC,OAAO5Y,MAAM;EAEd;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC,OAAO4+B,wBAAwBA,CAAEC,IAAI,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,SAAS,EAAEj/B,MAAM,EAAG;IAEtE29B,IAAI,CAACl3B,SAAS,CAAE,CAAE,CAAC;IACnBm3B,IAAI,CAACn3B,SAAS,CAAE,CAAE,CAAC;IACnBo3B,IAAI,CAACp3B,SAAS,CAAE,CAAE,CAAC;IAEnBk3B,IAAI,CAAC3zB,mBAAmB,CAAE60B,IAAI,EAAEC,EAAG,CAAC;IACpClB,IAAI,CAAC5zB,mBAAmB,CAAE60B,IAAI,EAAEE,EAAG,CAAC;IACpClB,IAAI,CAAC7zB,mBAAmB,CAAE60B,IAAI,EAAEG,EAAG,CAAC;IAEpCh/B,MAAM,CAACyG,SAAS,CAAE,CAAE,CAAC;IACrBzG,MAAM,CAACqH,eAAe,CAAEs2B,IAAI,EAAEsB,SAAS,CAACp9B,CAAE,CAAC;IAC3C7B,MAAM,CAACqH,eAAe,CAAEu2B,IAAI,EAAEqB,SAAS,CAAC98B,CAAE,CAAC;IAC3CnC,MAAM,CAACqH,eAAe,CAAEw2B,IAAI,EAAEoB,SAAS,CAACrmB,CAAE,CAAC;IAE3C,OAAO5Y,MAAM;EAEd;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC,OAAOk/B,aAAaA,CAAE56B,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE6lB,SAAS,EAAG;IAE1C4S,KAAK,CAACz1B,UAAU,CAAEhD,CAAC,EAAED,CAAE,CAAC;IACxB24B,KAAK,CAAC11B,UAAU,CAAElD,CAAC,EAAEC,CAAE,CAAC;;IAExB;IACA,OAAS04B,KAAK,CAACz0B,KAAK,CAAE00B,KAAM,CAAC,CAAC30B,GAAG,CAAE8hB,SAAU,CAAC,GAAG,CAAC,GAAK,IAAI,GAAG,KAAK;EAEpE;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACCjlB,GAAGA,CAAEd,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAG;IAEd,IAAI,CAACF,CAAC,CAAC0C,IAAI,CAAE1C,CAAE,CAAC;IAChB,IAAI,CAACC,CAAC,CAACyC,IAAI,CAAEzC,CAAE,CAAC;IAChB,IAAI,CAACC,CAAC,CAACwC,IAAI,CAAExC,CAAE,CAAC;IAEhB,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC26B,uBAAuBA,CAAEja,MAAM,EAAEka,EAAE,EAAEN,EAAE,EAAEC,EAAE,EAAG;IAE7C,IAAI,CAACz6B,CAAC,CAAC0C,IAAI,CAAEke,MAAM,CAAEka,EAAE,CAAG,CAAC;IAC3B,IAAI,CAAC76B,CAAC,CAACyC,IAAI,CAAEke,MAAM,CAAE4Z,EAAE,CAAG,CAAC;IAC3B,IAAI,CAACt6B,CAAC,CAACwC,IAAI,CAAEke,MAAM,CAAE6Z,EAAE,CAAG,CAAC;IAE3B,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCM,0BAA0BA,CAAEp1B,SAAS,EAAEm1B,EAAE,EAAEN,EAAE,EAAEC,EAAE,EAAG;IAEnD,IAAI,CAACz6B,CAAC,CAAC0F,mBAAmB,CAAEC,SAAS,EAAEm1B,EAAG,CAAC;IAC3C,IAAI,CAAC76B,CAAC,CAACyF,mBAAmB,CAAEC,SAAS,EAAE60B,EAAG,CAAC;IAC3C,IAAI,CAACt6B,CAAC,CAACwF,mBAAmB,CAAEC,SAAS,EAAE80B,EAAG,CAAC;IAE3C,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;EACCh4B,KAAKA,CAAA,EAAG;IAEP,OAAO,IAAI,IAAI,CAACvB,WAAW,CAAC,CAAC,CAACwB,IAAI,CAAE,IAAK,CAAC;EAE3C;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCA,IAAIA,CAAEygB,QAAQ,EAAG;IAEhB,IAAI,CAACnjB,CAAC,CAAC0C,IAAI,CAAEygB,QAAQ,CAACnjB,CAAE,CAAC;IACzB,IAAI,CAACC,CAAC,CAACyC,IAAI,CAAEygB,QAAQ,CAACljB,CAAE,CAAC;IACzB,IAAI,CAACC,CAAC,CAACwC,IAAI,CAAEygB,QAAQ,CAACjjB,CAAE,CAAC;IAEzB,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;EACC86B,OAAOA,CAAA,EAAG;IAETrC,KAAK,CAACz1B,UAAU,CAAE,IAAI,CAAChD,CAAC,EAAE,IAAI,CAACD,CAAE,CAAC;IAClC24B,KAAK,CAAC11B,UAAU,CAAE,IAAI,CAAClD,CAAC,EAAE,IAAI,CAACC,CAAE,CAAC;IAElC,OAAO04B,KAAK,CAACz0B,KAAK,CAAE00B,KAAM,CAAC,CAAC78B,MAAM,CAAC,CAAC,GAAG,GAAG;EAE3C;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCk/B,WAAWA,CAAEv/B,MAAM,EAAG;IAErB,OAAOA,MAAM,CAACoH,UAAU,CAAE,IAAI,CAAC9C,CAAC,EAAE,IAAI,CAACC,CAAE,CAAC,CAAC2C,GAAG,CAAE,IAAI,CAAC1C,CAAE,CAAC,CAACkD,cAAc,CAAE,CAAC,GAAG,CAAE,CAAC;EAEjF;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCq2B,SAASA,CAAE/9B,MAAM,EAAG;IAEnB,OAAO89B,QAAQ,CAACC,SAAS,CAAE,IAAI,CAACz5B,CAAC,EAAE,IAAI,CAACC,CAAC,EAAE,IAAI,CAACC,CAAC,EAAExE,MAAO,CAAC;EAE5D;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCw/B,QAAQA,CAAEx/B,MAAM,EAAG;IAElB,OAAOA,MAAM,CAACy/B,qBAAqB,CAAE,IAAI,CAACn7B,CAAC,EAAE,IAAI,CAACC,CAAC,EAAE,IAAI,CAACC,CAAE,CAAC;EAE9D;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACCy5B,YAAYA,CAAEnY,KAAK,EAAE9lB,MAAM,EAAG;IAE7B,OAAO89B,QAAQ,CAACG,YAAY,CAAEnY,KAAK,EAAE,IAAI,CAACxhB,CAAC,EAAE,IAAI,CAACC,CAAC,EAAE,IAAI,CAACC,CAAC,EAAExE,MAAO,CAAC;EAEtE;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCy+B,gBAAgBA,CAAE3Y,KAAK,EAAEpc,EAAE,EAAEC,EAAE,EAAEg1B,EAAE,EAAE3+B,MAAM,EAAG;IAE7C,OAAO89B,QAAQ,CAACW,gBAAgB,CAAE3Y,KAAK,EAAE,IAAI,CAACxhB,CAAC,EAAE,IAAI,CAACC,CAAC,EAAE,IAAI,CAACC,CAAC,EAAEkF,EAAE,EAAEC,EAAE,EAAEg1B,EAAE,EAAE3+B,MAAO,CAAC;EAEtF;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACC8mB,aAAaA,CAAEhB,KAAK,EAAG;IAEtB,OAAOgY,QAAQ,CAAChX,aAAa,CAAEhB,KAAK,EAAE,IAAI,CAACxhB,CAAC,EAAE,IAAI,CAACC,CAAC,EAAE,IAAI,CAACC,CAAE,CAAC;EAE/D;;EAEA;AACD;AACA;AACA;AACA;AACA;EACC06B,aAAaA,CAAE7U,SAAS,EAAG;IAE1B,OAAOyT,QAAQ,CAACoB,aAAa,CAAE,IAAI,CAAC56B,CAAC,EAAE,IAAI,CAACC,CAAC,EAAE,IAAI,CAACC,CAAC,EAAE6lB,SAAU,CAAC;EAEnE;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCpD,aAAaA,CAAEvB,GAAG,EAAG;IAEpB,OAAOA,GAAG,CAAC8B,kBAAkB,CAAE,IAAK,CAAC;EAEtC;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCkD,mBAAmBA,CAAE0H,CAAC,EAAEpyB,MAAM,EAAG;IAEhC,MAAMsE,CAAC,GAAG,IAAI,CAACA,CAAC;MAAEC,CAAC,GAAG,IAAI,CAACA,CAAC;MAAEC,CAAC,GAAG,IAAI,CAACA,CAAC;IACxC,IAAIyC,CAAC,EAAE4R,CAAC;;IAER;IACA;IACA;IACA;IACA;;IAEAwkB,IAAI,CAAC71B,UAAU,CAAEjD,CAAC,EAAED,CAAE,CAAC;IACvBg5B,IAAI,CAAC91B,UAAU,CAAEhD,CAAC,EAAEF,CAAE,CAAC;IACvBk5B,IAAI,CAACh2B,UAAU,CAAE4qB,CAAC,EAAE9tB,CAAE,CAAC;IACvB,MAAMtD,EAAE,GAAGq8B,IAAI,CAAC90B,GAAG,CAAEi1B,IAAK,CAAC;IAC3B,MAAMv8B,EAAE,GAAGq8B,IAAI,CAAC/0B,GAAG,CAAEi1B,IAAK,CAAC;IAC3B,IAAKx8B,EAAE,IAAI,CAAC,IAAIC,EAAE,IAAI,CAAC,EAAG;MAEzB;MACA,OAAOjB,MAAM,CAACgH,IAAI,CAAE1C,CAAE,CAAC;IAExB;IAEAm5B,IAAI,CAACj2B,UAAU,CAAE4qB,CAAC,EAAE7tB,CAAE,CAAC;IACvB,MAAMrD,EAAE,GAAGm8B,IAAI,CAAC90B,GAAG,CAAEk1B,IAAK,CAAC;IAC3B,MAAMiC,EAAE,GAAGpC,IAAI,CAAC/0B,GAAG,CAAEk1B,IAAK,CAAC;IAC3B,IAAKv8B,EAAE,IAAI,CAAC,IAAIw+B,EAAE,IAAIx+B,EAAE,EAAG;MAE1B;MACA,OAAOlB,MAAM,CAACgH,IAAI,CAAEzC,CAAE,CAAC;IAExB;IAEA,MAAMo7B,EAAE,GAAG3+B,EAAE,GAAG0+B,EAAE,GAAGx+B,EAAE,GAAGD,EAAE;IAC5B,IAAK0+B,EAAE,IAAI,CAAC,IAAI3+B,EAAE,IAAI,CAAC,IAAIE,EAAE,IAAI,CAAC,EAAG;MAEpC+F,CAAC,GAAGjG,EAAE,IAAKA,EAAE,GAAGE,EAAE,CAAE;MACpB;MACA,OAAOlB,MAAM,CAACgH,IAAI,CAAE1C,CAAE,CAAC,CAAC+C,eAAe,CAAEg2B,IAAI,EAAEp2B,CAAE,CAAC;IAEnD;IAEAy2B,IAAI,CAACl2B,UAAU,CAAE4qB,CAAC,EAAE5tB,CAAE,CAAC;IACvB,MAAMo7B,EAAE,GAAGvC,IAAI,CAAC90B,GAAG,CAAEm1B,IAAK,CAAC;IAC3B,MAAMmC,EAAE,GAAGvC,IAAI,CAAC/0B,GAAG,CAAEm1B,IAAK,CAAC;IAC3B,IAAKmC,EAAE,IAAI,CAAC,IAAID,EAAE,IAAIC,EAAE,EAAG;MAE1B;MACA,OAAO7/B,MAAM,CAACgH,IAAI,CAAExC,CAAE,CAAC;IAExB;IAEA,MAAMs7B,EAAE,GAAGF,EAAE,GAAG3+B,EAAE,GAAGD,EAAE,GAAG6+B,EAAE;IAC5B,IAAKC,EAAE,IAAI,CAAC,IAAI7+B,EAAE,IAAI,CAAC,IAAI4+B,EAAE,IAAI,CAAC,EAAG;MAEpChnB,CAAC,GAAG5X,EAAE,IAAKA,EAAE,GAAG4+B,EAAE,CAAE;MACpB;MACA,OAAO7/B,MAAM,CAACgH,IAAI,CAAE1C,CAAE,CAAC,CAAC+C,eAAe,CAAEi2B,IAAI,EAAEzkB,CAAE,CAAC;IAEnD;IAEA,MAAMknB,EAAE,GAAG7+B,EAAE,GAAG2+B,EAAE,GAAGD,EAAE,GAAGF,EAAE;IAC5B,IAAKK,EAAE,IAAI,CAAC,IAAML,EAAE,GAAGx+B,EAAE,IAAM,CAAC,IAAM0+B,EAAE,GAAGC,EAAE,IAAM,CAAC,EAAG;MAEtDtC,IAAI,CAAC/1B,UAAU,CAAEhD,CAAC,EAAED,CAAE,CAAC;MACvBsU,CAAC,GAAG,CAAE6mB,EAAE,GAAGx+B,EAAE,KAASw+B,EAAE,GAAGx+B,EAAE,IAAO0+B,EAAE,GAAGC,EAAE,CAAE,CAAE;MAC/C;MACA,OAAO7/B,MAAM,CAACgH,IAAI,CAAEzC,CAAE,CAAC,CAAC8C,eAAe,CAAEk2B,IAAI,EAAE1kB,CAAE,CAAC,CAAC,CAAC;IAErD;;IAEA;IACA,MAAM0lB,KAAK,GAAG,CAAC,IAAKwB,EAAE,GAAGD,EAAE,GAAGH,EAAE,CAAE;IAClC;IACA14B,CAAC,GAAG64B,EAAE,GAAGvB,KAAK;IACd1lB,CAAC,GAAG8mB,EAAE,GAAGpB,KAAK;IAEd,OAAOv+B,MAAM,CAACgH,IAAI,CAAE1C,CAAE,CAAC,CAAC+C,eAAe,CAAEg2B,IAAI,EAAEp2B,CAAE,CAAC,CAACI,eAAe,CAAEi2B,IAAI,EAAEzkB,CAAE,CAAC;EAE9E;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCjP,MAAMA,CAAE6d,QAAQ,EAAG;IAElB,OAAOA,QAAQ,CAACnjB,CAAC,CAACsF,MAAM,CAAE,IAAI,CAACtF,CAAE,CAAC,IAAImjB,QAAQ,CAACljB,CAAC,CAACqF,MAAM,CAAE,IAAI,CAACrF,CAAE,CAAC,IAAIkjB,QAAQ,CAACjjB,CAAC,CAACoF,MAAM,CAAE,IAAI,CAACpF,CAAE,CAAC;EAEjG;AAED;AAEA,MAAMw7B,cAAc,GAAG;EAAE,WAAW,EAAE,QAAQ;EAAE,cAAc,EAAE,QAAQ;EAAE,MAAM,EAAE,QAAQ;EAAE,YAAY,EAAE,QAAQ;EAAE,OAAO,EAAE,QAAQ;EACpI,OAAO,EAAE,QAAQ;EAAE,QAAQ,EAAE,QAAQ;EAAE,OAAO,EAAE,QAAQ;EAAE,gBAAgB,EAAE,QAAQ;EAAE,MAAM,EAAE,QAAQ;EAAE,YAAY,EAAE,QAAQ;EAC9H,OAAO,EAAE,QAAQ;EAAE,WAAW,EAAE,QAAQ;EAAE,WAAW,EAAE,QAAQ;EAAE,YAAY,EAAE,QAAQ;EAAE,WAAW,EAAE,QAAQ;EAAE,OAAO,EAAE,QAAQ;EACjI,gBAAgB,EAAE,QAAQ;EAAE,UAAU,EAAE,QAAQ;EAAE,SAAS,EAAE,QAAQ;EAAE,MAAM,EAAE,QAAQ;EAAE,UAAU,EAAE,QAAQ;EAAE,UAAU,EAAE,QAAQ;EACnI,eAAe,EAAE,QAAQ;EAAE,UAAU,EAAE,QAAQ;EAAE,WAAW,EAAE,QAAQ;EAAE,UAAU,EAAE,QAAQ;EAAE,WAAW,EAAE,QAAQ;EAAE,aAAa,EAAE,QAAQ;EAC5I,gBAAgB,EAAE,QAAQ;EAAE,YAAY,EAAE,QAAQ;EAAE,YAAY,EAAE,QAAQ;EAAE,SAAS,EAAE,QAAQ;EAAE,YAAY,EAAE,QAAQ;EAAE,cAAc,EAAE,QAAQ;EACjJ,eAAe,EAAE,QAAQ;EAAE,eAAe,EAAE,QAAQ;EAAE,eAAe,EAAE,QAAQ;EAAE,eAAe,EAAE,QAAQ;EAAE,YAAY,EAAE,QAAQ;EAClI,UAAU,EAAE,QAAQ;EAAE,aAAa,EAAE,QAAQ;EAAE,SAAS,EAAE,QAAQ;EAAE,SAAS,EAAE,QAAQ;EAAE,YAAY,EAAE,QAAQ;EAAE,WAAW,EAAE,QAAQ;EACtI,aAAa,EAAE,QAAQ;EAAE,aAAa,EAAE,QAAQ;EAAE,SAAS,EAAE,QAAQ;EAAE,WAAW,EAAE,QAAQ;EAAE,YAAY,EAAE,QAAQ;EAAE,MAAM,EAAE,QAAQ;EACtI,WAAW,EAAE,QAAQ;EAAE,MAAM,EAAE,QAAQ;EAAE,OAAO,EAAE,QAAQ;EAAE,aAAa,EAAE,QAAQ;EAAE,MAAM,EAAE,QAAQ;EAAE,UAAU,EAAE,QAAQ;EAAE,SAAS,EAAE,QAAQ;EAChJ,WAAW,EAAE,QAAQ;EAAE,QAAQ,EAAE,QAAQ;EAAE,OAAO,EAAE,QAAQ;EAAE,OAAO,EAAE,QAAQ;EAAE,UAAU,EAAE,QAAQ;EAAE,eAAe,EAAE,QAAQ;EAAE,WAAW,EAAE,QAAQ;EACvJ,cAAc,EAAE,QAAQ;EAAE,WAAW,EAAE,QAAQ;EAAE,YAAY,EAAE,QAAQ;EAAE,WAAW,EAAE,QAAQ;EAAE,sBAAsB,EAAE,QAAQ;EAAE,WAAW,EAAE,QAAQ;EACvJ,YAAY,EAAE,QAAQ;EAAE,WAAW,EAAE,QAAQ;EAAE,WAAW,EAAE,QAAQ;EAAE,aAAa,EAAE,QAAQ;EAAE,eAAe,EAAE,QAAQ;EAAE,cAAc,EAAE,QAAQ;EAClJ,gBAAgB,EAAE,QAAQ;EAAE,gBAAgB,EAAE,QAAQ;EAAE,gBAAgB,EAAE,QAAQ;EAAE,aAAa,EAAE,QAAQ;EAAE,MAAM,EAAE,QAAQ;EAAE,WAAW,EAAE,QAAQ;EACpJ,OAAO,EAAE,QAAQ;EAAE,SAAS,EAAE,QAAQ;EAAE,QAAQ,EAAE,QAAQ;EAAE,kBAAkB,EAAE,QAAQ;EAAE,YAAY,EAAE,QAAQ;EAAE,cAAc,EAAE,QAAQ;EAC1I,cAAc,EAAE,QAAQ;EAAE,gBAAgB,EAAE,QAAQ;EAAE,iBAAiB,EAAE,QAAQ;EAAE,mBAAmB,EAAE,QAAQ;EAAE,iBAAiB,EAAE,QAAQ;EAC7I,iBAAiB,EAAE,QAAQ;EAAE,cAAc,EAAE,QAAQ;EAAE,WAAW,EAAE,QAAQ;EAAE,WAAW,EAAE,QAAQ;EAAE,UAAU,EAAE,QAAQ;EAAE,aAAa,EAAE,QAAQ;EAClJ,MAAM,EAAE,QAAQ;EAAE,SAAS,EAAE,QAAQ;EAAE,OAAO,EAAE,QAAQ;EAAE,WAAW,EAAE,QAAQ;EAAE,QAAQ,EAAE,QAAQ;EAAE,WAAW,EAAE,QAAQ;EAAE,QAAQ,EAAE,QAAQ;EAC9I,eAAe,EAAE,QAAQ;EAAE,WAAW,EAAE,QAAQ;EAAE,eAAe,EAAE,QAAQ;EAAE,eAAe,EAAE,QAAQ;EAAE,YAAY,EAAE,QAAQ;EAAE,WAAW,EAAE,QAAQ;EACrJ,MAAM,EAAE,QAAQ;EAAE,MAAM,EAAE,QAAQ;EAAE,MAAM,EAAE,QAAQ;EAAE,YAAY,EAAE,QAAQ;EAAE,QAAQ,EAAE,QAAQ;EAAE,eAAe,EAAE,QAAQ;EAAE,KAAK,EAAE,QAAQ;EAAE,WAAW,EAAE,QAAQ;EACnK,WAAW,EAAE,QAAQ;EAAE,aAAa,EAAE,QAAQ;EAAE,QAAQ,EAAE,QAAQ;EAAE,YAAY,EAAE,QAAQ;EAAE,UAAU,EAAE,QAAQ;EAAE,UAAU,EAAE,QAAQ;EACtI,QAAQ,EAAE,QAAQ;EAAE,QAAQ,EAAE,QAAQ;EAAE,SAAS,EAAE,QAAQ;EAAE,WAAW,EAAE,QAAQ;EAAE,WAAW,EAAE,QAAQ;EAAE,WAAW,EAAE,QAAQ;EAAE,MAAM,EAAE,QAAQ;EAClJ,aAAa,EAAE,QAAQ;EAAE,WAAW,EAAE,QAAQ;EAAE,KAAK,EAAE,QAAQ;EAAE,MAAM,EAAE,QAAQ;EAAE,SAAS,EAAE,QAAQ;EAAE,QAAQ,EAAE,QAAQ;EAAE,WAAW,EAAE,QAAQ;EACjJ,QAAQ,EAAE,QAAQ;EAAE,OAAO,EAAE,QAAQ;EAAE,OAAO,EAAE,QAAQ;EAAE,YAAY,EAAE,QAAQ;EAAE,QAAQ,EAAE,QAAQ;EAAE,aAAa,EAAE;AAAS,CAAC;AAEhI,MAAMC,KAAK,GAAG;EAAE3yB,CAAC,EAAE,CAAC;EAAE/J,CAAC,EAAE,CAAC;EAAEnD,CAAC,EAAE;AAAE,CAAC;AAClC,MAAM8/B,KAAK,GAAG;EAAE5yB,CAAC,EAAE,CAAC;EAAE/J,CAAC,EAAE,CAAC;EAAEnD,CAAC,EAAE;AAAE,CAAC;AAElC,SAAS+/B,OAAOA,CAAE/N,CAAC,EAAE/tB,CAAC,EAAEhC,CAAC,EAAG;EAE3B,IAAKA,CAAC,GAAG,CAAC,EAAGA,CAAC,IAAI,CAAC;EACnB,IAAKA,CAAC,GAAG,CAAC,EAAGA,CAAC,IAAI,CAAC;EACnB,IAAKA,CAAC,GAAG,CAAC,GAAG,CAAC,EAAG,OAAO+vB,CAAC,GAAG,CAAE/tB,CAAC,GAAG+tB,CAAC,IAAK,CAAC,GAAG/vB,CAAC;EAC7C,IAAKA,CAAC,GAAG,CAAC,GAAG,CAAC,EAAG,OAAOgC,CAAC;EACzB,IAAKhC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAG,OAAO+vB,CAAC,GAAG,CAAE/tB,CAAC,GAAG+tB,CAAC,IAAK,CAAC,IAAK,CAAC,GAAG,CAAC,GAAG/vB,CAAC,CAAE;EACzD,OAAO+vB,CAAC;AAET;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMgO,KAAK,CAAC;EAEX;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC56B,WAAWA,CAAE0I,CAAC,EAAEb,CAAC,EAAE9I,CAAC,EAAG;IAEtB;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACw3B,OAAO,GAAG,IAAI;;IAEnB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC7tB,CAAC,GAAG,CAAC;;IAEV;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACb,CAAC,GAAG,CAAC;;IAEV;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC9I,CAAC,GAAG,CAAC;IAEV,OAAO,IAAI,CAACa,GAAG,CAAE8I,CAAC,EAAEb,CAAC,EAAE9I,CAAE,CAAC;EAE3B;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCa,GAAGA,CAAE8I,CAAC,EAAEb,CAAC,EAAE9I,CAAC,EAAG;IAEd,IAAK8I,CAAC,KAAKhO,SAAS,IAAIkF,CAAC,KAAKlF,SAAS,EAAG;MAEzC;;MAEA,MAAMiC,KAAK,GAAG4M,CAAC;MAEf,IAAK5M,KAAK,IAAIA,KAAK,CAACy6B,OAAO,EAAG;QAE7B,IAAI,CAAC/0B,IAAI,CAAE1F,KAAM,CAAC;MAEnB,CAAC,MAAM,IAAK,OAAOA,KAAK,KAAK,QAAQ,EAAG;QAEvC,IAAI,CAAC++B,MAAM,CAAE/+B,KAAM,CAAC;MAErB,CAAC,MAAM,IAAK,OAAOA,KAAK,KAAK,QAAQ,EAAG;QAEvC,IAAI,CAACg/B,QAAQ,CAAEh/B,KAAM,CAAC;MAEvB;IAED,CAAC,MAAM;MAEN,IAAI,CAACi/B,MAAM,CAAEryB,CAAC,EAAEb,CAAC,EAAE9I,CAAE,CAAC;IAEvB;IAEA,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCkC,SAASA,CAAEC,MAAM,EAAG;IAEnB,IAAI,CAACwH,CAAC,GAAGxH,MAAM;IACf,IAAI,CAAC2G,CAAC,GAAG3G,MAAM;IACf,IAAI,CAACnC,CAAC,GAAGmC,MAAM;IAEf,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACC25B,MAAMA,CAAEG,GAAG,EAAgC;IAAA,IAA9BhuB,UAAU,GAAA7P,SAAA,CAAAtC,MAAA,QAAAsC,SAAA,QAAAtD,SAAA,GAAAsD,SAAA,MAAGjH,cAAc;IAEvC8kC,GAAG,GAAG9/B,IAAI,CAACwC,KAAK,CAAEs9B,GAAI,CAAC;IAEvB,IAAI,CAACtyB,CAAC,GAAG,CAAEsyB,GAAG,IAAI,EAAE,GAAG,GAAG,IAAK,GAAG;IAClC,IAAI,CAACnzB,CAAC,GAAG,CAAEmzB,GAAG,IAAI,CAAC,GAAG,GAAG,IAAK,GAAG;IACjC,IAAI,CAACj8B,CAAC,GAAG,CAAEi8B,GAAG,GAAG,GAAG,IAAK,GAAG;IAE5BjvB,eAAe,CAACe,mBAAmB,CAAE,IAAI,EAAEE,UAAW,CAAC;IAEvD,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC+tB,MAAMA,CAAEryB,CAAC,EAAEb,CAAC,EAAE9I,CAAC,EAAmD;IAAA,IAAjDiO,UAAU,GAAA7P,SAAA,CAAAtC,MAAA,QAAAsC,SAAA,QAAAtD,SAAA,GAAAsD,SAAA,MAAG4O,eAAe,CAACE,iBAAiB;IAE9D,IAAI,CAACvD,CAAC,GAAGA,CAAC;IACV,IAAI,CAACb,CAAC,GAAGA,CAAC;IACV,IAAI,CAAC9I,CAAC,GAAGA,CAAC;IAEVgN,eAAe,CAACe,mBAAmB,CAAE,IAAI,EAAEE,UAAW,CAAC;IAEvD,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCiuB,MAAMA,CAAEnzB,CAAC,EAAE/J,CAAC,EAAEnD,CAAC,EAAmD;IAAA,IAAjDoS,UAAU,GAAA7P,SAAA,CAAAtC,MAAA,QAAAsC,SAAA,QAAAtD,SAAA,GAAAsD,SAAA,MAAG4O,eAAe,CAACE,iBAAiB;IAE9D;IACAnE,CAAC,GAAG7L,eAAe,CAAE6L,CAAC,EAAE,CAAE,CAAC;IAC3B/J,CAAC,GAAGlC,KAAK,CAAEkC,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC;IACpBnD,CAAC,GAAGiB,KAAK,CAAEjB,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC;IAEpB,IAAKmD,CAAC,KAAK,CAAC,EAAG;MAEd,IAAI,CAAC2K,CAAC,GAAG,IAAI,CAACb,CAAC,GAAG,IAAI,CAAC9I,CAAC,GAAGnE,CAAC;IAE7B,CAAC,MAAM;MAEN,MAAMgyB,CAAC,GAAGhyB,CAAC,IAAI,GAAG,GAAGA,CAAC,IAAK,CAAC,GAAGmD,CAAC,CAAE,GAAGnD,CAAC,GAAGmD,CAAC,GAAKnD,CAAC,GAAGmD,CAAG;MACtD,MAAMc,CAAC,GAAK,CAAC,GAAGjE,CAAC,GAAKgyB,CAAC;MAEvB,IAAI,CAAClkB,CAAC,GAAGiyB,OAAO,CAAE97B,CAAC,EAAE+tB,CAAC,EAAE9kB,CAAC,GAAG,CAAC,GAAG,CAAE,CAAC;MACnC,IAAI,CAACD,CAAC,GAAG8yB,OAAO,CAAE97B,CAAC,EAAE+tB,CAAC,EAAE9kB,CAAE,CAAC;MAC3B,IAAI,CAAC/I,CAAC,GAAG47B,OAAO,CAAE97B,CAAC,EAAE+tB,CAAC,EAAE9kB,CAAC,GAAG,CAAC,GAAG,CAAE,CAAC;IAEpC;IAEAiE,eAAe,CAACe,mBAAmB,CAAE,IAAI,EAAEE,UAAW,CAAC;IAEvD,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC8tB,QAAQA,CAAExwB,KAAK,EAAgC;IAAA,IAA9B0C,UAAU,GAAA7P,SAAA,CAAAtC,MAAA,QAAAsC,SAAA,QAAAtD,SAAA,GAAAsD,SAAA,MAAGjH,cAAc;IAE3C,SAASglC,WAAWA,CAAEC,MAAM,EAAG;MAE9B,IAAKA,MAAM,KAAKthC,SAAS,EAAG;MAE5B,IAAKuhC,UAAU,CAAED,MAAO,CAAC,GAAG,CAAC,EAAG;QAE/Bt7B,OAAO,CAACC,IAAI,CAAE,kCAAkC,GAAGwK,KAAK,GAAG,mBAAoB,CAAC;MAEjF;IAED;IAGA,IAAInO,CAAC;IAEL,IAAKA,CAAC,GAAG,oBAAoB,CAACk/B,IAAI,CAAE/wB,KAAM,CAAC,EAAG;MAE7C;;MAEA,IAAI8B,KAAK;MACT,MAAMlC,IAAI,GAAG/N,CAAC,CAAE,CAAC,CAAE;MACnB,MAAMm/B,UAAU,GAAGn/B,CAAC,CAAE,CAAC,CAAE;MAEzB,QAAS+N,IAAI;QAEZ,KAAK,KAAK;QACV,KAAK,MAAM;UAEV,IAAKkC,KAAK,GAAG,8DAA8D,CAACivB,IAAI,CAAEC,UAAW,CAAC,EAAG;YAEhG;;YAEAJ,WAAW,CAAE9uB,KAAK,CAAE,CAAC,CAAG,CAAC;YAEzB,OAAO,IAAI,CAAC2uB,MAAM,CACjB7/B,IAAI,CAACa,GAAG,CAAE,GAAG,EAAEw/B,QAAQ,CAAEnvB,KAAK,CAAE,CAAC,CAAE,EAAE,EAAG,CAAE,CAAC,GAAG,GAAG,EACjDlR,IAAI,CAACa,GAAG,CAAE,GAAG,EAAEw/B,QAAQ,CAAEnvB,KAAK,CAAE,CAAC,CAAE,EAAE,EAAG,CAAE,CAAC,GAAG,GAAG,EACjDlR,IAAI,CAACa,GAAG,CAAE,GAAG,EAAEw/B,QAAQ,CAAEnvB,KAAK,CAAE,CAAC,CAAE,EAAE,EAAG,CAAE,CAAC,GAAG,GAAG,EACjDY,UACD,CAAC;UAEF;UAEA,IAAKZ,KAAK,GAAG,oEAAoE,CAACivB,IAAI,CAAEC,UAAW,CAAC,EAAG;YAEtG;;YAEAJ,WAAW,CAAE9uB,KAAK,CAAE,CAAC,CAAG,CAAC;YAEzB,OAAO,IAAI,CAAC2uB,MAAM,CACjB7/B,IAAI,CAACa,GAAG,CAAE,GAAG,EAAEw/B,QAAQ,CAAEnvB,KAAK,CAAE,CAAC,CAAE,EAAE,EAAG,CAAE,CAAC,GAAG,GAAG,EACjDlR,IAAI,CAACa,GAAG,CAAE,GAAG,EAAEw/B,QAAQ,CAAEnvB,KAAK,CAAE,CAAC,CAAE,EAAE,EAAG,CAAE,CAAC,GAAG,GAAG,EACjDlR,IAAI,CAACa,GAAG,CAAE,GAAG,EAAEw/B,QAAQ,CAAEnvB,KAAK,CAAE,CAAC,CAAE,EAAE,EAAG,CAAE,CAAC,GAAG,GAAG,EACjDY,UACD,CAAC;UAEF;UAEA;QAED,KAAK,KAAK;QACV,KAAK,MAAM;UAEV,IAAKZ,KAAK,GAAG,oFAAoF,CAACivB,IAAI,CAAEC,UAAW,CAAC,EAAG;YAEtH;;YAEAJ,WAAW,CAAE9uB,KAAK,CAAE,CAAC,CAAG,CAAC;YAEzB,OAAO,IAAI,CAAC6uB,MAAM,CACjBG,UAAU,CAAEhvB,KAAK,CAAE,CAAC,CAAG,CAAC,GAAG,GAAG,EAC9BgvB,UAAU,CAAEhvB,KAAK,CAAE,CAAC,CAAG,CAAC,GAAG,GAAG,EAC9BgvB,UAAU,CAAEhvB,KAAK,CAAE,CAAC,CAAG,CAAC,GAAG,GAAG,EAC9BY,UACD,CAAC;UAEF;UAEA;QAED;UAECnN,OAAO,CAACC,IAAI,CAAE,mCAAmC,GAAGwK,KAAM,CAAC;MAE7D;IAED,CAAC,MAAM,IAAKnO,CAAC,GAAG,mBAAmB,CAACk/B,IAAI,CAAE/wB,KAAM,CAAC,EAAG;MAEnD;;MAEA,MAAM0wB,GAAG,GAAG7+B,CAAC,CAAE,CAAC,CAAE;MAClB,MAAMyjB,IAAI,GAAGob,GAAG,CAACngC,MAAM;MAEvB,IAAK+kB,IAAI,KAAK,CAAC,EAAG;QAEjB;QACA,OAAO,IAAI,CAACmb,MAAM,CACjBQ,QAAQ,CAAEP,GAAG,CAACQ,MAAM,CAAE,CAAE,CAAC,EAAE,EAAG,CAAC,GAAG,EAAE,EACpCD,QAAQ,CAAEP,GAAG,CAACQ,MAAM,CAAE,CAAE,CAAC,EAAE,EAAG,CAAC,GAAG,EAAE,EACpCD,QAAQ,CAAEP,GAAG,CAACQ,MAAM,CAAE,CAAE,CAAC,EAAE,EAAG,CAAC,GAAG,EAAE,EACpCxuB,UACD,CAAC;MAEF,CAAC,MAAM,IAAK4S,IAAI,KAAK,CAAC,EAAG;QAExB;QACA,OAAO,IAAI,CAACib,MAAM,CAAEU,QAAQ,CAAEP,GAAG,EAAE,EAAG,CAAC,EAAEhuB,UAAW,CAAC;MAEtD,CAAC,MAAM;QAENnN,OAAO,CAACC,IAAI,CAAE,iCAAiC,GAAGwK,KAAM,CAAC;MAE1D;IAED,CAAC,MAAM,IAAKA,KAAK,IAAIA,KAAK,CAACzP,MAAM,GAAG,CAAC,EAAG;MAEvC,OAAO,IAAI,CAAC4gC,YAAY,CAAEnxB,KAAK,EAAE0C,UAAW,CAAC;IAE9C;IAEA,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCyuB,YAAYA,CAAEnxB,KAAK,EAAgC;IAAA,IAA9B0C,UAAU,GAAA7P,SAAA,CAAAtC,MAAA,QAAAsC,SAAA,QAAAtD,SAAA,GAAAsD,SAAA,MAAGjH,cAAc;IAE/C;IACA,MAAM8kC,GAAG,GAAGR,cAAc,CAAElwB,KAAK,CAAC1O,WAAW,CAAC,CAAC,CAAE;IAEjD,IAAKo/B,GAAG,KAAKnhC,SAAS,EAAG;MAExB;MACA,IAAI,CAACghC,MAAM,CAAEG,GAAG,EAAEhuB,UAAW,CAAC;IAE/B,CAAC,MAAM;MAEN;MACAnN,OAAO,CAACC,IAAI,CAAE,6BAA6B,GAAGwK,KAAM,CAAC;IAEtD;IAEA,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;EACC/I,KAAKA,CAAA,EAAG;IAEP,OAAO,IAAI,IAAI,CAACvB,WAAW,CAAE,IAAI,CAAC0I,CAAC,EAAE,IAAI,CAACb,CAAC,EAAE,IAAI,CAAC9I,CAAE,CAAC;EAEtD;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCyC,IAAIA,CAAE4K,KAAK,EAAG;IAEb,IAAI,CAAC1D,CAAC,GAAG0D,KAAK,CAAC1D,CAAC;IAChB,IAAI,CAACb,CAAC,GAAGuE,KAAK,CAACvE,CAAC;IAChB,IAAI,CAAC9I,CAAC,GAAGqN,KAAK,CAACrN,CAAC;IAEhB,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACC28B,gBAAgBA,CAAEtvB,KAAK,EAAG;IAEzB,IAAI,CAAC1D,CAAC,GAAG8D,YAAY,CAAEJ,KAAK,CAAC1D,CAAE,CAAC;IAChC,IAAI,CAACb,CAAC,GAAG2E,YAAY,CAAEJ,KAAK,CAACvE,CAAE,CAAC;IAChC,IAAI,CAAC9I,CAAC,GAAGyN,YAAY,CAAEJ,KAAK,CAACrN,CAAE,CAAC;IAEhC,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACC48B,gBAAgBA,CAAEvvB,KAAK,EAAG;IAEzB,IAAI,CAAC1D,CAAC,GAAGkE,YAAY,CAAER,KAAK,CAAC1D,CAAE,CAAC;IAChC,IAAI,CAACb,CAAC,GAAG+E,YAAY,CAAER,KAAK,CAACvE,CAAE,CAAC;IAChC,IAAI,CAAC9I,CAAC,GAAG6N,YAAY,CAAER,KAAK,CAACrN,CAAE,CAAC;IAEhC,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;EACC68B,mBAAmBA,CAAA,EAAG;IAErB,IAAI,CAACF,gBAAgB,CAAE,IAAK,CAAC;IAE7B,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;EACCG,mBAAmBA,CAAA,EAAG;IAErB,IAAI,CAACF,gBAAgB,CAAE,IAAK,CAAC;IAE7B,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCG,MAAMA,CAAA,EAAgC;IAAA,IAA9B9uB,UAAU,GAAA7P,SAAA,CAAAtC,MAAA,QAAAsC,SAAA,QAAAtD,SAAA,GAAAsD,SAAA,MAAGjH,cAAc;IAElC6V,eAAe,CAACc,qBAAqB,CAAEkvB,MAAM,CAACv6B,IAAI,CAAE,IAAK,CAAC,EAAEwL,UAAW,CAAC;IAExE,OAAO9R,IAAI,CAACwF,KAAK,CAAE7E,KAAK,CAAEkgC,MAAM,CAACrzB,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,GAAI,CAAE,CAAC,GAAG,KAAK,GAAGxN,IAAI,CAACwF,KAAK,CAAE7E,KAAK,CAAEkgC,MAAM,CAACl0B,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,GAAI,CAAE,CAAC,GAAG,GAAG,GAAG3M,IAAI,CAACwF,KAAK,CAAE7E,KAAK,CAAEkgC,MAAM,CAACh9B,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,GAAI,CAAE,CAAC;EAEnK;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCi9B,YAAYA,CAAA,EAAgC;IAAA,IAA9BhvB,UAAU,GAAA7P,SAAA,CAAAtC,MAAA,QAAAsC,SAAA,QAAAtD,SAAA,GAAAsD,SAAA,MAAGjH,cAAc;IAExC,OAAO,CAAE,QAAQ,GAAG,IAAI,CAAC4lC,MAAM,CAAE9uB,UAAW,CAAC,CAACivB,QAAQ,CAAE,EAAG,CAAC,EAAGvhC,KAAK,CAAE,CAAC,CAAE,CAAC;EAE3E;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACCwhC,MAAMA,CAAE1hC,MAAM,EAAmD;IAAA,IAAjDwS,UAAU,GAAA7P,SAAA,CAAAtC,MAAA,QAAAsC,SAAA,QAAAtD,SAAA,GAAAsD,SAAA,MAAG4O,eAAe,CAACE,iBAAiB;IAE7D;;IAEAF,eAAe,CAACc,qBAAqB,CAAEkvB,MAAM,CAACv6B,IAAI,CAAE,IAAK,CAAC,EAAEwL,UAAW,CAAC;IAExE,MAAMtE,CAAC,GAAGqzB,MAAM,CAACrzB,CAAC;MAAEb,CAAC,GAAGk0B,MAAM,CAACl0B,CAAC;MAAE9I,CAAC,GAAGg9B,MAAM,CAACh9B,CAAC;IAE9C,MAAM/C,GAAG,GAAGd,IAAI,CAACc,GAAG,CAAE0M,CAAC,EAAEb,CAAC,EAAE9I,CAAE,CAAC;IAC/B,MAAMhD,GAAG,GAAGb,IAAI,CAACa,GAAG,CAAE2M,CAAC,EAAEb,CAAC,EAAE9I,CAAE,CAAC;IAE/B,IAAIo9B,GAAG,EAAEC,UAAU;IACnB,MAAMC,SAAS,GAAG,CAAEtgC,GAAG,GAAGC,GAAG,IAAK,GAAG;IAErC,IAAKD,GAAG,KAAKC,GAAG,EAAG;MAElBmgC,GAAG,GAAG,CAAC;MACPC,UAAU,GAAG,CAAC;IAEf,CAAC,MAAM;MAEN,MAAMjY,KAAK,GAAGnoB,GAAG,GAAGD,GAAG;MAEvBqgC,UAAU,GAAGC,SAAS,IAAI,GAAG,GAAGlY,KAAK,IAAKnoB,GAAG,GAAGD,GAAG,CAAE,GAAGooB,KAAK,IAAK,CAAC,GAAGnoB,GAAG,GAAGD,GAAG,CAAE;MAEjF,QAASC,GAAG;QAEX,KAAK0M,CAAC;UAAEyzB,GAAG,GAAG,CAAEt0B,CAAC,GAAG9I,CAAC,IAAKolB,KAAK,IAAKtc,CAAC,GAAG9I,CAAC,GAAG,CAAC,GAAG,CAAC,CAAE;UAAE;QACrD,KAAK8I,CAAC;UAAEs0B,GAAG,GAAG,CAAEp9B,CAAC,GAAG2J,CAAC,IAAKyb,KAAK,GAAG,CAAC;UAAE;QACrC,KAAKplB,CAAC;UAAEo9B,GAAG,GAAG,CAAEzzB,CAAC,GAAGb,CAAC,IAAKsc,KAAK,GAAG,CAAC;UAAE;MAEtC;MAEAgY,GAAG,IAAI,CAAC;IAET;IAEA3hC,MAAM,CAACsN,CAAC,GAAGq0B,GAAG;IACd3hC,MAAM,CAACuD,CAAC,GAAGq+B,UAAU;IACrB5hC,MAAM,CAACI,CAAC,GAAGyhC,SAAS;IAEpB,OAAO7hC,MAAM;EAEd;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACC8hC,MAAMA,CAAE9hC,MAAM,EAAmD;IAAA,IAAjDwS,UAAU,GAAA7P,SAAA,CAAAtC,MAAA,QAAAsC,SAAA,QAAAtD,SAAA,GAAAsD,SAAA,MAAG4O,eAAe,CAACE,iBAAiB;IAE7DF,eAAe,CAACc,qBAAqB,CAAEkvB,MAAM,CAACv6B,IAAI,CAAE,IAAK,CAAC,EAAEwL,UAAW,CAAC;IAExExS,MAAM,CAACkO,CAAC,GAAGqzB,MAAM,CAACrzB,CAAC;IACnBlO,MAAM,CAACqN,CAAC,GAAGk0B,MAAM,CAACl0B,CAAC;IACnBrN,MAAM,CAACuE,CAAC,GAAGg9B,MAAM,CAACh9B,CAAC;IAEnB,OAAOvE,MAAM;EAEd;;EAEA;AACD;AACA;AACA;AACA;AACA;EACC+hC,QAAQA,CAAA,EAAgC;IAAA,IAA9BvvB,UAAU,GAAA7P,SAAA,CAAAtC,MAAA,QAAAsC,SAAA,QAAAtD,SAAA,GAAAsD,SAAA,MAAGjH,cAAc;IAEpC6V,eAAe,CAACc,qBAAqB,CAAEkvB,MAAM,CAACv6B,IAAI,CAAE,IAAK,CAAC,EAAEwL,UAAW,CAAC;IAExE,MAAMtE,CAAC,GAAGqzB,MAAM,CAACrzB,CAAC;MAAEb,CAAC,GAAGk0B,MAAM,CAACl0B,CAAC;MAAE9I,CAAC,GAAGg9B,MAAM,CAACh9B,CAAC;IAE9C,IAAKiO,UAAU,KAAK9W,cAAc,EAAG;MAEpC;MACA,OAAO,SAAU8W,UAAU,IAAMtE,CAAC,CAAC8zB,OAAO,CAAE,CAAE,CAAC,IAAM30B,CAAC,CAAC20B,OAAO,CAAE,CAAE,CAAC,IAAMz9B,CAAC,CAACy9B,OAAO,CAAE,CAAE,CAAC,GAAI;IAE5F;IAEA,OAAO,OAAQthC,IAAI,CAACwF,KAAK,CAAEgI,CAAC,GAAG,GAAI,CAAC,IAAMxN,IAAI,CAACwF,KAAK,CAAEmH,CAAC,GAAG,GAAI,CAAC,IAAM3M,IAAI,CAACwF,KAAK,CAAE3B,CAAC,GAAG,GAAI,CAAC,GAAI;EAE/F;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC09B,SAASA,CAAE30B,CAAC,EAAE/J,CAAC,EAAEnD,CAAC,EAAG;IAEpB,IAAI,CAACshC,MAAM,CAAEzB,KAAM,CAAC;IAEpB,OAAO,IAAI,CAACQ,MAAM,CAAER,KAAK,CAAC3yB,CAAC,GAAGA,CAAC,EAAE2yB,KAAK,CAAC18B,CAAC,GAAGA,CAAC,EAAE08B,KAAK,CAAC7/B,CAAC,GAAGA,CAAE,CAAC;EAE5D;;EAEA;AACD;AACA;AACA;AACA;AACA;EACC8G,GAAGA,CAAE0K,KAAK,EAAG;IAEZ,IAAI,CAAC1D,CAAC,IAAI0D,KAAK,CAAC1D,CAAC;IACjB,IAAI,CAACb,CAAC,IAAIuE,KAAK,CAACvE,CAAC;IACjB,IAAI,CAAC9I,CAAC,IAAIqN,KAAK,CAACrN,CAAC;IAEjB,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACC29B,SAASA,CAAEC,MAAM,EAAEC,MAAM,EAAG;IAE3B,IAAI,CAACl0B,CAAC,GAAGi0B,MAAM,CAACj0B,CAAC,GAAGk0B,MAAM,CAACl0B,CAAC;IAC5B,IAAI,CAACb,CAAC,GAAG80B,MAAM,CAAC90B,CAAC,GAAG+0B,MAAM,CAAC/0B,CAAC;IAC5B,IAAI,CAAC9I,CAAC,GAAG49B,MAAM,CAAC59B,CAAC,GAAG69B,MAAM,CAAC79B,CAAC;IAE5B,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;AACA;EACC4C,SAASA,CAAE5D,CAAC,EAAG;IAEd,IAAI,CAAC2K,CAAC,IAAI3K,CAAC;IACX,IAAI,CAAC8J,CAAC,IAAI9J,CAAC;IACX,IAAI,CAACgB,CAAC,IAAIhB,CAAC;IAEX,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;AACA;EACC+D,GAAGA,CAAEsK,KAAK,EAAG;IAEZ,IAAI,CAAC1D,CAAC,GAAGxN,IAAI,CAACc,GAAG,CAAE,CAAC,EAAE,IAAI,CAAC0M,CAAC,GAAG0D,KAAK,CAAC1D,CAAE,CAAC;IACxC,IAAI,CAACb,CAAC,GAAG3M,IAAI,CAACc,GAAG,CAAE,CAAC,EAAE,IAAI,CAAC6L,CAAC,GAAGuE,KAAK,CAACvE,CAAE,CAAC;IACxC,IAAI,CAAC9I,CAAC,GAAG7D,IAAI,CAACc,GAAG,CAAE,CAAC,EAAE,IAAI,CAAC+C,CAAC,GAAGqN,KAAK,CAACrN,CAAE,CAAC;IAExC,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCkD,QAAQA,CAAEmK,KAAK,EAAG;IAEjB,IAAI,CAAC1D,CAAC,IAAI0D,KAAK,CAAC1D,CAAC;IACjB,IAAI,CAACb,CAAC,IAAIuE,KAAK,CAACvE,CAAC;IACjB,IAAI,CAAC9I,CAAC,IAAIqN,KAAK,CAACrN,CAAC;IAEjB,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCmD,cAAcA,CAAEnE,CAAC,EAAG;IAEnB,IAAI,CAAC2K,CAAC,IAAI3K,CAAC;IACX,IAAI,CAAC8J,CAAC,IAAI9J,CAAC;IACX,IAAI,CAACgB,CAAC,IAAIhB,CAAC;IAEX,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCnB,IAAIA,CAAEwP,KAAK,EAAEpI,KAAK,EAAG;IAEpB,IAAI,CAAC0E,CAAC,IAAI,CAAE0D,KAAK,CAAC1D,CAAC,GAAG,IAAI,CAACA,CAAC,IAAK1E,KAAK;IACtC,IAAI,CAAC6D,CAAC,IAAI,CAAEuE,KAAK,CAACvE,CAAC,GAAG,IAAI,CAACA,CAAC,IAAK7D,KAAK;IACtC,IAAI,CAACjF,CAAC,IAAI,CAAEqN,KAAK,CAACrN,CAAC,GAAG,IAAI,CAACA,CAAC,IAAKiF,KAAK;IAEtC,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC64B,UAAUA,CAAEF,MAAM,EAAEC,MAAM,EAAE54B,KAAK,EAAG;IAEnC,IAAI,CAAC0E,CAAC,GAAGi0B,MAAM,CAACj0B,CAAC,GAAG,CAAEk0B,MAAM,CAACl0B,CAAC,GAAGi0B,MAAM,CAACj0B,CAAC,IAAK1E,KAAK;IACnD,IAAI,CAAC6D,CAAC,GAAG80B,MAAM,CAAC90B,CAAC,GAAG,CAAE+0B,MAAM,CAAC/0B,CAAC,GAAG80B,MAAM,CAAC90B,CAAC,IAAK7D,KAAK;IACnD,IAAI,CAACjF,CAAC,GAAG49B,MAAM,CAAC59B,CAAC,GAAG,CAAE69B,MAAM,CAAC79B,CAAC,GAAG49B,MAAM,CAAC59B,CAAC,IAAKiF,KAAK;IAEnD,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC84B,OAAOA,CAAE1wB,KAAK,EAAEpI,KAAK,EAAG;IAEvB,IAAI,CAACk4B,MAAM,CAAEzB,KAAM,CAAC;IACpBruB,KAAK,CAAC8vB,MAAM,CAAExB,KAAM,CAAC;IAErB,MAAM5yB,CAAC,GAAGlL,IAAI,CAAE69B,KAAK,CAAC3yB,CAAC,EAAE4yB,KAAK,CAAC5yB,CAAC,EAAE9D,KAAM,CAAC;IACzC,MAAMjG,CAAC,GAAGnB,IAAI,CAAE69B,KAAK,CAAC18B,CAAC,EAAE28B,KAAK,CAAC38B,CAAC,EAAEiG,KAAM,CAAC;IACzC,MAAMpJ,CAAC,GAAGgC,IAAI,CAAE69B,KAAK,CAAC7/B,CAAC,EAAE8/B,KAAK,CAAC9/B,CAAC,EAAEoJ,KAAM,CAAC;IAEzC,IAAI,CAACi3B,MAAM,CAAEnzB,CAAC,EAAE/J,CAAC,EAAEnD,CAAE,CAAC;IAEtB,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCyyB,cAAcA,CAAE5rB,CAAC,EAAG;IAEnB,IAAI,CAACiH,CAAC,GAAGjH,CAAC,CAACpF,CAAC;IACZ,IAAI,CAACwL,CAAC,GAAGpG,CAAC,CAAC9E,CAAC;IACZ,IAAI,CAACoC,CAAC,GAAG0C,CAAC,CAAC2R,CAAC;IAEZ,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;AACA;EACC/Q,YAAYA,CAAElG,CAAC,EAAG;IAEjB,MAAMuM,CAAC,GAAG,IAAI,CAACA,CAAC;MAAEb,CAAC,GAAG,IAAI,CAACA,CAAC;MAAE9I,CAAC,GAAG,IAAI,CAACA,CAAC;IACxC,MAAMuD,CAAC,GAAGnG,CAAC,CAACoG,QAAQ;IAEpB,IAAI,CAACmG,CAAC,GAAGpG,CAAC,CAAE,CAAC,CAAE,GAAGoG,CAAC,GAAGpG,CAAC,CAAE,CAAC,CAAE,GAAGuF,CAAC,GAAGvF,CAAC,CAAE,CAAC,CAAE,GAAGvD,CAAC;IAC7C,IAAI,CAAC8I,CAAC,GAAGvF,CAAC,CAAE,CAAC,CAAE,GAAGoG,CAAC,GAAGpG,CAAC,CAAE,CAAC,CAAE,GAAGuF,CAAC,GAAGvF,CAAC,CAAE,CAAC,CAAE,GAAGvD,CAAC;IAC7C,IAAI,CAACA,CAAC,GAAGuD,CAAC,CAAE,CAAC,CAAE,GAAGoG,CAAC,GAAGpG,CAAC,CAAE,CAAC,CAAE,GAAGuF,CAAC,GAAGvF,CAAC,CAAE,CAAC,CAAE,GAAGvD,CAAC;IAE7C,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCqF,MAAMA,CAAEpF,CAAC,EAAG;IAEX,OAASA,CAAC,CAAC0J,CAAC,KAAK,IAAI,CAACA,CAAC,IAAQ1J,CAAC,CAAC6I,CAAC,KAAK,IAAI,CAACA,CAAG,IAAM7I,CAAC,CAACD,CAAC,KAAK,IAAI,CAACA,CAAG;EAEtE;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCsF,SAASA,CAAE5J,KAAK,EAAe;IAAA,IAAb6J,MAAM,GAAAnH,SAAA,CAAAtC,MAAA,QAAAsC,SAAA,QAAAtD,SAAA,GAAAsD,SAAA,MAAG,CAAC;IAE3B,IAAI,CAACuL,CAAC,GAAGjO,KAAK,CAAE6J,MAAM,CAAE;IACxB,IAAI,CAACuD,CAAC,GAAGpN,KAAK,CAAE6J,MAAM,GAAG,CAAC,CAAE;IAC5B,IAAI,CAACvF,CAAC,GAAGtE,KAAK,CAAE6J,MAAM,GAAG,CAAC,CAAE;IAE5B,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACCC,OAAOA,CAAA,EAA2B;IAAA,IAAzB9J,KAAK,GAAA0C,SAAA,CAAAtC,MAAA,QAAAsC,SAAA,QAAAtD,SAAA,GAAAsD,SAAA,MAAG,EAAE;IAAA,IAAEmH,MAAM,GAAAnH,SAAA,CAAAtC,MAAA,QAAAsC,SAAA,QAAAtD,SAAA,GAAAsD,SAAA,MAAG,CAAC;IAE9B1C,KAAK,CAAE6J,MAAM,CAAE,GAAG,IAAI,CAACoE,CAAC;IACxBjO,KAAK,CAAE6J,MAAM,GAAG,CAAC,CAAE,GAAG,IAAI,CAACuD,CAAC;IAC5BpN,KAAK,CAAE6J,MAAM,GAAG,CAAC,CAAE,GAAG,IAAI,CAACvF,CAAC;IAE5B,OAAOtE,KAAK;EAEb;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACC+J,mBAAmBA,CAAEC,SAAS,EAAErK,KAAK,EAAG;IAEvC,IAAI,CAACsO,CAAC,GAAGjE,SAAS,CAACC,IAAI,CAAEtK,KAAM,CAAC;IAChC,IAAI,CAACyN,CAAC,GAAGpD,SAAS,CAACE,IAAI,CAAEvK,KAAM,CAAC;IAChC,IAAI,CAAC2E,CAAC,GAAG0F,SAAS,CAACqQ,IAAI,CAAE1a,KAAM,CAAC;IAEhC,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;AACA;EACC0V,MAAMA,CAAA,EAAG;IAER,OAAO,IAAI,CAACgsB,MAAM,CAAC,CAAC;EAErB;EAEA,EAAGh3B,MAAM,CAACC,QAAQ,IAAK;IAEtB,MAAM,IAAI,CAAC2D,CAAC;IACZ,MAAM,IAAI,CAACb,CAAC;IACZ,MAAM,IAAI,CAAC9I,CAAC;EAEb;AAED;AAEA,MAAMg9B,MAAM,GAAG,aAAc,IAAInB,KAAK,CAAC,CAAC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,KAAK,CAACmC,KAAK,GAAGvC,cAAc;AAE5B,IAAIwC,WAAW,GAAG,CAAC;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,QAAQ,SAASzjC,eAAe,CAAC;EAEtC;AACD;AACA;EACCwG,WAAWA,CAAA,EAAG;IAEb,KAAK,CAAC,CAAC;;IAEP;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACk9B,UAAU,GAAG,IAAI;;IAEtB;AACF;AACA;AACA;AACA;AACA;AACA;IACE5vB,MAAM,CAACoC,cAAc,CAAE,IAAI,EAAE,IAAI,EAAE;MAAE5T,KAAK,EAAEkhC,WAAW;IAAI,CAAE,CAAC;;IAE9D;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACrhC,IAAI,GAAGN,YAAY,CAAC,CAAC;;IAE1B;AACF;AACA;AACA;AACA;IACE,IAAI,CAAC6O,IAAI,GAAG,EAAE;;IAEd;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACxQ,IAAI,GAAG,UAAU;;IAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACyjC,QAAQ,GAAG9vC,cAAc;;IAE9B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC+vC,IAAI,GAAGnwC,SAAS;;IAErB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACowC,YAAY,GAAG,KAAK;;IAEzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,OAAO,GAAG,CAAC;;IAEhB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,WAAW,GAAG,KAAK;;IAExB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,SAAS,GAAG,KAAK;;IAEtB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,QAAQ,GAAGtvC,cAAc;;IAE9B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACuvC,QAAQ,GAAGtvC,sBAAsB;;IAEtC;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACuvC,aAAa,GAAGjwC,WAAW;;IAEhC;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACkwC,aAAa,GAAG,IAAI;;IAEzB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,aAAa,GAAG,IAAI;;IAEzB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,kBAAkB,GAAG,IAAI;;IAE9B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,UAAU,GAAG,IAAInD,KAAK,CAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC;;IAEtC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACoD,UAAU,GAAG,CAAC;;IAEnB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,SAAS,GAAGhvC,cAAc;;IAE/B;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACivC,SAAS,GAAG,IAAI;;IAErB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,UAAU,GAAG,IAAI;;IAEtB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,gBAAgB,GAAG,IAAI;;IAE5B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,WAAW,GAAGhnC,iBAAiB;;IAEpC;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACinC,UAAU,GAAG,CAAC;;IAEnB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,eAAe,GAAG,IAAI;;IAE3B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,WAAW,GAAGjoC,aAAa;;IAEhC;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACkoC,YAAY,GAAGloC,aAAa;;IAEjC;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACmoC,YAAY,GAAGnoC,aAAa;;IAEjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACooC,YAAY,GAAG,KAAK;;IAEzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,cAAc,GAAG,IAAI;;IAE1B;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,gBAAgB,GAAG,KAAK;;IAE7B;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,WAAW,GAAG,KAAK;;IAExB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,UAAU,GAAG,IAAI;;IAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,UAAU,GAAG,IAAI;;IAEtB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,SAAS,GAAG,IAAI;;IAErB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,aAAa,GAAG,KAAK;;IAE1B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,mBAAmB,GAAG,CAAC;;IAE5B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,kBAAkB,GAAG,CAAC;;IAE3B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,SAAS,GAAG,KAAK;;IAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,eAAe,GAAG,KAAK;;IAE5B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,kBAAkB,GAAG,KAAK;;IAE/B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,eAAe,GAAG,KAAK;;IAE5B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,aAAa,GAAG,IAAI;;IAEzB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACxP,OAAO,GAAG,IAAI;;IAEnB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACyP,UAAU,GAAG,IAAI;;IAEtB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC1tB,QAAQ,GAAG,CAAC,CAAC;;IAElB;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACpC,OAAO,GAAG,CAAC;IAEhB,IAAI,CAAC+vB,UAAU,GAAG,CAAC;EAEpB;;EAEA;AACD;AACA;AACA;AACA;AAC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C;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACC,IAAImW,WAAWA,CAAE/T,KAAK,EAAG;IAExB,IAAKA,KAAK,KAAK,IAAI,EAAG,IAAI,CAAC8T,OAAO,EAAG;EAEtC;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM40B,iBAAiB,SAASvH,QAAQ,CAAC;EAExC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCj9B,WAAWA,CAAE22B,UAAU,EAAG;IAEzB,KAAK,CAAC,CAAC;;IAEP;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC8N,mBAAmB,GAAG,IAAI;IAE/B,IAAI,CAAC/qC,IAAI,GAAG,mBAAmB;;IAE/B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC0S,KAAK,GAAG,IAAIwuB,KAAK,CAAE,QAAS,CAAC,CAAC,CAAC;;IAEpC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACvG,GAAG,GAAG,IAAI;;IAEf;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACwN,QAAQ,GAAG,IAAI;;IAEpB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,iBAAiB,GAAG,GAAG;;IAE5B;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,KAAK,GAAG,IAAI;;IAEjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,cAAc,GAAG,GAAG;;IAEzB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACY,WAAW,GAAG,IAAI;;IAEvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAAChB,QAAQ,GAAG,IAAI;;IAEpB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACmB,MAAM,GAAG,IAAI;;IAElB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACE,cAAc,GAAG,IAAIjW,KAAK,CAAC,CAAC;;IAEjC;AACF;AACA;AACA;AACA;AACA;A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aAAc,IAAI/oB,IAAI,CAAC,CAAC;AACjD,MAAMgpB,SAAS,GAAG,aAAc,IAAIlsB,OAAO,CAAC,CAAC;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMmsB,cAAc,SAAS1uC,eAAe,CAAC;EAE5C;AACD;AACA;EACCwG,WAAWA,CAAA,EAAG;IAEb,KAAK,CAAC,CAAC;;IAEP;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACmoC,gBAAgB,GAAG,IAAI;;IAE5B;AACF;AACA;AACA;AACA;AACA;AACA;IACE76B,MAAM,CAACoC,cAAc,CAAE,IAAI,EAAE,IAAI,EAAE;MAAE5T,KAAK,EAAE6rC,KAAK;IAAI,CAAE,CAAC;;IAExD;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAAChsC,IAAI,GAAGN,YAAY,CAAC,CAAC;;IAE1B;AACF;AACA;AACA;AACA;IACE,IAAI,CAAC6O,IAAI,GAAG,EAAE;IACd,IAAI,CAACxQ,IAAI,GAAG,gBAAgB;;IAE5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACU,KAAK,GAAG,IAAI;;IAEjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACguC,QAAQ,GAAG,IAAI;;IAEpB;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,UAAU,GAAG,CAAC,CAAC;;IAEpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,eAAe,GAAG,CAAC,CAAC;;IAEzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,oBAAoB,GAAG,KAAK;;IAEjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,MAAM,GAAG,EAAE;;IAEhB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACvnB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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,SAAS9T,QAAQ,CAAC;EAErC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCj9B,WAAWA,CAAE22B,UAAU,EAAG;IAEzB,KAAK,CAAC,CAAC;;IAEP;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACqa,gBAAgB,GAAG,IAAI;IAE5B,IAAI,CAACt3C,IAAI,GAAG,gBAAgB;;IAE5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACu3C,OAAO,GAAG,CAAC,CAAC;;IAEjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACf,QAAQ,GAAG,CAAC,CAAC;;IAElB;AACF;AACA;AACA;AACA;IACE,IAAI,CAACgB,cAAc,GAAG,EAAE;;IAExB;AACF;AACA;AACA;AACA;IACE,IAAI,CAACC,YAAY,GAAGN,cAAc;;IAElC;AACF;AACA;AACA;AACA;IACE,IAAI,CAACO,cAAc,GAAGN,gBAAgB;;IAEtC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACjN,SAAS,GAAG,CAAC;;IAElB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACG,SAAS,GAAG,KAAK;;IAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,kBAAkB,GAAG,CAAC;;IAE3B;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACI,GAAG,GAAG,KAAK;;IAEhB;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACgN,MAAM,GAAG,KAAK;;IAEnB;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,QAAQ,G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2B,UAAU,EAAG;IAEzB,KAAK,CAAEA,UAAW,CAAC;;IAEnB;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC+0C,mBAAmB,GAAG,IAAI;IAE/B,IAAI,CAAChyE,IAAI,GAAG,mBAAmB;EAEhC;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMiyE,oBAAoB,SAAS1uC,QAAQ,CAAC;EAE3C;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCj9B,WAAWA,CAAE22B,UAAU,EAAG;IAEzB,KAAK,CAAC,CAAC;;IAEP;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACi1C,sBAAsB,GAAG,IAAI;IAElC,IAAI,CAAClyE,IAAI,GAAG,sBAAsB;IAElC,IAAI,CAACu3C,OAAO,GAAG;MAAE,UAAU,EAAE;IAAG,CAAC;;IAEjC;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC7kC,KAAK,GAAG,IAAIwuB,KAAK,CAAE,QAAS,CAAC,CAAC,CAAC;;IAEpC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACsF,SAAS,GAAG,GAAG;;IAEpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,SAAS,GAAG,GAAG;;IAEpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC9L,GAAG,GAAG,IAAI;;IAEf;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACwN,QAAQ,GAAG,IAAI;;IAEpB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,iBAAiB,GAAG,GAAG;;IAE5B;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,KAAK,GAAG,IAAI;;IAEjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,cAAc,GAAG,GAAG;;IAEzB;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACzB,QAAQ,GAAG,IAAI3F,KAAK,CAAE,QAAS,CAAC;;IAErC;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC4F,iBAAiB,GAAG,GAAG;;IAE5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACmC,WAAW,GAAG,IAAI;;IAEvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACV,OAAO,GAAG,IAAI;;IAEnB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,SAAS,GAAG,CAAC;;IAElB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,SAAS,GAAG,IAAI;;IAErB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,aAAa,GAAGrsC,qBAAqB;;IAE1C;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACssC,WAAW,GAAG,IAAIzhC,OAAO,CAAE,CAAC,EAAE,CAAE,CAAC;;IAEtC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC0hC,eAAe,GAAG,IAAI;;IAE3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,iBAAiB,GAAG,CAAC;;IAE1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,gBAAgB,GAAG,CAAC;;IAEzB;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,YAAY,GAAG,IAAI;;IAExB;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,YAAY,GAAG,IAAI;;IAExB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACd,QAAQ,GAAG,IAAI;;IAEpB;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACmB,MAAM,GAAG,IAAI;;IAElB;AACF;AAC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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMwnC,oBAAoB,SAASF,oBAAoB,CAAC;EAEvD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC3rE,WAAWA,CAAE22B,UAAU,EAAG;IAEzB,KAAK,CAAC,CAAC;;IAEP;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACm1C,sBAAsB,GAAG,IAAI;IAElC,IAAI,CAAC76B,OAAO,GAAG;MAEd,UAAU,EAAE,EAAE;MACd,UAAU,EAAE;IAEb,CAAC;IAED,IAAI,CAACv3C,IAAI,GAAG,sBAAsB;;IAElC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC+nC,kBAAkB,GAAG,CAAC;;IAE3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,aAAa,GAAG,IAAI;;IAEzB;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACX,YAAY,GAAG,IAAI;;IAExB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACD,kBAAkB,GAAG,GAAG;;IAE7B;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACE,qBAAqB,GAAG,IAAI;;IAEjC;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACE,oBAAoB,GAAG,IAAItgC,OAAO,CAAE,CAAC,EAAE,CAAE,CAAC;;IAE/C;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACqgC,kBAAkB,GAAG,IAAI;;IAE9B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC8qC,GAAG,GAAG,GAAG;;IAEd;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACEz+D,MAAM,CAACoC,cAAc,CAAE,IAAI,EAAE,cAAc,EAAE;MAC5Cs8D,GAAG,EAAE,SAAAA,CAAA,EAAY;QAEhB,OAASnwE,KAAK,CAAE,GAAG,IAAK,IAAI,CAACkwE,GAAG,GAAG,CAAC,CAAE,IAAK,IAAI,CAACA,GAAG,GAAG,CAAC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AACA;AACA;AACA;IACE,IAAI,CAACC,iBAAiB,GAAG,GAAG;;IAE5B;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,KAAK,GAAG,IAAI;;IAEjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,cAAc,GAAG,GAAG;;IAEzB;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACzB,QAAQ,GAAG,IAAI3F,KAAK,CAAE,QAAS,CAAC;;IAErC;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC4F,iBAAiB,GAAG,GAAG;;IAE5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACmC,WAAW,GAAG,IAAI;;IAEvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACV,OAAO,GAAG,IAAI;;IAEnB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,SAAS,GAAG,CAAC;;IAElB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,SAAS,GAAG,IAAI;;IAErB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,aAAa,GAAGrsC,qBAAqB;;IAE1C;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACssC,WAAW,GAAG,IAAIzhC,OAAO,CAAE,CAAC,EAAE,CAAE,CAAC;;IAEtC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC0hC,eAAe,GAAG,IAAI;;IAE3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,iBAAiB,GAAG,CAAC;;IAE1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,gBAAgB,GAAG,CAAC;;IAEzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACI,WAAW,GAAG,IAAI;;IAEvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,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;;IAE5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACmC,WAAW,GAAG,IAAI;;IAEvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACV,OAAO,GAAG,IAAI;;IAEnB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,SAAS,GAAG,CAAC;;IAElB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,SAAS,GAAG,IAAI;;IAErB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,aAAa,GAAGrsC,qBAAqB;;IAE1C;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACssC,WAAW,GAAG,IAAIzhC,OAAO,CAAE,CAAC,EAAE,CAAE,CAAC;;IAEtC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC0hC,eAAe,GAAG,IAAI;;IAE3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,iBAAiB,GAAG,CAAC;;IAE1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,gBAAgB,GAAG,CAAC;;IAEzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACZ,QAAQ,GAAG,IAAI;;IAEpB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACoC,SAAS,GAAG,KAAK;;IAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,kBAAkB,GAAG,CAAC;;IAE3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,gBAAgB,GAAG,OAAO;;IAE/B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,iBAAiB,GAAG,OAAO;;IAEhC;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACE,GAAG,GAAG,IAAI;IAEf,IAAI,CAACtE,SAAS,CAAEpJ,UAAW,CAAC;EAE7B;EAEAn1B,IAAIA,CAAE8P,MAAM,EAAG;IAEd,KAAK,CAAC9P,IAAI,CAAE8P,MAAO,CAAC;IAEpB,IAAI,CAAClF,KAAK,CAAC5K,IAAI,CAAE8P,MAAM,CAAClF,KAAM,CAAC;IAE/B,IAAI,CAACioB,GAAG,GAAG/iB,MAAM,CAAC+iB,GAAG;IACrB,IAAI,CAACgP,WAAW,GAAG/xB,MAAM,CAAC+xB,WAAW;IAErC,IAAI,CAACxB,QAAQ,GAAGvwB,MAAM,CAACuwB,QAAQ;IAC/B,IAAI,CAACC,iBAAiB,GAAGxwB,MAAM,CAACwwB,iBAAiB;IAEjD,IAAI,CAACC,KAAK,GAAGzwB,MAAM,CAACywB,KAAK;IACzB,IAAI,CAACC,cAAc,GAAG1wB,MAAM,CAAC0wB,cAAc;IAE3C,IAAI,CAACzB,QAAQ,CAAC/+B,IAAI,CAAE8P,MAAM,CAACivB,QAAS,CAAC;IACrC,IAAI,CAACoC,WAAW,GAAGrxB,MAAM,CAACqxB,WAAW;IACrC,IAAI,CAACnC,iBAAiB,GAAGlvB,MAAM,CAACkvB,iBAAiB;IAEjD,IAAI,CAACyB,OAAO,GAAG3wB,MAAM,CAAC2wB,OAAO;IAC7B,IAAI,CAACC,SAAS,GAAG5wB,MAAM,CAAC4wB,SAAS;IAEjC,IAAI,CAACC,SAAS,GAAG7wB,MAAM,CAAC6wB,SAAS;IACjC,IAAI,CAACC,aAAa,GAAG9wB,MAAM,CAAC8wB,aAAa;IACzC,IAAI,CAACC,WAAW,CAAC7gC,IAAI,CAAE8P,MAAM,CAAC+wB,WAAY,CAAC;IAE3C,IAAI,CAACC,eAAe,GAAGhxB,MAAM,CAACgxB,eAAe;IAC7C,IAAI,CAACC,iBAAiB,GAAGjxB,MAAM,CAACixB,iBAAiB;IACjD,IAAI,CAACC,gBAAgB,GAAGlxB,MAAM,CAACkxB,gBAAgB;IAE/C,IAAI,CAACZ,QAAQ,GAAGtwB,MAAM,CAACswB,QAAQ;IAE/B,IAAI,CAACoC,SAAS,GAAG1yB,MAAM,CAAC0yB,SAAS;IACjC,IAAI,CAACC,kBAAkB,GAAG3yB,MAAM,CAAC2yB,kBAAkB;IACnD,IAAI,CAACC,gBAAgB,GAAG5yB,MAAM,CAAC4yB,gBAAgB;IAC/C,IAAI,CAACC,iBAAiB,GAAG7yB,MAAM,CAAC6yB,iBAAiB;IAEjD,IAAI,CAACE,GAAG,GAAG/yB,MAAM,CAAC+yB,GAAG;IAErB,OAAO,IAAI;EAEZ;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMwoC,kBAAkB,SAAS5vC,QAAQ,CAAC;EAEzC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCj9B,WAAWA,CAAE22B,UAAU,EAAG;IAEzB,KAAK,CAAC,CAAC;;IAEP;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACm2C,oBAAoB,GAAG,IAAI;IAEhC,IAAI,CAACpzE,IAAI,GAAG,oBAAoB;;IAEhC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACuoC,OAAO,GAAG,IAAI;;IAEnB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,SAAS,GAAG,CAAC;;IAElB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,SAAS,GAAG,IAAI;;IAErB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,aAAa,GAAGrsC,qBAAqB;;IAE1C;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACssC,WAAW,GAAG,IAAIzhC,OAAO,CAAE,CAAC,EAAE,CAAE,CAAC;;IAEtC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC0hC,eAAe,GAAG,IAAI;;IAE3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,iBAAiB,GAAG,CAAC;;IAE1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,gBAAgB,GAAG,CAAC;;IAEzB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACwB,SAAS,GAAG,KAAK;;IAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,kBAAkB,GAAG,CAAC;;IAE3B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACG,WAAW,GAAG,KAAK;IAExB,IAAI,CAACrE,SAAS,CAAEpJ,UAAW,CAAC;EAE7B;EAEAn1B,IAAIA,CAAE8P,MAAM,EAAG;IAEd,KAAK,CAAC9P,IAAI,CAAE8P,MAAO,CAAC;IAEpB,IAAI,CAAC2wB,OAAO,GAAG3wB,MAAM,CAAC2wB,OAAO;IAC7B,IAAI,CAACC,SAAS,GAAG5wB,MAAM,CAAC4wB,SAAS;IAEjC,IAAI,CAACC,SAAS,GAAG7wB,MAAM,CAAC6wB,SAAS;IACjC,IAAI,CAACC,aAAa,GAAG9wB,MAAM,CAAC8wB,aAAa;IACzC,IAAI,CAACC,WAAW,CAAC7gC,IAAI,CAAE8P,MAAM,CAAC+wB,WAAY,CAAC;IAE3C,IAAI,CAACC,eAAe,GAAGhxB,MAAM,CAACgxB,eAAe;IAC7C,IAAI,CAACC,iBAAiB,GAAGjxB,MAAM,CAACixB,iBAAiB;IACjD,IAAI,CAACC,gBAAgB,GAAGlxB,MAAM,CAACkxB,gBAAgB;IAE/C,IAAI,CAACwB,SAAS,GAAG1yB,MAAM,CAAC0yB,SAAS;IACjC,IAAI,CAACC,kBAAkB,GAAG3yB,MAAM,CAAC2yB,kBAAkB;IAEnD,IAAI,CAACG,WAAW,GAAG9yB,MAAM,CAAC8yB,WAAW;IAErC,OAAO,IAAI;EAEZ;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM2oC,mBAAmB,SAAS9vC,QAAQ,CAAC;EAE1C;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCj9B,WAAWA,CAAE22B,UAAU,EAAG;IAEzB,KAAK,CAAC,CAAC;;IAEP;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACq2C,qBAAqB,GAAG,IAAI;IAEjC,IAAI,CAACtzE,IAAI,GAAG,qBAAqB;;IAEjC;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC0S,KAAK,GAAG,IAAIwuB,KAAK,CAAE,QAAS,CAAC,CAAC,CAAC;;IAEpC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACvG,GAAG,GAAG,IAAI;;IAEf;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACwN,QAAQ,GAAG,IAAI;;IAEpB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,iBAAiB,GAAG,GAAG;;IAE5B;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,KAAK,GAAG,IAAI;;IAEjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,cAAc,GAAG,GAAG;;IAEzB;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACzB,QAAQ,GAAG,IAAI3F,KAAK,CAAE,QAAS,CAAC;;IAErC;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC4F,iBAAiB,GAAG,GAAG;;IAE5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACmC,WAAW,GAAG,IAAI;;IAEvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACV,OAAO,GAAG,IAAI;;IAEnB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,SAAS,GAAG,CAAC;;IAElB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,SAAS,GAAG,IAAI;;IAErB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,aAAa,GAAGrsC,qBAAqB;;IAE1C;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACssC,WAAW,GAAG,IAAIzhC,OAAO,CAAE,CAAC,EAAE,CAAE,CAAC;;IAEtC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC0hC,eAAe,GAAG,IAAI;;IAE3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,iBAAiB,GAAG,CAAC;;IAE1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,gBAAgB,GAAG,CAAC;;IAEzB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACI,WAAW,GAAG,IAAI;;IAEvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAAChB,QAAQ,GAAG,IAAI;;IAEpB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACmB,MAAM,GAAG,IAAI;;IAElB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACE,cAAc,GAAG,IAAIjW,KAAK,CAAC,CAAC;;IAEjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACgW,OAAO,GAAG1zC,iBAAiB;;IAEhC;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC6zC,YAAY,GAAG,CAAC;;IAErB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,eAAe,GAAG,IAAI;;IAE3B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACY,SAAS,GAAG,KAAK;;IAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,kBAAkB,GAAG,CAAC;;IAE3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,gBAAgB,GAAG,OAAO;;IAE/B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,iBAAiB,GAAG,OAAO;;IAEhC;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,WAAW,GAAG,KAAK;;IAExB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,GAAG,GAAG,IAAI;IAEf,IAAI,CAACtE,SAAS,CAAEpJ,UAAW,CAAC;EAE7B;EAEAn1B,IAAIA,CAAE8P,MAAM,EAAG;IAEd,KAAK,CAAC9P,IAAI,CAAE8P,MAAO,CAAC;IAEpB,IAAI,CAAClF,KAAK,CAAC5K,IAAI,CAAE8P,MAAM,CAAClF,KAAM,CAAC;IAE/B,IAAI,CAACioB,GAAG,GAAG/iB,MAAM,CAAC+iB,GAAG;IAErB,IAAI,CAACwN,QAAQ,GAAGvwB,M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c,CAACltF,CAAC,EAAEktF,cAAc,CAAC5sF,CAAC,EAAE4sF,cAAc,CAACn2E,CAAC,EAAEuW,EAAE,CAACttB,CAAC,EAAEstB,EAAE,CAAChtB,CAAC,EAAEgtB,EAAE,CAACvW,CAAE,CAAC;IAElG;EAED;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM63E,KAAK,SAAS/7D,QAAQ,CAAC;EAE5B;AACD;AACA;AACA;AACA;EACClvB,WAAWA,CAAErG,QAAQ,EAAG;IAEvB,KAAK,CAAC,CAAC;IAEP,IAAI,CAACD,IAAI,GAAG,OAAO;;IAEnB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,QAAQ,GAAGA,QAAQ;;IAExB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACgV,OAAO,GAAGhV,QAAQ,CAACgV,OAAO;;IAE/B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC86E,IAAI,GAAG,IAAI,CAAC96E,OAAO,CAAC+6E,UAAU,CAAC,CAAC;IACrC,IAAI,CAACD,IAAI,CAACzyC,OAAO,CAAEr9C,QAAQ,CAACmwF,QAAQ,CAAC,CAAE,CAAC;;IAExC;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACoB,QAAQ,GAAG,KAAK;;IAErB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAAClhF,MAAM,GAAG,IAAI;;IAElB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACmhF,MAAM,GAAG,CAAC;;IAEf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,IAAI,GAAG,KAAK;;IAEjB;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,SAAS,GAAG,CAAC;;IAElB;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,OAAO,GAAG,CAAC;;IAEhB;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAAChnF,MAAM,GAAG,CAAC;;IAEf;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC+xE,QAAQ,GAAGx8E,SAAS;;IAEzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC0xF,YAAY,GAAG,CAAC;;IAErB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,SAAS,GAAG,KAAK;;IAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,kBAAkB,GAAG,IAAI;;IAE9B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACn6E,MAAM,GAAG,IAAI;;IAElB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACo6E,UAAU,GAAG,OAAO;IAEzB,IAAI,CAACC,UAAU,GAAG,CAAC;IACnB,IAAI,CAACC,SAAS,GAAG,CAAC;IAClB,IAAI,CAACC,UAAU,GAAG,KAAK;;IAEvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,OAAO,GAAG,EAAE;EAElB;;EAEA;AACD;AACA;AACA;AACA;EACCC,SAASA,CAAA,EAAG;IAEX,OAAO,IAAI,CAACtC,IAAI;EAEjB;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACCuC,aAAaA,CAAEC,SAAS,EAAG;IAE1B,IAAI,CAACR,kBAAkB,GAAG,KAAK;IAC/B,IAAI,CAACC,UAAU,GAAG,WAAW;IAC7B,IAAI,CAACp6E,MAAM,GAAG26E,SAAS;IACvB,IAAI,CAACj1C,OAAO,CAAC,CAAC;IAEd,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACCk1C,qBAAqBA,CAAEC,YAAY,EAAG;IAErC,IAAI,CAACV,kBAAkB,GAAG,KAAK;IAC/B,IAAI,CAACC,UAAU,GAAG,WAAW;IAC7B,IAAI,CAACp6E,MAAM,GAA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ACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC/O,IAAI,GAAGt2F,UAAU;IACtB,IAAI,CAACslG,UAAU,GAAG,CAAC,CAAC;;IAEpB;IACA;IACA,IAAI,CAACC,UAAU,GAAG,IAAI;;IAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC9rB,IAAI,GAAG,CAAC;;IAEb;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACmG,SAAS,GAAG,CAAC;IAClB,IAAI,CAAC4lB,mBAAmB,GAAG,CAAC;;IAE5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC38C,MAAM,GAAG,CAAC;IACf,IAAI,CAAC48C,gBAAgB,GAAG,CAAC;;IAEzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,WAAW,GAAGt7E,QAAQ;;IAE3B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACu7E,MAAM,GAAG,KAAK;;IAEnB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACzuF,OAAO,GAAG,IAAI;;IAEnB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC0uF,iBAAiB,GAAG,KAAK;;IAE9B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,gBAAgB,GAAG,IAAI;;IAE5B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,cAAc,GAAG,IAAI;EAE3B;;EAEA;AACD;AACA;AACA;AACA;EACCnO,IAAIA,CAAA,EAAG;IAEN,IAAI,CAAC8M,MAAM,CAACsB,eAAe,CAAE,IAAK,CAAC;IAEnC,OAAO,IAAI;EAEZ;;EAEA;AACD;AACA;AACA;AACA;EACCx9B,IAAIA,CAAA,EAAG;IAEN,IAAI,CAACk8B,MAAM,CAACuB,iBAAiB,CAAE,IAAK,CAAC;IAErC,OAAO,IAAI,CAAC72C,KAAK,CAAC,CAAC;EAEpB;;EAEA;AACD;AACA;AACA;AACA;EACCA,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}