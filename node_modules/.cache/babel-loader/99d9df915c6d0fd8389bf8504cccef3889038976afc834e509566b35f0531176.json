{"ast":null,"code":"import supabaseClient from '../client';\nexport class SupabaseContactRepository {\n  async send(message) {\n    const {\n      data,\n      error\n    } = await supabaseClient.from('messages').insert({\n      name: message.name,\n      email: message.email,\n      message: message.message,\n      read: false\n    }).select().single();\n    if (error) {\n      console.error('Error sending message:', error);\n      throw new Error('Failed to send message');\n    }\n    return {\n      id: data.id,\n      name: data.name,\n      email: data.email,\n      message: data.message,\n      read: data.read,\n      createdAt: new Date(data.created_at)\n    };\n  }\n  async getAll() {\n    const {\n      data,\n      error\n    } = await supabaseClient.from('messages').select('*').order('created_at', {\n      ascending: false\n    });\n    if (error) {\n      console.error('Error fetching messages:', error);\n      throw new Error('Failed to fetch messages');\n    }\n    return data.map(item => ({\n      id: item.id,\n      name: item.name,\n      email: item.email,\n      message: item.message,\n      read: item.read,\n      createdAt: new Date(item.created_at)\n    }));\n  }\n  async markAsRead(id) {\n    const {\n      error\n    } = await supabaseClient.from('messages').update({\n      read: true\n    }).eq('id', id);\n    if (error) {\n      console.error(`Error marking message ${id} as read:`, error);\n      return false;\n    }\n    return true;\n  }\n  async delete(id) {\n    const {\n      error\n    } = await supabaseClient.from('messages').delete().eq('id', id);\n    if (error) {\n      console.error(`Error deleting message ${id}:`, error);\n      return false;\n    }\n    return true;\n  }\n}\n\n// Export a singleton instance\nexport const contactRepository = new SupabaseContactRepository();","map":{"version":3,"names":["supabaseClient","SupabaseContactRepository","send","message","data","error","from","insert","name","email","read","select","single","console","Error","id","createdAt","Date","created_at","getAll","order","ascending","map","item","markAsRead","update","eq","delete","contactRepository"],"sources":["C:/MyPortfolioWeb/portfolio/src/infrastructure/supabase/repositories/contactRepository.ts"],"sourcesContent":["import { ContactMessage } from '../../../core/entities';\r\nimport { ContactRepository } from '../../../core/repositories';\r\nimport supabaseClient from '../client';\r\n\r\nexport class SupabaseContactRepository implements ContactRepository {\r\n  async send(message: Omit<ContactMessage, 'id' | 'read' | 'createdAt'>): Promise<ContactMessage> {\r\n    const { data, error } = await supabaseClient\r\n      .from('messages')\r\n      .insert({\r\n        name: message.name,\r\n        email: message.email,\r\n        message: message.message,\r\n        read: false\r\n      })\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Error sending message:', error);\r\n      throw new Error('Failed to send message');\r\n    }\r\n\r\n    return {\r\n      id: data.id,\r\n      name: data.name,\r\n      email: data.email,\r\n      message: data.message,\r\n      read: data.read,\r\n      createdAt: new Date(data.created_at)\r\n    };\r\n  }\r\n\r\n  async getAll(): Promise<ContactMessage[]> {\r\n    const { data, error } = await supabaseClient\r\n      .from('messages')\r\n      .select('*')\r\n      .order('created_at', { ascending: false });\r\n\r\n    if (error) {\r\n      console.error('Error fetching messages:', error);\r\n      throw new Error('Failed to fetch messages');\r\n    }\r\n\r\n    return data.map(item => ({\r\n      id: item.id,\r\n      name: item.name,\r\n      email: item.email,\r\n      message: item.message,\r\n      read: item.read,\r\n      createdAt: new Date(item.created_at)\r\n    }));\r\n  }\r\n\r\n  async markAsRead(id: string): Promise<boolean> {\r\n    const { error } = await supabaseClient\r\n      .from('messages')\r\n      .update({ read: true })\r\n      .eq('id', id);\r\n\r\n    if (error) {\r\n      console.error(`Error marking message ${id} as read:`, error);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  async delete(id: string): Promise<boolean> {\r\n    const { error } = await supabaseClient\r\n      .from('messages')\r\n      .delete()\r\n      .eq('id', id);\r\n\r\n    if (error) {\r\n      console.error(`Error deleting message ${id}:`, error);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\n// Export a singleton instance\r\nexport const contactRepository = new SupabaseContactRepository();"],"mappings":"AAEA,OAAOA,cAAc,MAAM,WAAW;AAEtC,OAAO,MAAMC,yBAAyB,CAA8B;EAClE,MAAMC,IAAIA,CAACC,OAA0D,EAA2B;IAC9F,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAML,cAAc,CACzCM,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAAC;MACNC,IAAI,EAAEL,OAAO,CAACK,IAAI;MAClBC,KAAK,EAAEN,OAAO,CAACM,KAAK;MACpBN,OAAO,EAAEA,OAAO,CAACA,OAAO;MACxBO,IAAI,EAAE;IACR,CAAC,CAAC,CACDC,MAAM,CAAC,CAAC,CACRC,MAAM,CAAC,CAAC;IAEX,IAAIP,KAAK,EAAE;MACTQ,OAAO,CAACR,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAM,IAAIS,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IAEA,OAAO;MACLC,EAAE,EAAEX,IAAI,CAACW,EAAE;MACXP,IAAI,EAAEJ,IAAI,CAACI,IAAI;MACfC,KAAK,EAAEL,IAAI,CAACK,KAAK;MACjBN,OAAO,EAAEC,IAAI,CAACD,OAAO;MACrBO,IAAI,EAAEN,IAAI,CAACM,IAAI;MACfM,SAAS,EAAE,IAAIC,IAAI,CAACb,IAAI,CAACc,UAAU;IACrC,CAAC;EACH;EAEA,MAAMC,MAAMA,CAAA,EAA8B;IACxC,MAAM;MAAEf,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAML,cAAc,CACzCM,IAAI,CAAC,UAAU,CAAC,CAChBK,MAAM,CAAC,GAAG,CAAC,CACXS,KAAK,CAAC,YAAY,EAAE;MAAEC,SAAS,EAAE;IAAM,CAAC,CAAC;IAE5C,IAAIhB,KAAK,EAAE;MACTQ,OAAO,CAACR,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAM,IAAIS,KAAK,CAAC,0BAA0B,CAAC;IAC7C;IAEA,OAAOV,IAAI,CAACkB,GAAG,CAACC,IAAI,KAAK;MACvBR,EAAE,EAAEQ,IAAI,CAACR,EAAE;MACXP,IAAI,EAAEe,IAAI,CAACf,IAAI;MACfC,KAAK,EAAEc,IAAI,CAACd,KAAK;MACjBN,OAAO,EAAEoB,IAAI,CAACpB,OAAO;MACrBO,IAAI,EAAEa,IAAI,CAACb,IAAI;MACfM,SAAS,EAAE,IAAIC,IAAI,CAACM,IAAI,CAACL,UAAU;IACrC,CAAC,CAAC,CAAC;EACL;EAEA,MAAMM,UAAUA,CAACT,EAAU,EAAoB;IAC7C,MAAM;MAAEV;IAAM,CAAC,GAAG,MAAML,cAAc,CACnCM,IAAI,CAAC,UAAU,CAAC,CAChBmB,MAAM,CAAC;MAAEf,IAAI,EAAE;IAAK,CAAC,CAAC,CACtBgB,EAAE,CAAC,IAAI,EAAEX,EAAE,CAAC;IAEf,IAAIV,KAAK,EAAE;MACTQ,OAAO,CAACR,KAAK,CAAC,yBAAyBU,EAAE,WAAW,EAAEV,KAAK,CAAC;MAC5D,OAAO,KAAK;IACd;IAEA,OAAO,IAAI;EACb;EAEA,MAAMsB,MAAMA,CAACZ,EAAU,EAAoB;IACzC,MAAM;MAAEV;IAAM,CAAC,GAAG,MAAML,cAAc,CACnCM,IAAI,CAAC,UAAU,CAAC,CAChBqB,MAAM,CAAC,CAAC,CACRD,EAAE,CAAC,IAAI,EAAEX,EAAE,CAAC;IAEf,IAAIV,KAAK,EAAE;MACTQ,OAAO,CAACR,KAAK,CAAC,0BAA0BU,EAAE,GAAG,EAAEV,KAAK,CAAC;MACrD,OAAO,KAAK;IACd;IAEA,OAAO,IAAI;EACb;AACF;;AAEA;AACA,OAAO,MAAMuB,iBAAiB,GAAG,IAAI3B,yBAAyB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}