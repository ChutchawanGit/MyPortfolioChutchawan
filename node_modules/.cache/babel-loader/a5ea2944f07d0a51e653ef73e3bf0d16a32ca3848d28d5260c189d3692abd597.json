{"ast":null,"code":"import supabaseClient from'../client';export class SupabaseContactRepository{async send(message){const{data,error}=await supabaseClient.from('messages').insert({name:message.name,email:message.email,message:message.message,read:false}).select().single();if(error){console.error('Error sending message:',error);throw new Error('Failed to send message');}return{id:data.id,name:data.name,email:data.email,message:data.message,read:data.read,createdAt:new Date(data.created_at)};}async getAll(){const{data,error}=await supabaseClient.from('messages').select('*').order('created_at',{ascending:false});if(error){console.error('Error fetching messages:',error);throw new Error('Failed to fetch messages');}return data.map(item=>({id:item.id,name:item.name,email:item.email,message:item.message,read:item.read,createdAt:new Date(item.created_at)}));}async markAsRead(id){const{error}=await supabaseClient.from('messages').update({read:true}).eq('id',id);if(error){console.error(`Error marking message ${id} as read:`,error);return false;}return true;}async delete(id){const{error}=await supabaseClient.from('messages').delete().eq('id',id);if(error){console.error(`Error deleting message ${id}:`,error);return false;}return true;}}// Export a singleton instance\nexport const contactRepository=new SupabaseContactRepository();","map":{"version":3,"names":["supabaseClient","SupabaseContactRepository","send","message","data","error","from","insert","name","email","read","select","single","console","Error","id","createdAt","Date","created_at","getAll","order","ascending","map","item","markAsRead","update","eq","delete","contactRepository"],"sources":["C:/MyPortfolioWeb/portfolio/src/infrastructure/supabase/repositories/contactRepository.ts"],"sourcesContent":["import { ContactMessage } from '../../../core/entities';\r\nimport { ContactRepository } from '../../../core/repositories';\r\nimport supabaseClient from '../client';\r\n\r\nexport class SupabaseContactRepository implements ContactRepository {\r\n  async send(message: Omit<ContactMessage, 'id' | 'read' | 'createdAt'>): Promise<ContactMessage> {\r\n    const { data, error } = await supabaseClient\r\n      .from('messages')\r\n      .insert({\r\n        name: message.name,\r\n        email: message.email,\r\n        message: message.message,\r\n        read: false\r\n      })\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Error sending message:', error);\r\n      throw new Error('Failed to send message');\r\n    }\r\n\r\n    return {\r\n      id: data.id,\r\n      name: data.name,\r\n      email: data.email,\r\n      message: data.message,\r\n      read: data.read,\r\n      createdAt: new Date(data.created_at)\r\n    };\r\n  }\r\n\r\n  async getAll(): Promise<ContactMessage[]> {\r\n    const { data, error } = await supabaseClient\r\n      .from('messages')\r\n      .select('*')\r\n      .order('created_at', { ascending: false });\r\n\r\n    if (error) {\r\n      console.error('Error fetching messages:', error);\r\n      throw new Error('Failed to fetch messages');\r\n    }\r\n\r\n    return data.map(item => ({\r\n      id: item.id,\r\n      name: item.name,\r\n      email: item.email,\r\n      message: item.message,\r\n      read: item.read,\r\n      createdAt: new Date(item.created_at)\r\n    }));\r\n  }\r\n\r\n  async markAsRead(id: string): Promise<boolean> {\r\n    const { error } = await supabaseClient\r\n      .from('messages')\r\n      .update({ read: true })\r\n      .eq('id', id);\r\n\r\n    if (error) {\r\n      console.error(`Error marking message ${id} as read:`, error);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  async delete(id: string): Promise<boolean> {\r\n    const { error } = await supabaseClient\r\n      .from('messages')\r\n      .delete()\r\n      .eq('id', id);\r\n\r\n    if (error) {\r\n      console.error(`Error deleting message ${id}:`, error);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\n// Export a singleton instance\r\nexport const contactRepository = new SupabaseContactRepository();"],"mappings":"AAEA,MAAO,CAAAA,cAAc,KAAM,WAAW,CAEtC,MAAO,MAAM,CAAAC,yBAAuD,CAClE,KAAM,CAAAC,IAAIA,CAACC,OAA0D,CAA2B,CAC9F,KAAM,CAAEC,IAAI,CAAEC,KAAM,CAAC,CAAG,KAAM,CAAAL,cAAc,CACzCM,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAAC,CACNC,IAAI,CAAEL,OAAO,CAACK,IAAI,CAClBC,KAAK,CAAEN,OAAO,CAACM,KAAK,CACpBN,OAAO,CAAEA,OAAO,CAACA,OAAO,CACxBO,IAAI,CAAE,KACR,CAAC,CAAC,CACDC,MAAM,CAAC,CAAC,CACRC,MAAM,CAAC,CAAC,CAEX,GAAIP,KAAK,CAAE,CACTQ,OAAO,CAACR,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAC9C,KAAM,IAAI,CAAAS,KAAK,CAAC,wBAAwB,CAAC,CAC3C,CAEA,MAAO,CACLC,EAAE,CAAEX,IAAI,CAACW,EAAE,CACXP,IAAI,CAAEJ,IAAI,CAACI,IAAI,CACfC,KAAK,CAAEL,IAAI,CAACK,KAAK,CACjBN,OAAO,CAAEC,IAAI,CAACD,OAAO,CACrBO,IAAI,CAAEN,IAAI,CAACM,IAAI,CACfM,SAAS,CAAE,GAAI,CAAAC,IAAI,CAACb,IAAI,CAACc,UAAU,CACrC,CAAC,CACH,CAEA,KAAM,CAAAC,MAAMA,CAAA,CAA8B,CACxC,KAAM,CAAEf,IAAI,CAAEC,KAAM,CAAC,CAAG,KAAM,CAAAL,cAAc,CACzCM,IAAI,CAAC,UAAU,CAAC,CAChBK,MAAM,CAAC,GAAG,CAAC,CACXS,KAAK,CAAC,YAAY,CAAE,CAAEC,SAAS,CAAE,KAAM,CAAC,CAAC,CAE5C,GAAIhB,KAAK,CAAE,CACTQ,OAAO,CAACR,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAChD,KAAM,IAAI,CAAAS,KAAK,CAAC,0BAA0B,CAAC,CAC7C,CAEA,MAAO,CAAAV,IAAI,CAACkB,GAAG,CAACC,IAAI,GAAK,CACvBR,EAAE,CAAEQ,IAAI,CAACR,EAAE,CACXP,IAAI,CAAEe,IAAI,CAACf,IAAI,CACfC,KAAK,CAAEc,IAAI,CAACd,KAAK,CACjBN,OAAO,CAAEoB,IAAI,CAACpB,OAAO,CACrBO,IAAI,CAAEa,IAAI,CAACb,IAAI,CACfM,SAAS,CAAE,GAAI,CAAAC,IAAI,CAACM,IAAI,CAACL,UAAU,CACrC,CAAC,CAAC,CAAC,CACL,CAEA,KAAM,CAAAM,UAAUA,CAACT,EAAU,CAAoB,CAC7C,KAAM,CAAEV,KAAM,CAAC,CAAG,KAAM,CAAAL,cAAc,CACnCM,IAAI,CAAC,UAAU,CAAC,CAChBmB,MAAM,CAAC,CAAEf,IAAI,CAAE,IAAK,CAAC,CAAC,CACtBgB,EAAE,CAAC,IAAI,CAAEX,EAAE,CAAC,CAEf,GAAIV,KAAK,CAAE,CACTQ,OAAO,CAACR,KAAK,CAAC,yBAAyBU,EAAE,WAAW,CAAEV,KAAK,CAAC,CAC5D,MAAO,MAAK,CACd,CAEA,MAAO,KAAI,CACb,CAEA,KAAM,CAAAsB,MAAMA,CAACZ,EAAU,CAAoB,CACzC,KAAM,CAAEV,KAAM,CAAC,CAAG,KAAM,CAAAL,cAAc,CACnCM,IAAI,CAAC,UAAU,CAAC,CAChBqB,MAAM,CAAC,CAAC,CACRD,EAAE,CAAC,IAAI,CAAEX,EAAE,CAAC,CAEf,GAAIV,KAAK,CAAE,CACTQ,OAAO,CAACR,KAAK,CAAC,0BAA0BU,EAAE,GAAG,CAAEV,KAAK,CAAC,CACrD,MAAO,MAAK,CACd,CAEA,MAAO,KAAI,CACb,CACF,CAEA;AACA,MAAO,MAAM,CAAAuB,iBAAiB,CAAG,GAAI,CAAA3B,yBAAyB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}