{"ast":null,"code":"// Use cases encapsulate all application business logic\n// They are independent of the UI and infrastructure\nexport class ProjectUseCases{constructor(projectRepository){this.projectRepository=void 0;this.projectRepository=projectRepository;}async getAllProjects(){return this.projectRepository.getAll();}async getProjectById(id){return this.projectRepository.getById(id);}async createProject(project){// Here we could add validation, business rules, etc.\nreturn this.projectRepository.create(project);}async updateProject(id,project){return this.projectRepository.update(id,project);}async deleteProject(id){return this.projectRepository.delete(id);}async searchProjects(query){const projects=await this.projectRepository.getAll();return projects.filter(project=>project.title.toLowerCase().includes(query.toLowerCase())||project.description.toLowerCase().includes(query.toLowerCase())||project.technologies.some(tech=>tech.toLowerCase().includes(query.toLowerCase())));}async getProjectsByTechnology(technology){const projects=await this.projectRepository.getAll();return projects.filter(project=>project.technologies.some(tech=>tech.toLowerCase()===technology.toLowerCase()));}}","map":{"version":3,"names":["ProjectUseCases","constructor","projectRepository","getAllProjects","getAll","getProjectById","id","getById","createProject","project","create","updateProject","update","deleteProject","delete","searchProjects","query","projects","filter","title","toLowerCase","includes","description","technologies","some","tech","getProjectsByTechnology","technology"],"sources":["C:/MyPortfolioWeb/portfolio/src/application/useCases/projectUseCases.ts"],"sourcesContent":["import { Project } from '../../core/entities';\r\nimport { ProjectRepository } from '../../core/repositories';\r\n\r\n// Use cases encapsulate all application business logic\r\n// They are independent of the UI and infrastructure\r\n\r\nexport class ProjectUseCases {\r\n  private projectRepository: ProjectRepository;\r\n\r\n  constructor(projectRepository: ProjectRepository) {\r\n    this.projectRepository = projectRepository;\r\n  }\r\n\r\n  async getAllProjects(): Promise<Project[]> {\r\n    return this.projectRepository.getAll();\r\n  }\r\n\r\n  async getProjectById(id: string): Promise<Project | null> {\r\n    return this.projectRepository.getById(id);\r\n  }\r\n\r\n  async createProject(project: Omit<Project, 'id'>): Promise<Project> {\r\n    // Here we could add validation, business rules, etc.\r\n    return this.projectRepository.create(project);\r\n  }\r\n\r\n  async updateProject(id: string, project: Partial<Project>): Promise<Project | null> {\r\n    return this.projectRepository.update(id, project);\r\n  }\r\n\r\n  async deleteProject(id: string): Promise<boolean> {\r\n    return this.projectRepository.delete(id);\r\n  }\r\n\r\n  async searchProjects(query: string): Promise<Project[]> {\r\n    const projects = await this.projectRepository.getAll();\r\n    \r\n    return projects.filter(project => \r\n      project.title.toLowerCase().includes(query.toLowerCase()) ||\r\n      project.description.toLowerCase().includes(query.toLowerCase()) ||\r\n      project.technologies.some(tech => \r\n        tech.toLowerCase().includes(query.toLowerCase())\r\n      )\r\n    );\r\n  }\r\n\r\n  async getProjectsByTechnology(technology: string): Promise<Project[]> {\r\n    const projects = await this.projectRepository.getAll();\r\n    \r\n    return projects.filter(project =>\r\n      project.technologies.some(tech => \r\n        tech.toLowerCase() === technology.toLowerCase()\r\n      )\r\n    );\r\n  }\r\n}"],"mappings":"AAGA;AACA;AAEA,MAAO,MAAM,CAAAA,eAAgB,CAG3BC,WAAWA,CAACC,iBAAoC,CAAE,MAF1CA,iBAAiB,QAGvB,IAAI,CAACA,iBAAiB,CAAGA,iBAAiB,CAC5C,CAEA,KAAM,CAAAC,cAAcA,CAAA,CAAuB,CACzC,MAAO,KAAI,CAACD,iBAAiB,CAACE,MAAM,CAAC,CAAC,CACxC,CAEA,KAAM,CAAAC,cAAcA,CAACC,EAAU,CAA2B,CACxD,MAAO,KAAI,CAACJ,iBAAiB,CAACK,OAAO,CAACD,EAAE,CAAC,CAC3C,CAEA,KAAM,CAAAE,aAAaA,CAACC,OAA4B,CAAoB,CAClE;AACA,MAAO,KAAI,CAACP,iBAAiB,CAACQ,MAAM,CAACD,OAAO,CAAC,CAC/C,CAEA,KAAM,CAAAE,aAAaA,CAACL,EAAU,CAAEG,OAAyB,CAA2B,CAClF,MAAO,KAAI,CAACP,iBAAiB,CAACU,MAAM,CAACN,EAAE,CAAEG,OAAO,CAAC,CACnD,CAEA,KAAM,CAAAI,aAAaA,CAACP,EAAU,CAAoB,CAChD,MAAO,KAAI,CAACJ,iBAAiB,CAACY,MAAM,CAACR,EAAE,CAAC,CAC1C,CAEA,KAAM,CAAAS,cAAcA,CAACC,KAAa,CAAsB,CACtD,KAAM,CAAAC,QAAQ,CAAG,KAAM,KAAI,CAACf,iBAAiB,CAACE,MAAM,CAAC,CAAC,CAEtD,MAAO,CAAAa,QAAQ,CAACC,MAAM,CAACT,OAAO,EAC5BA,OAAO,CAACU,KAAK,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACL,KAAK,CAACI,WAAW,CAAC,CAAC,CAAC,EACzDX,OAAO,CAACa,WAAW,CAACF,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACL,KAAK,CAACI,WAAW,CAAC,CAAC,CAAC,EAC/DX,OAAO,CAACc,YAAY,CAACC,IAAI,CAACC,IAAI,EAC5BA,IAAI,CAACL,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACL,KAAK,CAACI,WAAW,CAAC,CAAC,CACjD,CACF,CAAC,CACH,CAEA,KAAM,CAAAM,uBAAuBA,CAACC,UAAkB,CAAsB,CACpE,KAAM,CAAAV,QAAQ,CAAG,KAAM,KAAI,CAACf,iBAAiB,CAACE,MAAM,CAAC,CAAC,CAEtD,MAAO,CAAAa,QAAQ,CAACC,MAAM,CAACT,OAAO,EAC5BA,OAAO,CAACc,YAAY,CAACC,IAAI,CAACC,IAAI,EAC5BA,IAAI,CAACL,WAAW,CAAC,CAAC,GAAKO,UAAU,CAACP,WAAW,CAAC,CAChD,CACF,CAAC,CACH,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}