{"ast":null,"code":"var _jsxFileName = \"C:\\\\MyPortfolioWeb\\\\portfolio\\\\src\\\\interface\\\\context\\\\ProjectContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { ProjectUseCases } from '../../application/useCases/projectUseCases';\nimport { projectRepository } from '../../infrastructure/supabase/repositories/projectRepository';\n\n// Create use cases with the repository implementation\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst projectUseCases = new ProjectUseCases(projectRepository);\nconst ProjectContext = /*#__PURE__*/createContext(undefined);\nexport const useProjects = () => {\n  _s();\n  const context = useContext(ProjectContext);\n  if (!context) {\n    throw new Error('useProjects must be used within a ProjectProvider');\n  }\n  return context;\n};\n_s(useProjects, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ProjectProvider = ({\n  children\n}) => {\n  _s2();\n  const [projects, setProjects] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchProjects = async () => {\n    setLoading(true);\n    try {\n      const projectsData = await projectUseCases.getAllProjects();\n      setProjects(projectsData);\n      setError(null);\n    } catch (err) {\n      setError('Failed to fetch projects');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getProjectById = async id => {\n    try {\n      return await projectUseCases.getProjectById(id);\n    } catch (err) {\n      setError('Failed to fetch project');\n      console.error(err);\n      return null;\n    }\n  };\n  const searchProjects = async query => {\n    setLoading(true);\n    try {\n      const filteredProjects = await projectUseCases.searchProjects(query);\n      setProjects(filteredProjects);\n      setError(null);\n    } catch (err) {\n      setError('Failed to search projects');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const filterByTechnology = async technology => {\n    setLoading(true);\n    try {\n      const filteredProjects = await projectUseCases.getProjectsByTechnology(technology);\n      setProjects(filteredProjects);\n      setError(null);\n    } catch (err) {\n      setError('Failed to filter projects');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchProjects();\n  }, []);\n  const value = {\n    projects,\n    loading,\n    error,\n    fetchProjects,\n    getProjectById,\n    searchProjects,\n    filterByTechnology\n  };\n  return /*#__PURE__*/_jsxDEV(ProjectContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 10\n  }, this);\n};\n_s2(ProjectProvider, \"D01YWZOqXtPgB8Jf7trLNzFYnAg=\");\n_c = ProjectProvider;\nvar _c;\n$RefreshReg$(_c, \"ProjectProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","ProjectUseCases","projectRepository","jsxDEV","_jsxDEV","projectUseCases","ProjectContext","undefined","useProjects","_s","context","Error","ProjectProvider","children","_s2","projects","setProjects","loading","setLoading","error","setError","fetchProjects","projectsData","getAllProjects","err","console","getProjectById","id","searchProjects","query","filteredProjects","filterByTechnology","technology","getProjectsByTechnology","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/MyPortfolioWeb/portfolio/src/interface/context/ProjectContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { Project } from '../../core/entities';\r\nimport { ProjectUseCases } from '../../application/useCases/projectUseCases';\r\nimport { projectRepository } from '../../infrastructure/supabase/repositories/projectRepository';\r\n\r\n// Create use cases with the repository implementation\r\nconst projectUseCases = new ProjectUseCases(projectRepository);\r\n\r\ninterface ProjectContextType {\r\n  projects: Project[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  fetchProjects: () => Promise<void>;\r\n  getProjectById: (id: string) => Promise<Project | null>;\r\n  searchProjects: (query: string) => Promise<void>;\r\n  filterByTechnology: (technology: string) => Promise<void>;\r\n}\r\n\r\nconst ProjectContext = createContext<ProjectContextType | undefined>(undefined);\r\n\r\nexport const useProjects = () => {\r\n  const context = useContext(ProjectContext);\r\n  if (!context) {\r\n    throw new Error('useProjects must be used within a ProjectProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface ProjectProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const ProjectProvider: React.FC<ProjectProviderProps> = ({ children }) => {\r\n  const [projects, setProjects] = useState<Project[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchProjects = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const projectsData = await projectUseCases.getAllProjects();\r\n      setProjects(projectsData);\r\n      setError(null);\r\n    } catch (err) {\r\n      setError('Failed to fetch projects');\r\n      console.error(err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getProjectById = async (id: string): Promise<Project | null> => {\r\n    try {\r\n      return await projectUseCases.getProjectById(id);\r\n    } catch (err) {\r\n      setError('Failed to fetch project');\r\n      console.error(err);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const searchProjects = async (query: string) => {\r\n    setLoading(true);\r\n    try {\r\n      const filteredProjects = await projectUseCases.searchProjects(query);\r\n      setProjects(filteredProjects);\r\n      setError(null);\r\n    } catch (err) {\r\n      setError('Failed to search projects');\r\n      console.error(err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const filterByTechnology = async (technology: string) => {\r\n    setLoading(true);\r\n    try {\r\n      const filteredProjects = await projectUseCases.getProjectsByTechnology(technology);\r\n      setProjects(filteredProjects);\r\n      setError(null);\r\n    } catch (err) {\r\n      setError('Failed to filter projects');\r\n      console.error(err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchProjects();\r\n  }, []);\r\n\r\n  const value = {\r\n    projects,\r\n    loading,\r\n    error,\r\n    fetchProjects,\r\n    getProjectById,\r\n    searchProjects,\r\n    filterByTechnology\r\n  };\r\n\r\n  return <ProjectContext.Provider value={value}>{children}</ProjectContext.Provider>;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}